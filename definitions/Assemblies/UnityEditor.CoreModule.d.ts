// @ts-nocheck
declare namespace CS {
    // const __keep_incompatibility: unique symbol;
    // 
    // interface $Ref<T> {
    //     value: T
    // }
    // namespace System {
    //     interface Array$1<T> extends System.Array {
    //         get_Item(index: number):T;
    //         
    //         set_Item(index: number, value: T):void;
    //     }
    // }
    // interface $Task<T> {}
    namespace Unity.Profiling.Editor {
        /** Provides a descriptor for a Profiler counter.
        */
        class ProfilerCounterDescriptor extends System.ValueType
        {
            protected [__keep_incompatibility]: never;
            /** The name of the described Profiler counter.
            */
            public get Name(): string;
            /** The category name of the described Profiler counter.
            */
            public get CategoryName(): string;
            public constructor ($name: string, $category: Unity.Profiling.ProfilerCategory)
            public constructor ($name: string, $categoryName: string)
        }
        /** Represents a Profiler module in the Profiler window.
        */
        class ProfilerModule extends System.Object
        {
            protected [__keep_incompatibility]: never;
            /** The module’s display name.
            */
            public get DisplayName(): string;
            /** Creates a View Controller object that draws the Profiler module’s Details View in the Profiler window. Unity calls this method automatically when the module is selected in the Profiler window.
            * @returns Returns a ProfilerModuleViewController derived object that draws the module’s Details View in the Profiler window. The default value is a view controller that displays a list of the module’s chart counters alongside their current values in the selected frame. 
            */
            public CreateDetailsViewController () : Unity.Profiling.Editor.ProfilerModuleViewController
        }
        /** Provides a single view of content for a ProfilerModule displayed in the Profiler window.
        */
        class ProfilerModuleViewController extends System.Object implements System.IDisposable
        {
            protected [__keep_incompatibility]: never;
            public get Disposed(): boolean;
            /** TODO.
            */
            public Dispose () : void
        }
        /** Options for a Profiler module’s chart type.
        */
        enum ProfilerModuleChartType
        { Line = 0, StackedTimeArea = 1, StackedArea = 2 }
        /** Provides metadata related to a ProfilerModule, such as its name and icon path.
        */
        class ProfilerModuleMetadataAttribute extends System.Attribute implements System.Runtime.InteropServices._Attribute
        {
            protected [__keep_incompatibility]: never;
            /** The attributed Profiler module’s display name.
            */
            public get DisplayName(): string;
            /** The path to the attributed Profiler module’s icon.
            */
            public get IconPath(): string;
            public set IconPath(value: string);
            public constructor ($displayName: string)
        }
    }
    namespace Unity.CodeEditor {
        /** Handles interaction with the code editor.
        */
        class CodeEditor extends System.Object
        {
            protected [__keep_incompatibility]: never;
            /** Returns the current IExternalCodeEditor instance for the code editor.
            */
            public get CurrentCodeEditor(): Unity.CodeEditor.IExternalCodeEditor;
            /** Returns the current CodeEditor.Installation instance for the code editor.
            */
            public get CurrentInstallation(): Unity.CodeEditor.CodeEditor.Installation;
            public static get CurrentEditor(): Unity.CodeEditor.IExternalCodeEditor;
            public static get CurrentEditorInstallation(): string;
            /** The path to the external code editor that Unity uses used to open script assets.
            */
            public static get CurrentEditorPath(): string;
            /** A singleton instance of CodeEditor. The Unity Editor references this instance to handle code editor callbacks.
            */
            public static get Editor(): Unity.CodeEditor.CodeEditor;
            /** Each registered code editor package has an instance of IExternalCodeEditor. This method invokes IExternalCodeEditor.TryGetInstallationForPath on that instance. It finds the first instance that returns a valid installation, and returns the installation.
            * @param $editorPath The absolute path to an executable.
            * @returns An Installation representation of the path. 
            */
            public GetInstallationForPath ($editorPath: string) : Unity.CodeEditor.CodeEditor.Installation
            /** Each registered code editor package has an instance of IExternalCodeEditor. This method invokes IExternalCodeEditor.TryGetInstallationForPath on that instance. It returns the first instance that returns a valid installation.
            * @param $editorPath The absolute path to an executable.
            * @returns Returns an IExternalCodeEditor representing the package responsible for the editor path. 
            */
            public GetCodeEditorForPath ($editorPath: string) : Unity.CodeEditor.IExternalCodeEditor
            /** Collects all installations from registered instances of IExternalCodeEditor. This is done using IExternalCodeEditor.Installations.
            * @returns A Dictionary that maps names to editor paths. 
            */
            public GetFoundScriptEditorPaths () : System.Collections.Generic.Dictionary$2<string, string>
            public static SetExternalScriptEditor ($path: string) : void
            /** Sets the path to the code editor that Unity uses to open script assets.
            * @param $path The absolute path to the code editor executable. Unity uses this to open files you request.
            */
            public SetCodeEditor ($editorPath: string) : void
            /** Register an instance of IExternalCodeEditor to use when populating Preferences/External Tools menu. Calls ref::Initialize if you select the instance.
            * @param $externalCodeEditor The instance of IExternalCodeEditor to register and use to communicate with script Assets.
            */
            public static Register ($externalCodeEditor: Unity.CodeEditor.IExternalCodeEditor) : void
            /** Remove an instance of IExternalCodeEditor from the list of registered code editors. Calls ref::Initialize if you select the instance.
            * @param $externalCodeEditor The instance of IExternalCodeEditor to remove.
            */
            public static Unregister ($externalCodeEditor: Unity.CodeEditor.IExternalCodeEditor) : void
            /** Open an application with a quoted string of arguments.
            * @param $appPath The absolute path of the application to open.
            * @param $arguments The arguments to be passed to the application. You must make sure any paths are quoted correctly for the current platform.
            */
            public static OSOpenFile ($appPath: string, $arguments: string) : boolean
            /** Parse a string using the rules defined under.
            * @param $arguments The string that contains the template arguments to parse.
            * @param $path The file path to open.
            * @param $line The Line number to place the cursor.
            * @param $column The column number that represents where on the line to place the cursor.
            * @returns Returns the arguments parameter with replacements based on the values passed in to the method. 
            */
            public static ParseArgument ($arguments: string, $path: string, $line: number, $column: number) : string
            /** Quotes a string to pass to Process.Start as a single argument, and appends it to this string builder.
            */
            public static QuoteForProcessStart ($argument: string) : string
            public constructor ()
        }
        interface IExternalCodeEditor
        {
            /** Provide the editor with a list of known and supported editors that this instance supports.
            */
            Installations : System.Array$1<Unity.CodeEditor.CodeEditor.Installation>
            TryGetInstallationForPath ($editorPath: string, $installation: $Ref<Unity.CodeEditor.CodeEditor.Installation>) : boolean
            /** Unity calls this method when it populates "Preferences/External Tools" in order to allow the code editor to generate necessary GUI. For example, when creating an an argument field for modifying the arguments sent to the code editor.
            */
            OnGUI () : void
            /** When you change Assets in Unity, this method for the current chosen instance of IExternalCodeEditor parses the new and changed Assets.
            * @param $addedFiles Added files through Unity's UI.
            * @param $movedFiles Files that was added but has been moved.
            * @param $movedFromFiles Same list as movedFiles, but contains the location of where these was moved from.
            * @param $importedFiles Imported files, which were not added through Unity's UI.
            */
            SyncIfNeeded ($addedFiles: System.Array$1<string>, $deletedFiles: System.Array$1<string>, $movedFiles: System.Array$1<string>, $movedFromFiles: System.Array$1<string>, $importedFiles: System.Array$1<string>) : void
            /** Unity calls this function during initialization in order to sync the Project. This is different from SyncIfNeeded in that it does not get a list of changes.
            */
            SyncAll () : void
            /** Callback to the IExternalCodeEditor when it has been chosen from the PreferenceWindow.
            * @param $editorInstallationPath Path of the chosen code editor.
            */
            Initialize ($editorInstallationPath: string) : void
            /** The external code editor needs to handle the request to open a file.
            * @param $line Line number to open the file on.
            * @param $column Column to move cursor to on the specific line.
            * @returns Whether the request went successfully. 
            */
            OpenProject ($filePath?: string, $line?: number, $column?: number) : boolean
        }
    }
    namespace Unity.CodeEditor.CodeEditor {
        class Installation extends System.ValueType
        {
            protected [__keep_incompatibility]: never;
            public Name : string
            public Path : string
        }
    }
    namespace UnityEditor {
        /** Base class from which asset importers for specific asset types derive.
        */
        class AssetImporter extends UnityEngine.Object
        {
            protected [__keep_incompatibility]: never;
            /** The path name of the asset for this importer. (Read Only)
            */
            public get assetPath(): string;
            /** The value is true when no meta file is provided with the imported asset.
            */
            public get importSettingsMissing(): boolean;
            public get assetTimeStamp(): bigint;
            /** Get or set any user data.
            */
            public get userData(): string;
            public set userData(value: string);
            /** Get or set the AssetBundle name.
            */
            public get assetBundleName(): string;
            public set assetBundleName(value: string);
            /** Get or set the AssetBundle variant.
            */
            public get assetBundleVariant(): string;
            public set assetBundleVariant(value: string);
            /** Retrieves logs generated during the import of the asset at path.
            */
            public static GetImportLog ($path: string) : UnityEditor.AssetImporters.ImportLog
            /** Set the AssetBundle name and variant.
            * @param $assetBundleName AssetBundle name.
            * @param $assetBundleVariant AssetBundle variant.
            */
            public SetAssetBundleNameAndVariant ($assetBundleName: string, $assetBundleVariant: string) : void
            /** Retrieves the asset importer for the asset at path.
            */
            public static GetAtPath ($path: string) : UnityEditor.AssetImporter
            /** Save asset importer settings if asset importer is dirty.
            */
            public SaveAndReimport () : void
            public AddRemap ($identifier: UnityEditor.AssetImporter.SourceAssetIdentifier, $externalObject: UnityEngine.Object) : void
            public RemoveRemap ($identifier: UnityEditor.AssetImporter.SourceAssetIdentifier) : boolean
            /** Gets a copy of the external object map used by the AssetImporter.
            * @returns The map between a sub-asset and an external Asset. 
            */
            public GetExternalObjectMap () : System.Collections.Generic.Dictionary$2<UnityEditor.AssetImporter.SourceAssetIdentifier, UnityEngine.Object>
            /** Checks if the AssetImporter supports remapping the given asset type.
            * @param $type The type of asset to check.
            * @returns Returns true if the importer supports remapping the given type. Otherwise, returns false. 
            */
            public SupportsRemappedAssetType ($type: System.Type) : boolean
            public constructor ()
        }
        /** SerializedProperty and SerializedObject are classes for editing properties on objects in a completely generic way that automatically handles undo, multi-object editing and Prefab overrides.
        */
        class SerializedProperty extends System.Object implements System.IDisposable
        {
            protected [__keep_incompatibility]: never;
            /** SerializedObject this property belongs to (Read Only).
            */
            public get serializedObject(): UnityEditor.SerializedObject;
            /** A reference to another Object in the Scene. This reference is resolved in the context of the SerializedObject containing the SerializedProperty.
            */
            public get exposedReferenceValue(): UnityEngine.Object;
            public set exposedReferenceValue(value: UnityEngine.Object);
            /** Value of the SerializedProperty, boxed as a System.Object.
            */
            public get boxedValue(): any;
            public set boxedValue(value: any);
            /** Does this property represent multiple different values due to multi-object editing? (Read Only)
            */
            public get hasMultipleDifferentValues(): boolean;
            /** Nice display name of the property. (Read Only)
            */
            public get displayName(): string;
            /** Name of the property. (Read Only)
            */
            public get name(): string;
            /** Type name of the property. (Read Only)
            */
            public get type(): string;
            /** Type name of the element in an array property. (Read Only)
            */
            public get arrayElementType(): string;
            /** Tooltip of the property. (Read Only)
            */
            public get tooltip(): string;
            /** Nesting depth of the property. (Read Only)
            */
            public get depth(): number;
            /** Full path of the property. (Read Only)
            */
            public get propertyPath(): string;
            /** Is this property editable? (Read Only)
            */
            public get editable(): boolean;
            public get isAnimated(): boolean;
            /** Is this property expanded in the inspector?
            */
            public get isExpanded(): boolean;
            public set isExpanded(value: boolean);
            /** Does it have child properties? (Read Only)
            */
            public get hasChildren(): boolean;
            /** Does it have visible child properties? (Read Only)
            */
            public get hasVisibleChildren(): boolean;
            /** Is property part of a Prefab instance? (Read Only)
            */
            public get isInstantiatedPrefab(): boolean;
            /** Allows you to check whether a property's value is overriden (i.e. different to the Prefab it belongs to).
            */
            public get prefabOverride(): boolean;
            public set prefabOverride(value: boolean);
            /** Allows you to check whether his property is a PrefabUtility.IsDefaultOverride|default override.
            Certain properties on Prefab instances are default overrides.
            See PrefabUtility.IsDefaultOverride for more information.
            */
            public get isDefaultOverride(): boolean;
            /** Type of this property (Read Only).
            */
            public get propertyType(): UnityEditor.SerializedPropertyType;
            /** Return the precise type for Integer and Floating point properties. (Read Only)
            */
            public get numericType(): UnityEditor.SerializedPropertyNumericType;
            /** Value of an integer property.
            */
            public get intValue(): number;
            public set intValue(value: number);
            /** Value of an integer property as a long.
            */
            public get longValue(): bigint;
            public set longValue(value: bigint);
            /** Value of an integer property as an unsigned long.
            */
            public get ulongValue(): bigint;
            public set ulongValue(value: bigint);
            /** Value of an integer property as an unsigned int.
            */
            public get uintValue(): number;
            public set uintValue(value: number);
            /** Value of a boolean property.
            */
            public get boolValue(): boolean;
            public set boolValue(value: boolean);
            /** Value of a float property.
            */
            public get floatValue(): number;
            public set floatValue(value: number);
            /** Value of a float property as a double.
            */
            public get doubleValue(): number;
            public set doubleValue(value: number);
            /** Value of a string property.
            */
            public get stringValue(): string;
            public set stringValue(value: string);
            /** Value of a color property.
            */
            public get colorValue(): UnityEngine.Color;
            public set colorValue(value: UnityEngine.Color);
            /** Value of a animation curve property.
            */
            public get animationCurveValue(): UnityEngine.AnimationCurve;
            public set animationCurveValue(value: UnityEngine.AnimationCurve);
            /** Value of a gradient property.
            */
            public get gradientValue(): UnityEngine.Gradient;
            public set gradientValue(value: UnityEngine.Gradient);
            /** Value of an object reference property.
            */
            public get objectReferenceValue(): UnityEngine.Object;
            public set objectReferenceValue(value: UnityEngine.Object);
            /** The object assigned to a field with SerializeReference attribute.
            */
            public get managedReferenceValue(): any;
            public set managedReferenceValue(value: any);
            /** Id associated with a managed reference.
            */
            public get managedReferenceId(): bigint;
            public set managedReferenceId(value: bigint);
            /** String corresponding to the value of the managed reference object (dynamic) full type string.
            */
            public get managedReferenceFullTypename(): string;
            /** String corresponding to the value of the managed reference field full type string.
            */
            public get managedReferenceFieldTypename(): string;
            public get objectReferenceInstanceIDValue(): number;
            public set objectReferenceInstanceIDValue(value: number);
            /** Enum index of an enum property.
            */
            public get enumValueIndex(): number;
            public set enumValueIndex(value: number);
            /** Int32 representation of an enum property with Mixed Values.
            */
            public get enumValueFlag(): number;
            public set enumValueFlag(value: number);
            /** Names of enumeration of an enum property.
            */
            public get enumNames(): System.Array$1<string>;
            /** Display-friendly names of enumeration of an enum property.
            */
            public get enumDisplayNames(): System.Array$1<string>;
            /** Value of a 2D vector property.
            */
            public get vector2Value(): UnityEngine.Vector2;
            public set vector2Value(value: UnityEngine.Vector2);
            /** Value of a 3D vector property.
            */
            public get vector3Value(): UnityEngine.Vector3;
            public set vector3Value(value: UnityEngine.Vector3);
            /** Value of a 4D vector property.
            */
            public get vector4Value(): UnityEngine.Vector4;
            public set vector4Value(value: UnityEngine.Vector4);
            /** Value of a 2D integer vector property.
            */
            public get vector2IntValue(): UnityEngine.Vector2Int;
            public set vector2IntValue(value: UnityEngine.Vector2Int);
            /** Value of a 3D integer vector property.
            */
            public get vector3IntValue(): UnityEngine.Vector3Int;
            public set vector3IntValue(value: UnityEngine.Vector3Int);
            /** Value of a quaternion property.
            */
            public get quaternionValue(): UnityEngine.Quaternion;
            public set quaternionValue(value: UnityEngine.Quaternion);
            /** Value of a rectangle property.
            */
            public get rectValue(): UnityEngine.Rect;
            public set rectValue(value: UnityEngine.Rect);
            /** Value of a rectangle with integer values property.
            */
            public get rectIntValue(): UnityEngine.RectInt;
            public set rectIntValue(value: UnityEngine.RectInt);
            /** Value of bounds property.
            */
            public get boundsValue(): UnityEngine.Bounds;
            public set boundsValue(value: UnityEngine.Bounds);
            /** Value of bounds with integer values property.
            */
            public get boundsIntValue(): UnityEngine.BoundsInt;
            public set boundsIntValue(value: UnityEngine.BoundsInt);
            /** The value of a Hash128 property.
            */
            public get hash128Value(): UnityEngine.Hash128;
            public set hash128Value(value: UnityEngine.Hash128);
            /** Is this property an array? (Read Only)
            */
            public get isArray(): boolean;
            /** The number of elements in the array.
            */
            public get arraySize(): number;
            public set arraySize(value: number);
            /** The smallest number of elements in the array across all target objects. (Read Only)
            */
            public get minArraySize(): number;
            /** Is this property a fixed buffer? (Read Only)
            */
            public get isFixedBuffer(): boolean;
            /** The number of elements in the fixed buffer. (Read Only)
            */
            public get fixedBufferSize(): number;
            /** Provides the hash value for the property. (Read Only)
            */
            public get contentHash(): number;
            /** Returns a copy of the SerializedProperty iterator in its current state.
            */
            public Copy () : UnityEditor.SerializedProperty
            /** Retrieves the SerializedProperty at a relative path to the current property.
            */
            public FindPropertyRelative ($relativePropertyPath: string) : UnityEditor.SerializedProperty
            /** Retrieves an iterator for enumerating over the visible child properties of the current property.  If the property is an array it will enumerate over the array elements.
            */
            public GetEnumerator () : System.Collections.IEnumerator
            /** Returns the element at the specified index in the array.
            */
            public GetArrayElementAtIndex ($index: number) : UnityEditor.SerializedProperty
            /** Move to next visible property.
            */
            public NextVisible ($enterChildren: boolean) : boolean
            /** Remove all elements from the array.
            */
            public ClearArray () : void
            public Dispose () : void
            /** See if contained serialized properties are equal.
            */
            public static EqualContents ($x: UnityEditor.SerializedProperty, $y: UnityEditor.SerializedProperty) : boolean
            /** Compares the data for two SerializedProperties. This method ignores paths and SerializedObjects.
            */
            public static DataEquals ($x: UnityEditor.SerializedProperty, $y: UnityEditor.SerializedProperty) : boolean
            /** Move to next property.
            */
            public Next ($enterChildren: boolean) : boolean
            /** Move to first property of the object.
            */
            public Reset () : void
            /** Count remaining visible properties.
            */
            public CountRemaining () : number
            /** Count visible children of this property, including this property itself.
            */
            public CountInProperty () : number
            /** Duplicates the array element referenced by the SerializedProperty.
            */
            public DuplicateCommand () : boolean
            /** Deletes the array element referenced by the SerializedProperty.
            */
            public DeleteCommand () : boolean
            /** Retrieves the SerializedProperty that defines the end range of this property.
            */
            public GetEndProperty () : UnityEditor.SerializedProperty
            /** Retrieves the SerializedProperty that defines the end range of this property.
            */
            public GetEndProperty ($includeInvisible: boolean) : UnityEditor.SerializedProperty
            /** Insert an new element at the specified index in the array.
            */
            public InsertArrayElementAtIndex ($index: number) : void
            /** Delete the element at the specified index in the array.
            */
            public DeleteArrayElementAtIndex ($index: number) : void
            /** Move an array element from srcIndex to dstIndex.
            */
            public MoveArrayElement ($srcIndex: number, $dstIndex: number) : boolean
            /** Returns the element at the specified index in the fixed buffer.
            */
            public GetFixedBufferElementAtIndex ($index: number) : UnityEditor.SerializedProperty
        }
        /** SerializedObject and SerializedProperty are classes for editing serialized fields on Object|Unity objects in a completely generic way. These classes automatically handle dirtying individual serialized fields so they will be processed by the Undo system and styled correctly for Prefab overrides when drawn in the Inspector.
        */
        class SerializedObject extends System.Object implements System.IDisposable
        {
            protected [__keep_incompatibility]: never;
            /** The inspected object (Read Only).
            */
            public get targetObject(): UnityEngine.Object;
            /** The inspected objects (Read Only).
            */
            public get targetObjects(): System.Array$1<UnityEngine.Object>;
            /** The context used to store and resolve ExposedReference types. This is set by the SerializedObject constructor.
            */
            public get context(): UnityEngine.Object;
            /** Is true when the SerializedObject has a modified property that has not been applied.
            */
            public get hasModifiedProperties(): boolean;
            /** Does the serialized object represents multiple objects due to multi-object editing? (Read Only)
            */
            public get isEditingMultipleObjects(): boolean;
            /** Defines the maximum size beyond which arrays cannot be edited when multiple objects are selected.
            */
            public get maxArraySizeForMultiEditing(): number;
            public set maxArraySizeForMultiEditing(value: number);
            /** Controls the visibility of the child hidden fields.
            */
            public get forceChildVisibility(): boolean;
            public set forceChildVisibility(value: boolean);
            public Dispose () : void
            /** Get the first serialized property.
            */
            public GetIterator () : UnityEditor.SerializedProperty
            /** Find serialized property by name.
            */
            public FindProperty ($propertyPath: string) : UnityEditor.SerializedProperty
            /** Apply property modifications.
            * @returns Returns true if any pending property changes were applied to the target objects of the SerializedObject. 
            */
            public ApplyModifiedProperties () : boolean
            /** Update hasMultipleDifferentValues cache on the next Update() call.
            */
            public SetIsDifferentCacheDirty () : void
            /** Update serialized object's representation.
            */
            public Update () : void
            /** Update serialized object's representation, only if the object has been modified since the last call to Update or if it is a script.
            */
            public UpdateIfRequiredOrScript () : boolean
            /** Applies property modifications without registering an undo operation.
            */
            public ApplyModifiedPropertiesWithoutUndo () : boolean
            /** Copies a value from a SerializedProperty to the corresponding serialized property on the serialized object.
            */
            public CopyFromSerializedProperty ($prop: UnityEditor.SerializedProperty) : void
            /** Copies a changed value from a SerializedProperty to the corresponding serialized property on the serialized object.
            */
            public CopyFromSerializedPropertyIfDifferent ($prop: UnityEditor.SerializedProperty) : boolean
            public constructor ($obj: UnityEngine.Object)
            public constructor ($obj: UnityEngine.Object, $context: UnityEngine.Object)
            public constructor ($objs: System.Array$1<UnityEngine.Object>)
            public constructor ($objs: System.Array$1<UnityEngine.Object>, $context: UnityEngine.Object)
        }
        /** Derive from this base class to create a custom inspector or editor for your custom object.
        */
        class Editor extends UnityEngine.ScriptableObject implements UnityEditor.IToolModeOwner, UnityEditor.IPreviewable
        {
            protected [__keep_incompatibility]: never;
            /** This property specifies whether the Editor prompts the user to save or discard unsaved changes before the Inspector gets rebuilt.
            */
            public get hasUnsavedChanges(): boolean;
            /** The message that displays to the user if they are prompted to save.
            */
            public get saveChangesMessage(): string;
            /** The object being inspected.
            */
            public get target(): UnityEngine.Object;
            public set target(value: UnityEngine.Object);
            /** An array of all the object being inspected.
            */
            public get targets(): System.Array$1<UnityEngine.Object>;
            /** A SerializedObject representing the object or objects being inspected.
            */
            public get serializedObject(): UnityEditor.SerializedObject;
            /** Performs a save action on the contents of the editor.
            */
            public SaveChanges () : void
            /** Discards unsaved changes to the contents of the editor.
            */
            public DiscardChanges () : void
            /** Make a custom editor for targetObject or targetObjects with a context object.
            */
            public static CreateEditorWithContext ($targetObjects: System.Array$1<UnityEngine.Object>, $context: UnityEngine.Object, $editorType: System.Type) : UnityEditor.Editor
            public static CreateEditorWithContext ($targetObjects: System.Array$1<UnityEngine.Object>, $context: UnityEngine.Object) : UnityEditor.Editor
            /** Creates a cached editor using a context object.
            */
            public static CreateCachedEditorWithContext ($targetObject: UnityEngine.Object, $context: UnityEngine.Object, $editorType: System.Type, $previousEditor: $Ref<UnityEditor.Editor>) : void
            /** Creates a cached editor using a context object.
            */
            public static CreateCachedEditorWithContext ($targetObjects: System.Array$1<UnityEngine.Object>, $context: UnityEngine.Object, $editorType: System.Type, $previousEditor: $Ref<UnityEditor.Editor>) : void
            /** On return previousEditor is an editor for targetObject or targetObjects. The function either returns if the editor is already tracking the objects, or destroys the previous editor and creates a new one.
            * @param $obj The object the editor is tracking.
            * @param $editorType The requested editor type. Set to null for the default editor for the object.
            * @param $previousEditor The previous editor for the object. After returning from CreateCachedEditor previousEditor is an editor for the targetObject or targetObjects.
            * @param $objects The objects the editor is tracking.
            */
            public static CreateCachedEditor ($targetObject: UnityEngine.Object, $editorType: System.Type, $previousEditor: $Ref<UnityEditor.Editor>) : void
            /** On return previousEditor is an editor for targetObject or targetObjects. The function either returns if the editor is already tracking the objects, or destroys the previous editor and creates a new one.
            * @param $obj The object the editor is tracking.
            * @param $editorType The requested editor type. Set to null for the default editor for the object.
            * @param $previousEditor The previous editor for the object. After returning from CreateCachedEditor previousEditor is an editor for the targetObject or targetObjects.
            * @param $objects The objects the editor is tracking.
            */
            public static CreateCachedEditor ($targetObjects: System.Array$1<UnityEngine.Object>, $editorType: System.Type, $previousEditor: $Ref<UnityEditor.Editor>) : void
            /** Make a custom editor for targetObject or targetObjects.
            * @param $objects All objects must be of the same type.
            */
            public static CreateEditor ($targetObject: UnityEngine.Object) : UnityEditor.Editor
            /** Make a custom editor for targetObject or targetObjects.
            * @param $objects All objects must be of the same type.
            */
            public static CreateEditor ($targetObject: UnityEngine.Object, $editorType: System.Type) : UnityEditor.Editor
            /** Make a custom editor for targetObject or targetObjects.
            * @param $objects All objects must be of the same type.
            */
            public static CreateEditor ($targetObjects: System.Array$1<UnityEngine.Object>) : UnityEditor.Editor
            /** Make a custom editor for targetObject or targetObjects.
            * @param $objects All objects must be of the same type.
            */
            public static CreateEditor ($targetObjects: System.Array$1<UnityEngine.Object>, $editorType: System.Type) : UnityEditor.Editor
            /** Draws the built-in Inspector.
            * @returns Returns true if any GUI controls in the default Inspector changed the value of the input data, otherwise returns false. 
            */
            public DrawDefaultInspector () : boolean
            /** Redraw any inspectors that shows this editor.
            */
            public Repaint () : void
            /** Implement this function to make a custom inspector.
            */
            public OnInspectorGUI () : void
            /** Implement this method to make a custom UIElements inspector.
            */
            public CreateInspectorGUI () : UnityEngine.UIElements.VisualElement
            /** Checks if this editor requires constant repaints in its current state.
            */
            public RequiresConstantRepaint () : boolean
            public static add_finishedDefaultHeaderGUI ($value: System.Action$1<UnityEditor.Editor>) : void
            public static remove_finishedDefaultHeaderGUI ($value: System.Action$1<UnityEditor.Editor>) : void
            /** Call this function to draw the header of the editor.
            */
            public DrawHeader () : void
            /** Draws the inspector GUI with a foldout header for target.
            * @param $target The object to display the Inspector for.
            * @param $editor The reference to a variable of type Editor.
            */
            public static DrawFoldoutInspector ($target: UnityEngine.Object, $editor: $Ref<UnityEditor.Editor>) : void
            /** Override this method in subclasses if you implement OnPreviewGUI.
            * @returns True if this component can be Previewed in its current state. 
            */
            public HasPreviewGUI () : boolean
            /** Implement this method to make a custom UIElements inspector preview.
            */
            public CreatePreview ($inspectorPreviewWindow: UnityEngine.UIElements.VisualElement) : UnityEngine.UIElements.VisualElement
            /** Override this method if you want to change the label of the Preview area.
            */
            public GetPreviewTitle () : UnityEngine.GUIContent
            /** Override this method if you want to render a static preview.
            * @param $assetPath The asset to operate on.
            * @param $subAssets An array of all Assets at assetPath.
            * @param $width Width of the created texture.
            * @param $height Height of the created texture.
            * @returns Generated texture or null. 
            */
            public RenderStaticPreview ($assetPath: string, $subAssets: System.Array$1<UnityEngine.Object>, $width: number, $height: number) : UnityEngine.Texture2D
            /** Creates a custom preview for the preview area of the Inspector, the headers of the primary Editor, and the object selector.
            You must implement Editor.HasPreviewGUI for this method to be called.
            * @param $r The rectangle in which to draw the preview.
            * @param $background Background image.
            */
            public OnPreviewGUI ($r: UnityEngine.Rect, $background: UnityEngine.GUIStyle) : void
            /** Implement to create your own interactive custom preview. Interactive custom previews are used in the preview area of the inspector and the object selector.
            * @param $r Rectangle in which to draw the preview.
            * @param $background Background image.
            */
            public OnInteractivePreviewGUI ($r: UnityEngine.Rect, $background: UnityEngine.GUIStyle) : void
            /** Override this method if you want to show custom controls in the preview header.
            */
            public OnPreviewSettings () : void
            /** Implement this method to show asset information on top of the asset preview.
            */
            public GetInfoString () : string
            /** The first entry point for Preview Drawing.
            * @param $previewArea The available area to draw the preview.
            */
            public DrawPreview ($previewArea: UnityEngine.Rect) : void
            public ReloadPreviewInstances () : void
            /** Override this method in subclasses to return false if you don't want default margins.
            */
            public UseDefaultMargins () : boolean
            public Initialize ($targets: System.Array$1<UnityEngine.Object>) : void
            public Cleanup () : void
            public MoveNextTarget () : boolean
            public ResetTarget () : void
            public constructor ()
        }
        interface IToolModeOwner
        {
        }
        interface IPreviewable
        {
        }
        /** Base class for PropertyDrawer and DecoratorDrawer.
        */
        class GUIDrawer extends System.Object
        {
            protected [__keep_incompatibility]: never;
        }
        /** Base class to derive custom property drawers from. Use this to create custom drawers for your own Serializable classes or for script variables with custom PropertyAttributes.
        */
        class PropertyDrawer extends UnityEditor.GUIDrawer
        {
            protected [__keep_incompatibility]: never;
            /** The PropertyAttribute for the property. Not applicable for custom class drawers. (Read Only)
            */
            public get attribute(): UnityEngine.PropertyAttribute;
            /** The reflection FieldInfo for the member this property represents. (Read Only)
            */
            public get fieldInfo(): System.Reflection.FieldInfo;
            /** The label for this property. (Read Only)
            */
            public get preferredLabel(): string;
            /** Override this method to make your own IMGUI based GUI for the property.
            * @param $position Rectangle on the screen to use for the property GUI.
            * @param $property The SerializedProperty to make the custom GUI for.
            * @param $label The label of this property.
            */
            public OnGUI ($position: UnityEngine.Rect, $property: UnityEditor.SerializedProperty, $label: UnityEngine.GUIContent) : void
            /** Creates custom GUI with UI Toolkit for the property.
            * @param $property The SerializedProperty to make the custom GUI for.
            * @returns The element containing the custom GUI. 
            */
            public CreatePropertyGUI ($property: UnityEditor.SerializedProperty) : UnityEngine.UIElements.VisualElement
            /** Override this method to specify how tall the GUI for this field is in pixels.
            * @param $property The SerializedProperty to make the custom GUI for.
            * @param $label The label of this property.
            * @returns The height in pixels. 
            */
            public GetPropertyHeight ($property: UnityEditor.SerializedProperty, $label: UnityEngine.GUIContent) : number
        }
        /** Representation of Script assets.
        */
        class MonoScript extends UnityEngine.TextAsset
        {
            protected [__keep_incompatibility]: never;
            /** Returns the System.Type object of the class implemented by this script.
            */
            public GetClass () : System.Type
            /** Returns the MonoScript object containing specified MonoBehaviour.
            * @param $behaviour The MonoBehaviour whose MonoScript should be returned.
            */
            public static FromMonoBehaviour ($behaviour: UnityEngine.MonoBehaviour) : UnityEditor.MonoScript
            /** Returns the MonoScript object containing specified ScriptableObject.
            * @param $scriptableObject The ScriptableObject whose MonoScript should be returned.
            */
            public static FromScriptableObject ($scriptableObject: UnityEngine.ScriptableObject) : UnityEditor.MonoScript
            public constructor ()
        }
        /** Target build platform.
        */
        enum BuildTarget
        { StandaloneOSX = 2, StandaloneOSXUniversal = 3, StandaloneOSXIntel = 4, StandaloneWindows = 5, WebPlayer = 6, WebPlayerStreamed = 7, iOS = 9, PS3 = 10, XBOX360 = 11, Android = 13, StandaloneLinux = 17, StandaloneWindows64 = 19, WebGL = 20, WSAPlayer = 21, StandaloneLinux64 = 24, StandaloneLinuxUniversal = 25, WP8Player = 26, StandaloneOSXIntel64 = 27, BlackBerry = 28, Tizen = 29, PSP2 = 30, PS4 = 31, PSM = 32, XboxOne = 33, SamsungTV = 34, N3DS = 35, WiiU = 36, tvOS = 37, Switch = 38, Lumin = 39, Stadia = 40, CloudRendering = 41, LinuxHeadlessSimulation = 41, GameCoreScarlett = 42, GameCoreXboxSeries = 42, GameCoreXboxOne = 43, PS5 = 44, EmbeddedLinux = 45, QNX = 46, Bratwurst = 47, iPhone = -1, BB10 = -1, MetroPlayer = -1, NoTarget = -2 }
        /** Visual indication mode for Drag & Drop operation.
        */
        enum DragAndDropVisualMode
        { None = 0, Copy = 1, Link = 2, Move = 16, Generic = 4, Rejected = 32 }
        class HierarchyProperty extends System.Object implements UnityEditor.IHierarchyProperty
        {
            protected [__keep_incompatibility]: never;
            public get instanceID(): number;
            public get pptrValue(): UnityEngine.Object;
            public get name(): string;
            public get hasChildren(): boolean;
            public get depth(): number;
            public get ancestors(): System.Array$1<number>;
            public get row(): number;
            public get colorCode(): number;
            public get guid(): string;
            public get alphaSorted(): boolean;
            public set alphaSorted(value: boolean);
            public get showSceneHeaders(): boolean;
            public set showSceneHeaders(value: boolean);
            public get isSceneHeader(): boolean;
            public get isValid(): boolean;
            public get isMainRepresentation(): boolean;
            public get hasFullPreviewImage(): boolean;
            public get iconDrawStyle(): UnityEditor.IconDrawStyle;
            public get isFolder(): boolean;
            public get dynamicDependencies(): System.Array$1<UnityEditor.GUID>;
            public get icon(): UnityEngine.Texture2D;
            public SetCustomScenes ($sceneHandles: System.Array$1<number>) : void
            public SetSubScenes ($subScenes: System.Array$1<UnityEditor.SceneManagement.SceneHierarchyHooks.SubSceneInfo>) : void
            public Reset () : void
            public GetScene () : UnityEngine.SceneManagement.Scene
            public IsExpanded ($expanded: System.Array$1<number>) : boolean
            public Next ($expanded: System.Array$1<number>) : boolean
            public NextWithDepthCheck ($expanded: System.Array$1<number>, $minDepth: number) : boolean
            public Previous ($expanded: System.Array$1<number>) : boolean
            public Parent () : boolean
            public Find ($instanceID: number, $expanded: System.Array$1<number>) : boolean
            public Skip ($count: number, $expanded: System.Array$1<number>) : boolean
            public CountRemaining ($expanded: System.Array$1<number>) : number
            public GetInstanceIDIfImported () : number
            public SetSearchFilter ($searchString: string, $mode: number) : void
            public FindAllAncestors ($instanceIDs: System.Array$1<number>) : System.Array$1<number>
            public static ClearSceneObjectsFilter () : void
            public static FilterSingleSceneObject ($instanceID: number, $otherVisibilityState: boolean) : void
            public constructor ($hierarchyType: UnityEditor.HierarchyType)
            public constructor ($hierarchyType: UnityEditor.HierarchyType, $forceImport: boolean)
            public constructor ($rootPath: string)
            public constructor ($rootPath: string, $forceImport: boolean)
            public constructor ($hierarchyType: UnityEditor.HierarchyType, $rootPath: string, $forceImport: boolean)
        }
        interface IHierarchyProperty
        {
        }
        /** Define how dragged objects should be dropped relative to already existing Hierarchy items.
        */
        enum HierarchyDropFlags
        { None = 0, DropUpon = 1, DropBetween = 2, DropAfterParent = 4, SearchActive = 8, DropAbove = 16 }
        /** Derive from this class to create an editor window.
        */
        class EditorWindow extends UnityEngine.ScriptableObject
        {
            protected [__keep_incompatibility]: never;
            /** An instance of IDataModeController to handle DataMode functionalities for the current window.
            */
            public get dataModeController(): UnityEditor.IDataModeController;
            /** Retrieves the root visual element of this window hierarchy.
            */
            public get rootVisualElement(): UnityEngine.UIElements.VisualElement;
            /** The OverlayCanvas for this window.
            */
            public get overlayCanvas(): UnityEditor.Overlays.OverlayCanvas;
            /** Checks whether MouseMove events are received in the GUI in this Editor window.
            */
            public get wantsMouseMove(): boolean;
            public set wantsMouseMove(value: boolean);
            /** Checks whether MouseEnterWindow and MouseLeaveWindow events are received in the GUI in this Editor window.
            */
            public get wantsMouseEnterLeaveWindow(): boolean;
            public set wantsMouseEnterLeaveWindow(value: boolean);
            /** Specifies whether a layout pass is performed before all user events (for example, EventType.MouseDown or EventType.KeyDown), or is only performed before repaint events.
            */
            public get wantsLessLayoutEvents(): boolean;
            public set wantsLessLayoutEvents(value: boolean);
            /** Enable this property to automatically repaint the window when the SceneView is modified.
            */
            public get autoRepaintOnSceneChange(): boolean;
            public set autoRepaintOnSceneChange(value: boolean);
            /** Whether or not this window is maximized?
            */
            public get maximized(): boolean;
            public set maximized(value: boolean);
            /** Returns true if EditorWindow is focused.
            */
            public get hasFocus(): boolean;
            /** Returns true if EditorWindow is docked.
            */
            public get docked(): boolean;
            /** The EditorWindow which currently has keyboard focus. (Read Only)
            */
            public static get focusedWindow(): UnityEditor.EditorWindow;
            /** The EditorWindow currently under the mouse cursor. (Read Only)
            */
            public static get mouseOverWindow(): UnityEditor.EditorWindow;
            /** This property specifies whether the Editor prompts the user to save or discard unsaved changes before the window closes.
            */
            public get hasUnsavedChanges(): boolean;
            /** The message that displays to the user if they are prompted to save
            */
            public get saveChangesMessage(): string;
            /** The minimum size of this window when it is floating or modal. The minimum size is not used when the window is docked.
            */
            public get minSize(): UnityEngine.Vector2;
            public set minSize(value: UnityEngine.Vector2);
            /** The maximum size of this window when it is floating or modal. The maximum size is not used when the window is docked.
            */
            public get maxSize(): UnityEngine.Vector2;
            public set maxSize(value: UnityEngine.Vector2);
            /** The GUIContent used for drawing the title of EditorWindows.
            */
            public get titleContent(): UnityEngine.GUIContent;
            public set titleContent(value: UnityEngine.GUIContent);
            public get depthBufferBits(): number;
            public set depthBufferBits(value: number);
            /** The desired position of the window in screen space.
            */
            public get position(): UnityEngine.Rect;
            public set position(value: UnityEngine.Rect);
            /** Mark the beginning area of all popup windows.
            */
            public BeginWindows () : void
            /** Close a window group started with EditorWindow.BeginWindows.
            */
            public EndWindows () : void
            /** Show a notification message.
            * @param $notification The contents of the notification message.
            * @param $fadeoutWait The duration the notification is displayed. Measured in seconds.
            */
            public ShowNotification ($notification: UnityEngine.GUIContent) : void
            /** Show a notification message.
            * @param $notification The contents of the notification message.
            * @param $fadeoutWait The duration the notification is displayed. Measured in seconds.
            */
            public ShowNotification ($notification: UnityEngine.GUIContent, $fadeoutWait: number) : void
            /** Stop showing notification message.
            */
            public RemoveNotification () : void
            public static add_windowFocusChanged ($value: System.Action) : void
            public static remove_windowFocusChanged ($value: System.Action) : void
            /** Shows a docked Editor window.
            */
            public ShowTab () : void
            /** Moves keyboard focus to another EditorWindow.
            */
            public Focus () : void
            /** Show the EditorWindow as a floating utility window.
            */
            public ShowUtility () : void
            /** Shows an Editor window using popup-style framing.
            */
            public ShowPopup () : void
            /** Shows the EditorWindow as a floating modal window.
            */
            public ShowModalUtility () : void
            /** Shows a window with dropdown behaviour and styling.
            * @param $buttonRect The button from which the position of the window will be determined (see description).
            * @param $windowSize The initial size of the window.
            */
            public ShowAsDropDown ($buttonRect: UnityEngine.Rect, $windowSize: UnityEngine.Vector2) : void
            /** Show the EditorWindow window.
            * @param $immediateDisplay Immediately display Show.
            */
            public Show () : void
            /** Show the EditorWindow window.
            * @param $immediateDisplay Immediately display Show.
            */
            public Show ($immediateDisplay: boolean) : void
            /** Show the editor window in the auxiliary window.
            */
            public ShowAuxWindow () : void
            /** Show modal editor window.
            */
            public ShowModal () : void
            /** Returns the first EditorWindow of type windowType which is currently on the screen.
            * @param $windowType The type of the window. Must derive from EditorWindow.
            * @param $utility Set this to true, to create a floating utility window, false to create a normal window.
            * @param $title If GetWindow creates a new window, it will get this title. If this value is null, use the class name as title.
            * @param $focus Whether to give the window focus, if it already exists. (If GetWindow creates a new window, it will always get focus).
            * @returns An EditorWindow instance of windowType. 
            */
            public static GetWindow ($windowType: System.Type, $utility: boolean, $title: string, $focus: boolean) : UnityEditor.EditorWindow
            /** Returns the first EditorWindow of type windowType which is currently on the screen.
            * @param $windowType The type of the window. Must derive from EditorWindow.
            * @param $utility Set this to true, to create a floating utility window, false to create a normal window.
            * @param $title If GetWindow creates a new window, it will get this title. If this value is null, use the class name as title.
            * @param $focus Whether to give the window focus, if it already exists. (If GetWindow creates a new window, it will always get focus).
            * @returns An EditorWindow instance of windowType. 
            */
            public static GetWindow ($windowType: System.Type, $utility: boolean, $title: string) : UnityEditor.EditorWindow
            /** Returns the first EditorWindow of type windowType which is currently on the screen.
            * @param $windowType The type of the window. Must derive from EditorWindow.
            * @param $utility Set this to true, to create a floating utility window, false to create a normal window.
            * @param $title If GetWindow creates a new window, it will get this title. If this value is null, use the class name as title.
            * @param $focus Whether to give the window focus, if it already exists. (If GetWindow creates a new window, it will always get focus).
            * @returns An EditorWindow instance of windowType. 
            */
            public static GetWindow ($windowType: System.Type, $utility: boolean) : UnityEditor.EditorWindow
            /** Returns the first EditorWindow of type windowType which is currently on the screen.
            * @param $windowType The type of the window. Must derive from EditorWindow.
            * @param $utility Set this to true, to create a floating utility window, false to create a normal window.
            * @param $title If GetWindow creates a new window, it will get this title. If this value is null, use the class name as title.
            * @param $focus Whether to give the window focus, if it already exists. (If GetWindow creates a new window, it will always get focus).
            * @returns An EditorWindow instance of windowType. 
            */
            public static GetWindow ($windowType: System.Type) : UnityEditor.EditorWindow
            /** Returns the first EditorWindow of type t which is currently on the screen.
            * @param $windowType The type of the window. Must derive from EditorWindow.
            * @param $rect The position on the screen where a newly created window will show.
            * @param $utility Set this to true, to create a floating utility window, false to create a normal window.
            * @param $title If GetWindow creates a new window, it will get this title. If this value is null, use the class name as title.
            */
            public static GetWindowWithRect ($windowType: System.Type, $rect: UnityEngine.Rect, $utility: boolean, $title: string) : UnityEditor.EditorWindow
            /** Returns the first EditorWindow of type t which is currently on the screen.
            * @param $windowType The type of the window. Must derive from EditorWindow.
            * @param $rect The position on the screen where a newly created window will show.
            * @param $utility Set this to true, to create a floating utility window, false to create a normal window.
            * @param $title If GetWindow creates a new window, it will get this title. If this value is null, use the class name as title.
            */
            public static GetWindowWithRect ($windowType: System.Type, $rect: UnityEngine.Rect, $utility: boolean) : UnityEditor.EditorWindow
            /** Returns the first EditorWindow of type t which is currently on the screen.
            * @param $windowType The type of the window. Must derive from EditorWindow.
            * @param $rect The position on the screen where a newly created window will show.
            * @param $utility Set this to true, to create a floating utility window, false to create a normal window.
            * @param $title If GetWindow creates a new window, it will get this title. If this value is null, use the class name as title.
            */
            public static GetWindowWithRect ($windowType: System.Type, $rect: UnityEngine.Rect) : UnityEditor.EditorWindow
            /** Focuses the first found EditorWindow of specified type if it is open.
            * @param $windowType The type of the window. Must derive from EditorWindow.
            */
            public static FocusWindowIfItsOpen ($t: System.Type) : void
            /** Performs a save action on the contents of the window.
            */
            public SaveChanges () : void
            /** Discards unsaved changes to the contents of the window.
            */
            public DiscardChanges () : void
            /** Close the editor window.
            */
            public Close () : void
            /** Make the window repaint.
            */
            public Repaint () : void
            /** Sends an Event to a window.
            */
            public SendEvent ($e: UnityEngine.Event) : boolean
            /** Gets the extra panes associated with the window.
            * @returns The extra panes that are specific to the window. 
            */
            public GetExtraPaneTypes () : System.Collections.Generic.IEnumerable$1<System.Type>
            /** Get an Overlay with matching ID from an EditorWindow canvas.
            * @param $id ID of the overlay to retrieve.
            * @param $match Contains the overlay with matching id, or null if no matching overlay was found.
            * @returns Returns true if the overlay was found, false otherwise. 
            */
            public TryGetOverlay ($id: string, $match: $Ref<UnityEditor.Overlays.Overlay>) : boolean
            public constructor ()
        }
        /** Derive from this class to create an editor window.
        */
        interface EditorWindow {
            SetAntiAliasing ($aa: number) : void;
            GetAntiAliasing () : number;
        }
        class SearchableEditorWindow extends UnityEditor.EditorWindow
        {
            protected [__keep_incompatibility]: never;
            public OnEnable () : void
            public OnDisable () : void
            public constructor ()
        }
        /** Use this class to manage SceneView settings, change the SceneView camera properties, subscribe to events, call SceneView methods, and render open scenes.
        */
        class SceneView extends UnityEditor.SearchableEditorWindow implements UnityEditor.IHasCustomMenu, UnityEditor.Overlays.ISupportsOverlays
        {
            protected [__keep_incompatibility]: never;
            /** Register to this callback to get notified when the active Scene View changes.
            */
            public static lastActiveSceneViewChanged : System.Action$2<UnityEditor.SceneView, UnityEditor.SceneView>
            /** The SceneView that was most recently in focus.
            */
            public static get lastActiveSceneView(): UnityEditor.SceneView;
            /** The SceneView that is being drawn.
            */
            public static get currentDrawingSceneView(): UnityEditor.SceneView;
            /** Gets the Color of selected outline.
            */
            public static get selectedOutlineColor(): UnityEngine.Color;
            /** Whether this SceneView is using scene filtering.
            */
            public get isUsingSceneFiltering(): boolean;
            /** Sets the visibility of all Gizmos in the Scene view.
            */
            public get drawGizmos(): boolean;
            public set drawGizmos(value: boolean);
            /** The position and size of the area that the camera renders.
            */
            public get cameraViewport(): UnityEngine.Rect;
            /** Whether lighting is enabled or disabled in the Scene view.
            */
            public get sceneLighting(): boolean;
            public set sceneLighting(value: boolean);
            /** Whether the SceneView is in 2D mode.
            */
            public get in2DMode(): boolean;
            public set in2DMode(value: boolean);
            /** Whether the Scene view camera can be rotated.
            */
            public get isRotationLocked(): boolean;
            public set isRotationLocked(value: boolean);
            /** Enables or disables Scene view audio effects.
            */
            public get audioPlay(): boolean;
            public set audioPlay(value: boolean);
            /** The current DrawCameraMode for the Scene view camera.
            */
            public get cameraMode(): UnityEditor.SceneView.CameraMode;
            public set cameraMode(value: UnityEditor.SceneView.CameraMode);
            /** Whether the albedo is black for materials with an average specular color above 0.45.
            */
            public get validateTrueMetals(): boolean;
            public set validateTrueMetals(value: boolean);
            /** Use SceneViewState to set the debug options for the Scene view.
            */
            public get sceneViewState(): UnityEditor.SceneView.SceneViewState;
            public set sceneViewState(value: UnityEditor.SceneView.SceneViewState);
            /** Gets or sets whether to enable the grid for an instance of the SceneView.
            */
            public get showGrid(): boolean;
            public set showGrid(value: boolean);
            /** Use CameraSettings to set the properties for the SceneView Camera.
            */
            public get cameraSettings(): UnityEditor.SceneView.CameraSettings;
            public set cameraSettings(value: UnityEditor.SceneView.CameraSettings);
            /** When the Scene view is in 2D mode, this property contains the last camera rotation.
            */
            public get lastSceneViewRotation(): UnityEngine.Quaternion;
            public set lastSceneViewRotation(value: UnityEngine.Quaternion);
            /** The distance from camera to pivot.
            */
            public get cameraDistance(): number;
            /** The list of all open Scene view windows.
            */
            public static get sceneViews(): System.Collections.ArrayList;
            /** The Camera that is rendering this SceneView.
            */
            public get camera(): UnityEngine.Camera;
            /** The central point that the camera orbits within the Scene view.
            */
            public get pivot(): UnityEngine.Vector3;
            public set pivot(value: UnityEngine.Vector3);
            /** The direction of the camera to the pivot of the SceneView.
            */
            public get rotation(): UnityEngine.Quaternion;
            public set rotation(value: UnityEngine.Quaternion);
            /** The size of the Scene view measured diagonally.
            */
            public get size(): number;
            public set size(value: number);
            /** Whether the Scene view camera is set to orthographic mode.
            */
            public get orthographic(): boolean;
            public set orthographic(value: boolean);
            public add_onValidateCameraMode ($value: System.Func$2<UnityEditor.SceneView.CameraMode, boolean>) : void
            public remove_onValidateCameraMode ($value: System.Func$2<UnityEditor.SceneView.CameraMode, boolean>) : void
            public add_onCameraModeChanged ($value: System.Action$1<UnityEditor.SceneView.CameraMode>) : void
            public remove_onCameraModeChanged ($value: System.Action$1<UnityEditor.SceneView.CameraMode>) : void
            public add_gridVisibilityChanged ($value: System.Action$1<boolean>) : void
            public remove_gridVisibilityChanged ($value: System.Action$1<boolean>) : void
            public static add_beforeSceneGui ($value: System.Action$1<UnityEditor.SceneView>) : void
            public static remove_beforeSceneGui ($value: System.Action$1<UnityEditor.SceneView>) : void
            public static add_duringSceneGui ($value: System.Action$1<UnityEditor.SceneView>) : void
            public static remove_duringSceneGui ($value: System.Action$1<UnityEditor.SceneView>) : void
            /** Resets the CameraSettings for the SceneView Camera to default.
            */
            public ResetCameraSettings () : void
            /** Sets a replacement shader for rendering this Scene view.
            * @param $shader The replacement shader.
            * @param $replaceString The replacement shader tag.
            */
            public SetSceneViewShaderReplace ($shader: UnityEngine.Shader, $replaceString: string) : void
            /** Frames the currently selected object(s) in the last active Scene view.
            * @returns Returns true if the camera frame successfully frames the current selection. 
            */
            public static FrameLastActiveSceneView () : boolean
            public static FrameLastActiveSceneViewWithLock () : boolean
            /** Retrieves an array of all camera components from all open Scene views.
            * @returns Returns an array of camera components. 
            */
            public static GetAllSceneCameras () : System.Array$1<UnityEngine.Camera>
            /** Repaints every open SceneView.
            */
            public static RepaintAll () : void
            public OnDestroy () : void
            public AddItemsToMenu ($menu: UnityEditor.GenericMenu) : void
            public static AddOverlayToActiveView ($overlay: UnityEditor.Overlays.Overlay) : void
            public static RemoveOverlayFromActiveView ($overlay: UnityEditor.Overlays.Overlay) : void
            public IsCameraDrawModeSupported ($mode: UnityEditor.SceneView.CameraMode) : boolean
            public IsCameraDrawModeEnabled ($mode: UnityEditor.SceneView.CameraMode) : boolean
            public FixNegativeSize () : void
            /** Moves the Scene view to focus on a target.
            * @param $point The position in world space to frame.
            * @param $direction The direction that the Scene view should view the target point from.
            * @param $newSize The amount of camera zoom. Sets size.
            * @param $ortho Whether the camera focus is in orthographic mode (true) or perspective mode (false).
            * @param $instant Apply the movement immediately (true) or animate the transition (false).
            */
            public LookAt ($point: UnityEngine.Vector3) : void
            /** Moves the Scene view to focus on a target.
            * @param $point The position in world space to frame.
            * @param $direction The direction that the Scene view should view the target point from.
            * @param $newSize The amount of camera zoom. Sets size.
            * @param $ortho Whether the camera focus is in orthographic mode (true) or perspective mode (false).
            * @param $instant Apply the movement immediately (true) or animate the transition (false).
            */
            public LookAt ($point: UnityEngine.Vector3, $direction: UnityEngine.Quaternion) : void
            /** .LookAt without animating the scene movement.
            * @param $point The position in world space to frame.
            * @param $direction The direction from which the Scene view should view the point.
            * @param $newSize The amount of camera zoom. Sets size.
            */
            public LookAtDirect ($point: UnityEngine.Vector3, $direction: UnityEngine.Quaternion) : void
            /** Moves the Scene view to focus on a target.
            * @param $point The position in world space to frame.
            * @param $direction The direction that the Scene view should view the target point from.
            * @param $newSize The amount of camera zoom. Sets size.
            * @param $ortho Whether the camera focus is in orthographic mode (true) or perspective mode (false).
            * @param $instant Apply the movement immediately (true) or animate the transition (false).
            */
            public LookAt ($point: UnityEngine.Vector3, $direction: UnityEngine.Quaternion, $newSize: number) : void
            /** .LookAt without animating the scene movement.
            * @param $point The position in world space to frame.
            * @param $direction The direction from which the Scene view should view the point.
            * @param $newSize The amount of camera zoom. Sets size.
            */
            public LookAtDirect ($point: UnityEngine.Vector3, $direction: UnityEngine.Quaternion, $newSize: number) : void
            /** Moves the Scene view to focus on a target.
            * @param $point The position in world space to frame.
            * @param $direction The direction that the Scene view should view the target point from.
            * @param $newSize The amount of camera zoom. Sets size.
            * @param $ortho Whether the camera focus is in orthographic mode (true) or perspective mode (false).
            * @param $instant Apply the movement immediately (true) or animate the transition (false).
            */
            public LookAt ($point: UnityEngine.Vector3, $direction: UnityEngine.Quaternion, $newSize: number, $ortho: boolean) : void
            /** Moves the Scene view to focus on a target.
            * @param $point The position in world space to frame.
            * @param $direction The direction that the Scene view should view the target point from.
            * @param $newSize The amount of camera zoom. Sets size.
            * @param $ortho Whether the camera focus is in orthographic mode (true) or perspective mode (false).
            * @param $instant Apply the movement immediately (true) or animate the transition (false).
            */
            public LookAt ($point: UnityEngine.Vector3, $direction: UnityEngine.Quaternion, $newSize: number, $ortho: boolean, $instant: boolean) : void
            /** Moves the Scene view to frame a transform.
            * @param $t The transform to frame in the Scene view.
            */
            public AlignViewToObject ($t: UnityEngine.Transform) : void
            /** Aligns the current selection with the position and rotation of the Scene view camera.
            */
            public AlignWithView () : void
            /** Transforms all selected object to the scene pivot.
            * @param $target A transform to place at the scene pivot.
            */
            public MoveToView () : void
            /** Transforms all selected object to the scene pivot.
            * @param $target A transform to place at the scene pivot.
            */
            public MoveToView ($target: UnityEngine.Transform) : void
            /** Frame the object selection in the Scene view.
            * @param $lockView Whether the view should be locked to the selection.
            * @returns Returns true if the current selection fits in the Scene view. Returns false otherwise. 
            */
            public FrameSelected () : boolean
            /** Frame the object selection in the Scene view.
            * @param $lockView Whether the view should be locked to the selection.
            * @returns Returns true if the current selection fits in the Scene view. Returns false otherwise. 
            */
            public FrameSelected ($lockView: boolean) : boolean
            public FrameSelected ($lockView: boolean, $instant: boolean) : boolean
            /** Frames the given bounds in the Scene view.
            * @param $bounds The bounds to frame in the Scene view.
            * @param $instant Set to true to immediately frame the camera. Set to false to animate the action.
            * @returns Returns true if the given bounds can be encompassed in the Scene view. Returns false otherwise. 
            */
            public Frame ($bounds: UnityEngine.Bounds, $instant?: boolean) : boolean
            /** Add a custom camera mode to the Scene view camera mode list.
            * @param $name The name for the new mode.
            * @param $section The section in which the new mode will be added. This can be an existing or new section.
            * @returns A CameraMode with the provided name and section. 
            */
            public static AddCameraMode ($name: string, $section: string) : UnityEditor.SceneView.CameraMode
            /** Remove all user-defined camera modes.
            */
            public static ClearUserDefinedCameraModes () : void
            /** Gets the built-in CameraMode that matches the specified DrawCameraMode.
            * @param $mode The DrawCameraMode to match.
            * @returns Returns a built-in CameraMode. 
            */
            public static GetBuiltinCameraMode ($mode: UnityEditor.DrawCameraMode) : UnityEditor.SceneView.CameraMode
            public constructor ()
        }
        interface IHasCustomMenu
        {
            /** Adds your custom menu items to an Editor Window.
            */
            AddItemsToMenu ($menu: UnityEditor.GenericMenu) : void
        }
        /** Build target group.
        */
        enum BuildTargetGroup
        { Unknown = 0, Standalone = 1, WebPlayer = 2, iPhone = 4, iOS = 4, PS3 = 5, XBOX360 = 6, Android = 7, WebGL = 13, WSA = 14, Metro = 14, WP8 = 15, BlackBerry = 16, Tizen = 17, PSP2 = 18, PS4 = 19, PSM = 20, XboxOne = 21, SamsungTV = 22, N3DS = 23, WiiU = 24, tvOS = 25, Facebook = 26, Switch = 27, Lumin = 28, Stadia = 29, CloudRendering = 30, LinuxHeadlessSimulation = 30, GameCoreScarlett = 31, GameCoreXboxSeries = 31, GameCoreXboxOne = 32, PS5 = 33, EmbeddedLinux = 34, QNX = 35, Bratwurst = 36 }
        /** Result of Asset move
        */
        enum AssetMoveResult
        { DidNotMove = 0, FailedMove = 1, DidMove = 2 }
        /** Result of Asset delete operation
        */
        enum AssetDeleteResult
        { DidNotDelete = 0, FailedDelete = 1, DidDelete = 2 }
        /** Options for removing assets
        */
        enum RemoveAssetOptions
        { MoveAssetToTrash = 0, DeleteAssets = 2 }
        /** Options for querying the version control system status of a file.
        */
        enum StatusQueryOptions
        { ForceUpdate = 0, UseCachedIfPossible = 1, UseCachedAsync = 2 }
        class ActiveEditorTracker extends System.Object
        {
            protected [__keep_incompatibility]: never;
            public get activeEditors(): System.Array$1<UnityEditor.Editor>;
            public get isDirty(): boolean;
            public get isLocked(): boolean;
            public set isLocked(value: boolean);
            public get hasUnsavedChanges(): boolean;
            public get inspectorMode(): UnityEditor.InspectorMode;
            public set inspectorMode(value: UnityEditor.InspectorMode);
            public get hasComponentsWhichCannotBeMultiEdited(): boolean;
            public static get sharedTracker(): UnityEditor.ActiveEditorTracker;
            public Destroy () : void
            public GetVisible ($index: number) : number
            public SetVisible ($index: number, $visible: number) : void
            public ClearDirty () : void
            public RebuildIfNecessary () : void
            public ForceRebuild () : void
            public VerifyModifiedMonoBehaviours () : void
            public static HasCustomEditor ($obj: UnityEngine.Object) : boolean
            public constructor ()
        }
        enum InspectorMode
        { Normal = 0, Debug = 1, DebugInternal = 2 }
        class AnimationClipSettings extends System.Object
        {
            protected [__keep_incompatibility]: never;
            public additiveReferencePoseClip : UnityEngine.AnimationClip
            public additiveReferencePoseTime : number
            public startTime : number
            public stopTime : number
            public orientationOffsetY : number
            public level : number
            public cycleOffset : number
            public hasAdditiveReferencePose : boolean
            public loopTime : boolean
            public loopBlend : boolean
            public loopBlendOrientation : boolean
            public loopBlendPositionY : boolean
            public loopBlendPositionXZ : boolean
            public keepOriginalOrientation : boolean
            public keepOriginalPositionY : boolean
            public keepOriginalPositionXZ : boolean
            public heightFromFeet : boolean
            public mirror : boolean
            public constructor ()
        }
        /** AnimationMode uses AnimationModeDriver to identify the animation driver.
        */
        class AnimationModeDriver extends UnityEngine.ScriptableObject
        {
            protected [__keep_incompatibility]: never;
            public constructor ()
        }
        /** AnimationMode is used by the AnimationWindow to store properties modified
        by the AnimationClip playback.
        */
        class AnimationMode extends System.Object
        {
            protected [__keep_incompatibility]: never;
            /** The color used to show that a property is currently being animated.
            */
            public static get animatedPropertyColor(): UnityEngine.Color;
            /** The color used to show that an animated property automatically records changes in the animation clip.
            */
            public static get recordedPropertyColor(): UnityEngine.Color;
            /** The color used to show that an animated property has been modified.
            */
            public static get candidatePropertyColor(): UnityEngine.Color;
            /** Checks whether the specified property is in Animation mode and is being animated.
            * @param $target The object to determine if it contained the animation.
            * @param $propertyPath The name of the animation to search for.
            * @returns Whether the property search is found or not. 
            */
            public static IsPropertyAnimated ($target: UnityEngine.Object, $propertyPath: string) : boolean
            /** Stops the Animation mode and reverts any properties that were animated while in Animation mode.
            * @param $driver An AnimationModeDriver object must be specified if one was specified when the Animation mode was started (StartAnimationMode.)
            */
            public static StopAnimationMode () : void
            /** Stops the Animation mode and reverts any properties that were animated while in Animation mode.
            * @param $driver An AnimationModeDriver object must be specified if one was specified when the Animation mode was started (StartAnimationMode.)
            */
            public static StopAnimationMode ($driver: UnityEditor.AnimationModeDriver) : void
            /** Checks whether the Editor is in Animation mode.
            * @param $driver An AnimationModeDriver object that tests if AnimationMode has been locked specifically for this driver.
            */
            public static InAnimationMode () : boolean
            /** Checks whether the Editor is in Animation mode.
            * @param $driver An AnimationModeDriver object that tests if AnimationMode has been locked specifically for this driver.
            */
            public static InAnimationMode ($driver: UnityEditor.AnimationModeDriver) : boolean
            /** Starts the Animation mode.
            * @param $driver Specify an AnimationModeDriver object to lock the AnimationMode to a driver.
            */
            public static StartAnimationMode () : void
            /** Starts the Animation mode.
            * @param $driver Specify an AnimationModeDriver object to lock the AnimationMode to a driver.
            */
            public static StartAnimationMode ($driver: UnityEditor.AnimationModeDriver) : void
            /** Initialise the start of the animation clip sampling.
            */
            public static BeginSampling () : void
            /** Finish the sampling of the animation clip.
            */
            public static EndSampling () : void
            /** Samples the AnimationClip for the GameObject and also records modified properties when in Animation mode.
            * @param $gameObject The root GameObject for the animation.
            * @param $clip The AnimationClip to sample.
            * @param $time The time at which to sample.
            * @returns Returns true when the Editor is in Animation mode. Returns false otherwise. 
            */
            public static SampleAnimationClip ($gameObject: UnityEngine.GameObject, $clip: UnityEngine.AnimationClip, $time: number) : void
            public static SamplePlayableGraph ($graph: UnityEngine.Playables.PlayableGraph, $index: number, $time: number) : void
            /** Marks a property as currently being animated.
            * @param $binding Description of the animation clip curve being modified.
            * @param $modification Object property being modified.
            * @param $keepPrefabOverride Indicates whether to retain modifications when the targeted object is an instance of a Prefab.
            */
            public static AddPropertyModification ($binding: UnityEditor.EditorCurveBinding, $modification: UnityEditor.PropertyModification, $keepPrefabOverride: boolean) : void
            /** Marks a property defined by an EditorCurveBinding as currently being animated.
            * @param $gameObject The GameObject being modified.
            * @param $binding The binding for the property being modified.
            */
            public static AddEditorCurveBinding ($gameObject: UnityEngine.GameObject, $binding: UnityEditor.EditorCurveBinding) : void
            public constructor ()
        }
        /** Defines how a curve is attached to an object that it controls.
        */
        class EditorCurveBinding extends System.ValueType implements System.IEquatable$1<UnityEditor.EditorCurveBinding>
        {
            protected [__keep_incompatibility]: never;
            /** The transform path of the object that is animated.
            */
            public path : string
            /** The name of the property to be animated.
            */
            public propertyName : string
            /** Returns true if the binding is an object curve. Returns false otherwise (Read Only)
            */
            public get isPPtrCurve(): boolean;
            /** Returns true if the binding is a discrete curve. Returns false otherwise. (Read Only)
            */
            public get isDiscreteCurve(): boolean;
            /** Returns true if the binding is to a curve that points to field on a SerializeReference instance. Returns false otherwise. (Read Only)
            */
            public get isSerializeReferenceCurve(): boolean;
            /** The type of the property to be animated.
            */
            public get type(): System.Type;
            public set type(value: System.Type);
            public static op_Equality ($lhs: UnityEditor.EditorCurveBinding, $rhs: UnityEditor.EditorCurveBinding) : boolean
            public static op_Inequality ($lhs: UnityEditor.EditorCurveBinding, $rhs: UnityEditor.EditorCurveBinding) : boolean
            public Equals ($other: any) : boolean
            public Equals ($other: UnityEditor.EditorCurveBinding) : boolean
            /** Creates a preconfigured binding for a float curve.
            * @param $inPath The transform path to the object to animate.
            * @param $inType The type of the object to animate.
            * @param $inPropertyName The name of the property to animate on the object.
            */
            public static FloatCurve ($inPath: string, $inType: System.Type, $inPropertyName: string) : UnityEditor.EditorCurveBinding
            /** Creates a preconfigured binding for a curve that points to an Object.
            * @param $inPath The transform path to the object to animate.
            * @param $inType The type of the object to animate.
            * @param $inPropertyName The name of the property to animate on the object.
            */
            public static PPtrCurve ($inPath: string, $inType: System.Type, $inPropertyName: string) : UnityEditor.EditorCurveBinding
            /** Creates a preconfigured binding for a curve where values should not be interpolated.
            * @param $inPath The transform path to the object to animate.
            * @param $inType The type of the object to animate.
            * @param $inPropertyName The name of the property to animate on the object.
            */
            public static DiscreteCurve ($inPath: string, $inType: System.Type, $inPropertyName: string) : UnityEditor.EditorCurveBinding
            public static SerializeReferenceCurve ($inPath: string, $inType: System.Type, $refID: bigint, $inPropertyName: string, $isPPtr: boolean, $isDiscrete: boolean) : UnityEditor.EditorCurveBinding
        }
        /** Defines a single modified property.
        */
        class PropertyModification extends System.Object
        {
            protected [__keep_incompatibility]: never;
            /** Object that will be modified.
            */
            public target : UnityEngine.Object
            /** Property path of the property being modified (Matches as SerializedProperty.propertyPath).
            */
            public propertyPath : string
            /** The value being applied.
            */
            public value : string
            /** The value being applied when it is an object reference (which can not be represented as a string).
            */
            public objectReference : UnityEngine.Object
            public constructor ()
        }
        class ObjectReferenceKeyframe extends System.ValueType
        {
            protected [__keep_incompatibility]: never;
            public time : number
            public value : UnityEngine.Object
        }
        /** An AnimationClipCurveData object contains all the information needed to identify a specific curve in an AnimationClip. The curve animates a specific property of a component  material attached to a game object  animated bone.
        */
        class AnimationClipCurveData extends System.Object
        {
            protected [__keep_incompatibility]: never;
            /** The path of the game object / bone being animated.
            */
            public path : string
            /** The type of the component / material being animated.
            */
            public type : System.Type
            /** The name of the property being animated.
            */
            public propertyName : string
            /** The actual animation curve.
            */
            public curve : UnityEngine.AnimationCurve
            public constructor ()
            public constructor ($binding: UnityEditor.EditorCurveBinding)
        }
        /** Editor utility functions for modifying animation clips.
        */
        class AnimationUtility extends System.Object
        {
            protected [__keep_incompatibility]: never;
            /** Called when an animation curve, in an animation clip, is modified.
            */
            public static onCurveWasModified : UnityEditor.AnimationUtility.OnCurveWasModified
            /** Retrieves an array of animation clips associated with a GameObject or component.
            */
            public static GetAnimationClips ($gameObject: UnityEngine.GameObject) : System.Array$1<UnityEngine.AnimationClip>
            /** Sets the array of animation clips to be referenced in the Animation component.
            */
            public static SetAnimationClips ($animation: UnityEngine.Animation, $clips: System.Array$1<UnityEngine.AnimationClip>) : void
            /** Retrieves the animatable bindings for a specific GameObject.
            */
            public static GetAnimatableBindings ($targetObject: UnityEngine.GameObject, $root: UnityEngine.GameObject) : System.Array$1<UnityEditor.EditorCurveBinding>
            public static GetEditorCurveValueType ($root: UnityEngine.GameObject, $binding: UnityEditor.EditorCurveBinding) : System.Type
            /** Retrieves the float value that the binding points to.
            * @param $root The root GameObject of the animated hierarchy.
            * @param $binding The binding that defines the path and the properties of the value.
            * @param $data The resulting float value, if a value exists.
            * @returns Returns True if the value exists. False otherwise. 
            */
            public static GetFloatValue ($root: UnityEngine.GameObject, $binding: UnityEditor.EditorCurveBinding, $data: $Ref<number>) : boolean
            /** Retrieves the discrete integer value that the binding points to.
            * @param $root The root GameObject of the animated hierarchy.
            * @param $binding The binding that defines the path and the properties of the value.
            * @param $data The resulting integer value, if a value exists.
            * @returns Returns True if the value exists. False otherwise. 
            */
            public static GetDiscreteIntValue ($root: UnityEngine.GameObject, $binding: UnityEditor.EditorCurveBinding, $data: $Ref<number>) : boolean
            /** Retrieves the object value that the binding points to.
            * @param $root The root GameObject of the animated hierarchy.
            * @param $binding The binding that defines the path and the properties of the value.
            * @param $data The resulting object value, if a value exists.
            * @returns Returns True if the value exists. False otherwise. 
            */
            public static GetObjectReferenceValue ($root: UnityEngine.GameObject, $binding: UnityEditor.EditorCurveBinding, $data: $Ref<UnityEngine.Object>) : boolean
            /** Retrieves the animated object that the binding points to.
            */
            public static GetAnimatedObject ($root: UnityEngine.GameObject, $binding: UnityEditor.EditorCurveBinding) : UnityEngine.Object
            public static PropertyModificationToEditorCurveBinding ($modification: UnityEditor.PropertyModification, $gameObject: UnityEngine.GameObject, $binding: $Ref<UnityEditor.EditorCurveBinding>) : System.Type
            /** Retrieves the float curve bindings in an animation clip.
            */
            public static GetCurveBindings ($clip: UnityEngine.AnimationClip) : System.Array$1<UnityEditor.EditorCurveBinding>
            /** Retrieves the object reference curve bindings stored in the animation clip.
            */
            public static GetObjectReferenceCurveBindings ($clip: UnityEngine.AnimationClip) : System.Array$1<UnityEditor.EditorCurveBinding>
            /** Retrieves the object reference curve that the binding points to.
            * @returns Returns an array of keyframes. 
            */
            public static GetObjectReferenceCurve ($clip: UnityEngine.AnimationClip, $binding: UnityEditor.EditorCurveBinding) : System.Array$1<UnityEditor.ObjectReferenceKeyframe>
            /** Adds, modifies, or removes an object reference curve in an animation clip.
            * @param $clip The animation clip to modify.
            * @param $binding The bindings that define the paths and the properties of each curve.
            * @param $keyframes Array of Object reference values over time. Setting this to null will remove the curve.
            */
            public static SetObjectReferenceCurve ($clip: UnityEngine.AnimationClip, $binding: UnityEditor.EditorCurveBinding, $keyframes: System.Array$1<UnityEditor.ObjectReferenceKeyframe>) : void
            /** Adds, modifies, or removes object references curve in an animation clip.
            * @param $clip The animation clip to modify.
            * @param $bindings The bindings that define the paths and the properties of each curve.
            * @param $keyframes Array of Object reference arrays, one per binding.
            */
            public static SetObjectReferenceCurves ($clip: UnityEngine.AnimationClip, $bindings: System.Array$1<UnityEditor.EditorCurveBinding>, $keyframes: System.Array$1<System.Array$1<UnityEditor.ObjectReferenceKeyframe>>) : void
            /** Retrieves the float curve that the binding points to.
            */
            public static GetEditorCurve ($clip: UnityEngine.AnimationClip, $binding: UnityEditor.EditorCurveBinding) : UnityEngine.AnimationCurve
            /** Adds, modifies, or removes an editor float curve in an animation clip.
            * @param $clip The animation clip to modify.
            * @param $binding The binding that defines the path and the properties of the curve.
            * @param $curve The curve to add. Set to null to remove the curve.
            */
            public static SetEditorCurve ($clip: UnityEngine.AnimationClip, $binding: UnityEditor.EditorCurveBinding, $curve: UnityEngine.AnimationCurve) : void
            /** Adds, modifies, or removes multiple editor float curves in an animation clip.
            * @param $clip The animation clip to modify.
            * @param $binding The binding that defines the path and the properties of each curve.
            * @param $curves The curves to add. Setting curves in the array to null will remove these curves from the clip.
            */
            public static SetEditorCurves ($clip: UnityEngine.AnimationClip, $bindings: System.Array$1<UnityEditor.EditorCurveBinding>, $curves: System.Array$1<UnityEngine.AnimationCurve>) : void
            /** Retrieves the left tangent mode of the keyframe at a specific index.
            * @param $curve Curve to query.
            * @param $index Keyframe index.
            * @returns Returns the tangent mode. 
            */
            public static GetKeyLeftTangentMode ($curve: UnityEngine.AnimationCurve, $index: number) : UnityEditor.AnimationUtility.TangentMode
            /** Retrieves the right tangent mode of the keyframe at a specific index.
            * @param $curve Curve to query.
            * @param $index Keyframe index.
            * @returns Returns the tangent mode. 
            */
            public static GetKeyRightTangentMode ($curve: UnityEngine.AnimationCurve, $index: number) : UnityEditor.AnimationUtility.TangentMode
            /** Retrieves the broken tangent flag for a specfic keyframe.
            * @param $curve Curve to query.
            * @param $index Keyframe index.
            * @returns Broken flag at specified index. 
            */
            public static GetKeyBroken ($curve: UnityEngine.AnimationCurve, $index: number) : boolean
            public static SetKeyLeftTangentMode ($curve: UnityEngine.AnimationCurve, $index: number, $tangentMode: UnityEditor.AnimationUtility.TangentMode) : void
            public static SetKeyRightTangentMode ($curve: UnityEngine.AnimationCurve, $index: number, $tangentMode: UnityEditor.AnimationUtility.TangentMode) : void
            /** Change the specified keyframe broken tangent flag.
            * @param $curve The curve to modify.
            * @param $index Keyframe index.
            * @param $broken Broken flag.
            */
            public static SetKeyBroken ($curve: UnityEngine.AnimationCurve, $index: number, $broken: boolean) : void
            /** Retrieves all animation events associated with an animation clip.
            */
            public static GetAnimationEvents ($clip: UnityEngine.AnimationClip) : System.Array$1<UnityEngine.AnimationEvent>
            /** Replaces all animation events in the animation clip.
            */
            public static SetAnimationEvents ($clip: UnityEngine.AnimationClip, $events: System.Array$1<UnityEngine.AnimationEvent>) : void
            /** Retrieves the path from the root Transform to the target Transform.
            * @returns Returns a string that represents the path from the root Transform to the target Transform. 
            */
            public static CalculateTransformPath ($targetTransform: UnityEngine.Transform, $root: UnityEngine.Transform) : string
            public static GetAnimationClipSettings ($clip: UnityEngine.AnimationClip) : UnityEditor.AnimationClipSettings
            public static SetAnimationClipSettings ($clip: UnityEngine.AnimationClip, $srcClipInfo: UnityEditor.AnimationClipSettings) : void
            /** Sets the additive reference pose from referenceClip at time for animation clip clip.
            * @param $clip The animation clip to use.
            * @param $referenceClip The animation clip containing the reference pose.
            * @param $time The time that when the reference pose occurs in referenceClip.
            */
            public static SetAdditiveReferencePose ($clip: UnityEngine.AnimationClip, $referenceClip: UnityEngine.AnimationClip, $time: number) : void
            public static ConstrainToPolynomialCurve ($curve: UnityEngine.AnimationCurve) : void
            /** Converts EditorCurveBinding to GenericBinding.
            * @param $editorCurveBindings The EditorCurveBinding to be converted.
            * @returns Returns a GenericBinding. 
            */
            public static EditorCurveBindingsToGenericBindings ($editorCurveBindings: System.Array$1<UnityEditor.EditorCurveBinding>) : System.Array$1<UnityEngine.Animations.GenericBinding>
            public constructor ()
        }
        /** Animation mode for ModelImporter.
        */
        enum ModelImporterAnimationType
        { None = 0, Legacy = 1, Generic = 2, Human = 3 }
        /** Use the AnimationWindow class to select and edit Animation clips.
        */
        class AnimationWindow extends UnityEditor.EditorWindow implements UnityEditor.IHasCustomMenu
        {
            protected [__keep_incompatibility]: never;
            /** The animation clip selected in the Animation window.
            */
            public get animationClip(): UnityEngine.AnimationClip;
            public set animationClip(value: UnityEngine.AnimationClip);
            /** This property toggles previewing in the Animation window.
            */
            public get previewing(): boolean;
            public set previewing(value: boolean);
            /** True if Animation window can enable preview mode. False otherwise. (Read Only)
            */
            public get canPreview(): boolean;
            /** This property toggles recording in the Animation window.
            */
            public get recording(): boolean;
            public set recording(value: boolean);
            /** True if Animation window can enable recording mode. False otherwise. (Read Only)
            */
            public get canRecord(): boolean;
            /** This property toggles animation playback in the Animation window.
            */
            public get playing(): boolean;
            public set playing(value: boolean);
            /** The time value at which the Animation window playhead is located.
            */
            public get time(): number;
            public set time(value: number);
            /** The frame number at which the Animation window playhead is located.
            */
            public get frame(): number;
            public set frame(value: number);
            public AddItemsToMenu ($menu: UnityEditor.GenericMenu) : void
        }
        /** GenericMenu lets you create custom context menus and dropdown menus.
        */
        class GenericMenu extends System.Object
        {
            protected [__keep_incompatibility]: never;
            /** Allow the menu to have multiple items with the same name.
            */
            public get allowDuplicateNames(): boolean;
            public set allowDuplicateNames(value: boolean);
            public AddItem ($content: UnityEngine.GUIContent, $on: boolean, $func: UnityEditor.GenericMenu.MenuFunction) : void
            public AddItem ($content: UnityEngine.GUIContent, $on: boolean, $func: UnityEditor.GenericMenu.MenuFunction2, $userData: any) : void
            /** Add a disabled item to the menu.
            * @param $content The GUIContent to display as a disabled menu item.
            */
            public AddDisabledItem ($content: UnityEngine.GUIContent) : void
            /** Add a disabled item to the menu.
            * @param $content The GUIContent to display as a disabled menu item.
            * @param $on Specifies whether to show that the item is currently activated (i.e. a tick next to the item in the menu).
            */
            public AddDisabledItem ($content: UnityEngine.GUIContent, $on: boolean) : void
            /** Add a seperator item to the menu.
            * @param $path The path to the submenu, if adding a separator to a submenu. When adding a separator to the top level of a menu, use an empty string as the path.
            */
            public AddSeparator ($path: string) : void
            /** Get number of items in the menu.
            * @returns The number of items in the menu. 
            */
            public GetItemCount () : number
            /** Show the menu under the mouse when right-clicked.
            */
            public ShowAsContext () : void
            /** Show the menu at the given screen rect.
            * @param $position The position at which to show the menu.
            */
            public DropDown ($position: UnityEngine.Rect) : void
            public constructor ()
        }
        /** GizmoInfo contains information about the Scene View gizmo and icon for a component type.
        */
        class GizmoInfo extends System.Object implements System.IComparable
        {
            protected [__keep_incompatibility]: never;
            /** The display name for the type represented by this GizmoInfo.
            */
            public get name(): string;
            /** Defines whether a component type renders any gizmos in the Scene View.
            */
            public get hasGizmo(): boolean;
            /** Toggle gizmo visibility in the Scene View for components of this type.
            */
            public get gizmoEnabled(): boolean;
            public set gizmoEnabled(value: boolean);
            /** Defines whether a component type renders an icon in the Scene View.
            */
            public get hasIcon(): boolean;
            /** Toggle icon visibility in the Scene View for components of this type.
            */
            public get iconEnabled(): boolean;
            public set iconEnabled(value: boolean);
            /** The MonoBehaviour script asset corresponding to the component type represented by this GizmoInfo.
            */
            public get script(): UnityEngine.Object;
            /** A preview image for the component type.
            */
            public get thumb(): UnityEngine.Texture2D;
            /** Returns an integer value comparing the name property of two GizmoInfo types.
            * @param $obj The GizmoInfo to compare.
            * @returns Returns an integer value comparing the name property of two GizmoInfo types. 
            */
            public CompareTo ($obj: any) : number
        }
        /** A static class for interacting with the Scene View icons and gizmos for types.
        */
        class GizmoUtility extends System.Object
        {
            protected [__keep_incompatibility]: never;
            /** Control the size that 3D icons render in the Scene View.
            */
            public static get iconSize(): number;
            public static set iconSize(value: number);
            /** Determines whether icons in the Scene View are a fixed size (false) or scaled relative to distance from the camera and iconSize.
            */
            public static get use3dIcons(): boolean;
            public static set use3dIcons(value: boolean);
            /** Get a GizmoInfo for a type if it exists.
            * @param $type The type to get GizmoInfo for.
            * @param $info The output argument will contain a valid GizmoInfo when this function returns true.
            * @returns Returns true if Unity has a gizmo or icon registered for the requested type. 
            */
            public static TryGetGizmoInfo ($type: System.Type, $info: $Ref<UnityEditor.GizmoInfo>) : boolean
            /** Get GizmoInfo for all components with gizmos or icons in the project.
            * @returns A collection of GizmoInfo for all component types in the project. 
            */
            public static GetGizmoInfo () : System.Array$1<UnityEditor.GizmoInfo>
            /** Apply GizmoInfo.gizmoEnabled and GizmoInfo.iconEnabled for a GizmoInfo object.
            * @param $info The GizmoInfo to apply.
            * @param $addToRecentlyChanged Set true to append this component to the "Recently Changed" list in the Annotation Window.
            */
            public static ApplyGizmoInfo ($info: UnityEditor.GizmoInfo, $addToRecentlyChanged?: boolean) : void
            /** Enable or disable gizmo rendering in the Scene View for a component type. Gizmos are the simple lines and guides drawn by component editors. For example, the Camera frustum guidelines are gizmos.
            * @param $type The component type to render or hide gizmos.
            * @param $enabled Set true to render gizmos in the Scene View, false to hide.
            * @param $addToRecentlyChanged Set true to append this component to the "Recently Changed" list in the Annotation Window.
            */
            public static SetGizmoEnabled ($type: System.Type, $enabled: boolean, $addToRecentlyChanged?: boolean) : void
            /** Enable or disable icon rendering for all objects in the Scene View for a component type.
            * @param $type The component type to render or hide icons.
            * @param $enabled Set true to render icons for this component type in the Scene View, false to hide.
            */
            public static SetIconEnabled ($type: System.Type, $enabled: boolean) : void
        }
        /** Drawing modes for Handles.DrawCamera.
        */
        enum DrawCameraMode
        { UserDefined = -2147483648, Normal = -1, Textured = 0, Wireframe = 1, TexturedWire = 2, ShadowCascades = 3, RenderPaths = 4, AlphaChannel = 5, Overdraw = 6, Mipmaps = 7, DeferredDiffuse = 8, DeferredSpecular = 9, DeferredSmoothness = 10, DeferredNormal = 11, Charting = -12, RealtimeCharting = 12, Systems = 13, Albedo = -14, RealtimeAlbedo = 14, Emissive = -15, RealtimeEmissive = 15, Irradiance = -16, RealtimeIndirect = 16, Directionality = -17, RealtimeDirectionality = 17, Baked = -18, BakedLightmap = 18, Clustering = 19, LitClustering = 20, ValidateAlbedo = 21, ValidateMetalSpecular = 22, ShadowMasks = 23, LightOverlap = 24, BakedAlbedo = 25, BakedEmissive = 26, BakedDirectionality = 27, BakedTexelValidity = 28, BakedIndices = 29, BakedCharting = 30, SpriteMask = 31, BakedUVOverlap = 32, TextureStreaming = 33, BakedLightmapCulling = 34, GIContributorsReceivers = 35 }
        /** Class used to implement content for a popup window.
        */
        class PopupWindowContent extends System.Object
        {
            protected [__keep_incompatibility]: never;
            /** The EditorWindow that contains the popup content.
            */
            public get editorWindow(): UnityEditor.EditorWindow;
            /** Callback for drawing GUI controls for the popup window.
            * @param $rect The rectangle to draw the GUI inside.
            */
            public OnGUI ($rect: UnityEngine.Rect) : void
            /** The size of the popup window.
            * @returns The size of the Popup window. 
            */
            public GetWindowSize () : UnityEngine.Vector2
            /** Callback when the popup window is opened.
            */
            public OnOpen () : void
            /** Callback when the popup window is closed.
            */
            public OnClose () : void
        }
        /** Use this class to instantiate a SceneViewCameraWindow window.
        */
        class SceneViewCameraWindow extends UnityEditor.PopupWindowContent
        {
            protected [__keep_incompatibility]: never;
            public static add_additionalSettingsGui ($value: System.Action$1<UnityEditor.SceneView>) : void
            public static remove_additionalSettingsGui ($value: System.Action$1<UnityEditor.SceneView>) : void
            public constructor ($sceneView: UnityEditor.SceneView)
        }
        /** Helpers for builtin arrays.
        */
        class ArrayUtility extends System.Object
        {
            protected [__keep_incompatibility]: never;
        }
        /** This class has event dispatchers for assembly reload events.
        */
        class AssemblyReloadEvents extends System.Object
        {
            protected [__keep_incompatibility]: never;
            public static add_beforeAssemblyReload ($value: UnityEditor.AssemblyReloadEvents.AssemblyReloadCallback) : void
            public static remove_beforeAssemblyReload ($value: UnityEditor.AssemblyReloadEvents.AssemblyReloadCallback) : void
            public static add_afterAssemblyReload ($value: UnityEditor.AssemblyReloadEvents.AssemblyReloadCallback) : void
            public static remove_afterAssemblyReload ($value: UnityEditor.AssemblyReloadEvents.AssemblyReloadCallback) : void
        }
        /** An Interface for accessing assets and performing operations on assets.
        */
        class AssetDatabase extends System.Object
        {
            protected [__keep_incompatibility]: never;
            /** Callback raised whenever a package import successfully completes that lists the items selected to be imported.
            */
            public static onImportPackageItemsCompleted : System.Action$1<System.Array$1<string>>
            /** Changes during Refresh if anything has changed that can invalidate any artifact.
            */
            public static get GlobalArtifactDependencyVersion(): number;
            /** Changes whenever a new artifact is added to the artifact database.
            */
            public static get GlobalArtifactProcessedVersion(): number;
            /** Gets the refresh import mode currently in use by the asset database.
            */
            public static get ActiveRefreshImportMode(): UnityEditor.AssetDatabase.RefreshImportMode;
            public static set ActiveRefreshImportMode(value: UnityEditor.AssetDatabase.RefreshImportMode);
            /** The desired number of processes to use when importing assets, during an asset database refresh.
            */
            public static get DesiredWorkerCount(): number;
            public static set DesiredWorkerCount(value: number);
            public static add_importPackageStarted ($value: UnityEditor.AssetDatabase.ImportPackageCallback) : void
            public static remove_importPackageStarted ($value: UnityEditor.AssetDatabase.ImportPackageCallback) : void
            public static add_importPackageCompleted ($value: UnityEditor.AssetDatabase.ImportPackageCallback) : void
            public static remove_importPackageCompleted ($value: UnityEditor.AssetDatabase.ImportPackageCallback) : void
            public static add_importPackageCancelled ($value: UnityEditor.AssetDatabase.ImportPackageCallback) : void
            public static remove_importPackageCancelled ($value: UnityEditor.AssetDatabase.ImportPackageCallback) : void
            public static add_importPackageFailed ($value: UnityEditor.AssetDatabase.ImportPackageFailedCallback) : void
            public static remove_importPackageFailed ($value: UnityEditor.AssetDatabase.ImportPackageFailedCallback) : void
            public static CanOpenForEdit ($assetOrMetaFilePaths: System.Array$1<string>, $outNotEditablePaths: System.Collections.Generic.List$1<string>, $statusQueryOptions?: UnityEditor.StatusQueryOptions) : void
            public static IsOpenForEdit ($assetOrMetaFilePaths: System.Array$1<string>, $outNotEditablePaths: System.Collections.Generic.List$1<string>, $statusQueryOptions?: UnityEditor.StatusQueryOptions) : void
            /** Makes a file open for editing in version control.
            * @param $path Specifies the path to a file relative to the project root.
            * @returns true if Unity successfully made the file editable in the version control system. Otherwise, returns false. 
            */
            public static MakeEditable ($path: string) : boolean
            public static MakeEditable ($paths: System.Array$1<string>, $prompt?: string, $outNotEditablePaths?: System.Collections.Generic.List$1<string>) : boolean
            /** Search the asset database using the search filter string.
            * @param $filter The filter string can contain search data.  See below for details about this string.
            * @param $searchInFolders The folders where the search will start.
            * @returns Array of matching asset. Note that GUIDs will be returned. If no matching assets were found, returns empty array. 
            */
            public static FindAssets ($filter: string) : System.Array$1<string>
            /** Search the asset database using the search filter string.
            * @param $filter The filter string can contain search data.  See below for details about this string.
            * @param $searchInFolders The folders where the search will start.
            * @returns Array of matching asset. Note that GUIDs will be returned. If no matching assets were found, returns empty array. 
            */
            public static FindAssets ($filter: string, $searchInFolders: System.Array$1<string>) : System.Array$1<string>
            /** Get AssetDatabase specific information about a folder.
            * @param $path A project relative or absolute path to a file or a folder.
            * @param $rootFolder This value will be set to true if the given path is a root folder in the AssetDatabase.
            * @param $immutable This value will be true if the given file or folder can't be modified by the AssetDatabase .
            * @returns Returns true if the given path is in a folder managed by the AssetDatabase, false otherwise. 
            */
            public static TryGetAssetFolderInfo ($path: string, $rootFolder: $Ref<boolean>, $immutable: $Ref<boolean>) : boolean
            /** Is object an asset?
            */
            public static Contains ($obj: UnityEngine.Object) : boolean
            /** Is object an asset?
            */
            public static Contains ($instanceID: number) : boolean
            /** Creates a new folder, in the specified parent folder.
            The parent folder string must start with the "Assets" folder, and all folders within the parent folder string must already exist. For example, when specifying "AssetsParentFolder1Parentfolder2/", the new folder will be created in "ParentFolder2" only if ParentFolder1 and ParentFolder2 already exist.
            * @param $parentFolder The path to the parent folder. Must start with "Assets/".
            * @param $newFolderName The name of the new folder.
            * @returns The GUID of the newly created folder, if the folder was created successfully. Otherwise returns an empty string. 
            */
            public static CreateFolder ($parentFolder: string, $newFolderName: string) : string
            /** Is asset a main asset in the project window?
            */
            public static IsMainAsset ($obj: UnityEngine.Object) : boolean
            /** Is asset a main asset in the project window?
            */
            public static IsMainAsset ($instanceID: number) : boolean
            /** Does the asset form part of another asset?
            * @param $obj The asset Object to query.
            * @param $instanceID Instance ID of the asset Object to query.
            */
            public static IsSubAsset ($obj: UnityEngine.Object) : boolean
            /** Does the asset form part of another asset?
            * @param $obj The asset Object to query.
            * @param $instanceID Instance ID of the asset Object to query.
            */
            public static IsSubAsset ($instanceID: number) : boolean
            /** Determines whether the Asset is a foreign Asset.
            */
            public static IsForeignAsset ($obj: UnityEngine.Object) : boolean
            /** Determines whether the Asset is a foreign Asset.
            */
            public static IsForeignAsset ($instanceID: number) : boolean
            /** Determines whether the Asset is a native Asset.
            */
            public static IsNativeAsset ($obj: UnityEngine.Object) : boolean
            /** Determines whether the Asset is a native Asset.
            */
            public static IsNativeAsset ($instanceID: number) : boolean
            /** Checks how many unloadable ScriptableObject instances are present in the specified asset.
            * @param $assetPath The path to the asset file to check.
            * @returns The number of ScriptableObject instances in the file which are missing their associated scripts. 
            */
            public static GetScriptableObjectsWithMissingScriptCount ($assetPath: string) : number
            /** Removes any ScriptableObject instances from the given asset file which cannot be loaded because their scripts could not be found.
            * @param $assetPath The path to the asset file to check.
            * @returns The number of ScriptableObject-derived objects in the file which were removed. 
            */
            public static RemoveScriptableObjectsWithMissingScript ($assetPath: string) : number
            /** Gets the IP address of the Cache Server currently in use by the Editor.
            * @returns Returns a string representation of the current Cache Server IP address. 
            */
            public static GetCurrentCacheServerIp () : string
            /** Creates a new unique path for an asset.
            */
            public static GenerateUniqueAssetPath ($path: string) : string
            /** Places the Asset Database into a state that temporarily prevents automatic import, allowing you to group several asset imports together into one larger import.
            */
            public static StartAssetEditing () : void
            /** Ends the Asset Database's temporary paused state, allowing it to resume normal automatic imports.
            */
            public static StopAssetEditing () : void
            /** Calling this function will release file handles internally cached by Unity. This allows modifying asset or meta files safely thus avoiding potential file sharing IO errors.
            */
            public static ReleaseCachedFileHandles () : void
            /** Checks if an asset file can be moved from one folder to another. (Without actually moving the file).
            * @param $oldPath The path where the asset currently resides.
            * @param $newPath The path which the asset should be moved to.
            * @returns An empty string if the asset can be moved, otherwise an error message. 
            */
            public static ValidateMoveAsset ($oldPath: string, $newPath: string) : string
            /** Move an asset file (or folder) from one folder to another.
            * @param $oldPath The path where the asset currently resides.
            * @param $newPath The path which the asset should be moved to.
            * @returns An empty string if the asset has been successfully moved, otherwise an error message. 
            */
            public static MoveAsset ($oldPath: string, $newPath: string) : string
            /** Creates an external Asset from an object (such as a Material) by extracting it from within an imported asset (such as an FBX file).
            * @param $asset The sub-asset to extract.
            * @param $newPath The file path of the new Asset.
            * @returns An empty string if Unity has successfully extracted the Asset, or an error message if not. 
            */
            public static ExtractAsset ($asset: UnityEngine.Object, $newPath: string) : string
            /** Rename an asset file.
            * @param $pathName The path where the asset currently resides.
            * @param $newName The new name which should be given to the asset.
            * @returns An empty string, if the asset has been successfully renamed, otherwise an error message. 
            */
            public static RenameAsset ($pathName: string, $newName: string) : string
            /** Moves the specified asset  or folder to the OS trash.
            * @param $path Project relative path of the asset or folder to be deleted.
            * @returns Returns true if the asset has been successfully removed, false if it doesn't exist or couldn't be removed. 
            */
            public static MoveAssetToTrash ($path: string) : boolean
            public static MoveAssetsToTrash ($paths: System.Array$1<string>, $outFailedPaths: System.Collections.Generic.List$1<string>) : boolean
            /** Deletes the specified asset or folder.
            * @param $path Project relative path of the asset or folder to be deleted.
            * @returns Returns true if the asset has been successfully removed, false if it doesn't exist or couldn't be removed. 
            */
            public static DeleteAsset ($path: string) : boolean
            public static DeleteAssets ($paths: System.Array$1<string>, $outFailedPaths: System.Collections.Generic.List$1<string>) : boolean
            /** Import asset at path.
            */
            public static ImportAsset ($path: string) : void
            /** Import asset at path.
            */
            public static ImportAsset ($path: string, $options: UnityEditor.ImportAssetOptions) : void
            /** Duplicates the asset at path and stores it at newPath.
            * @param $path Filesystem path of the source asset.
            * @param $newPath Filesystem path of the new asset to create.
            * @returns Returns true if the copy operation is successful or false if part of the process fails. 
            */
            public static CopyAsset ($path: string, $newPath: string) : boolean
            /** Duplicates assets in paths and stores them in newPaths.
            * @param $paths Filesystem paths of the source assets.
            * @param $newPaths Filesystem paths of the new assets to create.
            * @returns Returns true if the copy operation is successful or false if part of the process fails. 
            */
            public static CopyAssets ($paths: System.Array$1<string>, $newPaths: System.Array$1<string>) : boolean
            /** Writes the import settings to disk.
            */
            public static WriteImportSettingsIfDirty ($path: string) : boolean
            /** Given a path to a directory in the Assets folder, relative to the project folder, this method will return an array of all its subdirectories.
            */
            public static GetSubFolders ($path: string) : System.Array$1<string>
            /** Given a path to a folder, returns true if it exists, false otherwise.
            * @param $path The path to the folder.
            * @returns Returns true if the folder exists. 
            */
            public static IsValidFolder ($path: string) : boolean
            /** Creates a new native Unity asset.
            * @param $asset Object to use in creating the asset.
            * @param $path Filesystem path for the new asset.
            */
            public static CreateAsset ($asset: UnityEngine.Object, $path: string) : void
            /** Adds objectToAdd to an existing asset at path.
            * @param $objectToAdd Object to add to the existing asset.
            * @param $path Filesystem path to the destination asset.
            */
            public static AddObjectToAsset ($objectToAdd: UnityEngine.Object, $path: string) : void
            /** Adds objectToAdd to an existing asset identified by assetObject.
            * @param $objectToAdd Object to add to the existing asset.
            * @param $assetObject Destination asset.
            */
            public static AddObjectToAsset ($objectToAdd: UnityEngine.Object, $assetObject: UnityEngine.Object) : void
            /** Specifies which object in the asset file should become the main object after the next import.
            * @param $mainObject The object to become the main object.
            * @param $assetPath Path to the asset file.
            */
            public static SetMainObject ($mainObject: UnityEngine.Object, $assetPath: string) : void
            /** Returns the path name relative to the project folder where the asset is stored.
            * @param $instanceID The instance ID of the asset.
            * @param $assetObject A reference to the asset.
            * @returns The asset path name, or null, or an empty string if the asset does not exist. 
            */
            public static GetAssetPath ($assetObject: UnityEngine.Object) : string
            /** Returns the path name relative to the project folder where the asset is stored.
            * @param $instanceID The instance ID of the asset.
            * @param $assetObject A reference to the asset.
            * @returns The asset path name, or null, or an empty string if the asset does not exist. 
            */
            public static GetAssetPath ($instanceID: number) : string
            /** Returns the path name relative to the project folder where the asset is stored.
            */
            public static GetAssetOrScenePath ($assetObject: UnityEngine.Object) : string
            /** Gets the path to the text .meta file associated with an asset.
            * @param $path The path to the asset.
            * @returns The path to the .meta text file or an empty string if the file does not exist. 
            */
            public static GetTextMetaFilePathFromAssetPath ($path: string) : string
            /** Gets the path to the asset file associated with a text .meta file.
            */
            public static GetAssetPathFromTextMetaFilePath ($path: string) : string
            /** Returns the first asset object of type type at given path assetPath.
            * @param $assetPath Path of the asset to load.
            * @param $type Data type of the asset.
            * @returns The asset matching the parameters. 
            */
            public static LoadAssetAtPath ($assetPath: string, $type: System.Type) : UnityEngine.Object
            /** Returns the main asset object at assetPath.
            The "main" Asset is the Asset at the root of a hierarchy (such as a Maya file which may contain multiples meshes and GameObjects).
            * @param $assetPath Filesystem path of the asset to load.
            */
            public static LoadMainAssetAtPath ($assetPath: string) : UnityEngine.Object
            public static InstanceIDsToGUIDs ($instanceIDs: Unity.Collections.NativeArray$1<number>, $guidsOut: Unity.Collections.NativeArray$1<UnityEditor.GUID>) : void
            /** Returns the type of the main asset object at assetPath.
            * @param $assetPath Filesystem path of the asset to load.
            */
            public static GetMainAssetTypeAtPath ($assetPath: string) : System.Type
            /** Returns the type of the main asset object with guid.
            * @param $guid The guid of the asset.
            */
            public static GetMainAssetTypeFromGUID ($guid: UnityEditor.GUID) : System.Type
            /** Gets an object's type from an Asset path and a local file identifier.
            * @param $assetPath The Asset's path.
            * @param $localIdentifierInFile The object's local file identifier.
            * @returns The object's type. 
            */
            public static GetTypeFromPathAndFileID ($assetPath: string, $localIdentifierInFile: bigint) : System.Type
            /** Returns true if the main asset object at assetPath is loaded in memory.
            * @param $assetPath Filesystem path of the asset to load.
            */
            public static IsMainAssetAtPathLoaded ($assetPath: string) : boolean
            /** Returns all sub Assets at assetPath.
            */
            public static LoadAllAssetRepresentationsAtPath ($assetPath: string) : System.Array$1<UnityEngine.Object>
            /** Returns an array of all Assets at assetPath.
            * @param $assetPath Filesystem path to the asset.
            */
            public static LoadAllAssetsAtPath ($assetPath: string) : System.Array$1<UnityEngine.Object>
            public static GetAllAssetPaths () : System.Array$1<string>
            public static Refresh () : void
            /** Import any changed assets.
            */
            public static Refresh ($options: UnityEditor.ImportAssetOptions) : void
            /** Checks if Unity can open an asset in the Editor.
            * @param $instanceID The instance ID of the asset.
            * @returns Returns true if Unity can successfully open the asset in the Editor, otherwise returns false. 
            */
            public static CanOpenAssetInEditor ($instanceID: number) : boolean
            /** Opens the asset with associated application.
            */
            public static OpenAsset ($instanceID: number) : boolean
            /** Opens the asset with associated application.
            */
            public static OpenAsset ($instanceID: number, $lineNumber: number) : boolean
            /** Opens the asset with associated application.
            */
            public static OpenAsset ($instanceID: number, $lineNumber: number, $columnNumber: number) : boolean
            /** Opens the asset with associated application.
            */
            public static OpenAsset ($target: UnityEngine.Object) : boolean
            /** Opens the asset with associated application.
            */
            public static OpenAsset ($target: UnityEngine.Object, $lineNumber: number) : boolean
            /** Opens the asset with associated application.
            */
            public static OpenAsset ($target: UnityEngine.Object, $lineNumber: number, $columnNumber: number) : boolean
            /** Opens the asset(s) with associated application(s).
            */
            public static OpenAsset ($objects: System.Array$1<UnityEngine.Object>) : boolean
            /** Gets the corresponding asset path for the supplied GUID, or an empty string if the GUID can't be found.
            * @param $guid The GUID of an asset.
            * @returns Path of the asset relative to the project folder. 
            */
            public static GUIDToAssetPath ($guid: string) : string
            /** Gets the corresponding asset path for the supplied GUID, or an empty string if the GUID can't be found.
            * @param $guid The GUID of an asset.
            * @returns Path of the asset relative to the project folder. 
            */
            public static GUIDToAssetPath ($guid: UnityEditor.GUID) : string
            /** Get the GUID for the asset at path.
            * @param $path Filesystem path for the asset. All paths are relative to the project folder.
            * @returns The GUID of the asset. An all-zero GUID denotes an invalid asset path. 
            */
            public static GUIDFromAssetPath ($path: string) : UnityEditor.GUID
            /** Get the GUID for the asset at path.
            * @param $path Filesystem path for the asset.
            * @param $options Specifies whether this method should return a GUID for recently deleted assets. The default value is AssetPathToGUIDOptions.IncludeRecentlyDeletedAssets.
            * @returns GUID. 
            */
            public static AssetPathToGUID ($path: string) : string
            /** Get the GUID for the asset at path.
            * @param $path Filesystem path for the asset.
            * @param $options Specifies whether this method should return a GUID for recently deleted assets. The default value is AssetPathToGUIDOptions.IncludeRecentlyDeletedAssets.
            * @returns GUID. 
            */
            public static AssetPathToGUID ($path: string, $options: UnityEditor.AssetPathToGUIDOptions) : string
            /** Check whether an asset exists at the given path in the database.
            * @returns Returns true if the asset exists, false if not. 
            */
            public static AssetPathExists ($path: string) : boolean
            /** Returns the hash of all the dependencies of an asset.
            * @param $path Path to the asset.
            * @param $guid GUID of the asset.
            * @returns Aggregate hash. 
            */
            public static GetAssetDependencyHash ($guid: UnityEditor.GUID) : UnityEngine.Hash128
            /** Returns the hash of all the dependencies of an asset.
            * @param $path Path to the asset.
            * @param $guid GUID of the asset.
            * @returns Aggregate hash. 
            */
            public static GetAssetDependencyHash ($path: string) : UnityEngine.Hash128
            /** Writes all unsaved asset changes to disk.
            */
            public static SaveAssets () : void
            /** Writes all unsaved changes to the specified asset to disk.
            * @param $obj The asset object to be saved, if dirty.
            * @param $guid The guid of the asset to be saved, if dirty.
            */
            public static SaveAssetIfDirty ($guid: UnityEditor.GUID) : void
            /** Writes all unsaved changes to the specified asset to disk.
            * @param $obj The asset object to be saved, if dirty.
            * @param $guid The guid of the asset to be saved, if dirty.
            */
            public static SaveAssetIfDirty ($obj: UnityEngine.Object) : void
            /** Retrieves an icon for the asset at the given asset path.
            */
            public static GetCachedIcon ($path: string) : UnityEngine.Texture
            /** Replaces that list of labels on an asset.
            */
            public static SetLabels ($obj: UnityEngine.Object, $labels: System.Array$1<string>) : void
            public static GetLabels ($guid: UnityEditor.GUID) : System.Array$1<string>
            /** Returns all labels attached to a given asset.
            */
            public static GetLabels ($obj: UnityEngine.Object) : System.Array$1<string>
            /** Removes all labels attached to an asset.
            */
            public static ClearLabels ($obj: UnityEngine.Object) : void
            /** Return all the AssetBundle names in the asset database.
            * @returns Array of asset bundle names. 
            */
            public static GetAllAssetBundleNames () : System.Array$1<string>
            /** Return all the unused assetBundle names in the asset database.
            */
            public static GetUnusedAssetBundleNames () : System.Array$1<string>
            /** Remove the assetBundle name from the asset database. The forceRemove flag is used to indicate if you want to remove it even it's in use.
            * @param $assetBundleName The assetBundle name you want to remove.
            * @param $forceRemove Flag to indicate if you want to remove the assetBundle name even it's in use.
            */
            public static RemoveAssetBundleName ($assetBundleName: string, $forceRemove: boolean) : boolean
            /** Remove all the unused assetBundle names in the asset database.
            */
            public static RemoveUnusedAssetBundleNames () : void
            /** Returns an array containing the paths of all assets marked with the specified Asset Bundle name.
            */
            public static GetAssetPathsFromAssetBundle ($assetBundleName: string) : System.Array$1<string>
            /** Get the Asset paths for all Assets tagged with assetBundleName and
            named assetName.
            */
            public static GetAssetPathsFromAssetBundleAndAssetName ($assetBundleName: string, $assetName: string) : System.Array$1<string>
            /** Returns the name of the AssetBundle that a given asset belongs to.
            * @param $assetPath The asset's path.
            * @returns Returns the name of the AssetBundle that a given asset belongs to. See the method description for more details. 
            */
            public static GetImplicitAssetBundleName ($assetPath: string) : string
            /** Returns the name of the AssetBundle Variant that a given asset belongs to.
            * @param $assetPath The asset's path.
            * @returns Returns the name of the AssetBundle Variant that a given asset belongs to. See the method description for more details. 
            */
            public static GetImplicitAssetBundleVariantName ($assetPath: string) : string
            /** Given an assetBundleName, returns the list of AssetBundles that it depends on.
            * @param $assetBundleName The name of the AssetBundle for which dependencies are required.
            * @param $recursive If false, returns only AssetBundles which are direct dependencies of the input; if true, includes all indirect dependencies of the input.
            * @returns The names of all AssetBundles that the input depends on. 
            */
            public static GetAssetBundleDependencies ($assetBundleName: string, $recursive: boolean) : System.Array$1<string>
            /** Returns an array of all the assets that are dependencies of the asset at the specified pathName.
            Note: GetDependencies() gets the Assets that are referenced by other Assets. For example, a Scene could contain many GameObjects with a Material attached to them. In this case,  GetDependencies() will return the path to the Material Assets, but not the GameObjects as those are not Assets on your disk.
            * @param $pathName The path to the asset for which dependencies are required.
            * @param $recursive Controls whether this method recursively checks and returns all dependencies including indirect dependencies (when set to true), or whether it only returns direct dependencies (when set to false).
            * @returns The paths of all assets that the input depends on. 
            */
            public static GetDependencies ($pathName: string) : System.Array$1<string>
            /** Returns an array of all the assets that are dependencies of the asset at the specified pathName.
            Note: GetDependencies() gets the Assets that are referenced by other Assets. For example, a Scene could contain many GameObjects with a Material attached to them. In this case,  GetDependencies() will return the path to the Material Assets, but not the GameObjects as those are not Assets on your disk.
            * @param $pathName The path to the asset for which dependencies are required.
            * @param $recursive Controls whether this method recursively checks and returns all dependencies including indirect dependencies (when set to true), or whether it only returns direct dependencies (when set to false).
            * @returns The paths of all assets that the input depends on. 
            */
            public static GetDependencies ($pathName: string, $recursive: boolean) : System.Array$1<string>
            /** Returns an array of the paths of assets that are dependencies of all the assets in the list of pathNames that you provide.
            Note: GetDependencies() gets the Assets that are referenced by other Assets. For example, a Scene could contain many GameObjects with a Material attached to them. In this case,  GetDependencies() will return the path to the Material Assets, but not the GameObjects as those are not Assets on your disk.
            * @param $pathNames The path to the assets for which dependencies are required.
            * @param $recursive Controls whether this method recursively checks and returns all dependencies including indirect dependencies (when set to true), or whether it only returns direct dependencies (when set to false).
            * @returns The paths of all assets that the input depends on. 
            */
            public static GetDependencies ($pathNames: System.Array$1<string>) : System.Array$1<string>
            /** Returns an array of the paths of assets that are dependencies of all the assets in the list of pathNames that you provide.
            Note: GetDependencies() gets the Assets that are referenced by other Assets. For example, a Scene could contain many GameObjects with a Material attached to them. In this case,  GetDependencies() will return the path to the Material Assets, but not the GameObjects as those are not Assets on your disk.
            * @param $pathNames The path to the assets for which dependencies are required.
            * @param $recursive Controls whether this method recursively checks and returns all dependencies including indirect dependencies (when set to true), or whether it only returns direct dependencies (when set to false).
            * @returns The paths of all assets that the input depends on. 
            */
            public static GetDependencies ($pathNames: System.Array$1<string>, $recursive: boolean) : System.Array$1<string>
            /** Exports the assets identified by assetPathNames to a unitypackage file in fileName.
            */
            public static ExportPackage ($assetPathName: string, $fileName: string) : void
            /** Exports the assets identified by assetPathNames to a unitypackage file in fileName.
            */
            public static ExportPackage ($assetPathName: string, $fileName: string, $flags: UnityEditor.ExportPackageOptions) : void
            /** Exports the assets identified by assetPathNames to a unitypackage file in fileName.
            */
            public static ExportPackage ($assetPathNames: System.Array$1<string>, $fileName: string) : void
            /** Exports the assets identified by assetPathNames to a unitypackage file in fileName.
            */
            public static ExportPackage ($assetPathNames: System.Array$1<string>, $fileName: string, $flags: UnityEditor.ExportPackageOptions) : void
            /** Query whether an Asset file can be opened for editing in version control and is not exclusively locked by another user or otherwise unavailable.
            * @param $assetObject Object representing the asset whose status you wish to query.
            * @param $assetOrMetaFilePath Path to the asset file or its .meta file on disk, relative to project folder.
            * @param $message Returns a reason for the asset not being available for edit.
            * @param $statusOptions Options for how the version control system should be queried. These options can effect the speed and accuracy of the query. Default is StatusQueryOptions.UseCachedIfPossible.
            * @returns True if the asset is considered available for edit by the selected version control system. 
            */
            public static CanOpenForEdit ($assetObject: UnityEngine.Object) : boolean
            /** Query whether an Asset file can be opened for editing in version control and is not exclusively locked by another user or otherwise unavailable.
            * @param $assetObject Object representing the asset whose status you wish to query.
            * @param $assetOrMetaFilePath Path to the asset file or its .meta file on disk, relative to project folder.
            * @param $message Returns a reason for the asset not being available for edit.
            * @param $statusOptions Options for how the version control system should be queried. These options can effect the speed and accuracy of the query. Default is StatusQueryOptions.UseCachedIfPossible.
            * @returns True if the asset is considered available for edit by the selected version control system. 
            */
            public static CanOpenForEdit ($assetObject: UnityEngine.Object, $statusOptions: UnityEditor.StatusQueryOptions) : boolean
            /** Query whether an Asset file can be opened for editing in version control and is not exclusively locked by another user or otherwise unavailable.
            * @param $assetObject Object representing the asset whose status you wish to query.
            * @param $assetOrMetaFilePath Path to the asset file or its .meta file on disk, relative to project folder.
            * @param $message Returns a reason for the asset not being available for edit.
            * @param $statusOptions Options for how the version control system should be queried. These options can effect the speed and accuracy of the query. Default is StatusQueryOptions.UseCachedIfPossible.
            * @returns True if the asset is considered available for edit by the selected version control system. 
            */
            public static CanOpenForEdit ($assetOrMetaFilePath: string) : boolean
            /** Query whether an Asset file can be opened for editing in version control and is not exclusively locked by another user or otherwise unavailable.
            * @param $assetObject Object representing the asset whose status you wish to query.
            * @param $assetOrMetaFilePath Path to the asset file or its .meta file on disk, relative to project folder.
            * @param $message Returns a reason for the asset not being available for edit.
            * @param $statusOptions Options for how the version control system should be queried. These options can effect the speed and accuracy of the query. Default is StatusQueryOptions.UseCachedIfPossible.
            * @returns True if the asset is considered available for edit by the selected version control system. 
            */
            public static CanOpenForEdit ($assetOrMetaFilePath: string, $statusOptions: UnityEditor.StatusQueryOptions) : boolean
            /** Query whether an Asset file can be opened for editing in version control and is not exclusively locked by another user or otherwise unavailable.
            * @param $assetObject Object representing the asset whose status you wish to query.
            * @param $assetOrMetaFilePath Path to the asset file or its .meta file on disk, relative to project folder.
            * @param $message Returns a reason for the asset not being available for edit.
            * @param $statusOptions Options for how the version control system should be queried. These options can effect the speed and accuracy of the query. Default is StatusQueryOptions.UseCachedIfPossible.
            * @returns True if the asset is considered available for edit by the selected version control system. 
            */
            public static CanOpenForEdit ($assetObject: UnityEngine.Object, $message: $Ref<string>) : boolean
            /** Query whether an Asset file can be opened for editing in version control and is not exclusively locked by another user or otherwise unavailable.
            * @param $assetObject Object representing the asset whose status you wish to query.
            * @param $assetOrMetaFilePath Path to the asset file or its .meta file on disk, relative to project folder.
            * @param $message Returns a reason for the asset not being available for edit.
            * @param $statusOptions Options for how the version control system should be queried. These options can effect the speed and accuracy of the query. Default is StatusQueryOptions.UseCachedIfPossible.
            * @returns True if the asset is considered available for edit by the selected version control system. 
            */
            public static CanOpenForEdit ($assetObject: UnityEngine.Object, $message: $Ref<string>, $statusOptions: UnityEditor.StatusQueryOptions) : boolean
            /** Query whether an Asset file can be opened for editing in version control and is not exclusively locked by another user or otherwise unavailable.
            * @param $assetObject Object representing the asset whose status you wish to query.
            * @param $assetOrMetaFilePath Path to the asset file or its .meta file on disk, relative to project folder.
            * @param $message Returns a reason for the asset not being available for edit.
            * @param $statusOptions Options for how the version control system should be queried. These options can effect the speed and accuracy of the query. Default is StatusQueryOptions.UseCachedIfPossible.
            * @returns True if the asset is considered available for edit by the selected version control system. 
            */
            public static CanOpenForEdit ($assetOrMetaFilePath: string, $message: $Ref<string>) : boolean
            /** Query whether an Asset file can be opened for editing in version control and is not exclusively locked by another user or otherwise unavailable.
            * @param $assetObject Object representing the asset whose status you wish to query.
            * @param $assetOrMetaFilePath Path to the asset file or its .meta file on disk, relative to project folder.
            * @param $message Returns a reason for the asset not being available for edit.
            * @param $statusOptions Options for how the version control system should be queried. These options can effect the speed and accuracy of the query. Default is StatusQueryOptions.UseCachedIfPossible.
            * @returns True if the asset is considered available for edit by the selected version control system. 
            */
            public static CanOpenForEdit ($assetOrMetaFilePath: string, $message: $Ref<string>, $statusOptions: UnityEditor.StatusQueryOptions) : boolean
            /** Query whether an Asset file is open for editing in version control.
            * @param $assetObject Object representing the asset whose status you wish to query.
            * @param $assetOrMetaFilePath Path to the asset file or its .meta file on disk, relative to project folder.
            * @param $message Returns a reason for the asset not being open for edit.
            * @param $statusOptions Options for how the version control system should be queried. These options can effect the speed and accuracy of the query. Default is StatusQueryOptions.UseCachedIfPossible.
            * @returns True if the asset is considered open for edit by the selected version control system. 
            */
            public static IsOpenForEdit ($assetObject: UnityEngine.Object) : boolean
            /** Query whether an Asset file is open for editing in version control.
            * @param $assetObject Object representing the asset whose status you wish to query.
            * @param $assetOrMetaFilePath Path to the asset file or its .meta file on disk, relative to project folder.
            * @param $message Returns a reason for the asset not being open for edit.
            * @param $statusOptions Options for how the version control system should be queried. These options can effect the speed and accuracy of the query. Default is StatusQueryOptions.UseCachedIfPossible.
            * @returns True if the asset is considered open for edit by the selected version control system. 
            */
            public static IsOpenForEdit ($assetObject: UnityEngine.Object, $statusOptions: UnityEditor.StatusQueryOptions) : boolean
            /** Query whether an Asset file is open for editing in version control.
            * @param $assetObject Object representing the asset whose status you wish to query.
            * @param $assetOrMetaFilePath Path to the asset file or its .meta file on disk, relative to project folder.
            * @param $message Returns a reason for the asset not being open for edit.
            * @param $statusOptions Options for how the version control system should be queried. These options can effect the speed and accuracy of the query. Default is StatusQueryOptions.UseCachedIfPossible.
            * @returns True if the asset is considered open for edit by the selected version control system. 
            */
            public static IsOpenForEdit ($assetOrMetaFilePath: string) : boolean
            /** Query whether an Asset file is open for editing in version control.
            * @param $assetObject Object representing the asset whose status you wish to query.
            * @param $assetOrMetaFilePath Path to the asset file or its .meta file on disk, relative to project folder.
            * @param $message Returns a reason for the asset not being open for edit.
            * @param $statusOptions Options for how the version control system should be queried. These options can effect the speed and accuracy of the query. Default is StatusQueryOptions.UseCachedIfPossible.
            * @returns True if the asset is considered open for edit by the selected version control system. 
            */
            public static IsOpenForEdit ($assetOrMetaFilePath: string, $statusOptions: UnityEditor.StatusQueryOptions) : boolean
            /** Query whether an Asset file is open for editing in version control.
            * @param $assetObject Object representing the asset whose status you wish to query.
            * @param $assetOrMetaFilePath Path to the asset file or its .meta file on disk, relative to project folder.
            * @param $message Returns a reason for the asset not being open for edit.
            * @param $statusOptions Options for how the version control system should be queried. These options can effect the speed and accuracy of the query. Default is StatusQueryOptions.UseCachedIfPossible.
            * @returns True if the asset is considered open for edit by the selected version control system. 
            */
            public static IsOpenForEdit ($assetObject: UnityEngine.Object, $message: $Ref<string>) : boolean
            /** Query whether an Asset file is open for editing in version control.
            * @param $assetObject Object representing the asset whose status you wish to query.
            * @param $assetOrMetaFilePath Path to the asset file or its .meta file on disk, relative to project folder.
            * @param $message Returns a reason for the asset not being open for edit.
            * @param $statusOptions Options for how the version control system should be queried. These options can effect the speed and accuracy of the query. Default is StatusQueryOptions.UseCachedIfPossible.
            * @returns True if the asset is considered open for edit by the selected version control system. 
            */
            public static IsOpenForEdit ($assetObject: UnityEngine.Object, $message: $Ref<string>, $statusOptions: UnityEditor.StatusQueryOptions) : boolean
            /** Query whether an Asset file is open for editing in version control.
            * @param $assetObject Object representing the asset whose status you wish to query.
            * @param $assetOrMetaFilePath Path to the asset file or its .meta file on disk, relative to project folder.
            * @param $message Returns a reason for the asset not being open for edit.
            * @param $statusOptions Options for how the version control system should be queried. These options can effect the speed and accuracy of the query. Default is StatusQueryOptions.UseCachedIfPossible.
            * @returns True if the asset is considered open for edit by the selected version control system. 
            */
            public static IsOpenForEdit ($assetOrMetaFilePath: string, $message: $Ref<string>) : boolean
            /** Query whether an Asset file is open for editing in version control.
            * @param $assetObject Object representing the asset whose status you wish to query.
            * @param $assetOrMetaFilePath Path to the asset file or its .meta file on disk, relative to project folder.
            * @param $message Returns a reason for the asset not being open for edit.
            * @param $statusOptions Options for how the version control system should be queried. These options can effect the speed and accuracy of the query. Default is StatusQueryOptions.UseCachedIfPossible.
            * @returns True if the asset is considered open for edit by the selected version control system. 
            */
            public static IsOpenForEdit ($assetOrMetaFilePath: string, $message: $Ref<string>, $statusOptions: UnityEditor.StatusQueryOptions) : boolean
            /** Query whether an asset's metadata (.meta) file is open for edit in version control.
            * @param $assetObject Object representing the asset whose metadata status you wish to query.
            * @param $message Returns a reason for the asset metadata not being open for edit.
            * @param $statusOptions Options for how the version control system should be queried. These options can effect the speed and accuracy of the query. Default is StatusQueryOptions.UseCachedIfPossible.
            * @returns True if the asset's metadata is considered open for edit by the selected version control system. 
            */
            public static IsMetaFileOpenForEdit ($assetObject: UnityEngine.Object) : boolean
            /** Query whether an asset's metadata (.meta) file is open for edit in version control.
            * @param $assetObject Object representing the asset whose metadata status you wish to query.
            * @param $message Returns a reason for the asset metadata not being open for edit.
            * @param $statusOptions Options for how the version control system should be queried. These options can effect the speed and accuracy of the query. Default is StatusQueryOptions.UseCachedIfPossible.
            * @returns True if the asset's metadata is considered open for edit by the selected version control system. 
            */
            public static IsMetaFileOpenForEdit ($assetObject: UnityEngine.Object, $statusOptions: UnityEditor.StatusQueryOptions) : boolean
            /** Query whether an asset's metadata (.meta) file is open for edit in version control.
            * @param $assetObject Object representing the asset whose metadata status you wish to query.
            * @param $message Returns a reason for the asset metadata not being open for edit.
            * @param $statusOptions Options for how the version control system should be queried. These options can effect the speed and accuracy of the query. Default is StatusQueryOptions.UseCachedIfPossible.
            * @returns True if the asset's metadata is considered open for edit by the selected version control system. 
            */
            public static IsMetaFileOpenForEdit ($assetObject: UnityEngine.Object, $message: $Ref<string>) : boolean
            /** Query whether an asset's metadata (.meta) file is open for edit in version control.
            * @param $assetObject Object representing the asset whose metadata status you wish to query.
            * @param $message Returns a reason for the asset metadata not being open for edit.
            * @param $statusOptions Options for how the version control system should be queried. These options can effect the speed and accuracy of the query. Default is StatusQueryOptions.UseCachedIfPossible.
            * @returns True if the asset's metadata is considered open for edit by the selected version control system. 
            */
            public static IsMetaFileOpenForEdit ($assetObject: UnityEngine.Object, $message: $Ref<string>, $statusOptions: UnityEditor.StatusQueryOptions) : boolean
            public static GetBuiltinExtraResource ($type: System.Type, $path: string) : UnityEngine.Object
            public static ForceReserializeAssets ($assetPaths: System.Collections.Generic.IEnumerable$1<string>, $options?: UnityEditor.ForceReserializeAssetsOptions) : void
            /** Get the GUID and local file id from an object instance id.
            * @param $instanceID InstanceID of the object to retrieve information for.
            * @param $obj The object to retrieve GUID and File Id for.
            * @param $assetRef The asset reference to retrieve GUID and File Id for.
            * @param $guid The GUID of an asset.
            * @param $localId The local file identifier of this asset.
            * @returns True if the guid and file id were successfully found, false if not. 
            */
            public static TryGetGUIDAndLocalFileIdentifier ($obj: UnityEngine.Object, $guid: $Ref<string>, $localId: $Ref<bigint>) : boolean
            /** Get the GUID and local file id from an object instance id.
            * @param $instanceID InstanceID of the object to retrieve information for.
            * @param $obj The object to retrieve GUID and File Id for.
            * @param $assetRef The asset reference to retrieve GUID and File Id for.
            * @param $guid The GUID of an asset.
            * @param $localId The local file identifier of this asset.
            * @returns True if the guid and file id were successfully found, false if not. 
            */
            public static TryGetGUIDAndLocalFileIdentifier ($instanceID: number, $guid: $Ref<string>, $localId: $Ref<bigint>) : boolean
            public static TryGetGUIDAndLocalFileIdentifier ($assetRef: UnityEngine.LazyLoadReference$1<UnityEngine.Object>, $guid: $Ref<string>, $localId: $Ref<bigint>) : boolean
            /** Forcibly load and re-serialize the given assets, flushing any outstanding data changes to disk.
            * @param $assetPaths The paths to the assets that should be reserialized.
            * @param $options Specify whether you want to reserialize the assets themselves, their .meta files, or both. If omitted, defaults to both.
            */
            public static ForceReserializeAssets () : void
            /** Removes object from its asset (Additional resources: AssetDatabase.AddObjectToAsset).
            */
            public static RemoveObjectFromAsset ($objectToRemove: UnityEngine.Object) : void
            /** Loads a specific Object and its dependencies from an Asset file asynchronously.
            * @param $assetPath Path of the asset to load.
            * @param $localId The local identifier of the object that you want to load. This allows you to load a specific object and its dependencies as opposed to the entire asset.
            * @returns A UnityEditor.AssetDatabaseLoadOperation which you can use to track the progress of the operation. 
            */
            public static LoadObjectAsync ($assetPath: string, $localId: bigint) : UnityEditor.AssetDatabaseLoadOperation
            /** Imports package at packagePath into the current project.
            */
            public static ImportPackage ($packagePath: string, $interactive: boolean) : void
            /** Increments an internal counter which Unity uses to determine whether to allow automatic AssetDatabase refreshing behavior.
            */
            public static DisallowAutoRefresh () : void
            /** Decrements an internal counter which Unity uses to determine whether to allow automatic AssetDatabase refreshing behavior.
            */
            public static AllowAutoRefresh () : void
            /** Clears the importer override for the asset.
            * @param $path Asset path.
            */
            public static ClearImporterOverride ($path: string) : void
            /** Checks whether the Cache Server is enabled in Project Settings.
            * @returns Returns true when the Cache Server is enabled. Returns false otherwise. 
            */
            public static IsCacheServerEnabled () : boolean
            /** Returns the type of the override importer.
            * @param $path Asset path.
            * @returns Importer type. 
            */
            public static GetImporterOverride ($path: string) : System.Type
            /** Gets the importer types associated with a given Asset path.
            * @param $path The Asset path.
            * @returns Returns an array of importer types that can handle the specified Asset. 
            */
            public static GetAvailableImporters ($path: string) : System.Array$1<System.Type>
            /** Returns the Default Importer associated with the asset located at the supplied path. When no Importer override is set, then the default importer is used. Additional resources: AssetDatabase.GetImporterOverride, AssetDatabase.ClearImporterOverride.
            * @param $path Asset path.
            * @returns Importer type. 
            */
            public static GetDefaultImporter ($path: string) : System.Type
            /** Checks the availability of the Cache Server.
            * @param $ip The IP address of the Cache Server.
            * @param $port The Port number of the Cache Server.
            * @returns Returns true when Editor can connect to the Cache Server. Returns false otherwise. 
            */
            public static CanConnectToCacheServer ($ip: string, $port: number) : boolean
            /** Apply pending Editor Settings changes to the Asset pipeline.
            */
            public static RefreshSettings () : void
            public static add_cacheServerConnectionChanged ($value: System.Action$1<UnityEditor.CacheServerConnectionChangedParameters>) : void
            public static remove_cacheServerConnectionChanged ($value: System.Action$1<UnityEditor.CacheServerConnectionChangedParameters>) : void
            /** Checks connection status of the Cache Server.
            * @returns Returns true when Editor is connected to the Cache Server. Returns false otherwise. 
            */
            public static IsConnectedToCacheServer () : boolean
            /** Resets the internal cache server connection reconnect timer values. The default delay timer value is 1 second, and the max delay value is 5 minutes. Everytime a connection attempt fails it will double the delay timer value, until a maximum time of the max value.
            */
            public static ResetCacheServerReconnectTimer () : void
            /** Closes an active cache server connection. If no connection is active, then it does nothing.
            */
            public static CloseCacheServerConnection () : void
            /** Gets the IP address of the Cache Server in Editor Settings.
            * @returns Returns the IP address of the Cache Server in Editor Settings. Returns empty string if IP address is not set in Editor settings. 
            */
            public static GetCacheServerAddress () : string
            /** Gets the Port number of the Cache Server in Editor Settings.
            * @returns Returns the Port number of the Cache Server in Editor Settings. Returns 0 if Port number is not set in Editor Settings. 
            */
            public static GetCacheServerPort () : number
            /** Gets the Cache Server Namespace prefix set in Editor Settings.
            * @returns Returns the Namespace prefix for the Cache Server. 
            */
            public static GetCacheServerNamespacePrefix () : string
            /** Gets the Cache Server Download option from Editor Settings.
            * @returns Returns true when Download from the Cache Server is enabled. Returns false otherwise. 
            */
            public static GetCacheServerEnableDownload () : boolean
            /** Gets the Cache Server Upload option from Editor Settings.
            * @returns Returns true when Upload to the Cache Server is enabled. Returns false otherwise. 
            */
            public static GetCacheServerEnableUpload () : boolean
            /** Reports whether Directory Monitoring is enabled.
            * @returns Returns true when Directory Monitoring is enabled. Returns false otherwise. 
            */
            public static IsDirectoryMonitoringEnabled () : boolean
            /** Allows you to register a custom dependency that Assets can be dependent on. If you register a custom dependency, and specify that an Asset is dependent on it, then the Asset will get re-imported if the custom dependency changes.
            * @param $dependency Name of dependency. You can use any name you like, but because these names are global across all your Assets, it can be useful to use a naming convention (eg a path-based naming system) to avoid clashes with other custom dependency names.
            * @param $hashOfValue A Hash128 value of the dependency.
            */
            public static RegisterCustomDependency ($dependency: string, $hashOfValue: UnityEngine.Hash128) : void
            /** Removes custom dependencies that match the prefixFilter.
            * @param $prefixFilter Prefix filter for the custom dependencies to unregister.
            * @returns Number of custom dependencies removed. 
            */
            public static UnregisterCustomDependencyPrefixFilter ($prefixFilter: string) : number
            public static IsAssetImportWorkerProcess () : boolean
            /** Returns the type of importer associated with an asset without loading the asset.
            * @param $guid GUID of the asset to get the importer type from.
            */
            public static GetImporterType ($guid: UnityEditor.GUID) : System.Type
            /** Returns the type of the importer associated with an asset without loading the asset.
            * @param $assetPath Path of asset to get importer Type from.
            */
            public static GetImporterType ($assetPath: string) : System.Type
            /** Returns the types of importers associated with the specified array of assets, without loading those assets.
            * @param $paths Array of asset paths to check. The importer type for each asset in the array is returned.
            */
            public static GetImporterTypes ($paths: System.Array$1<string>) : System.Array$1<System.Type>
            /** Forces the Editor to use the desired amount of worker processes. Unity will either spawn new worker processes or shut down idle worker processes to reach the desired number.
            */
            public static ForceToDesiredWorkerCount () : void
            public constructor ()
        }
        /** Asset importing options.
        */
        enum ImportAssetOptions
        { Default = 0, ForceUpdate = 1, ForceSynchronousImport = 8, ImportRecursive = 256, DontDownloadFromCacheServer = 8192, ForceUncompressedImport = 16384 }
        class GUID extends System.ValueType implements System.IComparable, System.IComparable$1<UnityEditor.GUID>, System.IEquatable$1<UnityEditor.GUID>
        {
            protected [__keep_incompatibility]: never;
            public static op_Equality ($x: UnityEditor.GUID, $y: UnityEditor.GUID) : boolean
            public static op_Inequality ($x: UnityEditor.GUID, $y: UnityEditor.GUID) : boolean
            public static op_LessThan ($x: UnityEditor.GUID, $y: UnityEditor.GUID) : boolean
            public static op_GreaterThan ($x: UnityEditor.GUID, $y: UnityEditor.GUID) : boolean
            public Equals ($obj: any) : boolean
            public Equals ($obj: UnityEditor.GUID) : boolean
            public CompareTo ($obj: any) : number
            public CompareTo ($rhs: UnityEditor.GUID) : number
            public Empty () : boolean
            public static TryParse ($hex: string, $result: $Ref<UnityEditor.GUID>) : boolean
            public static Generate () : UnityEditor.GUID
            public constructor ($hexRepresentation: string)
        }
        /** Asset path to GUID options.
        */
        enum AssetPathToGUIDOptions
        { IncludeRecentlyDeletedAssets = 0, OnlyExistingAssets = 1 }
        /** Export package option. Multiple options can be combined together using the | operator.
        */
        enum ExportPackageOptions
        { Default = 0, Interactive = 1, Recurse = 2, IncludeDependencies = 4, IncludeLibraryAssets = 8 }
        /** Options for AssetDatabase.ForceReserializeAssets.
        */
        enum ForceReserializeAssetsOptions
        { ReserializeAssets = 1, ReserializeMetadata = 2, ReserializeAssetsAndMetadata = 3 }
        /** This operation allows you to track the progress and access the result of an asynchronus AssetDatabase load operation.
        */
        class AssetDatabaseLoadOperation extends UnityEngine.AsyncOperation
        {
            protected [__keep_incompatibility]: never;
            /** The resulting Object of the asynchronus load operation. This will be null on failure.
            */
            public get LoadedObject(): UnityEngine.Object;
            public constructor ()
        }
        /** Struct used for AssetDatabase.cacheServerConnectionChanged.
        */
        class CacheServerConnectionChangedParameters extends System.ValueType
        {
            protected [__keep_incompatibility]: never;
        }
        enum AssetStatus
        { Calculating = -1, ClientOnly = 0, ServerOnly = 1, Unchanged = 2, Conflict = 3, Same = 4, NewVersionAvailable = 5, NewLocalVersion = 6, RestoredFromTrash = 7, Ignored = 8, BadState = 9 }
        class AssetsItem extends System.Object
        {
            protected [__keep_incompatibility]: never;
            public guid : string
            public pathName : string
            public message : string
            public exportedAssetPath : string
            public guidFolder : string
            public enabled : number
            public assetIsDir : number
            public changeFlags : number
            public previewPath : string
            public exists : number
            public constructor ()
        }
        /** Utility for fetching asset previews by instance ID of assets, See AssetPreview.GetAssetPreview. Since previews are loaded asynchronously methods are provided for requesting if all previews have been fully loaded, see AssetPreview.IsLoadingAssetPreviews. Loaded previews are stored in a cache, the size of the cache can be controlled by calling [AssetPreview.SetPreviewTextureCacheSize].
        */
        class AssetPreview extends System.Object
        {
            protected [__keep_incompatibility]: never;
            /** Returns a preview texture for an asset.
            */
            public static GetAssetPreview ($asset: UnityEngine.Object) : UnityEngine.Texture2D
            /** Loading previews is asynchronous so it is useful to know if a specific asset preview is in the process of being loaded so client code e.g can repaint while waiting for the loading to finish.
            * @param $instanceID InstanceID of the assset that a preview has been requested for by: AssetPreview.GetAssetPreview().
            */
            public static IsLoadingAssetPreview ($instanceID: number) : boolean
            /** Loading previews is asynchronous so it is useful to know if any requested previews are in the process of being loaded so client code e.g can repaint while waiting.
            */
            public static IsLoadingAssetPreviews () : boolean
            /** Set the asset preview cache to a size that can hold all visible previews on the screen at once.
            * @param $size The number of previews that can be loaded into the cache before the least used previews are being unloaded.
            */
            public static SetPreviewTextureCacheSize ($size: number) : void
            /** Returns the thumbnail for an object (like the ones you see in the project view).
            */
            public static GetMiniThumbnail ($obj: UnityEngine.Object) : UnityEngine.Texture2D
            /** Returns the thumbnail for the type.
            */
            public static GetMiniTypeThumbnail ($type: System.Type) : UnityEngine.Texture2D
            public constructor ()
        }
        /** AssetModificationProcessor lets you hook into saving of serialized assets and
        scenes which are edited inside Unity.
        */
        class AssetModificationProcessor extends System.Object
        {
            protected [__keep_incompatibility]: never;
            public constructor ()
        }
        /** Extension methods for the Material asset type in the editor.
        */
        class MaterialEditorExtensions extends System.Object
        {
            protected [__keep_incompatibility]: never;
            /** Iterates over all the Material properties with the MaterialProperty.PropFlags.Normal flag and checks that the textures referenced by these properties are imported as TextureImporterType.NormalMap.
            * @param $material The target material.
            */
            public static PerformBumpMapCheck ($material: UnityEngine.Material) : void
        }
        /** Define compute shader import settings in the Unity Editor.
        */
        class ComputeShaderImporter extends UnityEditor.AssetImporter
        {
            protected [__keep_incompatibility]: never;
            /** This property has no effect.
            */
            public get preprocessorOverride(): UnityEditor.PreprocessorOverride;
            public set preprocessorOverride(value: UnityEditor.PreprocessorOverride);
            public constructor ()
        }
        /** This enum is now obsolete. Unity always uses the Caching Shader Preprocessor.
        */
        enum PreprocessorOverride
        { UseProjectSettings = 0, ForcePlatformPreprocessor = 1, ForceCachingPreprocessor = 2 }
        /** Texture importer lets you modify Texture2D import settings for DDS textures from editor scripts.
        */
        class DDSImporter extends UnityEditor.AssetImporter
        {
            protected [__keep_incompatibility]: never;
            /** Is texture data readable from scripts.
            */
            public get isReadable(): boolean;
            public set isReadable(value: boolean);
            public constructor ()
        }
        /** Use IHVImageFormatImporter to modify Texture2D import settings for Textures in IHV (Independent Hardware Vendor) formats such as .DDS and .PVR from Editor scripts.
        */
        class IHVImageFormatImporter extends UnityEditor.AssetImporter
        {
            protected [__keep_incompatibility]: never;
            /** Is texture data readable from scripts.
            */
            public get isReadable(): boolean;
            public set isReadable(value: boolean);
            /** Filtering mode of the texture.
            */
            public get filterMode(): UnityEngine.FilterMode;
            public set filterMode(value: UnityEngine.FilterMode);
            /** Texture coordinate wrapping mode.
            */
            public get wrapMode(): UnityEngine.TextureWrapMode;
            public set wrapMode(value: UnityEngine.TextureWrapMode);
            /** Texture U coordinate wrapping mode.
            */
            public get wrapModeU(): UnityEngine.TextureWrapMode;
            public set wrapModeU(value: UnityEngine.TextureWrapMode);
            /** Texture V coordinate wrapping mode.
            */
            public get wrapModeV(): UnityEngine.TextureWrapMode;
            public set wrapModeV(value: UnityEngine.TextureWrapMode);
            /** Texture W coordinate wrapping mode for Texture3D.
            */
            public get wrapModeW(): UnityEngine.TextureWrapMode;
            public set wrapModeW(value: UnityEngine.TextureWrapMode);
            /** Enable mipmap streaming for this texture.
            */
            public get streamingMipmaps(): boolean;
            public set streamingMipmaps(value: boolean);
            /** Relative priority for this texture when reducing memory size in order to hit the memory budget.
            */
            public get streamingMipmapsPriority(): number;
            public set streamingMipmapsPriority(value: number);
            /** Enable if the texture should ignore any texture mipmap limit settings set in the Project Settings.
            */
            public get ignoreMipmapLimit(): boolean;
            public set ignoreMipmapLimit(value: boolean);
            /** Name of the texture mipmap limit group to which this texture belongs.
            */
            public get mipmapLimitGroupName(): string;
            public set mipmapLimitGroupName(value: string);
            public constructor ()
        }
        /** Shader importer lets you modify shader import settings from Editor scripts.
        */
        class ShaderImporter extends UnityEditor.AssetImporter
        {
            protected [__keep_incompatibility]: never;
            /** This property has no effect.
            */
            public get preprocessorOverride(): UnityEditor.PreprocessorOverride;
            public set preprocessorOverride(value: UnityEditor.PreprocessorOverride);
            /** Gets the reference to the shader imported by this importer.
            */
            public GetShader () : UnityEngine.Shader
            /** Sets the default textures for each texture material property.
            */
            public SetDefaultTextures ($name: System.Array$1<string>, $textures: System.Array$1<UnityEngine.Texture>) : void
            /** Gets the default texture assigned to the shader importer for the shader property with given name.
            */
            public GetDefaultTexture ($name: string) : UnityEngine.Texture
            /** Sets the non-modifiable textures for each texture material property.
            */
            public SetNonModifiableTextures ($name: System.Array$1<string>, $textures: System.Array$1<UnityEngine.Texture>) : void
            /** Gets the non-modifiable texture assigned to the shader importer for the shader property with given name.
            */
            public GetNonModifiableTexture ($name: string) : UnityEngine.Texture
            public constructor ()
        }
        /** Shader include file asset.
        */
        class ShaderInclude extends UnityEngine.TextAsset
        {
            protected [__keep_incompatibility]: never;
            public constructor ()
        }
        /** AssetImportor for importing SpeedTree model assets.
        */
        class SpeedTreeImporter extends UnityEditor.AssetImporter
        {
            protected [__keep_incompatibility]: never;
            /** Gets an array of name strings for wind quality value.
            */
            public static windQualityNames : System.Array$1<string>
            /** Tells if the SPM file has been previously imported.
            */
            public get hasImported(): boolean;
            /** Returns the folder path where generated materials will be placed in.
            */
            public get materialFolderPath(): string;
            /** Material import location options.
            */
            public get materialLocation(): UnityEditor.SpeedTreeImporter.MaterialLocation;
            public set materialLocation(value: UnityEditor.SpeedTreeImporter.MaterialLocation);
            /** Returns true if the asset is a SpeedTree v8 asset.
            */
            public get isV8(): boolean;
            /** Returns the default SpeedTree shader for the active render pipeline (either v7 or v8 according to the asset version).
            */
            public get defaultShader(): UnityEngine.Shader;
            /** Returns the default SpeedTree billboard shader for the active render pipeline, or null if the asset is a SpeedTree v8 asset.
            */
            public get defaultBillboardShader(): UnityEngine.Shader;
            /** How much to scale the tree model compared to what is in the imported SpeedTree model file.
            */
            public get scaleFactor(): number;
            public set scaleFactor(value: number);
            /** Gets and sets a default main color.
            */
            public get mainColor(): UnityEngine.Color;
            public set mainColor(value: UnityEngine.Color);
            /** Gets and sets a default hue variation color and amount (in alpha).
            */
            public get hueVariation(): UnityEngine.Color;
            public set hueVariation(value: UnityEngine.Color);
            /** Gets and sets a default alpha test reference values.
            */
            public get alphaTestRef(): number;
            public set alphaTestRef(value: number);
            /** Gets and sets a boolean to enable normal mapping on the imported SpeedTree model.
            */
            public get enableBumpByDefault(): boolean;
            public set enableBumpByDefault(value: boolean);
            /** Gets and sets a boolean to enable hue variation effect on the imported SpeedTree model.
            */
            public get enableHueByDefault(): boolean;
            public set enableHueByDefault(value: boolean);
            /** Gets and sets a boolean to enable the subsurface scattering effect for the SpeedTree asset (affects only SpeedTree v8 assets).
            */
            public get enableSubsurfaceByDefault(): boolean;
            public set enableSubsurfaceByDefault(value: boolean);
            /** Gets and sets a boolean to toggle whether the imported SpeedTree casts shadows.
            */
            public get castShadowsByDefault(): boolean;
            public set castShadowsByDefault(value: boolean);
            /** Gets and sets a boolean to enable whether the SpeedTree asset receives shadows from other objects in your scene.
            */
            public get receiveShadowsByDefault(): boolean;
            public set receiveShadowsByDefault(value: boolean);
            /** Gets and sets a boolean to enable light probe lighting for the imported SpeedTree model.
            */
            public get useLightProbesByDefault(): boolean;
            public set useLightProbesByDefault(value: boolean);
            public get reflectionProbeUsagesByDefault(): number;
            public set reflectionProbeUsagesByDefault(value: number);
            /** Returns the best-possible wind quality on this asset (configured in SpeedTree modeler).
            */
            public get bestWindQuality(): number;
            /** Gets and sets an integer corresponding to the SpeedTreeWind enum values. The value is clamped by SpeedTreeImporter.bestWindQuality internally.
            */
            public get selectedWindQuality(): number;
            public set selectedWindQuality(value: number);
            /** Tells if there is a billboard LOD.
            */
            public get hasBillboard(): boolean;
            /** Enables smooth LOD transitions.
            */
            public get enableSmoothLODTransition(): boolean;
            public set enableSmoothLODTransition(value: boolean);
            /** Indicates if the cross-fade LOD transition, applied to the last mesh LOD and the billboard, should be animated.
            */
            public get animateCrossFading(): boolean;
            public set animateCrossFading(value: boolean);
            /** Proportion of the last 3D mesh LOD region width which is used for cross-fading to billboard tree.
            */
            public get billboardTransitionCrossFadeWidth(): number;
            public set billboardTransitionCrossFadeWidth(value: number);
            /** Proportion of the billboard LOD region width which is used for fading out the billboard.
            */
            public get fadeOutWidth(): number;
            public set fadeOutWidth(value: number);
            /** Gets and sets an array of booleans to customize importer settings for a specific LOD.
            */
            public get enableSettingOverride(): System.Array$1<boolean>;
            public set enableSettingOverride(value: System.Array$1<boolean>);
            /** Gets and sets an array of floats of each LOD's screen height value.
            */
            public get LODHeights(): System.Array$1<number>;
            public set LODHeights(value: System.Array$1<number>);
            /** Gets and sets an array of booleans to enable shadow casting for each LOD.
            */
            public get castShadows(): System.Array$1<boolean>;
            public set castShadows(value: System.Array$1<boolean>);
            /** Gets and sets an array of booleans to enable shadow receiving for each LOD.
            */
            public get receiveShadows(): System.Array$1<boolean>;
            public set receiveShadows(value: System.Array$1<boolean>);
            /** Gets and sets an array of booleans to enable Light Probe lighting for each LOD.
            */
            public get useLightProbes(): System.Array$1<boolean>;
            public set useLightProbes(value: System.Array$1<boolean>);
            public get reflectionProbeUsages(): System.Array$1<UnityEngine.Rendering.ReflectionProbeUsage>;
            public set reflectionProbeUsages(value: System.Array$1<UnityEngine.Rendering.ReflectionProbeUsage>);
            /** Gets and sets an array of booleans to enable normal mapping for each LOD.
            */
            public get enableBump(): System.Array$1<boolean>;
            public set enableBump(value: System.Array$1<boolean>);
            /** Gets and sets an array of booleans to enable hue variation effect for each LOD.
            */
            public get enableHue(): System.Array$1<boolean>;
            public set enableHue(value: System.Array$1<boolean>);
            /** Gets and sets an array of booleans to enable the subsurface scattering effect for each LOD (affects only SpeedTree v8 assets).
            */
            public get enableSubsurface(): System.Array$1<boolean>;
            public set enableSubsurface(value: System.Array$1<boolean>);
            /** Gets and sets an array of integers of the wind qualities on each LOD. Values will be clamped by SpeedTreeImporter.bestWindQuality internally.
            */
            public get windQualities(): System.Array$1<number>;
            public set windQualities(value: System.Array$1<number>);
            /** Generates all necessary materials under materialFolderPath. If Version Control is enabled please first check out the folder.
            */
            public GenerateMaterials () : void
            /** Search the project for matching materials and use them instead of the internal materials.
            * @param $materialFolderPath The path to search for matching materials.
            * @returns Returns true if any materials have been remapped, otherwise false. 
            */
            public SearchAndRemapMaterials ($materialFolderPath: string) : boolean
            public constructor ()
        }
        /** Texture importer lets you modify Texture2D import settings from editor scripts.
        */
        class TextureImporter extends UnityEditor.AssetImporter
        {
            protected [__keep_incompatibility]: never;
            /** Maximum texture size.
            */
            public get maxTextureSize(): number;
            public set maxTextureSize(value: number);
            /** The quality of Crunch texture compression. The range is 0 through 100. A higher quality means larger textures and longer compression times.
            */
            public get compressionQuality(): number;
            public set compressionQuality(value: number);
            /** Use crunched compression when available.
            */
            public get crunchedCompression(): boolean;
            public set crunchedCompression(value: boolean);
            /** Allows alpha splitting on relevant platforms for this texture.
            */
            public get allowAlphaSplitting(): boolean;
            public set allowAlphaSplitting(value: boolean);
            /** ETC2 texture decompression fallback override on Android devices that don't support ETC2.
            */
            public get androidETC2FallbackOverride(): UnityEditor.AndroidETC2FallbackOverride;
            public set androidETC2FallbackOverride(value: UnityEditor.AndroidETC2FallbackOverride);
            /** Compression of imported texture.
            */
            public get textureCompression(): UnityEditor.TextureImporterCompression;
            public set textureCompression(value: UnityEditor.TextureImporterCompression);
            /** Select how the alpha of the imported texture is generated.
            */
            public get alphaSource(): UnityEditor.TextureImporterAlphaSource;
            public set alphaSource(value: UnityEditor.TextureImporterAlphaSource);
            /** Cubemap generation mode.
            */
            public get generateCubemap(): UnityEditor.TextureImporterGenerateCubemap;
            public set generateCubemap(value: UnityEditor.TextureImporterGenerateCubemap);
            /** Scaling mode for non power of two textures.
            */
            public get npotScale(): UnityEditor.TextureImporterNPOTScale;
            public set npotScale(value: UnityEditor.TextureImporterNPOTScale);
            /** Whether Unity stores an additional copy of the imported texture's pixel data in CPU-addressable memory.
            */
            public get isReadable(): boolean;
            public set isReadable(value: boolean);
            /** Enable mipmap streaming for this texture.
            */
            public get streamingMipmaps(): boolean;
            public set streamingMipmaps(value: boolean);
            /** Relative priority for this texture when reducing memory size in order to hit the memory budget.
            */
            public get streamingMipmapsPriority(): number;
            public set streamingMipmapsPriority(value: number);
            /** When enabled, this texture can solely be used in combination with a Texture Stack for Virtual Texturing. When enabled the texture is not guaranteed to be available as a Texture2D in the Player (e.g., not accessible from a script). When disabled, the Player includes the texture both as a Texture2D (e.g., accessible from script) and as a streamable texture in a Texture Stack.
            */
            public get vtOnly(): boolean;
            public set vtOnly(value: boolean);
            /** Enable this flag for textures that should ignore mipmap limit settings.
            */
            public get ignoreMipmapLimit(): boolean;
            public set ignoreMipmapLimit(value: boolean);
            /** Name of the texture mipmap limit group to which this texture belongs.
            */
            public get mipmapLimitGroupName(): string;
            public set mipmapLimitGroupName(value: string);
            /** Generate Mip Maps.
            */
            public get mipmapEnabled(): boolean;
            public set mipmapEnabled(value: boolean);
            /** Keeps texture borders the same when generating mipmaps.
            */
            public get borderMipmap(): boolean;
            public set borderMipmap(value: boolean);
            /** Whether this texture stores data in sRGB (also called gamma) color space.
            */
            public get sRGBTexture(): boolean;
            public set sRGBTexture(value: boolean);
            /** Enables or disables coverage-preserving alpha mipmapping.
            */
            public get mipMapsPreserveCoverage(): boolean;
            public set mipMapsPreserveCoverage(value: boolean);
            /** Returns or assigns the alpha test reference value.
            */
            public get alphaTestReferenceValue(): number;
            public set alphaTestReferenceValue(value: number);
            /** Mipmap filtering mode.
            */
            public get mipmapFilter(): UnityEditor.TextureImporterMipFilter;
            public set mipmapFilter(value: UnityEditor.TextureImporterMipFilter);
            /** Fade out mip levels to gray color.
            */
            public get fadeout(): boolean;
            public set fadeout(value: boolean);
            /** Mip level where texture begins to fade out.
            */
            public get mipmapFadeDistanceStart(): number;
            public set mipmapFadeDistanceStart(value: number);
            /** Mip level where texture is faded out completely.
            */
            public get mipmapFadeDistanceEnd(): number;
            public set mipmapFadeDistanceEnd(value: number);
            /** Convert heightmap to normal map
            */
            public get convertToNormalmap(): boolean;
            public set convertToNormalmap(value: boolean);
            /** Normal map filtering mode.
            */
            public get normalmapFilter(): UnityEditor.TextureImporterNormalFilter;
            public set normalmapFilter(value: UnityEditor.TextureImporterNormalFilter);
            /** Indicates whether to invert the green channel values of a normal map.
            */
            public get flipGreenChannel(): boolean;
            public set flipGreenChannel(value: boolean);
            /** Specifies the source for the texture's red color channel data.
            */
            public get swizzleR(): UnityEditor.TextureImporterSwizzle;
            public set swizzleR(value: UnityEditor.TextureImporterSwizzle);
            /** Specifies the source for the texture's green color channel data.
            */
            public get swizzleG(): UnityEditor.TextureImporterSwizzle;
            public set swizzleG(value: UnityEditor.TextureImporterSwizzle);
            /** Specifies the source for the texture's blue color channel data.
            */
            public get swizzleB(): UnityEditor.TextureImporterSwizzle;
            public set swizzleB(value: UnityEditor.TextureImporterSwizzle);
            /** Specifies the source for the texture's alpha color channel data.
            */
            public get swizzleA(): UnityEditor.TextureImporterSwizzle;
            public set swizzleA(value: UnityEditor.TextureImporterSwizzle);
            /** Amount of bumpyness in the heightmap.
            */
            public get heightmapScale(): number;
            public set heightmapScale(value: number);
            /** Anisotropic filtering level of the texture.
            */
            public get anisoLevel(): number;
            public set anisoLevel(value: number);
            /** Filtering mode of the texture.
            */
            public get filterMode(): UnityEngine.FilterMode;
            public set filterMode(value: UnityEngine.FilterMode);
            /** Texture coordinate wrapping mode.
            */
            public get wrapMode(): UnityEngine.TextureWrapMode;
            public set wrapMode(value: UnityEngine.TextureWrapMode);
            /** Texture U coordinate wrapping mode.
            */
            public get wrapModeU(): UnityEngine.TextureWrapMode;
            public set wrapModeU(value: UnityEngine.TextureWrapMode);
            /** Texture V coordinate wrapping mode.
            */
            public get wrapModeV(): UnityEngine.TextureWrapMode;
            public set wrapModeV(value: UnityEngine.TextureWrapMode);
            /** Texture W coordinate wrapping mode for Texture3D.
            */
            public get wrapModeW(): UnityEngine.TextureWrapMode;
            public set wrapModeW(value: UnityEngine.TextureWrapMode);
            /** Mip map bias of the texture.
            */
            public get mipMapBias(): number;
            public set mipMapBias(value: number);
            /** If the alpha channel of your texture represents transparency, enable this property to dilate the color channels of visible texels into fully transparent areas. This effectively adds padding around transparent areas that prevents filtering artifacts from forming on their edges. Unity does not support this property for HDR textures.
            This property makes the color data of invisible texels undefined. Disable this property to preserve invisible texels' original color data.
            */
            public get alphaIsTransparency(): boolean;
            public set alphaIsTransparency(value: boolean);
            /** Returns true if this TextureImporter is setup for Sprite packing.
            */
            public get qualifiesForSpritePacking(): boolean;
            /** Selects Single or Manual import mode for Sprite textures.
            */
            public get spriteImportMode(): UnityEditor.SpriteImportMode;
            public set spriteImportMode(value: UnityEditor.SpriteImportMode);
            /** Secondary textures for the imported Sprites.
            */
            public get secondarySpriteTextures(): System.Array$1<UnityEngine.SecondarySpriteTexture>;
            public set secondarySpriteTextures(value: System.Array$1<UnityEngine.SecondarySpriteTexture>);
            /** The number of pixels in the sprite that correspond to one unit in world space.
            */
            public get spritePixelsPerUnit(): number;
            public set spritePixelsPerUnit(value: number);
            /** The point in the Sprite object's coordinate space where the graphic is located.
            */
            public get spritePivot(): UnityEngine.Vector2;
            public set spritePivot(value: UnityEngine.Vector2);
            /** Border sizes of the generated sprites.
            */
            public get spriteBorder(): UnityEngine.Vector4;
            public set spriteBorder(value: UnityEngine.Vector4);
            /** Which type of texture are we dealing with here.
            */
            public get textureType(): UnityEditor.TextureImporterType;
            public set textureType(value: UnityEditor.TextureImporterType);
            /** The shape of the imported texture.
            */
            public get textureShape(): UnityEditor.TextureImporterShape;
            public set textureShape(value: UnityEditor.TextureImporterShape);
            /** Ignore the Gamma attribute in PNG files. This property does not effect other file formats.
            */
            public get ignorePngGamma(): boolean;
            public set ignorePngGamma(value: boolean);
            /** Gets platform specific texture settings.
            * @param $platform The platform for which settings are required (see options below).
            * @param $maxTextureSize Maximum texture width/height in pixels.
            * @param $textureFormat Format of the texture for the given platform.
            * @param $compressionQuality Value from 0..100, equivalent to the standard JPEG quality setting.
            * @param $etc1AlphaSplitEnabled Status of the ETC1 and alpha split flag.
            * @returns True if the platform override was found, false if no override was found. 
            */
            public GetPlatformTextureSettings ($platform: string, $maxTextureSize: $Ref<number>, $textureFormat: $Ref<UnityEditor.TextureImporterFormat>, $compressionQuality: $Ref<number>, $etc1AlphaSplitEnabled: $Ref<boolean>) : boolean
            /** Gets platform specific texture settings.
            * @param $platform The platform whose settings are required (see below).
            * @param $maxTextureSize Maximum texture width/height in pixels.
            * @param $textureFormat Format of the texture.
            * @param $compressionQuality Value from 0..100, equivalent to the standard JPEG quality setting.
            * @returns True if the platform override was found, false if no override was found. 
            */
            public GetPlatformTextureSettings ($platform: string, $maxTextureSize: $Ref<number>, $textureFormat: $Ref<UnityEditor.TextureImporterFormat>, $compressionQuality: $Ref<number>) : boolean
            /** Gets platform specific texture settings.
            * @param $platform The platform whose settings are required (see below).
            * @param $maxTextureSize Maximum texture width/height in pixels.
            * @param $textureFormat Format of the texture.
            * @returns True if the platform override was found, false if no override was found. 
            */
            public GetPlatformTextureSettings ($platform: string, $maxTextureSize: $Ref<number>, $textureFormat: $Ref<UnityEditor.TextureImporterFormat>) : boolean
            /** Gets platform specific texture settings.
            * @param $platform The platform whose settings are required (see below).
            * @returns A TextureImporterPlatformSettings structure containing the platform parameters. 
            */
            public GetPlatformTextureSettings ($platform: string) : UnityEditor.TextureImporterPlatformSettings
            /** Gets the default platform specific texture settings.
            * @returns A TextureImporterPlatformSettings structure containing the default platform parameters. 
            */
            public GetDefaultPlatformTextureSettings () : UnityEditor.TextureImporterPlatformSettings
            /** Returns the TextureImporterFormat that would be automatically chosen for this platform.
            * @returns Format chosen by the system for the provided platform, TextureImporterFormat.Automatic if the platform does not exist. 
            */
            public GetAutomaticFormat ($platform: string) : UnityEditor.TextureImporterFormat
            /** Sets specific target platform settings.
            * @param $platformSettings A TextureImporterPlatformSettings instance that contains the platform settings.
            */
            public SetPlatformTextureSettings ($platformSettings: UnityEditor.TextureImporterPlatformSettings) : void
            /** Clears specific target platform settings.
            * @param $platform The platform whose settings are to be cleared (see below).
            */
            public ClearPlatformTextureSettings ($platform: string) : void
            /** Validates TextureImporterFormat based on a specified import type (TextureImporterType) and a specified build target (BuildTarget.).
            * @param $textureType The TextureImporterType that the importer uses.
            * @param $target The platform that the setting targets, referred to as the BuilTarget.
            * @param $currentFormat The TextureImporterFormat to validate.
            * @returns Returns true if TextureImporterFormat is valid and can be set. Returns false otherwise. 
            */
            public static IsPlatformTextureFormatValid ($textureType: UnityEditor.TextureImporterType, $target: UnityEditor.BuildTarget, $currentFormat: UnityEditor.TextureImporterFormat) : boolean
            /** Validates TextureImporterFormat based on the type of the current format (TextureImporterType) and the default platform.
            * @param $currentFormat The TextureImporterType that the importer uses.
            * @param $textureType The TextureImporterFormat to validate.
            * @returns Returns true if TextureImporterFormat is valid and can be set. Returns false otherwise. 
            */
            public static IsDefaultPlatformTextureFormatValid ($textureType: UnityEditor.TextureImporterType, $currentFormat: UnityEditor.TextureImporterFormat) : boolean
            /** Gets the source texture's width and height.
            * @param $width The source texture's width.
            * @param $height The source texture's height.
            */
            public GetSourceTextureWidthAndHeight ($width: $Ref<number>, $height: $Ref<number>) : void
            /** Allows you to check whether the texture source image has an alpha channel.
            */
            public DoesSourceTextureHaveAlpha () : boolean
            /** Read texture settings into TextureImporterSettings class.
            */
            public ReadTextureSettings ($dest: UnityEditor.TextureImporterSettings) : void
            /** Sets texture importers settings from TextureImporterSettings class.
            */
            public SetTextureSettings ($src: UnityEditor.TextureImporterSettings) : void
            public ReadTextureImportInstructions ($target: UnityEditor.BuildTarget, $desiredFormat: $Ref<UnityEngine.TextureFormat>, $colorSpace: $Ref<UnityEngine.ColorSpace>, $compressionQuality: $Ref<number>) : void
            public constructor ()
        }
        /** Imported texture format for TextureImporter.
        */
        enum TextureImporterFormat
        { Automatic = -1, AutomaticCompressed = -1, Automatic16bit = -2, AutomaticTruecolor = -3, AutomaticCrunched = -5, AutomaticHDR = -6, AutomaticCompressedHDR = -7, DXT1 = 10, DXT5 = 12, RGB16 = 7, RGB24 = 3, Alpha8 = 1, R16 = 9, R8 = 63, RG16 = 62, ARGB16 = 2, RGBA32 = 4, ARGB32 = 5, RGBA16 = 13, RHalf = 15, RGHalf = 16, RGBAHalf = 17, RFloat = 18, RGFloat = 19, RGBAFloat = 20, RGB9E5 = 22, BC4 = 26, BC5 = 27, BC6H = 24, BC7 = 25, DXT1Crunched = 28, DXT5Crunched = 29, PVRTC_RGB2 = 30, PVRTC_RGBA2 = 31, PVRTC_RGB4 = 32, PVRTC_RGBA4 = 33, ETC_RGB4 = 34, ATC_RGB4 = 35, ATC_RGBA8 = 36, EAC_R = 41, EAC_R_SIGNED = 42, EAC_RG = 43, EAC_RG_SIGNED = 44, ETC2_RGB4 = 45, ETC2_RGB4_PUNCHTHROUGH_ALPHA = 46, ETC2_RGBA8 = 47, ASTC_4x4 = 48, ASTC_5x5 = 49, ASTC_6x6 = 50, ASTC_8x8 = 51, ASTC_10x10 = 52, ASTC_12x12 = 53, ASTC_RGB_4x4 = -48, ASTC_RGB_5x5 = -49, ASTC_RGB_6x6 = -50, ASTC_RGB_8x8 = -51, ASTC_RGB_10x10 = -52, ASTC_RGB_12x12 = -53, ASTC_RGBA_4x4 = -54, ASTC_RGBA_5x5 = -55, ASTC_RGBA_6x6 = -56, ASTC_RGBA_8x8 = -57, ASTC_RGBA_10x10 = -58, ASTC_RGBA_12x12 = -59, ETC_RGB4_3DS = -60, ETC_RGBA8_3DS = -61, ETC_RGB4Crunched = 64, ETC2_RGBA8Crunched = 65, ASTC_HDR_4x4 = 66, ASTC_HDR_5x5 = 67, ASTC_HDR_6x6 = 68, ASTC_HDR_8x8 = 69, ASTC_HDR_10x10 = 70, ASTC_HDR_12x12 = 71, RG32 = 72, RGB48 = 73, RGBA64 = 74, R8_SIGNED = 75, RG16_SIGNED = 76, RGB24_SIGNED = 77, RGBA32_SIGNED = 78, R16_SIGNED = 79, RG32_SIGNED = 80, RGB48_SIGNED = 81, RGBA64_SIGNED = 82 }
        /** This enumeration has values for different qualities to decompress an ETC2 texture on Android devices that don't support the ETC2 texture format.
        */
        enum AndroidETC2FallbackOverride
        { UseBuildSettings = 0, Quality32Bit = 1, Quality16Bit = 2, Quality32BitDownscaled = 3 }
        /** Select the kind of compression you want for your texture.
        */
        enum TextureImporterCompression
        { Uncompressed = 0, Compressed = 1, CompressedHQ = 2, CompressedLQ = 3 }
        /** Select how the alpha of the imported texture is generated.
        */
        enum TextureImporterAlphaSource
        { None = 0, FromInput = 1, FromGrayScale = 2 }
        /** Stores platform specifics settings of a TextureImporter.
        */
        class TextureImporterPlatformSettings extends System.Object
        {
            protected [__keep_incompatibility]: never;
            /** Name of the build target.
            */
            public get name(): string;
            public set name(value: string);
            /** Set to true in order to override the Default platform parameters by those provided in the TextureImporterPlatformSettings structure.
            */
            public get overridden(): boolean;
            public set overridden(value: boolean);
            /** Ignores platform support checks for the selected texture format.
            */
            public get ignorePlatformSupport(): boolean;
            public set ignorePlatformSupport(value: boolean);
            /** Maximum texture size.
            */
            public get maxTextureSize(): number;
            public set maxTextureSize(value: number);
            /** For Texture to be scaled down choose resize algorithm. ( Applyed only when Texture dimension is bigger than Max Size ).
            */
            public get resizeAlgorithm(): UnityEditor.TextureResizeAlgorithm;
            public set resizeAlgorithm(value: UnityEditor.TextureResizeAlgorithm);
            /** Format of imported texture.
            */
            public get format(): UnityEditor.TextureImporterFormat;
            public set format(value: UnityEditor.TextureImporterFormat);
            /** Compression of imported texture.
            */
            public get textureCompression(): UnityEditor.TextureImporterCompression;
            public set textureCompression(value: UnityEditor.TextureImporterCompression);
            /** The quality of Crunch texture compression. The range is 0 through 100. A higher quality means larger textures and longer compression times.
            */
            public get compressionQuality(): number;
            public set compressionQuality(value: number);
            /** Use crunch compression when available.
            */
            public get crunchedCompression(): boolean;
            public set crunchedCompression(value: boolean);
            /** Allows Alpha splitting on the imported texture when needed (for example ETC1 compression for textures with transparency).
            */
            public get allowsAlphaSplitting(): boolean;
            public set allowsAlphaSplitting(value: boolean);
            /** Override for ETC2 decompression fallback on Android devices that don't support ETC2.
            */
            public get androidETC2FallbackOverride(): UnityEditor.AndroidETC2FallbackOverride;
            public set androidETC2FallbackOverride(value: UnityEditor.AndroidETC2FallbackOverride);
            /** Copy parameters into another TextureImporterPlatformSettings object.
            * @param $target TextureImporterPlatformSettings object to copy settings to.
            */
            public CopyTo ($target: UnityEditor.TextureImporterPlatformSettings) : void
            public constructor ()
        }
        /** Select this to set basic parameters depending on the purpose of your texture.
        */
        enum TextureImporterType
        { Default = 0, NormalMap = 1, GUI = 2, Sprite = 8, Cursor = 7, Cookie = 4, Lightmap = 6, SingleChannel = 10, Shadowmask = 11, DirectionalLightmap = 12, Image = -2147483648, Bump = -1, Cubemap = -3, Reflection = -3, Advanced = -5, HDRI = -9 }
        /** Cubemap generation mode for TextureImporter.
        */
        enum TextureImporterGenerateCubemap
        { None = 0, Spheremap = 1, Cylindrical = 2, SimpleSpheremap = 3, NiceSpheremap = 4, FullCubemap = 5, AutoCubemap = 6 }
        /** Scaling mode for non power of two textures in TextureImporter.
        */
        enum TextureImporterNPOTScale
        { None = 0, ToNearest = 1, ToLarger = 2, ToSmaller = 3 }
        /** Mip map filter for TextureImporter.
        */
        enum TextureImporterMipFilter
        { BoxFilter = 0, KaiserFilter = 1 }
        /** Normal map filtering mode for TextureImporter.
        */
        enum TextureImporterNormalFilter
        { Standard = 0, Sobel = 1 }
        /** Options for where texture color channel data comes from in the TextureImporter.
        */
        enum TextureImporterSwizzle
        { R = 0, G = 1, B = 2, A = 3, OneMinusR = 4, OneMinusG = 5, OneMinusB = 6, OneMinusA = 7, Zero = 8, One = 9 }
        /** Texture importer modes for Sprite import.
        */
        enum SpriteImportMode
        { None = 0, Single = 1, Multiple = 2, Polygon = 3 }
        /** Editor data used in producing a Sprite.
        */
        class SpriteMetaData extends System.ValueType
        {
            protected [__keep_incompatibility]: never;
            /** Name of the Sprite.
            */
            public name : string
            /** Bounding rectangle of the sprite's graphic within the atlas image.
            */
            public rect : UnityEngine.Rect
            /** Edge-relative alignment of the sprite graphic.
            */
            public alignment : number
            /** The pivot point of the Sprite, relative to its bounding rectangle.
            */
            public pivot : UnityEngine.Vector2
            /** Edge border size for a sprite (in pixels).
            */
            public border : UnityEngine.Vector4
        }
        /** The shape of the imported texture.
        */
        enum TextureImporterShape
        { Texture2D = 1, TextureCube = 2, Texture2DArray = 4, Texture3D = 8 }
        /** Stores settings of a TextureImporter.
        */
        class TextureImporterSettings extends System.Object
        {
            protected [__keep_incompatibility]: never;
            /** Which type of texture are we dealing with here.
            */
            public get textureType(): UnityEditor.TextureImporterType;
            public set textureType(value: UnityEditor.TextureImporterType);
            /** The shape of the imported texture.
            */
            public get textureShape(): UnityEditor.TextureImporterShape;
            public set textureShape(value: UnityEditor.TextureImporterShape);
            /** Mipmap filtering mode.
            */
            public get mipmapFilter(): UnityEditor.TextureImporterMipFilter;
            public set mipmapFilter(value: UnityEditor.TextureImporterMipFilter);
            /** Generate mipmaps for the texture?
            */
            public get mipmapEnabled(): boolean;
            public set mipmapEnabled(value: boolean);
            /** Whether this texture stores data in sRGB (also called gamma) color space.
            */
            public get sRGBTexture(): boolean;
            public set sRGBTexture(value: boolean);
            /** Fade out mip levels to gray color?
            */
            public get fadeOut(): boolean;
            public set fadeOut(value: boolean);
            /** Enable this to avoid colors seeping out to the edge of the lower Mip levels. Used for light cookies.
            */
            public get borderMipmap(): boolean;
            public set borderMipmap(value: boolean);
            /** Enables or disables coverage-preserving alpha mipmapping.
            */
            public get mipMapsPreserveCoverage(): boolean;
            public set mipMapsPreserveCoverage(value: boolean);
            /** Returns or assigns the alpha test reference value.
            */
            public get alphaTestReferenceValue(): number;
            public set alphaTestReferenceValue(value: number);
            /** Mip level where texture begins to fade out to gray.
            */
            public get mipmapFadeDistanceStart(): number;
            public set mipmapFadeDistanceStart(value: number);
            /** Mip level where texture is faded out to gray completely.
            */
            public get mipmapFadeDistanceEnd(): number;
            public set mipmapFadeDistanceEnd(value: number);
            /** Convert heightmap to normal map?
            */
            public get convertToNormalMap(): boolean;
            public set convertToNormalMap(value: boolean);
            /** Amount of bumpyness in the heightmap.
            */
            public get heightmapScale(): number;
            public set heightmapScale(value: number);
            /** Normal map filtering mode.
            */
            public get normalMapFilter(): UnityEditor.TextureImporterNormalFilter;
            public set normalMapFilter(value: UnityEditor.TextureImporterNormalFilter);
            /** Indicates whether to invert the green channel values of a normal map.
            */
            public get flipGreenChannel(): boolean;
            public set flipGreenChannel(value: boolean);
            /** Specifies the source for the texture's red color channel data.
            */
            public get swizzleR(): UnityEditor.TextureImporterSwizzle;
            public set swizzleR(value: UnityEditor.TextureImporterSwizzle);
            /** Specifies the source for the texture's green color channel data.
            */
            public get swizzleG(): UnityEditor.TextureImporterSwizzle;
            public set swizzleG(value: UnityEditor.TextureImporterSwizzle);
            /** Specifies the source for the texture's blue color channel data.
            */
            public get swizzleB(): UnityEditor.TextureImporterSwizzle;
            public set swizzleB(value: UnityEditor.TextureImporterSwizzle);
            /** Specifies the source for the texture's alpha color channel data.
            */
            public get swizzleA(): UnityEditor.TextureImporterSwizzle;
            public set swizzleA(value: UnityEditor.TextureImporterSwizzle);
            /** Select how the alpha of the imported texture is generated.
            */
            public get alphaSource(): UnityEditor.TextureImporterAlphaSource;
            public set alphaSource(value: UnityEditor.TextureImporterAlphaSource);
            /** Color or Alpha component TextureImporterType|Single Channel Textures uses.
            */
            public get singleChannelComponent(): UnityEditor.TextureImporterSingleChannelComponent;
            public set singleChannelComponent(value: UnityEditor.TextureImporterSingleChannelComponent);
            /** The number of rows in the source image for a Texture2DArray or Texture3D.
            */
            public get flipbookRows(): number;
            public set flipbookRows(value: number);
            /** The number of columns in the source image for a Texture2DArray or Texture3D.
            */
            public get flipbookColumns(): number;
            public set flipbookColumns(value: number);
            /** Is texture data readable from scripts.
            */
            public get readable(): boolean;
            public set readable(value: boolean);
            /** Enable mipmap streaming for this texture.
            */
            public get streamingMipmaps(): boolean;
            public set streamingMipmaps(value: boolean);
            /** Relative priority for this texture when reducing memory size in order to hit the memory budget.
            */
            public get streamingMipmapsPriority(): number;
            public set streamingMipmapsPriority(value: number);
            /** Enable if the texture is purposed solely for use with a Texture Stack for Virtual Texturing.
            */
            public get vtOnly(): boolean;
            public set vtOnly(value: boolean);
            /** Enable this flag for textures that should ignore mipmap limit settings.
            */
            public get ignoreMipmapLimit(): boolean;
            public set ignoreMipmapLimit(value: boolean);
            /** Scaling mode for non power of two textures.
            */
            public get npotScale(): UnityEditor.TextureImporterNPOTScale;
            public set npotScale(value: UnityEditor.TextureImporterNPOTScale);
            /** Cubemap generation mode.
            */
            public get generateCubemap(): UnityEditor.TextureImporterGenerateCubemap;
            public set generateCubemap(value: UnityEditor.TextureImporterGenerateCubemap);
            /** Convolution mode.
            */
            public get cubemapConvolution(): UnityEditor.TextureImporterCubemapConvolution;
            public set cubemapConvolution(value: UnityEditor.TextureImporterCubemapConvolution);
            public get seamlessCubemap(): boolean;
            public set seamlessCubemap(value: boolean);
            /** Filtering mode of the texture.
            */
            public get filterMode(): UnityEngine.FilterMode;
            public set filterMode(value: UnityEngine.FilterMode);
            /** Anisotropic filtering level of the texture.
            */
            public get aniso(): number;
            public set aniso(value: number);
            /** Mipmap bias of the texture.
            */
            public get mipmapBias(): number;
            public set mipmapBias(value: number);
            /** Texture coordinate wrapping mode.
            */
            public get wrapMode(): UnityEngine.TextureWrapMode;
            public set wrapMode(value: UnityEngine.TextureWrapMode);
            /** Texture U coordinate wrapping mode.
            */
            public get wrapModeU(): UnityEngine.TextureWrapMode;
            public set wrapModeU(value: UnityEngine.TextureWrapMode);
            /** Texture V coordinate wrapping mode.
            */
            public get wrapModeV(): UnityEngine.TextureWrapMode;
            public set wrapModeV(value: UnityEngine.TextureWrapMode);
            /** Texture W coordinate wrapping mode for Texture3D.
            */
            public get wrapModeW(): UnityEngine.TextureWrapMode;
            public set wrapModeW(value: UnityEngine.TextureWrapMode);
            /** If the alpha channel of your texture represents transparency, enable this property to dilate the color channels of visible texels into fully transparent areas. This effectively adds padding around transparent areas that prevents filtering artifacts from forming on their edges. Unity does not support this property for HDR textures.
            This property makes the color data of invisible texels undefined. Disable this property to preserve invisible texels' original color data.
            */
            public get alphaIsTransparency(): boolean;
            public set alphaIsTransparency(value: boolean);
            /** Ignore the Gamma attribute in PNG files. This property does not effect other file formats.
            */
            public get ignorePngGamma(): boolean;
            public set ignorePngGamma(value: boolean);
            /** Sprite texture import mode.
            */
            public get spriteMode(): number;
            public set spriteMode(value: number);
            /** The number of pixels in the sprite that correspond to one unit in world space.
            */
            public get spritePixelsPerUnit(): number;
            public set spritePixelsPerUnit(value: number);
            /** The tessellation detail to be used for generating the mesh for the associated sprite if the SpriteMode is set to Single. For Multiple sprites, use the SpriteEditor to specify the value per sprite.
            Valid values are in the range [0-1], with higher values generating a tighter mesh. A default of -1 will allow Unity to determine the value automatically.
            */
            public get spriteTessellationDetail(): number;
            public set spriteTessellationDetail(value: number);
            /** The number of blank pixels to leave between the edge of the graphic and the mesh.
            */
            public get spriteExtrude(): number;
            public set spriteExtrude(value: number);
            /** SpriteMeshType defines the type of Mesh that TextureImporter generates for a Sprite.
            */
            public get spriteMeshType(): UnityEngine.SpriteMeshType;
            public set spriteMeshType(value: UnityEngine.SpriteMeshType);
            /** Edge-relative alignment of the sprite graphic.
            */
            public get spriteAlignment(): number;
            public set spriteAlignment(value: number);
            /** Pivot point of the Sprite relative to its graphic's rectangle.
            */
            public get spritePivot(): UnityEngine.Vector2;
            public set spritePivot(value: UnityEngine.Vector2);
            /** Border sizes of the generated sprites.
            */
            public get spriteBorder(): UnityEngine.Vector4;
            public set spriteBorder(value: UnityEngine.Vector4);
            /** Generates a default physics shape for a Sprite if a physics shape has not been set by the user.
            */
            public get spriteGenerateFallbackPhysicsShape(): boolean;
            public set spriteGenerateFallbackPhysicsShape(value: boolean);
            /** Test texture importer settings for equality.
            */
            public static Equal ($a: UnityEditor.TextureImporterSettings, $b: UnityEditor.TextureImporterSettings) : boolean
            /** Copy parameters into another TextureImporterSettings object.
            * @param $target TextureImporterSettings object to copy settings to.
            */
            public CopyTo ($target: UnityEditor.TextureImporterSettings) : void
            public ApplyTextureType ($type: UnityEditor.TextureImporterType) : void
            public constructor ()
        }
        /** Selects which Color/Alpha channel TextureImporterType|Single Channel Textures uses.
        */
        enum TextureImporterSingleChannelComponent
        { Alpha = 0, Red = 1 }
        /** For Texture to be scaled down choose resize algorithm. ( Applyed only when Texture dimension is bigger than Max Size ).
        */
        enum TextureResizeAlgorithm
        { Mitchell = 0, Bilinear = 1 }
        /** Defines Cubemap convolution mode.
        */
        enum TextureImporterCubemapConvolution
        { None = 0, Specular = 1, Diffuse = 2 }
        /** RGBM encoding mode for HDR textures in TextureImporter.
        */
        enum TextureImporterRGBMMode
        { Auto = 0, On = 1, Off = 2, Encoded = 3 }
        /** AssetPostprocessor lets you hook into the import pipeline and run scripts prior or after importing assets.
        */
        class AssetPostprocessor extends System.Object
        {
            protected [__keep_incompatibility]: never;
            /** The path name of the asset being imported.
            */
            public get assetPath(): string;
            public set assetPath(value: string);
            /** The import context.
            */
            public get context(): UnityEditor.AssetImporters.AssetImportContext;
            /** Reference to the asset importer.
            */
            public get assetImporter(): UnityEditor.AssetImporter;
            /** Returns the version of the asset postprocessor.
            */
            public GetVersion () : number
            /** Override the order in which importers are processed.
            */
            public GetPostprocessOrder () : number
            public constructor ()
        }
        class AssetStoreAsset extends System.Object
        {
            protected [__keep_incompatibility]: never;
            public id : number
            public name : string
            public displayName : string
            public staticPreviewURL : string
            public dynamicPreviewURL : string
            public className : string
            public price : string
            public packageID : number
            public previewImage : UnityEngine.Texture2D
            public get Preview(): UnityEngine.Object;
            public get HasLivePreview(): boolean;
            public Dispose () : void
            public constructor ()
        }
        /** Antialiased curve rendering functionality used by audio tools in the editor.
        */
        class AudioCurveRendering extends System.Object
        {
            protected [__keep_incompatibility]: never;
            public static kAudioOrange : UnityEngine.Color
            public static BeginCurveFrame ($r: UnityEngine.Rect) : UnityEngine.Rect
            public static EndCurveFrame () : void
            public static DrawCurveFrame ($r: UnityEngine.Rect) : UnityEngine.Rect
            public static DrawCurveBackground ($r: UnityEngine.Rect) : void
            public static DrawFilledCurve ($r: UnityEngine.Rect, $eval: UnityEditor.AudioCurveRendering.AudioCurveEvaluator, $curveColor: UnityEngine.Color) : void
            public static DrawFilledCurve ($r: UnityEngine.Rect, $eval: UnityEditor.AudioCurveRendering.AudioCurveAndColorEvaluator) : void
            public static DrawMinMaxFilledCurve ($r: UnityEngine.Rect, $eval: UnityEditor.AudioCurveRendering.AudioMinMaxCurveAndColorEvaluator) : void
            public static DrawSymmetricFilledCurve ($r: UnityEngine.Rect, $eval: UnityEditor.AudioCurveRendering.AudioCurveAndColorEvaluator) : void
            public static DrawCurve ($r: UnityEngine.Rect, $eval: UnityEditor.AudioCurveRendering.AudioCurveEvaluator, $curveColor: UnityEngine.Color) : void
            public static DrawGradientRect ($r: UnityEngine.Rect, $c1: UnityEngine.Color, $c2: UnityEngine.Color, $blend: number, $horizontal: boolean) : void
            public constructor ()
        }
        class IAudioEffectPlugin extends System.Object
        {
            protected [__keep_incompatibility]: never;
            public SetFloatParameter ($name: string, $value: number) : boolean
            public GetFloatParameter ($name: string, $value: $Ref<number>) : boolean
            public GetFloatParameterInfo ($name: string, $minRange: $Ref<number>, $maxRange: $Ref<number>, $defaultValue: $Ref<number>) : boolean
            public GetFloatBuffer ($name: string, $data: $Ref<System.Array$1<number>>, $numsamples: number) : boolean
            public GetSampleRate () : number
            public IsPluginEditableAndEnabled () : boolean
        }
        class IAudioEffectPluginGUI extends System.Object
        {
            protected [__keep_incompatibility]: never;
            public get Name(): string;
            public get Description(): string;
            public get Vendor(): string;
            public OnGUI ($plugin: UnityEditor.IAudioEffectPlugin) : boolean
        }
        /** DefaultAsset is used for assets that do not have a specific type (yet).
        */
        class DefaultAsset extends UnityEngine.Object
        {
            protected [__keep_incompatibility]: never;
        }
        /** BrokenPrefabAsset is for Prefab files where the file content cannot be loaded without errors.
        */
        class BrokenPrefabAsset extends UnityEditor.DefaultAsset
        {
            protected [__keep_incompatibility]: never;
            /** The broken parent Prefab file if it has not been deleted.
            */
            public get brokenPrefabParent(): UnityEditor.BrokenPrefabAsset;
            /** Returns true if the prefab is a variant.
            */
            public get isVariant(): boolean;
            /** Returns true if the content of the file is valid.
            */
            public get isPrefabFileValid(): boolean;
        }
        /** Building options. Multiple options can be combined together.
        */
        enum BuildOptions
        { None = 0, Development = 1, AutoRunPlayer = 4, ShowBuiltPlayer = 8, BuildAdditionalStreamedScenes = 16, AcceptExternalModificationsToPlayer = 32, InstallInBuildFolder = 64, CleanBuildCache = 128, ConnectWithProfiler = 256, AllowDebugging = 512, SymlinkLibraries = 1024, SymlinkSources = 1024, UncompressedAssetBundle = 2048, StripDebugSymbols = 0, CompressTextures = 0, ConnectToHost = 4096, CustomConnectionID = 8192, EnableHeadlessMode = 16384, BuildScriptsOnly = 32768, PatchPackage = 65536, Il2CPP = 0, ForceEnableAssertions = 131072, CompressWithLz4 = 262144, CompressWithLz4HC = 524288, ForceOptimizeScriptCompilation = 0, ComputeCRC = 1048576, StrictMode = 2097152, IncludeTestAssemblies = 4194304, NoUniqueIdentifier = 8388608, WaitForPlayerConnection = 33554432, EnableCodeCoverage = 67108864, EnableDeepProfilingSupport = 268435456, DetailedBuildReport = 536870912, ShaderLivelinkSupport = 0 }
        /** Asset Bundle building options.
        */
        enum BuildAssetBundleOptions
        { None = 0, UncompressedAssetBundle = 1, CollectDependencies = 2, CompleteAssets = 4, DisableWriteTypeTree = 8, DeterministicAssetBundle = 16, ForceRebuildAssetBundle = 32, IgnoreTypeTreeChanges = 64, AppendHashToAssetBundleName = 128, ChunkBasedCompression = 256, StrictMode = 512, DryRunBuild = 1024, DisableLoadAssetByFileName = 4096, DisableLoadAssetByFileNameWithExtension = 8192, AssetBundleStripUnityVersion = 32768, UseContentHash = 65536 }
        /** Whether you can append an existing build using BuildOptions.AcceptExternalModificationsToPlayer.
        */
        enum CanAppendBuild
        { Unsupported = 0, Yes = 1, No = 2 }
        /** AssetBundle building map entry.
        */
        class AssetBundleBuild extends System.ValueType
        {
            protected [__keep_incompatibility]: never;
            /** AssetBundle name.
            */
            public assetBundleName : string
            /** AssetBundle variant.
            */
            public assetBundleVariant : string
            /** Asset names which belong to the given AssetBundle.
            */
            public assetNames : System.Array$1<string>
            /** Addressable name used to load an asset.
            */
            public addressableNames : System.Array$1<string>
        }
        /** Provide various options to control the behavior of BuildPipeline.BuildPlayer.
        */
        class BuildPlayerOptions extends System.ValueType
        {
            protected [__keep_incompatibility]: never;
            /** The Scenes to be included in the build.
            */
            public get scenes(): System.Array$1<string>;
            public set scenes(value: System.Array$1<string>);
            /** The path where the application will be built.
            */
            public get locationPathName(): string;
            public set locationPathName(value: string);
            /** The path to an manifest file describing all of the asset bundles used in the build (optional).
            */
            public get assetBundleManifestPath(): string;
            public set assetBundleManifestPath(value: string);
            /** The BuildTargetGroup to build.
            */
            public get targetGroup(): UnityEditor.BuildTargetGroup;
            public set targetGroup(value: UnityEditor.BuildTargetGroup);
            /** The BuildTarget to build.
            */
            public get target(): UnityEditor.BuildTarget;
            public set target(value: UnityEditor.BuildTarget);
            /** The Subtarget to build.
            */
            public get subtarget(): number;
            public set subtarget(value: number);
            /** Additional BuildOptions, like whether to run the built player.
            */
            public get options(): UnityEditor.BuildOptions;
            public set options(value: UnityEditor.BuildOptions);
            /** User-specified preprocessor defines used while compiling assemblies for the player.
            */
            public get extraScriptingDefines(): System.Array$1<string>;
            public set extraScriptingDefines(value: System.Array$1<string>);
        }
        /** Describes how the player connects to the Editor.
        */
        enum PlayerConnectionInitiateMode
        { None = 0, PlayerConnectsToHost = 1, PlayerListens = 2 }
        /** Provide various options to control the behavior of BuildPipeline.BuildAssetBundles.
        */
        class BuildAssetBundlesParameters extends System.ValueType
        {
            protected [__keep_incompatibility]: never;
            /** Output path for the AssetBundles.
            */
            public get outputPath(): string;
            public set outputPath(value: string);
            /** Array defining the name and contents of each AssetBundle. (optional)
            */
            public get bundleDefinitions(): System.Array$1<UnityEditor.AssetBundleBuild>;
            public set bundleDefinitions(value: System.Array$1<UnityEditor.AssetBundleBuild>);
            /** Flags from the BuildAssetBundleOptions enum. (optional)
            */
            public get options(): UnityEditor.BuildAssetBundleOptions;
            public set options(value: UnityEditor.BuildAssetBundleOptions);
            /** The BuildTarget to build. (optional)
            */
            public get targetPlatform(): UnityEditor.BuildTarget;
            public set targetPlatform(value: UnityEditor.BuildTarget);
            /** The subtarget to build. (optional)
            */
            public get subtarget(): number;
            public set subtarget(value: number);
            /** User-specified preprocessor defines used while compiling assemblies during the AssetBundle build. (optional)
            */
            public get extraScriptingDefines(): System.Array$1<string>;
            public set extraScriptingDefines(value: System.Array$1<string>);
        }
        /** Lets you programmatically build players or AssetBundles which can be loaded from the web.
        */
        class BuildPipeline extends System.Object
        {
            protected [__keep_incompatibility]: never;
            /** Is a player currently being built?
            */
            public static get isBuildingPlayer(): boolean;
            public static GetBuildTargetGroup ($platform: UnityEditor.BuildTarget) : UnityEditor.BuildTargetGroup
            /** Given a BuildTarget will return the well known string representation for the build target platform.
            * @param $targetPlatform An instance of the BuildTarget enum.
            * @returns Target platform name represented by the passed in BuildTarget. 
            */
            public static GetBuildTargetName ($targetPlatform: UnityEditor.BuildTarget) : string
            /** Checks if Unity can append the build.
            * @param $target The BuildTarget to build.
            * @param $location The path where Unity builds the application.
            * @returns Returns a UnityEditor.CanAppendBuild enum that indicates whether Unity can append the build. 
            */
            public static BuildCanBeAppended ($target: UnityEditor.BuildTarget, $location: string) : UnityEditor.CanAppendBuild
            /** Builds a player. These overloads are still supported, but will be replaced. Please use BuildPlayer (BuildPlayerOptions buildPlayerOptions)  instead.
            * @param $scenes The Scenes to include in the build. If empty, the build only includes the currently open Scene. Paths are relative to the project folder (AssetsMyLevelsMyScene.unity).
            * @param $locationPathName The path where the application will be built.
            * @param $target The BuildTarget to build.
            * @param $options Additional BuildOptions, like whether to run the built player.
            * @returns An error message if an error occurred. 
            */
            public static BuildPlayer ($levels: System.Array$1<UnityEditor.EditorBuildSettingsScene>, $locationPathName: string, $target: UnityEditor.BuildTarget, $options: UnityEditor.BuildOptions) : UnityEditor.Build.Reporting.BuildReport
            /** Builds a player. These overloads are still supported, but will be replaced. Please use BuildPlayer (BuildPlayerOptions buildPlayerOptions)  instead.
            * @param $scenes The Scenes to include in the build. If empty, the build only includes the currently open Scene. Paths are relative to the project folder (AssetsMyLevelsMyScene.unity).
            * @param $locationPathName The path where the application will be built.
            * @param $target The BuildTarget to build.
            * @param $options Additional BuildOptions, like whether to run the built player.
            * @returns An error message if an error occurred. 
            */
            public static BuildPlayer ($levels: System.Array$1<string>, $locationPathName: string, $target: UnityEditor.BuildTarget, $options: UnityEditor.BuildOptions) : UnityEditor.Build.Reporting.BuildReport
            /** Builds a player.
            * @param $buildPlayerOptions Provide various options to control the behavior of BuildPipeline.BuildPlayer.
            * @returns A BuildReport giving build process information. 
            */
            public static BuildPlayer ($buildPlayerOptions: UnityEditor.BuildPlayerOptions) : UnityEditor.Build.Reporting.BuildReport
            /** Writes out a "boot.config" file that contains configuration information for the very early stages of engine startup.
            * @param $outputFile The location to write the file to.
            * @param $target The platform to target for this build.
            * @param $options Options for this build.
            */
            public static WriteBootConfig ($outputFile: string, $target: UnityEditor.BuildTarget, $options: UnityEditor.BuildOptions) : void
            /** Build all AssetBundles.
            * @param $outputPath Output path for the AssetBundles.
            * @param $assetBundleOptions AssetBundle building options.
            * @param $targetPlatform Chosen target build platform.
            * @returns The manifest listing all AssetBundles included in this build. 
            */
            public static BuildAssetBundles ($outputPath: string, $assetBundleOptions: UnityEditor.BuildAssetBundleOptions, $targetPlatform: UnityEditor.BuildTarget) : UnityEngine.AssetBundleManifest
            /** Build AssetBundles from a building map.
            * @param $outputPath Output path for the AssetBundles.
            * @param $builds AssetBundle building map.
            * @param $assetBundleOptions AssetBundle building options.
            * @param $targetPlatform Target build platform.
            * @returns The manifest listing all AssetBundles included in this build. 
            */
            public static BuildAssetBundles ($outputPath: string, $builds: System.Array$1<UnityEditor.AssetBundleBuild>, $assetBundleOptions: UnityEditor.BuildAssetBundleOptions, $targetPlatform: UnityEditor.BuildTarget) : UnityEngine.AssetBundleManifest
            /** Build AssetBundles.
            * @param $buildOptions Configuration of the build.
            * @returns The manifest summarizing all AssetBundles generated by the build. 
            */
            public static BuildAssetBundles ($buildParameters: UnityEditor.BuildAssetBundlesParameters) : UnityEngine.AssetBundleManifest
            /** Extract the crc checksum for the given AssetBundle.
            */
            public static GetCRCForAssetBundle ($targetPath: string, $crc: $Ref<number>) : boolean
            /** Extract the hash for the given AssetBundle.
            */
            public static GetHashForAssetBundle ($targetPath: string, $hash: $Ref<UnityEngine.Hash128>) : boolean
            /** Returns true if the specified build target is currently available in the Editor.
            * @param $buildTargetGroup build target group
            * @param $target build target
            */
            public static IsBuildTargetSupported ($buildTargetGroup: UnityEditor.BuildTargetGroup, $target: UnityEditor.BuildTarget) : boolean
            /** Returns the path of a player directory. For ex., Editor\Data\PlaybackEngines\AndroidPlayer.
            In some cases the player directory path can be affected by BuildOptions.Development.
            * @param $target Build target.
            * @param $options Build options.
            * @param $buildTargetGroup Build target group.
            */
            public static GetPlaybackEngineDirectory ($target: UnityEditor.BuildTarget, $options: UnityEditor.BuildOptions) : string
            public static GetPlaybackEngineDirectory ($target: UnityEditor.BuildTarget, $options: UnityEditor.BuildOptions, $assertUnsupportedPlatforms: boolean) : string
            /** Returns the path of a player directory. For ex., Editor\Data\PlaybackEngines\AndroidPlayer.
            In some cases the player directory path can be affected by BuildOptions.Development.
            * @param $target Build target.
            * @param $options Build options.
            * @param $buildTargetGroup Build target group.
            */
            public static GetPlaybackEngineDirectory ($buildTargetGroup: UnityEditor.BuildTargetGroup, $target: UnityEditor.BuildTarget, $options: UnityEditor.BuildOptions) : string
            public static GetPlaybackEngineDirectory ($buildTargetGroup: UnityEditor.BuildTargetGroup, $target: UnityEditor.BuildTarget, $options: UnityEditor.BuildOptions, $assertUnsupportedPlatforms: boolean) : string
            /** Returns the mode currently used by players to initiate a connect to the host.
            */
            public static GetPlayerConnectionInitiateMode ($targetPlatform: UnityEditor.BuildTarget, $buildOptions: UnityEditor.BuildOptions) : UnityEditor.PlayerConnectionInitiateMode
            public constructor ()
        }
        /** Represents entries in the Scenes list, as displayed in the window.
        */
        class EditorBuildSettingsScene extends System.Object implements System.IComparable
        {
            protected [__keep_incompatibility]: never;
            /** Whether this Scene is enabled for inclusion in the build.
            */
            public get enabled(): boolean;
            public set enabled(value: boolean);
            /** The file path of the Scene
            */
            public get path(): string;
            public set path(value: string);
            public get guid(): UnityEditor.GUID;
            public set guid(value: UnityEditor.GUID);
            public static GetActiveSceneList ($scenes: System.Array$1<UnityEditor.EditorBuildSettingsScene>) : System.Array$1<string>
            public CompareTo ($obj: any) : number
            public constructor ()
            public constructor ($path: string, $enabled: boolean)
            public constructor ($guid: UnityEditor.GUID, $enabled: boolean)
        }
        /** Base class for implementing sysroots and toolchains for IL2CPP
        */
        class Sysroot extends System.Object
        {
            protected [__keep_incompatibility]: never;
            /** Returns name of the sysroot
            */
            public get Name(): string;
            /** Returns name of the host platform
            */
            public get HostPlatform(): string;
            /** Returns name of the host architecture
            */
            public get HostArch(): string;
            /** Returns name of the target platform
            */
            public get TargetPlatform(): string;
            /** Returns name of the target architecture
            */
            public get TargetArch(): string;
            /** Initializes sysroot
            */
            public Initialize () : boolean
            /** Returns the next Il2Cpp argument on each call
            */
            public GetIl2CppArguments () : System.Collections.Generic.IEnumerable$1<string>
            /** Returns path to sysroot
            */
            public GetSysrootPath () : string
            /** Returns path to toolchain
            */
            public GetToolchainPath () : string
            /** Returns compiler flags string to pass to Il2Cpp
            */
            public GetIl2CppCompilerFlags () : string
            /** Returns linker flags string to pass to Il2Cpp
            */
            public GetIl2CppLinkerFlags () : string
        }
        /** The default build settings window.
        */
        class BuildPlayerWindow extends UnityEditor.EditorWindow
        {
            protected [__keep_incompatibility]: never;
            /** Open the build settings window.
            */
            public static ShowBuildPlayerWindow () : void
            public static GetPlaybackEngineDownloadURL ($moduleName: string) : string
            public static RegisterGetBuildPlayerOptionsHandler ($func: System.Func$2<UnityEditor.BuildPlayerOptions, UnityEditor.BuildPlayerOptions>) : void
            public static RegisterBuildPlayerHandler ($func: System.Action$1<UnityEditor.BuildPlayerOptions>) : void
            public constructor ()
        }
        /** Base class for Attributes that require a callback index.
        */
        class CallbackOrderAttribute extends System.Attribute implements System.Runtime.InteropServices._Attribute
        {
            protected [__keep_incompatibility]: never;
        }
        class PostProcessAttribute extends UnityEditor.CallbackOrderAttribute implements System.Runtime.InteropServices._Attribute
        {
            protected [__keep_incompatibility]: never;
        }
        /** Project points from world to screen space.
        */
        class CameraProjectionCache extends System.ValueType
        {
            protected [__keep_incompatibility]: never;
            /** Transforms position from world space into screen space using the cached camera projection and viewport.
            * @param $worldPoint A point in world space.
            * @returns The converted point in screen space. 
            */
            public WorldToScreenPoint ($worldPoint: UnityEngine.Vector3) : UnityEngine.Vector2
            /** Converts a world space point to a 2D GUI position.
            * @param $worldPoint A point in world space.
            * @returns A point in GUI space. 
            */
            public WorldToGUIPoint ($worldPoint: UnityEngine.Vector3) : UnityEngine.Vector2
            /** Converts a point from GUI position to screen space relative to the cached camera viewport.
            * @param $guiPoint A point in GUI space to convert to screen space.
            * @returns guiPoint in screen space relative to the cached camera viewport. 
            */
            public GUIToScreenPoint ($guiPoint: UnityEngine.Vector2) : UnityEngine.Vector2
            /** Converts a point from screen space to GUI position relative to the viewport at the time the CameraProjectionCache was created.
            * @param $screenPoint A point in screen space.
            * @returns screenPoint converted to GUI space relative to the cached camera viewport. 
            */
            public ScreenToGUIPoint ($screenPoint: UnityEngine.Vector2) : UnityEngine.Vector2
            public constructor ($camera: UnityEngine.Camera)
        }
        /** A class containing methods to assist with clipboard operations.
        */
        class ClipboardUtility extends System.Object
        {
            protected [__keep_incompatibility]: never;
            /** Optional filtering functions invoked to determine if a GameObject can be copied before any action is taken.
            */
            public static canCopyGameObject : System.Func$2<UnityEngine.GameObject, boolean>
            /** Optional filtering functions invoked to determine if a GameObject can be cut before any action is taken.
            */
            public static canCutGameObject : System.Func$2<UnityEngine.GameObject, boolean>
            /** Optional filtering functions invoked to determine if a GameObject can be duplicated before any action is taken.
            */
            public static canDuplicateGameObject : System.Func$2<UnityEngine.GameObject, boolean>
            public static add_copyingGameObjects ($value: System.Action$1<System.Array$1<UnityEngine.GameObject>>) : void
            public static remove_copyingGameObjects ($value: System.Action$1<System.Array$1<UnityEngine.GameObject>>) : void
            public static add_cuttingGameObjects ($value: System.Action$1<System.Array$1<UnityEngine.GameObject>>) : void
            public static remove_cuttingGameObjects ($value: System.Action$1<System.Array$1<UnityEngine.GameObject>>) : void
            public static add_duplicatingGameObjects ($value: System.Action$1<System.Array$1<UnityEngine.GameObject>>) : void
            public static remove_duplicatingGameObjects ($value: System.Action$1<System.Array$1<UnityEngine.GameObject>>) : void
            public static add_duplicatedGameObjects ($value: System.Action$1<System.Array$1<UnityEngine.GameObject>>) : void
            public static remove_duplicatedGameObjects ($value: System.Action$1<System.Array$1<UnityEngine.GameObject>>) : void
            public static add_rejectedGameObjects ($value: System.Action$1<System.Array$1<UnityEngine.GameObject>>) : void
            public static remove_rejectedGameObjects ($value: System.Action$1<System.Array$1<UnityEngine.GameObject>>) : void
            public static add_pastedGameObjects ($value: System.Action$1<System.Array$1<UnityEngine.GameObject>>) : void
            public static remove_pastedGameObjects ($value: System.Action$1<System.Array$1<UnityEngine.GameObject>>) : void
        }
        interface CommandHandler
        { 
        (context: UnityEditor.CommandExecuteContext) : void; 
        Invoke?: (context: UnityEditor.CommandExecuteContext) => void;
        }
        var CommandHandler: { new (func: (context: UnityEditor.CommandExecuteContext) => void): CommandHandler; }
        class CommandExecuteContext extends System.Object
        {
            protected [__keep_incompatibility]: never;
            public args : System.Array$1<any>
            public result : any
            public hint : UnityEditor.CommandHint
            public get data(): any;
            public constructor ()
        }
        class CommandHandlerAttribute extends System.Attribute implements System.Runtime.InteropServices._Attribute
        {
            protected [__keep_incompatibility]: never;
            public get id(): string;
            public get label(): string;
            public get hint(): UnityEditor.CommandHint;
            public constructor ($id: string, $label: string, $hint: UnityEditor.CommandHint)
            public constructor ($id: string)
            public constructor ($id: string, $hint: UnityEditor.CommandHint)
            public constructor ($id: string, $label: string)
        }
        enum CommandHint
        { Undefined = -1, None = 0, Event = 1, Menu = 2, Shortcut = 4, Shelf = 8, UI = 1048576, OnGUI = 3145728, UIElements = 5242880, Validate = 1073741824, UserDefined = -2147483648, Any = -1 }
        class CommandService extends System.Object
        {
            protected [__keep_incompatibility]: never;
            public static GetCommandLabel ($commandId: string) : string
            public static RegisterCommand ($id: string, $label: string, $handler: UnityEditor.CommandHandler, $hint?: UnityEditor.CommandHint) : void
            public static RegisterCommand ($id: string, $handler: UnityEditor.CommandHandler, $hint?: UnityEditor.CommandHint) : void
            public static UnregisterCommand ($id: string) : boolean
            public static Exists ($id: string) : boolean
            public static Execute ($id: string) : any
            public static Execute ($id: string, $hint: UnityEditor.CommandHint) : any
            public static Execute ($id: string, $hint: UnityEditor.CommandHint, ...args: any[]) : any
        }
        /** Console Window Utility class.
        */
        class ConsoleWindowUtility extends System.Object
        {
            protected [__keep_incompatibility]: never;
            public static add_consoleLogsChanged ($value: System.Action) : void
            public static remove_consoleLogsChanged ($value: System.Action) : void
            public static GetConsoleLogCounts ($error: $Ref<number>, $warn: $Ref<number>, $log: $Ref<number>) : void
        }
        /** Options for the different DataModes of an EditorWindow.
        */
        enum DataMode
        { Disabled = 0, Authoring = 1, Mixed = 2, Runtime = 3 }
        /** Container for the different parameters of the IDataModeController.dataModeChanged event.
        */
        class DataModeChangeEventArgs extends System.ValueType
        {
            protected [__keep_incompatibility]: never;
            /** DataMode to which the EditorWindow should change.
            */
            public nextDataMode : UnityEditor.DataMode
            /** Whether the change was initiated by the DataMode switcher UI at the top-right of the EditorWindow.
            */
            public changedThroughUI : boolean
            public constructor ($nextDataMode: UnityEditor.DataMode, $changedThroughUI: boolean)
        }
        interface IDataModeController
        {
            /** Returns the DataMode currently active for the EditorWindow that owns this instance of IDataModeController.
            */
            dataMode : UnityEditor.DataMode
            add_dataModeChanged ($value: System.Action$1<UnityEditor.DataModeChangeEventArgs>) : void
            remove_dataModeChanged ($value: System.Action$1<UnityEditor.DataModeChangeEventArgs>) : void
            UpdateSupportedDataModes ($supportedDataMode: System.Collections.Generic.IList$1<UnityEditor.DataMode>, $preferredDataMode: UnityEditor.DataMode) : void
            /** Requests a DataMode change for the EditorWindow.
            * @param $newDataMode The DataMode to which the Editor window should change.
            * @returns Whether current Editor window has changed to the requested DataMode. 
            */
            TryChangeDataMode ($newDataMode: UnityEditor.DataMode) : boolean
        }
        interface IDataModeHandler
        {
            dataMode : UnityEditor.DataMode
            supportedDataModes : System.Collections.Generic.IReadOnlyList$1<UnityEditor.DataMode>
            IsDataModeSupported ($mode: UnityEditor.DataMode) : boolean
            SwitchToNextDataMode () : void
            SwitchToDataMode ($mode: UnityEditor.DataMode) : void
            SwitchToDefaultDataMode () : void
        }
        interface IDataModeHandlerAndDispatcher extends UnityEditor.IDataModeHandler
        {
            dataMode : UnityEditor.DataMode
            supportedDataModes : System.Collections.Generic.IReadOnlyList$1<UnityEditor.DataMode>
            add_dataModeChanged ($value: System.Action$1<UnityEditor.DataMode>) : void
            remove_dataModeChanged ($value: System.Action$1<UnityEditor.DataMode>) : void
            IsDataModeSupported ($mode: UnityEditor.DataMode) : boolean
            SwitchToNextDataMode () : void
            SwitchToDataMode ($mode: UnityEditor.DataMode) : void
            SwitchToDefaultDataMode () : void
        }
        /** IDs for core windows. These are used by the DragAndDrop.RemoveHandler API.
        */
        class DragAndDropWindowTarget extends System.ValueType
        {
            protected [__keep_incompatibility]: never;
            /** ID to target the Project browser.
            */
            public static projectBrowser : number
            /** ID to target the Scene view.
            */
            public static sceneView : number
            /** ID to target the Hierarchy.
            */
            public static hierarchy : number
            /** ID to target the Inspector.
            */
            public static inspector : number
        }
        /** Editor drag & drop operations.
        */
        class DragAndDrop extends System.Object
        {
            protected [__keep_incompatibility]: never;
            /** References to Object|objects being dragged.
            */
            public static get objectReferences(): System.Array$1<UnityEngine.Object>;
            public static set objectReferences(value: System.Array$1<UnityEngine.Object>);
            /** The file names being dragged.
            */
            public static get paths(): System.Array$1<string>;
            public static set paths(value: System.Array$1<string>);
            /** Get or set ID of currently active drag and drop control.
            */
            public static get activeControlID(): number;
            public static set activeControlID(value: number);
            /** The visual indication of the drag.
            */
            public static get visualMode(): UnityEditor.DragAndDropVisualMode;
            public static set visualMode(value: UnityEditor.DragAndDropVisualMode);
            /** Clears drag & drop data.
            */
            public static PrepareStartDrag () : void
            /** Start a drag operation.
            */
            public static StartDrag ($title: string) : void
            /** Get data associated with current drag and drop operation.
            */
            public static GetGenericData ($type: string) : any
            /** Set data associated with current drag and drop operation.
            */
            public static SetGenericData ($type: string, $data: any) : void
            /** Accept a drag operation.
            */
            public static AcceptDrag () : void
            /** Check if the handler is already registered for the destination window ID.
            * @param $dropDstId ID of the destination window.
            * @param $handler The handler of the targeted window.
            * @returns True if the handler is already registered. 
            */
            public static HasHandler ($dropDstId: number, $handler: Function) : boolean
            public static AddDropHandler ($handler: UnityEditor.DragAndDrop.ProjectBrowserDropHandler) : void
            public static AddDropHandler ($handler: UnityEditor.DragAndDrop.SceneDropHandler) : void
            public static AddDropHandler ($handler: UnityEditor.DragAndDrop.HierarchyDropHandler) : void
            public static AddDropHandler ($handler: UnityEditor.DragAndDrop.InspectorDropHandler) : void
            public static RemoveDropHandler ($handler: UnityEditor.DragAndDrop.ProjectBrowserDropHandler) : void
            public static RemoveDropHandler ($handler: UnityEditor.DragAndDrop.SceneDropHandler) : void
            public static RemoveDropHandler ($handler: UnityEditor.DragAndDrop.HierarchyDropHandler) : void
            public static RemoveDropHandler ($handler: UnityEditor.DragAndDrop.InspectorDropHandler) : void
            public constructor ()
        }
        /** Determines how a gizmo is drawn or picked in the Unity editor.
        */
        enum GizmoType
        { Pickable = 1, NotInSelectionHierarchy = 2, NonSelected = 32, Selected = 4, Active = 8, InSelectionHierarchy = 16, NotSelected = -127, SelectedOrChild = -127 }
        /** The DrawGizmo attribute allows you to supply a gizmo renderer for any Component.
        */
        class DrawGizmo extends System.Attribute implements System.Runtime.InteropServices._Attribute
        {
            protected [__keep_incompatibility]: never;
            public drawnType : System.Type
            public drawOptions : UnityEditor.GizmoType
            public constructor ($gizmo: UnityEditor.GizmoType)
            public constructor ($gizmo: UnityEditor.GizmoType, $drawnGizmoType: System.Type)
        }
        /** Main Application class.
        */
        class EditorApplication extends System.Object
        {
            protected [__keep_incompatibility]: never;
            /** Delegate for OnGUI events for every visible list item in the ProjectWindow.
            */
            public static projectWindowItemOnGUI : UnityEditor.EditorApplication.ProjectWindowItemCallback
            /** Delegate for OnGUI events for every visible list item in the ProjectWindow.
            */
            public static projectWindowItemInstanceOnGUI : UnityEditor.EditorApplication.ProjectWindowItemInstanceCallback
            /** Delegate for OnGUI events for every visible list item in the HierarchyWindow.
            */
            public static hierarchyWindowItemOnGUI : UnityEditor.EditorApplication.HierarchyWindowItemCallback
            /** Delegate for generic updates.
            */
            public static update : UnityEditor.EditorApplication.CallbackFunction
            /** Delegate which is called once after all inspectors update.
            */
            public static delayCall : UnityEditor.EditorApplication.CallbackFunction
            /** Callback raised whenever the contents of a window's search box are changed.
            */
            public static searchChanged : UnityEditor.EditorApplication.CallbackFunction
            /** Delegate for changed keyboard modifier keys.
            */
            public static modifierKeysChanged : UnityEditor.EditorApplication.CallbackFunction
            /** Callback raised whenever the user context-clicks on a property in an Inspector.
            */
            public static contextualPropertyMenu : UnityEditor.EditorApplication.SerializedPropertyCallbackFunction
            /** Whether the Editor is in Play mode.
            */
            public static get isPlaying(): boolean;
            public static set isPlaying(value: boolean);
            /** Whether the Editor is either currently in Play mode or about to switch to it. (Read Only)
            */
            public static get isPlayingOrWillChangePlaymode(): boolean;
            /** Whether the Editor is paused.
            */
            public static get isPaused(): boolean;
            public static set isPaused(value: boolean);
            /** Is editor currently compiling scripts? (Read Only)
            */
            public static get isCompiling(): boolean;
            /** True if the Editor is currently refreshing the AssetDatabase.
            */
            public static get isUpdating(): boolean;
            /** Is editor currently connected to Unity Remote 4 client app.
            */
            public static get isRemoteConnected(): boolean;
            /** Path to the Unity editor contents folder. (Read Only)
            */
            public static get applicationContentsPath(): string;
            /** Gets the path to the Unity Editor application. (Read Only)
            */
            public static get applicationPath(): string;
            /** Returns true if the current project was created from a template project.
            */
            public static get isCreateFromTemplate(): boolean;
            /** Returns true if the current project was created as a temporary project.
            */
            public static get isTemporaryProject(): boolean;
            /** The time since the editor was started. (Read Only)
            */
            public static get timeSinceStartup(): number;
            /** Whether the Editor is the focused window of the operating system. (Read Only)
            */
            public static get isFocused(): boolean;
            /** Open another project.
            * @param $projectPath The path of a project to open.
            * @param $args Arguments to pass to command line.
            */
            public static OpenProject ($projectPath: string, ...args: string[]) : void
            /** Switches the editor to Play mode.
            */
            public static EnterPlaymode () : void
            /** Switches the editor to Edit mode.
            */
            public static ExitPlaymode () : void
            /** Perform a single frame step.
            */
            public static Step () : void
            /** Prevents loading of assemblies when it is inconvenient.
            */
            public static LockReloadAssemblies () : void
            /** Must be called after LockReloadAssemblies, to reenable loading of assemblies.
            */
            public static UnlockReloadAssemblies () : void
            /** Invokes the menu item in the specified path.
            */
            public static ExecuteMenuItem ($menuItemPath: string) : boolean
            /** Sets the path that Unity should store the current temporary project at, when the project is closed.
            * @param $path The path that the current temporary project should be relocated to when closing it.
            */
            public static SetTemporaryProjectKeepPath ($path: string) : void
            /** Exit the Unity editor application.
            */
            public static Exit ($returnValue: number) : void
            /** Normally, a player loop update will occur in the editor when the Scene has been modified. This method allows you to queue a player loop update regardless of whether the Scene has been modified.
            */
            public static QueuePlayerLoopUpdate () : void
            /** Force Unity Editor to update its window title. This function is automatically called when a new scene is loaded or when the editor starts. A user having register a callback on EditorApplication.updateMainWindowTitle can call this function to force an update of the title.
            */
            public static UpdateMainWindowTitle () : void
            /** Plays system beep sound.
            */
            public static Beep () : void
            /** Can be used to ensure repaint of the ProjectWindow.
            */
            public static RepaintProjectWindow () : void
            public static RepaintAnimationWindow () : void
            /** Can be used to ensure repaint of the HierarchyWindow.
            */
            public static RepaintHierarchyWindow () : void
            /** Set the hierarchy sorting method as dirty.
            */
            public static DirtyHierarchyWindowSorting () : void
            public static add_wantsToQuit ($value: System.Func$1<boolean>) : void
            public static remove_wantsToQuit ($value: System.Func$1<boolean>) : void
            public static add_quitting ($value: System.Action) : void
            public static remove_quitting ($value: System.Action) : void
            public static add_hierarchyChanged ($value: System.Action) : void
            public static remove_hierarchyChanged ($value: System.Action) : void
            public static add_projectChanged ($value: System.Action) : void
            public static remove_projectChanged ($value: System.Action) : void
            public static add_pauseStateChanged ($value: System.Action$1<UnityEditor.PauseState>) : void
            public static remove_pauseStateChanged ($value: System.Action$1<UnityEditor.PauseState>) : void
            public static add_playModeStateChanged ($value: System.Action$1<UnityEditor.PlayModeStateChange>) : void
            public static remove_playModeStateChanged ($value: System.Action$1<UnityEditor.PlayModeStateChange>) : void
            public static add_focusChanged ($value: System.Action$1<boolean>) : void
            public static remove_focusChanged ($value: System.Action$1<boolean>) : void
            public static add_updateMainWindowTitle ($value: System.Action$1<UnityEditor.ApplicationTitleDescriptor>) : void
            public static remove_updateMainWindowTitle ($value: System.Action$1<UnityEditor.ApplicationTitleDescriptor>) : void
            public constructor ()
        }
        /** Available scripting runtimes to be used by the Editor and Players.
        */
        enum ScriptingRuntimeVersion
        { Legacy = 0, Latest = 1 }
        /** Enumeration specifying the current pause state of the Editor.
        Additional resources: PlayModeStateChange, EditorApplication.pauseStateChanged, EditorApplication.isPaused.
        */
        enum PauseState
        { Paused = 0, Unpaused = 1 }
        /** Enumeration specifying a change in the Editor's play mode state.
        Additional resources: PauseState, EditorApplication.playModeStateChanged, EditorApplication.isPlaying.
        */
        enum PlayModeStateChange
        { EnteredEditMode = 0, ExitingEditMode = 1, EnteredPlayMode = 2, ExitingPlayMode = 3 }
        /** Utility class containing all the information necessary to format Unity Editor main window title. All the various fields are concatenated to create a fully formed title. If only ApplicationTitleDescriptor.title is provided, this will become the complete title.
        */
        class ApplicationTitleDescriptor extends System.Object
        {
            protected [__keep_incompatibility]: never;
            /** Setting this field will set the complete editor title without using any of the other fields of ApplicationTitleDescriptor.
            */
            public title : string
            /** Current project name.
            */
            public get projectName(): string;
            /** Unity version.
            */
            public get unityVersion(): string;
            /** Unity active scene.
            */
            public get activeSceneName(): string;
            /** What is the runtime target for a Unity build.
            */
            public get targetName(): string;
            /** Is code coverage enabled.
            */
            public get codeCoverageEnabled(): boolean;
            public constructor ($projectName: string, $unityVersion: string, $activeSceneName: string, $targetName: string, $codeCoverageEnabled: boolean)
        }
        /** Allows you to initialize an Editor class when Unity loads, and when your scripts are recompiled.
        */
        class InitializeOnLoadAttribute extends System.Attribute implements System.Runtime.InteropServices._Attribute
        {
            protected [__keep_incompatibility]: never;
            public constructor ()
        }
        /** Allow an editor class method to be initialized when Unity loads without action from the user.
        */
        class InitializeOnLoadMethodAttribute extends System.Attribute implements System.Runtime.InteropServices._Attribute
        {
            protected [__keep_incompatibility]: never;
            public constructor ()
        }
        /** Allow an editor class method to be initialized when Unity enters Play Mode.
        */
        class InitializeOnEnterPlayModeAttribute extends System.Attribute implements System.Runtime.InteropServices._Attribute
        {
            protected [__keep_incompatibility]: never;
            public constructor ()
        }
        /** This class allows you to modify the Editor via script.
        */
        class EditorBuildSettings extends UnityEngine.Object
        {
            protected [__keep_incompatibility]: never;
            /** The list of Scenes that should be included in the build.
            */
            public static get scenes(): System.Array$1<UnityEditor.EditorBuildSettingsScene>;
            public static set scenes(value: System.Array$1<UnityEditor.EditorBuildSettingsScene>);
            /** Enables multi-process AssetBundle building.
            Additional resources: BuildPipeline.BuildAssetBundles
            */
            public static get UseParallelAssetBundleBuilding(): boolean;
            public static set UseParallelAssetBundleBuilding(value: boolean);
            public static add_sceneListChanged ($value: System.Action) : void
            public static remove_sceneListChanged ($value: System.Action) : void
            /** Remove a config object reference by name.
            * @param $name The name in string format of the config object reference to be removed. This is the name given to the object when the reference is first created. Note: This may be different than the object name as an object can be added multiple times with different names.
            * @returns Returns true if the reference was found and removed, otherwise false. 
            */
            public static RemoveConfigObject ($name: string) : boolean
            /** Return a string array containing the names of all stored config object references.
            * @returns Returns an array of strings containing the names of all stored references.  If there are no references, an empty array will be returned. 
            */
            public static GetConfigObjectNames () : System.Array$1<string>
            /** Store a reference to a config object by name.  The object must be an asset in the project, otherwise it will not be saved when the editor is restarted or scripts are reloaded.  To avoid name conflicts with other packages, it is recommended that names are qualified by a namespace, i.e. "company.package.name".
            * @param $name The name of the object reference in string format. This string name must be unique within your project or the overwrite parameter must be set to true.
            * @param $obj Object reference to be stored.  This object must be persisted and not null.
            * @param $overwrite Boolean parameter used to specify that you want to overwrite an entry with the same name if one already exists.
            * @returns Throws an exception if the object is null, not persisted, or if there is a name conflict and the overwrite parameter is set to false. 
            */
            public static AddConfigObject ($name: string, $obj: UnityEngine.Object, $overwrite: boolean) : void
        }
        /** These work pretty much like the normal GUI functions - and also have matching implementations in EditorGUILayout.
        */
        class EditorGUI extends System.Object
        {
            protected [__keep_incompatibility]: never;
            /** Makes the following controls give the appearance of editing multiple different values.
            */
            public static get showMixedValue(): boolean;
            public static set showMixedValue(value: boolean);
            /** Is the platform-dependent "action" modifier key held down? (Read Only)
            */
            public static get actionKey(): boolean;
            /** The indent level of the field labels.
            */
            public static get indentLevel(): number;
            public static set indentLevel(value: number);
            /** Move keyboard focus to a named text field and begin editing of the content.
            * @param $name Name set using GUI.SetNextControlName.
            */
            public static FocusTextInControl ($name: string) : void
            /** Create a group of controls that can be disabled.
            * @param $disabled Boolean specifying if the controls inside the group should be disabled.
            */
            public static BeginDisabledGroup ($disabled: boolean) : void
            /** Ends a disabled group started with BeginDisabledGroup.
            */
            public static EndDisabledGroup () : void
            /** Starts a new code block to check for GUI changes.
            */
            public static BeginChangeCheck () : void
            /** Ends a code block and checks for any GUI changes.
            * @returns Returns true if GUI state changed since the call to EditorGUI.BeginChangeCheck, otherwise false. 
            */
            public static EndChangeCheck () : boolean
            /** Draws a label with a drop shadow.
            * @param $position Where to show the label.
            * @param $content Text to show
            @style style to use.
            */
            public static DropShadowLabel ($position: UnityEngine.Rect, $text: string) : void
            /** Draws a label with a drop shadow.
            * @param $position Where to show the label.
            * @param $content Text to show
            @style style to use.
            */
            public static DropShadowLabel ($position: UnityEngine.Rect, $content: UnityEngine.GUIContent) : void
            /** Draws a label with a drop shadow.
            * @param $position Where to show the label.
            * @param $content Text to show
            @style style to use.
            */
            public static DropShadowLabel ($position: UnityEngine.Rect, $text: string, $style: UnityEngine.GUIStyle) : void
            /** Draws a label with a drop shadow.
            * @param $position Where to show the label.
            * @param $content Text to show
            @style style to use.
            */
            public static DropShadowLabel ($position: UnityEngine.Rect, $content: UnityEngine.GUIContent, $style: UnityEngine.GUIStyle) : void
            public static add_hyperLinkClicked ($value: System.Action$2<UnityEditor.EditorWindow, UnityEditor.HyperLinkClickedEventArgs>) : void
            public static remove_hyperLinkClicked ($value: System.Action$2<UnityEditor.EditorWindow, UnityEditor.HyperLinkClickedEventArgs>) : void
            /** Makes a toggle.
            * @param $position Rectangle on the screen to use for the toggle.
            * @param $label Optional label in front of the toggle.
            * @param $value The shown state of the toggle.
            * @param $style Optional GUIStyle.
            * @returns The selected state of the toggle. 
            */
            public static Toggle ($position: UnityEngine.Rect, $value: boolean) : boolean
            /** Makes a toggle.
            * @param $position Rectangle on the screen to use for the toggle.
            * @param $label Optional label in front of the toggle.
            * @param $value The shown state of the toggle.
            * @param $style Optional GUIStyle.
            * @returns The selected state of the toggle. 
            */
            public static Toggle ($position: UnityEngine.Rect, $label: string, $value: boolean) : boolean
            /** Makes a toggle.
            * @param $position Rectangle on the screen to use for the toggle.
            * @param $label Optional label in front of the toggle.
            * @param $value The shown state of the toggle.
            * @param $style Optional GUIStyle.
            * @returns The selected state of the toggle. 
            */
            public static Toggle ($position: UnityEngine.Rect, $value: boolean, $style: UnityEngine.GUIStyle) : boolean
            /** Makes a toggle.
            * @param $position Rectangle on the screen to use for the toggle.
            * @param $label Optional label in front of the toggle.
            * @param $value The shown state of the toggle.
            * @param $style Optional GUIStyle.
            * @returns The selected state of the toggle. 
            */
            public static Toggle ($position: UnityEngine.Rect, $label: string, $value: boolean, $style: UnityEngine.GUIStyle) : boolean
            /** Makes a toggle.
            * @param $position Rectangle on the screen to use for the toggle.
            * @param $label Optional label in front of the toggle.
            * @param $value The shown state of the toggle.
            * @param $style Optional GUIStyle.
            * @returns The selected state of the toggle. 
            */
            public static Toggle ($position: UnityEngine.Rect, $label: UnityEngine.GUIContent, $value: boolean) : boolean
            /** Makes a toggle.
            * @param $position Rectangle on the screen to use for the toggle.
            * @param $label Optional label in front of the toggle.
            * @param $value The shown state of the toggle.
            * @param $style Optional GUIStyle.
            * @returns The selected state of the toggle. 
            */
            public static Toggle ($position: UnityEngine.Rect, $label: UnityEngine.GUIContent, $value: boolean, $style: UnityEngine.GUIStyle) : boolean
            /** Makes a slider the user can drag to change a value between a min and a max.
            * @param $position Rectangle on the screen to use for the slider.
            * @param $label Optional label in front of the slider.
            * @param $value The value the slider shows. This determines the position of the draggable thumb.
            * @param $leftValue The value at the left end of the slider.
            * @param $rightValue The value at the right end of the slider.
            * @returns The value that has been set by the user. 
            */
            public static Slider ($position: UnityEngine.Rect, $value: number, $leftValue: number, $rightValue: number) : number
            /** Makes a slider the user can drag to change a value between a min and a max.
            * @param $position Rectangle on the screen to use for the slider.
            * @param $label Optional label in front of the slider.
            * @param $value The value the slider shows. This determines the position of the draggable thumb.
            * @param $leftValue The value at the left end of the slider.
            * @param $rightValue The value at the right end of the slider.
            * @returns The value that has been set by the user. 
            */
            public static Slider ($position: UnityEngine.Rect, $label: string, $value: number, $leftValue: number, $rightValue: number) : number
            /** Makes a slider the user can drag to change a value between a min and a max.
            * @param $position Rectangle on the screen to use for the slider.
            * @param $label Optional label in front of the slider.
            * @param $value The value the slider shows. This determines the position of the draggable thumb.
            * @param $leftValue The value at the left end of the slider.
            * @param $rightValue The value at the right end of the slider.
            * @returns The value that has been set by the user. 
            */
            public static Slider ($position: UnityEngine.Rect, $label: UnityEngine.GUIContent, $value: number, $leftValue: number, $rightValue: number) : number
            /** Makes a slider the user can drag to change a value between a min and a max.
            * @param $position Rectangle on the screen to use for the slider.
            * @param $label Optional label in front of the slider.
            * @param $property The value the slider shows. This determines the position of the draggable thumb.
            * @param $leftValue The value at the left end of the slider.
            * @param $rightValue The value at the right end of the slider.
            */
            public static Slider ($position: UnityEngine.Rect, $property: UnityEditor.SerializedProperty, $leftValue: number, $rightValue: number) : void
            /** Makes a slider the user can drag to change a value between a min and a max.
            * @param $position Rectangle on the screen to use for the slider.
            * @param $label Optional label in front of the slider.
            * @param $property The value the slider shows. This determines the position of the draggable thumb.
            * @param $leftValue The value at the left end of the slider.
            * @param $rightValue The value at the right end of the slider.
            */
            public static Slider ($position: UnityEngine.Rect, $property: UnityEditor.SerializedProperty, $leftValue: number, $rightValue: number, $label: string) : void
            /** Makes a slider the user can drag to change a value between a min and a max.
            * @param $position Rectangle on the screen to use for the slider.
            * @param $label Optional label in front of the slider.
            * @param $property The value the slider shows. This determines the position of the draggable thumb.
            * @param $leftValue The value at the left end of the slider.
            * @param $rightValue The value at the right end of the slider.
            */
            public static Slider ($position: UnityEngine.Rect, $property: UnityEditor.SerializedProperty, $leftValue: number, $rightValue: number, $label: UnityEngine.GUIContent) : void
            /** Makes a slider the user can drag to change an integer value between a min and a max.
            * @param $position Rectangle on the screen to use for the slider.
            * @param $label Optional label in front of the slider.
            * @param $value The value the slider shows. This determines the position of the draggable thumb.
            * @param $leftValue The value at the left end of the slider.
            * @param $rightValue The value at the right end of the slider.
            * @returns The value that has been set by the user. 
            */
            public static IntSlider ($position: UnityEngine.Rect, $value: number, $leftValue: number, $rightValue: number) : number
            /** Makes a slider the user can drag to change an integer value between a min and a max.
            * @param $position Rectangle on the screen to use for the slider.
            * @param $label Optional label in front of the slider.
            * @param $value The value the slider shows. This determines the position of the draggable thumb.
            * @param $leftValue The value at the left end of the slider.
            * @param $rightValue The value at the right end of the slider.
            * @returns The value that has been set by the user. 
            */
            public static IntSlider ($position: UnityEngine.Rect, $label: string, $value: number, $leftValue: number, $rightValue: number) : number
            /** Makes a slider the user can drag to change an integer value between a min and a max.
            * @param $position Rectangle on the screen to use for the slider.
            * @param $label Optional label in front of the slider.
            * @param $value The value the slider shows. This determines the position of the draggable thumb.
            * @param $leftValue The value at the left end of the slider.
            * @param $rightValue The value at the right end of the slider.
            * @returns The value that has been set by the user. 
            */
            public static IntSlider ($position: UnityEngine.Rect, $label: UnityEngine.GUIContent, $value: number, $leftValue: number, $rightValue: number) : number
            /** Makes a slider the user can drag to change a value between a min and a max.
            * @param $position Rectangle on the screen to use for the slider.
            * @param $label Optional label in front of the slider.
            * @param $property The value the slider shows. This determines the position of the draggable thumb.
            * @param $leftValue The value at the left end of the slider.
            * @param $rightValue The value at the right end of the slider.
            */
            public static IntSlider ($position: UnityEngine.Rect, $property: UnityEditor.SerializedProperty, $leftValue: number, $rightValue: number) : void
            /** Makes a slider the user can drag to change a value between a min and a max.
            * @param $position Rectangle on the screen to use for the slider.
            * @param $label Optional label in front of the slider.
            * @param $property The value the slider shows. This determines the position of the draggable thumb.
            * @param $leftValue The value at the left end of the slider.
            * @param $rightValue The value at the right end of the slider.
            */
            public static IntSlider ($position: UnityEngine.Rect, $property: UnityEditor.SerializedProperty, $leftValue: number, $rightValue: number, $label: string) : void
            /** Makes a slider the user can drag to change a value between a min and a max.
            * @param $position Rectangle on the screen to use for the slider.
            * @param $label Optional label in front of the slider.
            * @param $property The value the slider shows. This determines the position of the draggable thumb.
            * @param $leftValue The value at the left end of the slider.
            * @param $rightValue The value at the right end of the slider.
            */
            public static IntSlider ($position: UnityEngine.Rect, $property: UnityEditor.SerializedProperty, $leftValue: number, $rightValue: number, $label: UnityEngine.GUIContent) : void
            /** Makes a special slider the user can use to specify a range between a min and a max.
            * @param $position Rectangle on the screen to use for the slider.
            * @param $label Optional label in front of the slider.
            * @param $minValue The lower value of the range the slider shows, passed by reference.
            * @param $maxValue The upper value at the range the slider shows, passed by reference.
            * @param $minLimit The limit at the left end of the slider.
            * @param $maxLimit The limit at the right end of the slider.
            */
            public static MinMaxSlider ($position: UnityEngine.Rect, $label: string, $minValue: $Ref<number>, $maxValue: $Ref<number>, $minLimit: number, $maxLimit: number) : void
            /** Makes a special slider the user can use to specify a range between a min and a max.
            * @param $position Rectangle on the screen to use for the slider.
            * @param $label Optional label in front of the slider.
            * @param $minValue The lower value of the range the slider shows, passed by reference.
            * @param $maxValue The upper value at the range the slider shows, passed by reference.
            * @param $minLimit The limit at the left end of the slider.
            * @param $maxLimit The limit at the right end of the slider.
            */
            public static MinMaxSlider ($position: UnityEngine.Rect, $label: UnityEngine.GUIContent, $minValue: $Ref<number>, $maxValue: $Ref<number>, $minLimit: number, $maxLimit: number) : void
            /** Makes a special slider the user can use to specify a range between a min and a max.
            * @param $position Rectangle on the screen to use for the slider.
            * @param $label Optional label in front of the slider.
            * @param $minValue The lower value of the range the slider shows, passed by reference.
            * @param $maxValue The upper value at the range the slider shows, passed by reference.
            * @param $minLimit The limit at the left end of the slider.
            * @param $maxLimit The limit at the right end of the slider.
            */
            public static MinMaxSlider ($position: UnityEngine.Rect, $minValue: $Ref<number>, $maxValue: $Ref<number>, $minLimit: number, $maxLimit: number) : void
            /** Displays a menu with an option for every value of the enum type when clicked. An option for the value 0 with name "Nothing" and an option for the value ~0 (that is, all bits set) with the name "Everything" are always displayed at the top of the menu. The names for the values 0 and ~0 can be overriden by defining these values in the enum type.
            * @param $position Rectangle on the screen to use for the enum flags field.
            * @param $label Optional label to display in front of the enum flags field.
            * @param $enumValue Enum flags value (Only supports enum values for enum types with int as the underlying type).
            * @param $style Optional GUIStyle.
            * @param $includeObsolete Set to true to include Enum values with ObsoleteAttribute. Set to false to exclude Enum values with ObsoleteAttribute.
            * @returns The enum flags value modified by the user. This is a selection BitMask where each bit represents an Enum value index. (Note this returned value is not itself an Enum). 
            */
            public static EnumFlagsField ($position: UnityEngine.Rect, $enumValue: System.Enum) : System.Enum
            /** Displays a menu with an option for every value of the enum type when clicked. An option for the value 0 with name "Nothing" and an option for the value ~0 (that is, all bits set) with the name "Everything" are always displayed at the top of the menu. The names for the values 0 and ~0 can be overriden by defining these values in the enum type.
            * @param $position Rectangle on the screen to use for the enum flags field.
            * @param $label Optional label to display in front of the enum flags field.
            * @param $enumValue Enum flags value (Only supports enum values for enum types with int as the underlying type).
            * @param $style Optional GUIStyle.
            * @param $includeObsolete Set to true to include Enum values with ObsoleteAttribute. Set to false to exclude Enum values with ObsoleteAttribute.
            * @returns The enum flags value modified by the user. This is a selection BitMask where each bit represents an Enum value index. (Note this returned value is not itself an Enum). 
            */
            public static EnumFlagsField ($position: UnityEngine.Rect, $enumValue: System.Enum, $style: UnityEngine.GUIStyle) : System.Enum
            /** Displays a menu with an option for every value of the enum type when clicked. An option for the value 0 with name "Nothing" and an option for the value ~0 (that is, all bits set) with the name "Everything" are always displayed at the top of the menu. The names for the values 0 and ~0 can be overriden by defining these values in the enum type.
            * @param $position Rectangle on the screen to use for the enum flags field.
            * @param $label Optional label to display in front of the enum flags field.
            * @param $enumValue Enum flags value (Only supports enum values for enum types with int as the underlying type).
            * @param $style Optional GUIStyle.
            * @param $includeObsolete Set to true to include Enum values with ObsoleteAttribute. Set to false to exclude Enum values with ObsoleteAttribute.
            * @returns The enum flags value modified by the user. This is a selection BitMask where each bit represents an Enum value index. (Note this returned value is not itself an Enum). 
            */
            public static EnumFlagsField ($position: UnityEngine.Rect, $label: string, $enumValue: System.Enum) : System.Enum
            /** Displays a menu with an option for every value of the enum type when clicked. An option for the value 0 with name "Nothing" and an option for the value ~0 (that is, all bits set) with the name "Everything" are always displayed at the top of the menu. The names for the values 0 and ~0 can be overriden by defining these values in the enum type.
            * @param $position Rectangle on the screen to use for the enum flags field.
            * @param $label Optional label to display in front of the enum flags field.
            * @param $enumValue Enum flags value (Only supports enum values for enum types with int as the underlying type).
            * @param $style Optional GUIStyle.
            * @param $includeObsolete Set to true to include Enum values with ObsoleteAttribute. Set to false to exclude Enum values with ObsoleteAttribute.
            * @returns The enum flags value modified by the user. This is a selection BitMask where each bit represents an Enum value index. (Note this returned value is not itself an Enum). 
            */
            public static EnumFlagsField ($position: UnityEngine.Rect, $label: string, $enumValue: System.Enum, $style: UnityEngine.GUIStyle) : System.Enum
            /** Displays a menu with an option for every value of the enum type when clicked. An option for the value 0 with name "Nothing" and an option for the value ~0 (that is, all bits set) with the name "Everything" are always displayed at the top of the menu. The names for the values 0 and ~0 can be overriden by defining these values in the enum type.
            * @param $position Rectangle on the screen to use for the enum flags field.
            * @param $label Optional label to display in front of the enum flags field.
            * @param $enumValue Enum flags value (Only supports enum values for enum types with int as the underlying type).
            * @param $style Optional GUIStyle.
            * @param $includeObsolete Set to true to include Enum values with ObsoleteAttribute. Set to false to exclude Enum values with ObsoleteAttribute.
            * @returns The enum flags value modified by the user. This is a selection BitMask where each bit represents an Enum value index. (Note this returned value is not itself an Enum). 
            */
            public static EnumFlagsField ($position: UnityEngine.Rect, $label: UnityEngine.GUIContent, $enumValue: System.Enum) : System.Enum
            /** Displays a menu with an option for every value of the enum type when clicked. An option for the value 0 with name "Nothing" and an option for the value ~0 (that is, all bits set) with the name "Everything" are always displayed at the top of the menu. The names for the values 0 and ~0 can be overriden by defining these values in the enum type.
            * @param $position Rectangle on the screen to use for the enum flags field.
            * @param $label Optional label to display in front of the enum flags field.
            * @param $enumValue Enum flags value (Only supports enum values for enum types with int as the underlying type).
            * @param $style Optional GUIStyle.
            * @param $includeObsolete Set to true to include Enum values with ObsoleteAttribute. Set to false to exclude Enum values with ObsoleteAttribute.
            * @returns The enum flags value modified by the user. This is a selection BitMask where each bit represents an Enum value index. (Note this returned value is not itself an Enum). 
            */
            public static EnumFlagsField ($position: UnityEngine.Rect, $label: UnityEngine.GUIContent, $enumValue: System.Enum, $style: UnityEngine.GUIStyle) : System.Enum
            /** Displays a menu with an option for every value of the enum type when clicked. An option for the value 0 with name "Nothing" and an option for the value ~0 (that is, all bits set) with the name "Everything" are always displayed at the top of the menu. The names for the values 0 and ~0 can be overriden by defining these values in the enum type.
            * @param $position Rectangle on the screen to use for the enum flags field.
            * @param $label Optional label to display in front of the enum flags field.
            * @param $enumValue Enum flags value (Only supports enum values for enum types with int as the underlying type).
            * @param $style Optional GUIStyle.
            * @param $includeObsolete Set to true to include Enum values with ObsoleteAttribute. Set to false to exclude Enum values with ObsoleteAttribute.
            * @returns The enum flags value modified by the user. This is a selection BitMask where each bit represents an Enum value index. (Note this returned value is not itself an Enum). 
            */
            public static EnumFlagsField ($position: UnityEngine.Rect, $label: UnityEngine.GUIContent, $enumValue: System.Enum, $includeObsolete: boolean, $style?: UnityEngine.GUIStyle) : System.Enum
            /** Makes an object field. You can assign objects either by drag and drop objects or by selecting an object using the Object Picker.
            * @param $position Rectangle on the screen to use for the field.
            * @param $property The object reference property the field shows.
            * @param $objType The type of the objects that can be assigned.
            * @param $label Optional label to display in front of the field. Pass GUIContent.none to hide the label.
            */
            public static ObjectField ($position: UnityEngine.Rect, $property: UnityEditor.SerializedProperty) : void
            /** Makes an object field. You can assign objects either by drag and drop objects or by selecting an object using the Object Picker.
            * @param $position Rectangle on the screen to use for the field.
            * @param $property The object reference property the field shows.
            * @param $objType The type of the objects that can be assigned.
            * @param $label Optional label to display in front of the field. Pass GUIContent.none to hide the label.
            */
            public static ObjectField ($position: UnityEngine.Rect, $property: UnityEditor.SerializedProperty, $label: UnityEngine.GUIContent) : void
            /** Makes an object field. You can assign objects either by drag and drop objects or by selecting an object using the Object Picker.
            * @param $position Rectangle on the screen to use for the field.
            * @param $property The object reference property the field shows.
            * @param $objType The type of the objects that can be assigned.
            * @param $label Optional label to display in front of the field. Pass GUIContent.none to hide the label.
            */
            public static ObjectField ($position: UnityEngine.Rect, $property: UnityEditor.SerializedProperty, $objType: System.Type) : void
            /** Makes an object field. You can assign objects either by drag and drop objects or by selecting an object using the Object Picker.
            * @param $position Rectangle on the screen to use for the field.
            * @param $property The object reference property the field shows.
            * @param $objType The type of the objects that can be assigned.
            * @param $label Optional label to display in front of the field. Pass GUIContent.none to hide the label.
            */
            public static ObjectField ($position: UnityEngine.Rect, $property: UnityEditor.SerializedProperty, $objType: System.Type, $label: UnityEngine.GUIContent) : void
            public static ObjectField ($position: UnityEngine.Rect, $obj: UnityEngine.Object, $objType: System.Type, $targetBeingEdited: UnityEngine.Object) : UnityEngine.Object
            /** Makes an object field. You can assign objects either by drag and drop objects or by selecting an object using the Object Picker.
            * @param $position Rectangle on the screen to use for the field.
            * @param $label Optional label in front of the field.
            * @param $obj The object the field shows.
            * @param $objType The type of the objects that can be assigned.
            * @param $allowSceneObjects Allow assigning Scene objects. See Description for more info.
            * @returns The object that has been set by the user. 
            */
            public static ObjectField ($position: UnityEngine.Rect, $obj: UnityEngine.Object, $objType: System.Type, $allowSceneObjects: boolean) : UnityEngine.Object
            public static ObjectField ($position: UnityEngine.Rect, $label: string, $obj: UnityEngine.Object, $objType: System.Type, $targetBeingEdited: UnityEngine.Object) : UnityEngine.Object
            /** Makes an object field. You can assign objects either by drag and drop objects or by selecting an object using the Object Picker.
            * @param $position Rectangle on the screen to use for the field.
            * @param $label Optional label in front of the field.
            * @param $obj The object the field shows.
            * @param $objType The type of the objects that can be assigned.
            * @param $allowSceneObjects Allow assigning Scene objects. See Description for more info.
            * @returns The object that has been set by the user. 
            */
            public static ObjectField ($position: UnityEngine.Rect, $label: string, $obj: UnityEngine.Object, $objType: System.Type, $allowSceneObjects: boolean) : UnityEngine.Object
            public static ObjectField ($position: UnityEngine.Rect, $label: UnityEngine.GUIContent, $obj: UnityEngine.Object, $objType: System.Type, $targetBeingEdited: UnityEngine.Object) : UnityEngine.Object
            /** Makes an object field. You can assign objects either by drag and drop objects or by selecting an object using the Object Picker.
            * @param $position Rectangle on the screen to use for the field.
            * @param $label Optional label in front of the field.
            * @param $obj The object the field shows.
            * @param $objType The type of the objects that can be assigned.
            * @param $allowSceneObjects Allow assigning Scene objects. See Description for more info.
            * @returns The object that has been set by the user. 
            */
            public static ObjectField ($position: UnityEngine.Rect, $label: UnityEngine.GUIContent, $obj: UnityEngine.Object, $objType: System.Type, $allowSceneObjects: boolean) : UnityEngine.Object
            public static IndentedRect ($source: UnityEngine.Rect) : UnityEngine.Rect
            /** Makes an X and Y field for entering a Vector2.
            * @param $position Rectangle on the screen to use for the field.
            * @param $label Label to display above the field.
            * @param $value The value to edit.
            * @returns The value entered by the user. 
            */
            public static Vector2Field ($position: UnityEngine.Rect, $label: string, $value: UnityEngine.Vector2) : UnityEngine.Vector2
            /** Makes an X and Y field for entering a Vector2.
            * @param $position Rectangle on the screen to use for the field.
            * @param $label Label to display above the field.
            * @param $value The value to edit.
            * @returns The value entered by the user. 
            */
            public static Vector2Field ($position: UnityEngine.Rect, $label: UnityEngine.GUIContent, $value: UnityEngine.Vector2) : UnityEngine.Vector2
            /** Makes an X, Y, and Z field for entering a Vector3.
            * @param $position Rectangle on the screen to use for the field.
            * @param $label Label to display above the field.
            * @param $value The value to edit.
            * @returns The value entered by the user. 
            */
            public static Vector3Field ($position: UnityEngine.Rect, $label: string, $value: UnityEngine.Vector3) : UnityEngine.Vector3
            /** Makes an X, Y, and Z field for entering a Vector3.
            * @param $position Rectangle on the screen to use for the field.
            * @param $label Label to display above the field.
            * @param $value The value to edit.
            * @returns The value entered by the user. 
            */
            public static Vector3Field ($position: UnityEngine.Rect, $label: UnityEngine.GUIContent, $value: UnityEngine.Vector3) : UnityEngine.Vector3
            /** Makes an X, Y, Z, and W field for entering a Vector4.
            * @param $position Rectangle on the screen to use for the field.
            * @param $label Label to display above the field.
            * @param $value The value to edit.
            * @returns The value entered by the user. 
            */
            public static Vector4Field ($position: UnityEngine.Rect, $label: string, $value: UnityEngine.Vector4) : UnityEngine.Vector4
            public static Vector4Field ($position: UnityEngine.Rect, $label: UnityEngine.GUIContent, $value: UnityEngine.Vector4) : UnityEngine.Vector4
            /** Makes an X and Y integer field for entering a Vector2Int.
            * @param $position Rectangle on the screen to use for the field.
            * @param $label Label to display above the field.
            * @param $value The value to edit.
            * @returns The value entered by the user. 
            */
            public static Vector2IntField ($position: UnityEngine.Rect, $label: string, $value: UnityEngine.Vector2Int) : UnityEngine.Vector2Int
            /** Makes an X and Y integer field for entering a Vector2Int.
            * @param $position Rectangle on the screen to use for the field.
            * @param $label Label to display above the field.
            * @param $value The value to edit.
            * @returns The value entered by the user. 
            */
            public static Vector2IntField ($position: UnityEngine.Rect, $label: UnityEngine.GUIContent, $value: UnityEngine.Vector2Int) : UnityEngine.Vector2Int
            /** Makes an X, Y, and Z integer field for entering a Vector3Int.
            * @param $position Rectangle on the screen to use for the field.
            * @param $label Label to display above the field.
            * @param $value The value to edit.
            * @returns The value entered by the user. 
            */
            public static Vector3IntField ($position: UnityEngine.Rect, $label: string, $value: UnityEngine.Vector3Int) : UnityEngine.Vector3Int
            /** Makes an X, Y, and Z integer field for entering a Vector3Int.
            * @param $position Rectangle on the screen to use for the field.
            * @param $label Label to display above the field.
            * @param $value The value to edit.
            * @returns The value entered by the user. 
            */
            public static Vector3IntField ($position: UnityEngine.Rect, $label: UnityEngine.GUIContent, $value: UnityEngine.Vector3Int) : UnityEngine.Vector3Int
            /** Makes an X, Y, W, and H field for entering a Rect.
            * @param $position Rectangle on the screen to use for the field.
            * @param $label Optional label to display above the field.
            * @param $value The value to edit.
            * @returns The value entered by the user. 
            */
            public static RectField ($position: UnityEngine.Rect, $value: UnityEngine.Rect) : UnityEngine.Rect
            /** Makes an X, Y, W, and H field for entering a Rect.
            * @param $position Rectangle on the screen to use for the field.
            * @param $label Optional label to display above the field.
            * @param $value The value to edit.
            * @returns The value entered by the user. 
            */
            public static RectField ($position: UnityEngine.Rect, $label: string, $value: UnityEngine.Rect) : UnityEngine.Rect
            /** Makes an X, Y, W, and H field for entering a Rect.
            * @param $position Rectangle on the screen to use for the field.
            * @param $label Optional label to display above the field.
            * @param $value The value to edit.
            * @returns The value entered by the user. 
            */
            public static RectField ($position: UnityEngine.Rect, $label: UnityEngine.GUIContent, $value: UnityEngine.Rect) : UnityEngine.Rect
            /** Makes an X, Y, W, and H field for entering a RectInt.
            * @param $position Rectangle on the screen to use for the field.
            * @param $label Optional label to display above the field.
            * @param $value The value to edit.
            * @returns The value entered by the user. 
            */
            public static RectIntField ($position: UnityEngine.Rect, $value: UnityEngine.RectInt) : UnityEngine.RectInt
            /** Makes an X, Y, W, and H field for entering a RectInt.
            * @param $position Rectangle on the screen to use for the field.
            * @param $label Optional label to display above the field.
            * @param $value The value to edit.
            * @returns The value entered by the user. 
            */
            public static RectIntField ($position: UnityEngine.Rect, $label: string, $value: UnityEngine.RectInt) : UnityEngine.RectInt
            /** Makes an X, Y, W, and H field for entering a RectInt.
            * @param $position Rectangle on the screen to use for the field.
            * @param $label Optional label to display above the field.
            * @param $value The value to edit.
            * @returns The value entered by the user. 
            */
            public static RectIntField ($position: UnityEngine.Rect, $label: UnityEngine.GUIContent, $value: UnityEngine.RectInt) : UnityEngine.RectInt
            /** Makes Center and Extents field for entering a Bounds.
            * @param $position Rectangle on the screen to use for the field.
            * @param $label Optional label to display above the field.
            * @param $value The value to edit.
            * @returns The value entered by the user. 
            */
            public static BoundsField ($position: UnityEngine.Rect, $value: UnityEngine.Bounds) : UnityEngine.Bounds
            public static BoundsField ($position: UnityEngine.Rect, $label: string, $value: UnityEngine.Bounds) : UnityEngine.Bounds
            /** Makes Center and Extents field for entering a Bounds.
            * @param $position Rectangle on the screen to use for the field.
            * @param $label Optional label to display above the field.
            * @param $value The value to edit.
            * @returns The value entered by the user. 
            */
            public static BoundsField ($position: UnityEngine.Rect, $label: UnityEngine.GUIContent, $value: UnityEngine.Bounds) : UnityEngine.Bounds
            /** Makes Position and Size field for entering a BoundsInt.
            * @param $position Rectangle on the screen to use for the field.
            * @param $label Optional label to display above the field.
            * @param $value The value to edit.
            * @returns The value entered by the user. 
            */
            public static BoundsIntField ($position: UnityEngine.Rect, $value: UnityEngine.BoundsInt) : UnityEngine.BoundsInt
            /** Makes Position and Size field for entering a BoundsInt.
            * @param $position Rectangle on the screen to use for the field.
            * @param $label Optional label to display above the field.
            * @param $value The value to edit.
            * @returns The value entered by the user. 
            */
            public static BoundsIntField ($position: UnityEngine.Rect, $label: string, $value: UnityEngine.BoundsInt) : UnityEngine.BoundsInt
            /** Makes Position and Size field for entering a BoundsInt.
            * @param $position Rectangle on the screen to use for the field.
            * @param $label Optional label to display above the field.
            * @param $value The value to edit.
            * @returns The value entered by the user. 
            */
            public static BoundsIntField ($position: UnityEngine.Rect, $label: UnityEngine.GUIContent, $value: UnityEngine.BoundsInt) : UnityEngine.BoundsInt
            /** Makes a multi-control with text fields for entering multiple floats in the same line.
            * @param $position Rectangle on the screen to use for the float field.
            * @param $label Optional label to display in front of the float field.
            * @param $subLabels Array with small labels to show in front of each float field. There is room for one letter per field only.
            * @param $values Array with the values to edit.
            */
            public static MultiFloatField ($position: UnityEngine.Rect, $label: UnityEngine.GUIContent, $subLabels: System.Array$1<UnityEngine.GUIContent>, $values: System.Array$1<number>) : void
            /** Makes a multi-control with text fields for entering multiple floats in the same line.
            * @param $position Rectangle on the screen to use for the float field.
            * @param $label Optional label to display in front of the float field.
            * @param $subLabels Array with small labels to show in front of each float field. There is room for one letter per field only.
            * @param $values Array with the values to edit.
            */
            public static MultiFloatField ($position: UnityEngine.Rect, $subLabels: System.Array$1<UnityEngine.GUIContent>, $values: System.Array$1<number>) : void
            /** Makes a multi-control with text fields for entering multiple integers in the same line.
            * @param $position Rectangle on the screen to use for the integer field.
            * @param $subLabels Array with small labels to show in front of each int field. There is room for one letter per field only.
            * @param $values Array with the values to edit.
            */
            public static MultiIntField ($position: UnityEngine.Rect, $subLabels: System.Array$1<UnityEngine.GUIContent>, $values: System.Array$1<number>) : void
            /** Makes a multi-control with several property fields in the same line.
            * @param $position Rectangle on the screen to use for the multi-property field.
            * @param $valuesIterator The SerializedProperty of the first property to make a control for.
            * @param $label Optional label to use. If not specified the label of the property itself is used. Use GUIContent.none to not display a label at all.
            * @param $subLabels Array with small labels to show in front of each float field. There is room for one letter per field only.
            * @param $visibility Each SerializedProperty during iteration must have this visibility to be drawn. Use EditorGUI.PropertyVisibility.All to draw all SerializedProperties, regardless of its actual visibility.
            */
            public static MultiPropertyField ($position: UnityEngine.Rect, $subLabels: System.Array$1<UnityEngine.GUIContent>, $valuesIterator: UnityEditor.SerializedProperty, $label: UnityEngine.GUIContent) : void
            public static MultiPropertyField ($position: UnityEngine.Rect, $subLabels: System.Array$1<UnityEngine.GUIContent>, $valuesIterator: UnityEditor.SerializedProperty, $label: UnityEngine.GUIContent, $visibility: UnityEditor.EditorGUI.PropertyVisibility) : void
            /** Makes a multi-control with several property fields in the same line.
            * @param $position Rectangle on the screen to use for the multi-property field.
            * @param $valuesIterator The SerializedProperty of the first property to make a control for.
            * @param $label Optional label to use. If not specified the label of the property itself is used. Use GUIContent.none to not display a label at all.
            * @param $subLabels Array with small labels to show in front of each float field. There is room for one letter per field only.
            * @param $visibility Each SerializedProperty during iteration must have this visibility to be drawn. Use EditorGUI.PropertyVisibility.All to draw all SerializedProperties, regardless of its actual visibility.
            */
            public static MultiPropertyField ($position: UnityEngine.Rect, $subLabels: System.Array$1<UnityEngine.GUIContent>, $valuesIterator: UnityEditor.SerializedProperty) : void
            public static MultiPropertyField ($position: UnityEngine.Rect, $subLabels: System.Array$1<UnityEngine.GUIContent>, $valuesIterator: UnityEditor.SerializedProperty, $visibility: UnityEditor.EditorGUI.PropertyVisibility) : void
            /** Makes a field for selecting a Color.
            * @param $position Rectangle on the screen to use for the field.
            * @param $label Optional label to display in front of the field.
            * @param $value The color to edit.
            * @param $showEyedropper If true, the color picker should show the eyedropper control. If false, don't show it.
            * @param $showAlpha If true, allow the user to set an alpha value for the color. If false, hide the alpha component.
            * @param $hdr If true, treat the color as an HDR value. If false, treat it as a standard LDR value.
            * @returns The color selected by the user. 
            */
            public static ColorField ($position: UnityEngine.Rect, $value: UnityEngine.Color) : UnityEngine.Color
            /** Makes a field for selecting a Color.
            * @param $position Rectangle on the screen to use for the field.
            * @param $label Optional label to display in front of the field.
            * @param $value The color to edit.
            * @param $showEyedropper If true, the color picker should show the eyedropper control. If false, don't show it.
            * @param $showAlpha If true, allow the user to set an alpha value for the color. If false, hide the alpha component.
            * @param $hdr If true, treat the color as an HDR value. If false, treat it as a standard LDR value.
            * @returns The color selected by the user. 
            */
            public static ColorField ($position: UnityEngine.Rect, $label: string, $value: UnityEngine.Color) : UnityEngine.Color
            /** Makes a field for selecting a Color.
            * @param $position Rectangle on the screen to use for the field.
            * @param $label Optional label to display in front of the field.
            * @param $value The color to edit.
            * @param $showEyedropper If true, the color picker should show the eyedropper control. If false, don't show it.
            * @param $showAlpha If true, allow the user to set an alpha value for the color. If false, hide the alpha component.
            * @param $hdr If true, treat the color as an HDR value. If false, treat it as a standard LDR value.
            * @returns The color selected by the user. 
            */
            public static ColorField ($position: UnityEngine.Rect, $label: UnityEngine.GUIContent, $value: UnityEngine.Color) : UnityEngine.Color
            /** Makes a field for selecting a Color.
            * @param $position Rectangle on the screen to use for the field.
            * @param $label Optional label to display in front of the field.
            * @param $value The color to edit.
            * @param $showEyedropper If true, the color picker should show the eyedropper control. If false, don't show it.
            * @param $showAlpha If true, allow the user to set an alpha value for the color. If false, hide the alpha component.
            * @param $hdr If true, treat the color as an HDR value. If false, treat it as a standard LDR value.
            * @returns The color selected by the user. 
            */
            public static ColorField ($position: UnityEngine.Rect, $label: UnityEngine.GUIContent, $value: UnityEngine.Color, $showEyedropper: boolean, $showAlpha: boolean, $hdr: boolean) : UnityEngine.Color
            /** Makes a field for editing an AnimationCurve.
            * @param $position Rectangle on the screen to use for the field.
            * @param $label Optional label to display in front of the field.
            * @param $value The curve to edit.
            * @param $color The color to show the curve with.
            * @param $ranges Optional rectangle that the curve is restrained within.
            * @returns The curve edited by the user. 
            */
            public static CurveField ($position: UnityEngine.Rect, $value: UnityEngine.AnimationCurve) : UnityEngine.AnimationCurve
            /** Makes a field for editing an AnimationCurve.
            * @param $position Rectangle on the screen to use for the field.
            * @param $label Optional label to display in front of the field.
            * @param $value The curve to edit.
            * @param $color The color to show the curve with.
            * @param $ranges Optional rectangle that the curve is restrained within.
            * @returns The curve edited by the user. 
            */
            public static CurveField ($position: UnityEngine.Rect, $label: string, $value: UnityEngine.AnimationCurve) : UnityEngine.AnimationCurve
            /** Makes a field for editing an AnimationCurve.
            * @param $position Rectangle on the screen to use for the field.
            * @param $label Optional label to display in front of the field.
            * @param $value The curve to edit.
            * @param $color The color to show the curve with.
            * @param $ranges Optional rectangle that the curve is restrained within.
            * @returns The curve edited by the user. 
            */
            public static CurveField ($position: UnityEngine.Rect, $label: UnityEngine.GUIContent, $value: UnityEngine.AnimationCurve) : UnityEngine.AnimationCurve
            /** Makes a field for editing an AnimationCurve.
            * @param $position Rectangle on the screen to use for the field.
            * @param $label Optional label to display in front of the field.
            * @param $value The curve to edit.
            * @param $color The color to show the curve with.
            * @param $ranges Optional rectangle that the curve is restrained within.
            * @returns The curve edited by the user. 
            */
            public static CurveField ($position: UnityEngine.Rect, $value: UnityEngine.AnimationCurve, $color: UnityEngine.Color, $ranges: UnityEngine.Rect) : UnityEngine.AnimationCurve
            /** Makes a field for editing an AnimationCurve.
            * @param $position Rectangle on the screen to use for the field.
            * @param $label Optional label to display in front of the field.
            * @param $value The curve to edit.
            * @param $color The color to show the curve with.
            * @param $ranges Optional rectangle that the curve is restrained within.
            * @returns The curve edited by the user. 
            */
            public static CurveField ($position: UnityEngine.Rect, $label: string, $value: UnityEngine.AnimationCurve, $color: UnityEngine.Color, $ranges: UnityEngine.Rect) : UnityEngine.AnimationCurve
            /** Makes a field for editing an AnimationCurve.
            * @param $position Rectangle on the screen to use for the field.
            * @param $label Optional label to display in front of the field.
            * @param $value The curve to edit.
            * @param $color The color to show the curve with.
            * @param $ranges Optional rectangle that the curve is restrained within.
            * @returns The curve edited by the user. 
            */
            public static CurveField ($position: UnityEngine.Rect, $label: UnityEngine.GUIContent, $value: UnityEngine.AnimationCurve, $color: UnityEngine.Color, $ranges: UnityEngine.Rect) : UnityEngine.AnimationCurve
            /** Makes a field for editing an AnimationCurve.
            * @param $position Rectangle on the screen to use for the field.
            * @param $property The curve to edit.
            * @param $color The color to show the curve with.
            * @param $ranges Optional rectangle that the curve is restrained within.
            * @param $label Optional label to display in front of the field. Pass [[GUIContent.none] to hide the label.
            */
            public static CurveField ($position: UnityEngine.Rect, $property: UnityEditor.SerializedProperty, $color: UnityEngine.Color, $ranges: UnityEngine.Rect) : void
            /** Makes a field for editing an AnimationCurve.
            * @param $position Rectangle on the screen to use for the field.
            * @param $property The curve to edit.
            * @param $color The color to show the curve with.
            * @param $ranges Optional rectangle that the curve is restrained within.
            * @param $label Optional label to display in front of the field. Pass [[GUIContent.none] to hide the label.
            */
            public static CurveField ($position: UnityEngine.Rect, $property: UnityEditor.SerializedProperty, $color: UnityEngine.Color, $ranges: UnityEngine.Rect, $label: UnityEngine.GUIContent) : void
            public static InspectorTitlebar ($position: UnityEngine.Rect, $targetObjs: System.Array$1<UnityEngine.Object>) : void
            /** Makes an inspector-window-like titlebar.
            * @param $position Rectangle on the screen to use for the titlebar.
            * @param $foldout The foldout state shown with the arrow.
            * @param $targetObj The object (for example a component) that the titlebar is for.
            * @param $targetObjs The objects that the titlebar is for.
            * @param $expandable Whether this editor should display a foldout arrow in order to toggle the display of its properties.
            * @returns The foldout state selected by the user. 
            */
            public static InspectorTitlebar ($position: UnityEngine.Rect, $foldout: boolean, $targetObj: UnityEngine.Object, $expandable: boolean) : boolean
            /** Makes an inspector-window-like titlebar.
            * @param $position Rectangle on the screen to use for the titlebar.
            * @param $foldout The foldout state shown with the arrow.
            * @param $targetObj The object (for example a component) that the titlebar is for.
            * @param $targetObjs The objects that the titlebar is for.
            * @param $expandable Whether this editor should display a foldout arrow in order to toggle the display of its properties.
            * @returns The foldout state selected by the user. 
            */
            public static InspectorTitlebar ($position: UnityEngine.Rect, $foldout: boolean, $targetObjs: System.Array$1<UnityEngine.Object>, $expandable: boolean) : boolean
            public static InspectorTitlebar ($position: UnityEngine.Rect, $foldout: boolean, $editor: UnityEditor.Editor) : boolean
            /** Makes a progress bar.
            * @param $totalPosition Rectangle on the screen to use in total for both the control.
            * @param $value Value that is shown.
            */
            public static ProgressBar ($position: UnityEngine.Rect, $value: number, $text: string) : void
            /** Makes a help box with a message to the user.
            * @param $position Rectangle on the screen to draw the help box within.
            * @param $message The message text.
            * @param $type The type of message.
            * @param $content The message contents. If an image is provided, it will be displayed to the left of the message. The expect image size is 32x32 pixels.
            */
            public static HelpBox ($position: UnityEngine.Rect, $message: string, $type: UnityEditor.MessageType) : void
            /** Makes a help box with a message to the user.
            * @param $position Rectangle on the screen to draw the help box within.
            * @param $message The message text.
            * @param $type The type of message.
            * @param $content The message contents. If an image is provided, it will be displayed to the left of the message. The expect image size is 32x32 pixels.
            */
            public static HelpBox ($position: UnityEngine.Rect, $content: UnityEngine.GUIContent) : void
            /** Makes a label in front of some control.
            * @param $totalPosition Rectangle on the screen to use in total for both the label and the control.
            * @param $id The unique ID of the control. If none specified, the ID of the following control is used.
            * @param $label Label to show in front of the control.
            * @param $style Style to use for the label.
            * @returns Rectangle on the screen to use just for the control itself. 
            */
            public static PrefixLabel ($totalPosition: UnityEngine.Rect, $label: UnityEngine.GUIContent) : UnityEngine.Rect
            /** Makes a label in front of some control.
            * @param $totalPosition Rectangle on the screen to use in total for both the label and the control.
            * @param $id The unique ID of the control. If none specified, the ID of the following control is used.
            * @param $label Label to show in front of the control.
            * @param $style Style to use for the label.
            * @returns Rectangle on the screen to use just for the control itself. 
            */
            public static PrefixLabel ($totalPosition: UnityEngine.Rect, $label: UnityEngine.GUIContent, $style: UnityEngine.GUIStyle) : UnityEngine.Rect
            /** Makes a label in front of some control.
            * @param $totalPosition Rectangle on the screen to use in total for both the label and the control.
            * @param $id The unique ID of the control. If none specified, the ID of the following control is used.
            * @param $label Label to show in front of the control.
            * @param $style Style to use for the label.
            * @returns Rectangle on the screen to use just for the control itself. 
            */
            public static PrefixLabel ($totalPosition: UnityEngine.Rect, $id: number, $label: UnityEngine.GUIContent) : UnityEngine.Rect
            /** Makes a label in front of some control.
            * @param $totalPosition Rectangle on the screen to use in total for both the label and the control.
            * @param $id The unique ID of the control. If none specified, the ID of the following control is used.
            * @param $label Label to show in front of the control.
            * @param $style Style to use for the label.
            * @returns Rectangle on the screen to use just for the control itself. 
            */
            public static PrefixLabel ($totalPosition: UnityEngine.Rect, $id: number, $label: UnityEngine.GUIContent, $style: UnityEngine.GUIStyle) : UnityEngine.Rect
            /** Create a Property wrapper, useful for making regular GUI controls work with SerializedProperty.
            * @param $totalPosition Rectangle on the screen to use for the control, including label if applicable.
            * @param $label Optional label in front of the slider. Use null to use the name from the SerializedProperty. Use GUIContent.none to not display a label.
            * @param $property The SerializedProperty to use for the control.
            * @returns The actual label to use for the control. 
            */
            public static BeginProperty ($totalPosition: UnityEngine.Rect, $label: UnityEngine.GUIContent, $property: UnityEditor.SerializedProperty) : UnityEngine.GUIContent
            /** Ends a Property wrapper started with BeginProperty.
            */
            public static EndProperty () : void
            /** Get the height needed for a PropertyField control.
            * @param $property Height of the property area.
            * @param $label Descriptive text or image.
            * @param $includeChildren Should the returned height include the height of child properties?
            */
            public static GetPropertyHeight ($type: UnityEditor.SerializedPropertyType, $label: UnityEngine.GUIContent) : number
            /** Makes a button that reacts to mouse down, for displaying your own dropdown content.
            * @param $position Rectangle on the screen to use for the button.
            * @param $content Text, image and tooltip for this button.
            * @param $focusType Whether the button should be selectable by keyboard or not.
            * @param $style Optional style to use.
            * @returns true when the user clicks the button. 
            */
            public static DropdownButton ($position: UnityEngine.Rect, $content: UnityEngine.GUIContent, $focusType: UnityEngine.FocusType) : boolean
            /** Makes a button that reacts to mouse down, for displaying your own dropdown content.
            * @param $position Rectangle on the screen to use for the button.
            * @param $content Text, image and tooltip for this button.
            * @param $focusType Whether the button should be selectable by keyboard or not.
            * @param $style Optional style to use.
            * @returns true when the user clicks the button. 
            */
            public static DropdownButton ($position: UnityEngine.Rect, $content: UnityEngine.GUIContent, $focusType: UnityEngine.FocusType, $style: UnityEngine.GUIStyle) : boolean
            /** Draws the alpha channel of a texture within a rectangle.
            * @param $position Rectangle on the screen to draw the texture within.
            * @param $image Texture to display.
            * @param $scaleMode How to scale the image when the aspect ratio of it doesn't fit the aspect ratio to be drawn within.
            * @param $imageAspect Aspect ratio to use for the source image. If 0 (the default), the aspect ratio from the image is used.
            * @param $mipLevel What mip-level to sample. If negative, texture will be sampled normally.
            It sets material _Mip property.
            */
            public static DrawTextureAlpha ($position: UnityEngine.Rect, $image: UnityEngine.Texture, $scaleMode: UnityEngine.ScaleMode, $imageAspect: number, $mipLevel: number) : void
            /** Draws the alpha channel of a texture within a rectangle.
            * @param $position Rectangle on the screen to draw the texture within.
            * @param $image Texture to display.
            * @param $scaleMode How to scale the image when the aspect ratio of it doesn't fit the aspect ratio to be drawn within.
            * @param $imageAspect Aspect ratio to use for the source image. If 0 (the default), the aspect ratio from the image is used.
            * @param $mipLevel What mip-level to sample. If negative, texture will be sampled normally.
            It sets material _Mip property.
            */
            public static DrawTextureAlpha ($position: UnityEngine.Rect, $image: UnityEngine.Texture) : void
            /** Draws the alpha channel of a texture within a rectangle.
            * @param $position Rectangle on the screen to draw the texture within.
            * @param $image Texture to display.
            * @param $scaleMode How to scale the image when the aspect ratio of it doesn't fit the aspect ratio to be drawn within.
            * @param $imageAspect Aspect ratio to use for the source image. If 0 (the default), the aspect ratio from the image is used.
            * @param $mipLevel What mip-level to sample. If negative, texture will be sampled normally.
            It sets material _Mip property.
            */
            public static DrawTextureAlpha ($position: UnityEngine.Rect, $image: UnityEngine.Texture, $scaleMode: UnityEngine.ScaleMode) : void
            /** Draws the alpha channel of a texture within a rectangle.
            * @param $position Rectangle on the screen to draw the texture within.
            * @param $image Texture to display.
            * @param $scaleMode How to scale the image when the aspect ratio of it doesn't fit the aspect ratio to be drawn within.
            * @param $imageAspect Aspect ratio to use for the source image. If 0 (the default), the aspect ratio from the image is used.
            * @param $mipLevel What mip-level to sample. If negative, texture will be sampled normally.
            It sets material _Mip property.
            */
            public static DrawTextureAlpha ($position: UnityEngine.Rect, $image: UnityEngine.Texture, $scaleMode: UnityEngine.ScaleMode, $imageAspect: number) : void
            public static DrawTextureTransparent ($position: UnityEngine.Rect, $image: UnityEngine.Texture, $scaleMode: UnityEngine.ScaleMode, $imageAspect: number, $mipLevel: number, $colorWriteMask: UnityEngine.Rendering.ColorWriteMask, $exposure: number) : void
            public static DrawTextureTransparent ($position: UnityEngine.Rect, $image: UnityEngine.Texture, $scaleMode: UnityEngine.ScaleMode) : void
            public static DrawTextureTransparent ($position: UnityEngine.Rect, $image: UnityEngine.Texture) : void
            public static DrawTextureTransparent ($position: UnityEngine.Rect, $image: UnityEngine.Texture, $scaleMode: UnityEngine.ScaleMode, $imageAspect: number) : void
            public static DrawTextureTransparent ($position: UnityEngine.Rect, $image: UnityEngine.Texture, $scaleMode: UnityEngine.ScaleMode, $imageAspect: number, $mipLevel: number) : void
            public static DrawTextureTransparent ($position: UnityEngine.Rect, $image: UnityEngine.Texture, $scaleMode: UnityEngine.ScaleMode, $imageAspect: number, $mipLevel: number, $colorWriteMask: UnityEngine.Rendering.ColorWriteMask) : void
            /** Draws the texture within a rectangle.
            * @param $position Rectangle on the screen to draw the texture within.
            * @param $image Texture to display.
            * @param $mat Material to be used when drawing the texture.
            * @param $scaleMode How to scale the image when the aspect ratio of it doesn't fit the aspect ratio to be drawn within.
            * @param $imageAspect Aspect ratio to use for the source image. If 0 (the default), the aspect ratio from the image is used.
            * @param $mipLevel The mip-level to sample. If negative, the texture is sampled normally.
            Sets material's _Mip property.
            * @param $colorWriteMask Specifies which color components of image will get written. Sets material's _ColorMask property.
            * @param $exposure Specifies the exposure for the texture. Sets material's _Exposure property.
            */
            public static DrawPreviewTexture ($position: UnityEngine.Rect, $image: UnityEngine.Texture, $mat: UnityEngine.Material, $scaleMode: UnityEngine.ScaleMode, $imageAspect: number, $mipLevel: number, $colorWriteMask: UnityEngine.Rendering.ColorWriteMask, $exposure: number) : void
            /** Draws the texture within a rectangle.
            * @param $position Rectangle on the screen to draw the texture within.
            * @param $image Texture to display.
            * @param $mat Material to be used when drawing the texture.
            * @param $scaleMode How to scale the image when the aspect ratio of it doesn't fit the aspect ratio to be drawn within.
            * @param $imageAspect Aspect ratio to use for the source image. If 0 (the default), the aspect ratio from the image is used.
            * @param $mipLevel The mip-level to sample. If negative, the texture is sampled normally.
            Sets material's _Mip property.
            * @param $colorWriteMask Specifies which color components of image will get written. Sets material's _ColorMask property.
            * @param $exposure Specifies the exposure for the texture. Sets material's _Exposure property.
            */
            public static DrawPreviewTexture ($position: UnityEngine.Rect, $image: UnityEngine.Texture, $mat: UnityEngine.Material, $scaleMode: UnityEngine.ScaleMode, $imageAspect: number, $mipLevel: number, $colorWriteMask: UnityEngine.Rendering.ColorWriteMask) : void
            /** Draws the texture within a rectangle.
            * @param $position Rectangle on the screen to draw the texture within.
            * @param $image Texture to display.
            * @param $mat Material to be used when drawing the texture.
            * @param $scaleMode How to scale the image when the aspect ratio of it doesn't fit the aspect ratio to be drawn within.
            * @param $imageAspect Aspect ratio to use for the source image. If 0 (the default), the aspect ratio from the image is used.
            * @param $mipLevel The mip-level to sample. If negative, the texture is sampled normally.
            Sets material's _Mip property.
            * @param $colorWriteMask Specifies which color components of image will get written. Sets material's _ColorMask property.
            * @param $exposure Specifies the exposure for the texture. Sets material's _Exposure property.
            */
            public static DrawPreviewTexture ($position: UnityEngine.Rect, $image: UnityEngine.Texture, $mat: UnityEngine.Material, $scaleMode: UnityEngine.ScaleMode, $imageAspect: number, $mipLevel: number) : void
            /** Draws the texture within a rectangle.
            * @param $position Rectangle on the screen to draw the texture within.
            * @param $image Texture to display.
            * @param $mat Material to be used when drawing the texture.
            * @param $scaleMode How to scale the image when the aspect ratio of it doesn't fit the aspect ratio to be drawn within.
            * @param $imageAspect Aspect ratio to use for the source image. If 0 (the default), the aspect ratio from the image is used.
            * @param $mipLevel The mip-level to sample. If negative, the texture is sampled normally.
            Sets material's _Mip property.
            * @param $colorWriteMask Specifies which color components of image will get written. Sets material's _ColorMask property.
            * @param $exposure Specifies the exposure for the texture. Sets material's _Exposure property.
            */
            public static DrawPreviewTexture ($position: UnityEngine.Rect, $image: UnityEngine.Texture, $mat: UnityEngine.Material, $scaleMode: UnityEngine.ScaleMode, $imageAspect: number) : void
            /** Draws the texture within a rectangle.
            * @param $position Rectangle on the screen to draw the texture within.
            * @param $image Texture to display.
            * @param $mat Material to be used when drawing the texture.
            * @param $scaleMode How to scale the image when the aspect ratio of it doesn't fit the aspect ratio to be drawn within.
            * @param $imageAspect Aspect ratio to use for the source image. If 0 (the default), the aspect ratio from the image is used.
            * @param $mipLevel The mip-level to sample. If negative, the texture is sampled normally.
            Sets material's _Mip property.
            * @param $colorWriteMask Specifies which color components of image will get written. Sets material's _ColorMask property.
            * @param $exposure Specifies the exposure for the texture. Sets material's _Exposure property.
            */
            public static DrawPreviewTexture ($position: UnityEngine.Rect, $image: UnityEngine.Texture, $mat: UnityEngine.Material, $scaleMode: UnityEngine.ScaleMode) : void
            /** Draws the texture within a rectangle.
            * @param $position Rectangle on the screen to draw the texture within.
            * @param $image Texture to display.
            * @param $mat Material to be used when drawing the texture.
            * @param $scaleMode How to scale the image when the aspect ratio of it doesn't fit the aspect ratio to be drawn within.
            * @param $imageAspect Aspect ratio to use for the source image. If 0 (the default), the aspect ratio from the image is used.
            * @param $mipLevel The mip-level to sample. If negative, the texture is sampled normally.
            Sets material's _Mip property.
            * @param $colorWriteMask Specifies which color components of image will get written. Sets material's _ColorMask property.
            * @param $exposure Specifies the exposure for the texture. Sets material's _Exposure property.
            */
            public static DrawPreviewTexture ($position: UnityEngine.Rect, $image: UnityEngine.Texture, $mat: UnityEngine.Material) : void
            /** Draws the texture within a rectangle.
            * @param $position Rectangle on the screen to draw the texture within.
            * @param $image Texture to display.
            * @param $mat Material to be used when drawing the texture.
            * @param $scaleMode How to scale the image when the aspect ratio of it doesn't fit the aspect ratio to be drawn within.
            * @param $imageAspect Aspect ratio to use for the source image. If 0 (the default), the aspect ratio from the image is used.
            * @param $mipLevel The mip-level to sample. If negative, the texture is sampled normally.
            Sets material's _Mip property.
            * @param $colorWriteMask Specifies which color components of image will get written. Sets material's _ColorMask property.
            * @param $exposure Specifies the exposure for the texture. Sets material's _Exposure property.
            */
            public static DrawPreviewTexture ($position: UnityEngine.Rect, $image: UnityEngine.Texture) : void
            /** Makes a label field. (Useful for showing read-only info.)
            * @param $position Rectangle on the screen to use for the label field.
            * @param $label Label in front of the label field.
            * @param $label2 The label to show to the right.
            * @param $style Style information (color, etc) for displaying the label.
            */
            public static LabelField ($position: UnityEngine.Rect, $label: string) : void
            /** Makes a label field. (Useful for showing read-only info.)
            * @param $position Rectangle on the screen to use for the label field.
            * @param $label Label in front of the label field.
            * @param $label2 The label to show to the right.
            * @param $style Style information (color, etc) for displaying the label.
            */
            public static LabelField ($position: UnityEngine.Rect, $label: string, $style: UnityEngine.GUIStyle) : void
            /** Makes a label field. (Useful for showing read-only info.)
            * @param $position Rectangle on the screen to use for the label field.
            * @param $label Label in front of the label field.
            * @param $label2 The label to show to the right.
            * @param $style Style information (color, etc) for displaying the label.
            */
            public static LabelField ($position: UnityEngine.Rect, $label: UnityEngine.GUIContent) : void
            /** Makes a label field. (Useful for showing read-only info.)
            * @param $position Rectangle on the screen to use for the label field.
            * @param $label Label in front of the label field.
            * @param $label2 The label to show to the right.
            * @param $style Style information (color, etc) for displaying the label.
            */
            public static LabelField ($position: UnityEngine.Rect, $label: UnityEngine.GUIContent, $style: UnityEngine.GUIStyle) : void
            /** Makes a label field. (Useful for showing read-only info.)
            * @param $position Rectangle on the screen to use for the label field.
            * @param $label Label in front of the label field.
            * @param $label2 The label to show to the right.
            * @param $style Style information (color, etc) for displaying the label.
            */
            public static LabelField ($position: UnityEngine.Rect, $label: string, $label2: string) : void
            /** Makes a label field. (Useful for showing read-only info.)
            * @param $position Rectangle on the screen to use for the label field.
            * @param $label Label in front of the label field.
            * @param $label2 The label to show to the right.
            * @param $style Style information (color, etc) for displaying the label.
            */
            public static LabelField ($position: UnityEngine.Rect, $label: string, $label2: string, $style: UnityEngine.GUIStyle) : void
            /** Makes a label field. (Useful for showing read-only info.)
            * @param $position Rectangle on the screen to use for the label field.
            * @param $label Label in front of the label field.
            * @param $label2 The label to show to the right.
            * @param $style Style information (color, etc) for displaying the label.
            */
            public static LabelField ($position: UnityEngine.Rect, $label: UnityEngine.GUIContent, $label2: UnityEngine.GUIContent) : void
            /** Makes a label field. (Useful for showing read-only info.)
            * @param $position Rectangle on the screen to use for the label field.
            * @param $label Label in front of the label field.
            * @param $label2 The label to show to the right.
            * @param $style Style information (color, etc) for displaying the label.
            */
            public static LabelField ($position: UnityEngine.Rect, $label: UnityEngine.GUIContent, $label2: UnityEngine.GUIContent, $style: UnityEngine.GUIStyle) : void
            /** Make a clickable link label.
            * @param $position Rectangle on the screen to use for the control. The underline is done with the bottom border so set the size accordingly.
            * @param $label Label of the link.
            * @returns true when the user clicks the link. 
            */
            public static LinkButton ($position: UnityEngine.Rect, $label: string) : boolean
            /** Make a clickable link label.
            * @param $position Rectangle on the screen to use for the control. The underline is done with the bottom border so set the size accordingly.
            * @param $label Label of the link.
            * @returns true when the user clicks the link. 
            */
            public static LinkButton ($position: UnityEngine.Rect, $label: UnityEngine.GUIContent) : boolean
            /** Makes a toggle field where the toggle is to the left and the label immediately to the right of it.
            * @param $position Rectangle on the screen to use for the toggle.
            * @param $label Label to display next to the toggle.
            * @param $value The value to edit.
            * @param $labelStyle Optional GUIStyle to use for the label.
            * @returns The value set by the user. 
            */
            public static ToggleLeft ($position: UnityEngine.Rect, $label: string, $value: boolean) : boolean
            /** Makes a toggle field where the toggle is to the left and the label immediately to the right of it.
            * @param $position Rectangle on the screen to use for the toggle.
            * @param $label Label to display next to the toggle.
            * @param $value The value to edit.
            * @param $labelStyle Optional GUIStyle to use for the label.
            * @returns The value set by the user. 
            */
            public static ToggleLeft ($position: UnityEngine.Rect, $label: string, $value: boolean, $labelStyle: UnityEngine.GUIStyle) : boolean
            /** Makes a toggle field where the toggle is to the left and the label immediately to the right of it.
            * @param $position Rectangle on the screen to use for the toggle.
            * @param $label Label to display next to the toggle.
            * @param $value The value to edit.
            * @param $labelStyle Optional GUIStyle to use for the label.
            * @returns The value set by the user. 
            */
            public static ToggleLeft ($position: UnityEngine.Rect, $label: UnityEngine.GUIContent, $value: boolean) : boolean
            /** Makes a toggle field where the toggle is to the left and the label immediately to the right of it.
            * @param $position Rectangle on the screen to use for the toggle.
            * @param $label Label to display next to the toggle.
            * @param $value The value to edit.
            * @param $labelStyle Optional GUIStyle to use for the label.
            * @returns The value set by the user. 
            */
            public static ToggleLeft ($position: UnityEngine.Rect, $label: UnityEngine.GUIContent, $value: boolean, $labelStyle: UnityEngine.GUIStyle) : boolean
            /** Makes a text field.
            * @param $position Rectangle on the screen to use for the text field.
            * @param $label Optional label to display in front of the text field.
            * @param $text The text to edit.
            * @param $style Optional GUIStyle.
            * @returns The text entered by the user. 
            */
            public static TextField ($position: UnityEngine.Rect, $text: string) : string
            /** Makes a text field.
            * @param $position Rectangle on the screen to use for the text field.
            * @param $label Optional label to display in front of the text field.
            * @param $text The text to edit.
            * @param $style Optional GUIStyle.
            * @returns The text entered by the user. 
            */
            public static TextField ($position: UnityEngine.Rect, $text: string, $style: UnityEngine.GUIStyle) : string
            /** Makes a text field.
            * @param $position Rectangle on the screen to use for the text field.
            * @param $label Optional label to display in front of the text field.
            * @param $text The text to edit.
            * @param $style Optional GUIStyle.
            * @returns The text entered by the user. 
            */
            public static TextField ($position: UnityEngine.Rect, $label: string, $text: string) : string
            /** Makes a text field.
            * @param $position Rectangle on the screen to use for the text field.
            * @param $label Optional label to display in front of the text field.
            * @param $text The text to edit.
            * @param $style Optional GUIStyle.
            * @returns The text entered by the user. 
            */
            public static TextField ($position: UnityEngine.Rect, $label: string, $text: string, $style: UnityEngine.GUIStyle) : string
            /** Makes a text field.
            * @param $position Rectangle on the screen to use for the text field.
            * @param $label Optional label to display in front of the text field.
            * @param $text The text to edit.
            * @param $style Optional GUIStyle.
            * @returns The text entered by the user. 
            */
            public static TextField ($position: UnityEngine.Rect, $label: UnityEngine.GUIContent, $text: string) : string
            /** Makes a text field.
            * @param $position Rectangle on the screen to use for the text field.
            * @param $label Optional label to display in front of the text field.
            * @param $text The text to edit.
            * @param $style Optional GUIStyle.
            * @returns The text entered by the user. 
            */
            public static TextField ($position: UnityEngine.Rect, $label: UnityEngine.GUIContent, $text: string, $style: UnityEngine.GUIStyle) : string
            public static DelayedTextField ($position: UnityEngine.Rect, $text: string) : string
            /** Makes a delayed text field.
            * @param $position Rectangle on the screen to use for the text field.
            * @param $label Optional label to display in front of the int field.
            * @param $text The value to edit.
            * @param $style Optional GUIStyle.
            * @returns The value entered by the user. Note that the return value will not change until the user has pressed enter or focus is moved away from the text field. 
            */
            public static DelayedTextField ($position: UnityEngine.Rect, $text: string, $style: UnityEngine.GUIStyle) : string
            public static DelayedTextField ($position: UnityEngine.Rect, $label: string, $text: string) : string
            /** Makes a delayed text field.
            * @param $position Rectangle on the screen to use for the text field.
            * @param $label Optional label to display in front of the int field.
            * @param $text The value to edit.
            * @param $style Optional GUIStyle.
            * @returns The value entered by the user. Note that the return value will not change until the user has pressed enter or focus is moved away from the text field. 
            */
            public static DelayedTextField ($position: UnityEngine.Rect, $label: string, $text: string, $style: UnityEngine.GUIStyle) : string
            public static DelayedTextField ($position: UnityEngine.Rect, $label: UnityEngine.GUIContent, $text: string) : string
            /** Makes a delayed text field.
            * @param $position Rectangle on the screen to use for the text field.
            * @param $label Optional label to display in front of the int field.
            * @param $text The value to edit.
            * @param $style Optional GUIStyle.
            * @returns The value entered by the user. Note that the return value will not change until the user has pressed enter or focus is moved away from the text field. 
            */
            public static DelayedTextField ($position: UnityEngine.Rect, $label: UnityEngine.GUIContent, $text: string, $style: UnityEngine.GUIStyle) : string
            public static DelayedTextField ($position: UnityEngine.Rect, $property: UnityEditor.SerializedProperty) : void
            /** Makes a delayed text field.
            * @param $position Rectangle on the screen to use for the text field.
            * @param $property The text property to edit.
            * @param $label Optional label to display in front of the int field. Pass GUIContent.none to hide label.
            */
            public static DelayedTextField ($position: UnityEngine.Rect, $property: UnityEditor.SerializedProperty, $label: UnityEngine.GUIContent) : void
            public static DelayedTextField ($position: UnityEngine.Rect, $label: UnityEngine.GUIContent, $controlId: number, $text: string) : string
            public static DelayedTextField ($position: UnityEngine.Rect, $label: UnityEngine.GUIContent, $controlId: number, $text: string, $style: UnityEngine.GUIStyle) : string
            /** Makes a text area.
            * @param $position Rectangle on the screen to use for the text field.
            * @param $text The text to edit.
            * @param $style Optional GUIStyle.
            * @returns The text entered by the user. 
            */
            public static TextArea ($position: UnityEngine.Rect, $text: string) : string
            /** Makes a text area.
            * @param $position Rectangle on the screen to use for the text field.
            * @param $text The text to edit.
            * @param $style Optional GUIStyle.
            * @returns The text entered by the user. 
            */
            public static TextArea ($position: UnityEngine.Rect, $text: string, $style: UnityEngine.GUIStyle) : string
            /** Makes a selectable label field. (Useful for showing read-only info that can be copy-pasted.)
            * @param $position Rectangle on the screen to use for the label.
            * @param $text The text to show.
            * @param $style Optional GUIStyle.
            */
            public static SelectableLabel ($position: UnityEngine.Rect, $text: string) : void
            /** Makes a selectable label field. (Useful for showing read-only info that can be copy-pasted.)
            * @param $position Rectangle on the screen to use for the label.
            * @param $text The text to show.
            * @param $style Optional GUIStyle.
            */
            public static SelectableLabel ($position: UnityEngine.Rect, $text: string, $style: UnityEngine.GUIStyle) : void
            /** Makes a text field where the user can enter a password.
            * @param $position Rectangle on the screen to use for the password field.
            * @param $label Optional label to display in front of the password field.
            * @param $password The password to edit.
            * @param $style Optional GUIStyle.
            * @returns The password entered by the user. 
            */
            public static PasswordField ($position: UnityEngine.Rect, $password: string) : string
            /** Makes a text field where the user can enter a password.
            * @param $position Rectangle on the screen to use for the password field.
            * @param $label Optional label to display in front of the password field.
            * @param $password The password to edit.
            * @param $style Optional GUIStyle.
            * @returns The password entered by the user. 
            */
            public static PasswordField ($position: UnityEngine.Rect, $password: string, $style: UnityEngine.GUIStyle) : string
            /** Makes a text field where the user can enter a password.
            * @param $position Rectangle on the screen to use for the password field.
            * @param $label Optional label to display in front of the password field.
            * @param $password The password to edit.
            * @param $style Optional GUIStyle.
            * @returns The password entered by the user. 
            */
            public static PasswordField ($position: UnityEngine.Rect, $label: string, $password: string) : string
            /** Makes a text field where the user can enter a password.
            * @param $position Rectangle on the screen to use for the password field.
            * @param $label Optional label to display in front of the password field.
            * @param $password The password to edit.
            * @param $style Optional GUIStyle.
            * @returns The password entered by the user. 
            */
            public static PasswordField ($position: UnityEngine.Rect, $label: string, $password: string, $style: UnityEngine.GUIStyle) : string
            /** Makes a text field where the user can enter a password.
            * @param $position Rectangle on the screen to use for the password field.
            * @param $label Optional label to display in front of the password field.
            * @param $password The password to edit.
            * @param $style Optional GUIStyle.
            * @returns The password entered by the user. 
            */
            public static PasswordField ($position: UnityEngine.Rect, $label: UnityEngine.GUIContent, $password: string) : string
            /** Makes a text field where the user can enter a password.
            * @param $position Rectangle on the screen to use for the password field.
            * @param $label Optional label to display in front of the password field.
            * @param $password The password to edit.
            * @param $style Optional GUIStyle.
            * @returns The password entered by the user. 
            */
            public static PasswordField ($position: UnityEngine.Rect, $label: UnityEngine.GUIContent, $password: string, $style: UnityEngine.GUIStyle) : string
            public static FloatField ($position: UnityEngine.Rect, $value: number) : number
            /** Makes a text field for entering floats.
            * @param $position Rectangle on the screen to use for the float field.
            * @param $label Optional label to display in front of the float field.
            * @param $value The value to edit.
            * @param $style Optional GUIStyle.
            * @returns The value entered by the user. 
            */
            public static FloatField ($position: UnityEngine.Rect, $value: number, $style: UnityEngine.GUIStyle) : number
            public static FloatField ($position: UnityEngine.Rect, $label: string, $value: number) : number
            /** Makes a text field for entering floats.
            * @param $position Rectangle on the screen to use for the float field.
            * @param $label Optional label to display in front of the float field.
            * @param $value The value to edit.
            * @param $style Optional GUIStyle.
            * @returns The value entered by the user. 
            */
            public static FloatField ($position: UnityEngine.Rect, $label: string, $value: number, $style: UnityEngine.GUIStyle) : number
            public static FloatField ($position: UnityEngine.Rect, $label: UnityEngine.GUIContent, $value: number) : number
            /** Makes a text field for entering floats.
            * @param $position Rectangle on the screen to use for the float field.
            * @param $label Optional label to display in front of the float field.
            * @param $value The value to edit.
            * @param $style Optional GUIStyle.
            * @returns The value entered by the user. 
            */
            public static FloatField ($position: UnityEngine.Rect, $label: UnityEngine.GUIContent, $value: number, $style: UnityEngine.GUIStyle) : number
            public static DelayedFloatField ($position: UnityEngine.Rect, $value: number) : number
            /** Makes a delayed text field for entering floats.
            * @param $position Rectangle on the screen to use for the float field.
            * @param $label Optional label to display in front of the float field.
            * @param $value The value to edit.
            * @param $style Optional GUIStyle.
            * @returns The value entered by the user. Note that the return value will not change until the user has pressed enter or focus is moved away from the float field. 
            */
            public static DelayedFloatField ($position: UnityEngine.Rect, $value: number, $style: UnityEngine.GUIStyle) : number
            public static DelayedFloatField ($position: UnityEngine.Rect, $label: string, $value: number) : number
            /** Makes a delayed text field for entering floats.
            * @param $position Rectangle on the screen to use for the float field.
            * @param $label Optional label to display in front of the float field.
            * @param $value The value to edit.
            * @param $style Optional GUIStyle.
            * @returns The value entered by the user. Note that the return value will not change until the user has pressed enter or focus is moved away from the float field. 
            */
            public static DelayedFloatField ($position: UnityEngine.Rect, $label: string, $value: number, $style: UnityEngine.GUIStyle) : number
            public static DelayedFloatField ($position: UnityEngine.Rect, $label: UnityEngine.GUIContent, $value: number) : number
            /** Makes a delayed text field for entering floats.
            * @param $position Rectangle on the screen to use for the float field.
            * @param $label Optional label to display in front of the float field.
            * @param $value The value to edit.
            * @param $style Optional GUIStyle.
            * @returns The value entered by the user. Note that the return value will not change until the user has pressed enter or focus is moved away from the float field. 
            */
            public static DelayedFloatField ($position: UnityEngine.Rect, $label: UnityEngine.GUIContent, $value: number, $style: UnityEngine.GUIStyle) : number
            public static DelayedFloatField ($position: UnityEngine.Rect, $property: UnityEditor.SerializedProperty) : void
            /** Makes a delayed text field for entering floats.
            * @param $position Rectangle on the screen to use for the float field.
            * @param $property The float property to edit.
            * @param $label Optional label to display in front of the float field. Pass GUIContent.none to hide label.
            */
            public static DelayedFloatField ($position: UnityEngine.Rect, $property: UnityEditor.SerializedProperty, $label: UnityEngine.GUIContent) : void
            public static DoubleField ($position: UnityEngine.Rect, $value: number) : number
            /** Makes a text field for entering doubles.
            * @param $position Rectangle on the screen to use for the double field.
            * @param $label Optional label to display in front of the double field.
            * @param $value The value to edit.
            * @param $style Optional GUIStyle.
            * @returns The value entered by the user. 
            */
            public static DoubleField ($position: UnityEngine.Rect, $value: number, $style: UnityEngine.GUIStyle) : number
            public static DoubleField ($position: UnityEngine.Rect, $label: string, $value: number) : number
            /** Makes a text field for entering doubles.
            * @param $position Rectangle on the screen to use for the double field.
            * @param $label Optional label to display in front of the double field.
            * @param $value The value to edit.
            * @param $style Optional GUIStyle.
            * @returns The value entered by the user. 
            */
            public static DoubleField ($position: UnityEngine.Rect, $label: string, $value: number, $style: UnityEngine.GUIStyle) : number
            public static DoubleField ($position: UnityEngine.Rect, $label: UnityEngine.GUIContent, $value: number) : number
            /** Makes a text field for entering doubles.
            * @param $position Rectangle on the screen to use for the double field.
            * @param $label Optional label to display in front of the double field.
            * @param $value The value to edit.
            * @param $style Optional GUIStyle.
            * @returns The value entered by the user. 
            */
            public static DoubleField ($position: UnityEngine.Rect, $label: UnityEngine.GUIContent, $value: number, $style: UnityEngine.GUIStyle) : number
            public static DelayedDoubleField ($position: UnityEngine.Rect, $value: number) : number
            /** Makes a delayed text field for entering doubles.
            * @param $position Rectangle on the screen to use for the double field.
            * @param $label Optional label to display in front of the double field.
            * @param $value The value to edit.
            * @param $style Optional GUIStyle.
            * @returns The value entered by the user. Note that the return value will not change until the user has pressed enter or focus is moved away from the double field. 
            */
            public static DelayedDoubleField ($position: UnityEngine.Rect, $value: number, $style: UnityEngine.GUIStyle) : number
            public static DelayedDoubleField ($position: UnityEngine.Rect, $label: string, $value: number) : number
            /** Makes a delayed text field for entering doubles.
            * @param $position Rectangle on the screen to use for the double field.
            * @param $label Optional label to display in front of the double field.
            * @param $value The value to edit.
            * @param $style Optional GUIStyle.
            * @returns The value entered by the user. Note that the return value will not change until the user has pressed enter or focus is moved away from the double field. 
            */
            public static DelayedDoubleField ($position: UnityEngine.Rect, $label: string, $value: number, $style: UnityEngine.GUIStyle) : number
            public static DelayedDoubleField ($position: UnityEngine.Rect, $label: UnityEngine.GUIContent, $value: number) : number
            /** Makes a delayed text field for entering doubles.
            * @param $position Rectangle on the screen to use for the double field.
            * @param $label Optional label to display in front of the double field.
            * @param $value The value to edit.
            * @param $style Optional GUIStyle.
            * @returns The value entered by the user. Note that the return value will not change until the user has pressed enter or focus is moved away from the double field. 
            */
            public static DelayedDoubleField ($position: UnityEngine.Rect, $label: UnityEngine.GUIContent, $value: number, $style: UnityEngine.GUIStyle) : number
            /** Makes a text field for entering integers.
            * @param $position Rectangle on the screen to use for the int field.
            * @param $label Optional label to display in front of the int field.
            * @param $value The value to edit.
            * @param $style Optional GUIStyle.
            * @returns The value entered by the user. 
            */
            public static IntField ($position: UnityEngine.Rect, $value: number) : number
            /** Makes a text field for entering integers.
            * @param $position Rectangle on the screen to use for the int field.
            * @param $label Optional label to display in front of the int field.
            * @param $value The value to edit.
            * @param $style Optional GUIStyle.
            * @returns The value entered by the user. 
            */
            public static IntField ($position: UnityEngine.Rect, $value: number, $style: UnityEngine.GUIStyle) : number
            /** Makes a text field for entering integers.
            * @param $position Rectangle on the screen to use for the int field.
            * @param $label Optional label to display in front of the int field.
            * @param $value The value to edit.
            * @param $style Optional GUIStyle.
            * @returns The value entered by the user. 
            */
            public static IntField ($position: UnityEngine.Rect, $label: string, $value: number) : number
            /** Makes a text field for entering integers.
            * @param $position Rectangle on the screen to use for the int field.
            * @param $label Optional label to display in front of the int field.
            * @param $value The value to edit.
            * @param $style Optional GUIStyle.
            * @returns The value entered by the user. 
            */
            public static IntField ($position: UnityEngine.Rect, $label: string, $value: number, $style: UnityEngine.GUIStyle) : number
            /** Makes a text field for entering integers.
            * @param $position Rectangle on the screen to use for the int field.
            * @param $label Optional label to display in front of the int field.
            * @param $value The value to edit.
            * @param $style Optional GUIStyle.
            * @returns The value entered by the user. 
            */
            public static IntField ($position: UnityEngine.Rect, $label: UnityEngine.GUIContent, $value: number) : number
            /** Makes a text field for entering integers.
            * @param $position Rectangle on the screen to use for the int field.
            * @param $label Optional label to display in front of the int field.
            * @param $value The value to edit.
            * @param $style Optional GUIStyle.
            * @returns The value entered by the user. 
            */
            public static IntField ($position: UnityEngine.Rect, $label: UnityEngine.GUIContent, $value: number, $style: UnityEngine.GUIStyle) : number
            public static DelayedIntField ($position: UnityEngine.Rect, $value: number) : number
            /** Makes a delayed text field for entering integers.
            * @param $position Rectangle on the screen to use for the int field.
            * @param $label Optional label to display in front of the int field.
            * @param $value The value to edit.
            * @param $style Optional GUIStyle.
            * @returns The value entered by the user. Note that the return value will not change until the user has pressed enter or focus is moved away from the int field. 
            */
            public static DelayedIntField ($position: UnityEngine.Rect, $value: number, $style: UnityEngine.GUIStyle) : number
            public static DelayedIntField ($position: UnityEngine.Rect, $label: string, $value: number) : number
            /** Makes a delayed text field for entering integers.
            * @param $position Rectangle on the screen to use for the int field.
            * @param $label Optional label to display in front of the int field.
            * @param $value The value to edit.
            * @param $style Optional GUIStyle.
            * @returns The value entered by the user. Note that the return value will not change until the user has pressed enter or focus is moved away from the int field. 
            */
            public static DelayedIntField ($position: UnityEngine.Rect, $label: string, $value: number, $style: UnityEngine.GUIStyle) : number
            public static DelayedIntField ($position: UnityEngine.Rect, $label: UnityEngine.GUIContent, $value: number) : number
            /** Makes a delayed text field for entering integers.
            * @param $position Rectangle on the screen to use for the int field.
            * @param $label Optional label to display in front of the int field.
            * @param $value The value to edit.
            * @param $style Optional GUIStyle.
            * @returns The value entered by the user. Note that the return value will not change until the user has pressed enter or focus is moved away from the int field. 
            */
            public static DelayedIntField ($position: UnityEngine.Rect, $label: UnityEngine.GUIContent, $value: number, $style: UnityEngine.GUIStyle) : number
            public static DelayedIntField ($position: UnityEngine.Rect, $property: UnityEditor.SerializedProperty) : void
            /** The value entered by the user. Note that the return value will not change until the user has pressed enter or focus is moved away from the int field.
            * @param $position Rectangle on the screen to use for the int field.
            * @param $property The int property to edit.
            * @param $label Optional label to display in front of the int field. Pass GUIContent.none to hide label.
            */
            public static DelayedIntField ($position: UnityEngine.Rect, $property: UnityEditor.SerializedProperty, $label: UnityEngine.GUIContent) : void
            /** Makes a text field for entering long integers.
            * @param $position Rectangle on the screen to use for the long field.
            * @param $label Optional label to display in front of the long field.
            * @param $value The value to edit.
            * @param $style Optional GUIStyle.
            * @returns The value entered by the user. 
            */
            public static LongField ($position: UnityEngine.Rect, $value: bigint) : bigint
            public static LongField ($position: UnityEngine.Rect, $value: bigint, $style: UnityEngine.GUIStyle) : bigint
            /** Makes a text field for entering long integers.
            * @param $position Rectangle on the screen to use for the long field.
            * @param $label Optional label to display in front of the long field.
            * @param $value The value to edit.
            * @param $style Optional GUIStyle.
            * @returns The value entered by the user. 
            */
            public static LongField ($position: UnityEngine.Rect, $label: string, $value: bigint) : bigint
            /** Makes a text field for entering long integers.
            * @param $position Rectangle on the screen to use for the long field.
            * @param $label Optional label to display in front of the long field.
            * @param $value The value to edit.
            * @param $style Optional GUIStyle.
            * @returns The value entered by the user. 
            */
            public static LongField ($position: UnityEngine.Rect, $label: string, $value: bigint, $style: UnityEngine.GUIStyle) : bigint
            /** Makes a text field for entering long integers.
            * @param $position Rectangle on the screen to use for the long field.
            * @param $label Optional label to display in front of the long field.
            * @param $value The value to edit.
            * @param $style Optional GUIStyle.
            * @returns The value entered by the user. 
            */
            public static LongField ($position: UnityEngine.Rect, $label: UnityEngine.GUIContent, $value: bigint) : bigint
            /** Makes a text field for entering long integers.
            * @param $position Rectangle on the screen to use for the long field.
            * @param $label Optional label to display in front of the long field.
            * @param $value The value to edit.
            * @param $style Optional GUIStyle.
            * @returns The value entered by the user. 
            */
            public static LongField ($position: UnityEngine.Rect, $label: UnityEngine.GUIContent, $value: bigint, $style: UnityEngine.GUIStyle) : bigint
            /** Makes a generic popup selection field.
            * @param $position Rectangle on the screen to use for the field.
            * @param $label Optional label in front of the field.
            * @param $selectedIndex The index of the option the field shows.
            * @param $displayedOptions An array with the options shown in the popup.
            * @param $style Optional GUIStyle.
            * @returns The index of the option that has been selected by the user. 
            */
            public static Popup ($position: UnityEngine.Rect, $selectedIndex: number, $displayedOptions: System.Array$1<string>) : number
            /** Makes a generic popup selection field.
            * @param $position Rectangle on the screen to use for the field.
            * @param $label Optional label in front of the field.
            * @param $selectedIndex The index of the option the field shows.
            * @param $displayedOptions An array with the options shown in the popup.
            * @param $style Optional GUIStyle.
            * @returns The index of the option that has been selected by the user. 
            */
            public static Popup ($position: UnityEngine.Rect, $selectedIndex: number, $displayedOptions: System.Array$1<string>, $style: UnityEngine.GUIStyle) : number
            /** Makes a generic popup selection field.
            * @param $position Rectangle on the screen to use for the field.
            * @param $label Optional label in front of the field.
            * @param $selectedIndex The index of the option the field shows.
            * @param $displayedOptions An array with the options shown in the popup.
            * @param $style Optional GUIStyle.
            * @returns The index of the option that has been selected by the user. 
            */
            public static Popup ($position: UnityEngine.Rect, $selectedIndex: number, $displayedOptions: System.Array$1<UnityEngine.GUIContent>) : number
            /** Makes a generic popup selection field.
            * @param $position Rectangle on the screen to use for the field.
            * @param $label Optional label in front of the field.
            * @param $selectedIndex The index of the option the field shows.
            * @param $displayedOptions An array with the options shown in the popup.
            * @param $style Optional GUIStyle.
            * @returns The index of the option that has been selected by the user. 
            */
            public static Popup ($position: UnityEngine.Rect, $selectedIndex: number, $displayedOptions: System.Array$1<UnityEngine.GUIContent>, $style: UnityEngine.GUIStyle) : number
            /** Makes a generic popup selection field.
            * @param $position Rectangle on the screen to use for the field.
            * @param $label Optional label in front of the field.
            * @param $selectedIndex The index of the option the field shows.
            * @param $displayedOptions An array with the options shown in the popup.
            * @param $style Optional GUIStyle.
            * @returns The index of the option that has been selected by the user. 
            */
            public static Popup ($position: UnityEngine.Rect, $label: string, $selectedIndex: number, $displayedOptions: System.Array$1<string>) : number
            /** Makes a generic popup selection field.
            * @param $position Rectangle on the screen to use for the field.
            * @param $label Optional label in front of the field.
            * @param $selectedIndex The index of the option the field shows.
            * @param $displayedOptions An array with the options shown in the popup.
            * @param $style Optional GUIStyle.
            * @returns The index of the option that has been selected by the user. 
            */
            public static Popup ($position: UnityEngine.Rect, $label: string, $selectedIndex: number, $displayedOptions: System.Array$1<string>, $style: UnityEngine.GUIStyle) : number
            /** Makes a generic popup selection field.
            * @param $position Rectangle on the screen to use for the field.
            * @param $label Optional label in front of the field.
            * @param $selectedIndex The index of the option the field shows.
            * @param $displayedOptions An array with the options shown in the popup.
            * @param $style Optional GUIStyle.
            * @returns The index of the option that has been selected by the user. 
            */
            public static Popup ($position: UnityEngine.Rect, $label: UnityEngine.GUIContent, $selectedIndex: number, $displayedOptions: System.Array$1<UnityEngine.GUIContent>) : number
            /** Makes a generic popup selection field.
            * @param $position Rectangle on the screen to use for the field.
            * @param $label Optional label in front of the field.
            * @param $selectedIndex The index of the option the field shows.
            * @param $displayedOptions An array with the options shown in the popup.
            * @param $style Optional GUIStyle.
            * @returns The index of the option that has been selected by the user. 
            */
            public static Popup ($position: UnityEngine.Rect, $label: UnityEngine.GUIContent, $selectedIndex: number, $displayedOptions: System.Array$1<UnityEngine.GUIContent>, $style: UnityEngine.GUIStyle) : number
            /** Makes an enum popup selection field.
            * @param $position Rectangle on the screen to use for the field.
            * @param $label Optional label in front of the field.
            * @param $selected The enum option the field shows.
            * @param $style Optional GUIStyle.
            * @param $includeObsolete Set to true to include Enum values with ObsoleteAttribute. Set to false to exclude Enum values with ObsoleteAttribute.
            * @param $checkEnabled Method called for each Enum value displayed. The specified method should return true if the option can be selected, false otherwise.
            * @returns The enum option that has been selected by the user. 
            */
            public static EnumPopup ($position: UnityEngine.Rect, $selected: System.Enum) : System.Enum
            /** Makes an enum popup selection field.
            * @param $position Rectangle on the screen to use for the field.
            * @param $label Optional label in front of the field.
            * @param $selected The enum option the field shows.
            * @param $style Optional GUIStyle.
            * @param $includeObsolete Set to true to include Enum values with ObsoleteAttribute. Set to false to exclude Enum values with ObsoleteAttribute.
            * @param $checkEnabled Method called for each Enum value displayed. The specified method should return true if the option can be selected, false otherwise.
            * @returns The enum option that has been selected by the user. 
            */
            public static EnumPopup ($position: UnityEngine.Rect, $selected: System.Enum, $style: UnityEngine.GUIStyle) : System.Enum
            /** Makes an enum popup selection field.
            * @param $position Rectangle on the screen to use for the field.
            * @param $label Optional label in front of the field.
            * @param $selected The enum option the field shows.
            * @param $style Optional GUIStyle.
            * @param $includeObsolete Set to true to include Enum values with ObsoleteAttribute. Set to false to exclude Enum values with ObsoleteAttribute.
            * @param $checkEnabled Method called for each Enum value displayed. The specified method should return true if the option can be selected, false otherwise.
            * @returns The enum option that has been selected by the user. 
            */
            public static EnumPopup ($position: UnityEngine.Rect, $label: string, $selected: System.Enum) : System.Enum
            /** Makes an enum popup selection field.
            * @param $position Rectangle on the screen to use for the field.
            * @param $label Optional label in front of the field.
            * @param $selected The enum option the field shows.
            * @param $style Optional GUIStyle.
            * @param $includeObsolete Set to true to include Enum values with ObsoleteAttribute. Set to false to exclude Enum values with ObsoleteAttribute.
            * @param $checkEnabled Method called for each Enum value displayed. The specified method should return true if the option can be selected, false otherwise.
            * @returns The enum option that has been selected by the user. 
            */
            public static EnumPopup ($position: UnityEngine.Rect, $label: string, $selected: System.Enum, $style: UnityEngine.GUIStyle) : System.Enum
            /** Makes an enum popup selection field.
            * @param $position Rectangle on the screen to use for the field.
            * @param $label Optional label in front of the field.
            * @param $selected The enum option the field shows.
            * @param $style Optional GUIStyle.
            * @param $includeObsolete Set to true to include Enum values with ObsoleteAttribute. Set to false to exclude Enum values with ObsoleteAttribute.
            * @param $checkEnabled Method called for each Enum value displayed. The specified method should return true if the option can be selected, false otherwise.
            * @returns The enum option that has been selected by the user. 
            */
            public static EnumPopup ($position: UnityEngine.Rect, $label: UnityEngine.GUIContent, $selected: System.Enum) : System.Enum
            /** Makes an enum popup selection field.
            * @param $position Rectangle on the screen to use for the field.
            * @param $label Optional label in front of the field.
            * @param $selected The enum option the field shows.
            * @param $style Optional GUIStyle.
            * @param $includeObsolete Set to true to include Enum values with ObsoleteAttribute. Set to false to exclude Enum values with ObsoleteAttribute.
            * @param $checkEnabled Method called for each Enum value displayed. The specified method should return true if the option can be selected, false otherwise.
            * @returns The enum option that has been selected by the user. 
            */
            public static EnumPopup ($position: UnityEngine.Rect, $label: UnityEngine.GUIContent, $selected: System.Enum, $style: UnityEngine.GUIStyle) : System.Enum
            public static EnumPopup ($position: UnityEngine.Rect, $label: UnityEngine.GUIContent, $selected: System.Enum, $checkEnabled: System.Func$2<System.Enum, boolean>, $includeObsolete?: boolean, $style?: UnityEngine.GUIStyle) : System.Enum
            /** Makes an integer popup selection field.
            * @param $position Rectangle on the screen to use for the field.
            * @param $label Optional label in front of the field.
            * @param $selectedValue The value of the option the field shows.
            * @param $displayedOptions An array with the displayed options the user can choose from.
            * @param $optionValues An array with the values for each option. If optionValues a direct mapping of selectedValue to displayedOptions is assumed.
            * @param $style Optional GUIStyle.
            * @returns The value of the option that has been selected by the user. 
            */
            public static IntPopup ($position: UnityEngine.Rect, $selectedValue: number, $displayedOptions: System.Array$1<string>, $optionValues: System.Array$1<number>) : number
            /** Makes an integer popup selection field.
            * @param $position Rectangle on the screen to use for the field.
            * @param $label Optional label in front of the field.
            * @param $selectedValue The value of the option the field shows.
            * @param $displayedOptions An array with the displayed options the user can choose from.
            * @param $optionValues An array with the values for each option. If optionValues a direct mapping of selectedValue to displayedOptions is assumed.
            * @param $style Optional GUIStyle.
            * @returns The value of the option that has been selected by the user. 
            */
            public static IntPopup ($position: UnityEngine.Rect, $selectedValue: number, $displayedOptions: System.Array$1<string>, $optionValues: System.Array$1<number>, $style: UnityEngine.GUIStyle) : number
            /** Makes an integer popup selection field.
            * @param $position Rectangle on the screen to use for the field.
            * @param $label Optional label in front of the field.
            * @param $selectedValue The value of the option the field shows.
            * @param $displayedOptions An array with the displayed options the user can choose from.
            * @param $optionValues An array with the values for each option. If optionValues a direct mapping of selectedValue to displayedOptions is assumed.
            * @param $style Optional GUIStyle.
            * @returns The value of the option that has been selected by the user. 
            */
            public static IntPopup ($position: UnityEngine.Rect, $selectedValue: number, $displayedOptions: System.Array$1<UnityEngine.GUIContent>, $optionValues: System.Array$1<number>) : number
            /** Makes an integer popup selection field.
            * @param $position Rectangle on the screen to use for the field.
            * @param $label Optional label in front of the field.
            * @param $selectedValue The value of the option the field shows.
            * @param $displayedOptions An array with the displayed options the user can choose from.
            * @param $optionValues An array with the values for each option. If optionValues a direct mapping of selectedValue to displayedOptions is assumed.
            * @param $style Optional GUIStyle.
            * @returns The value of the option that has been selected by the user. 
            */
            public static IntPopup ($position: UnityEngine.Rect, $selectedValue: number, $displayedOptions: System.Array$1<UnityEngine.GUIContent>, $optionValues: System.Array$1<number>, $style: UnityEngine.GUIStyle) : number
            /** Makes an integer popup selection field.
            * @param $position Rectangle on the screen to use for the field.
            * @param $label Optional label in front of the field.
            * @param $selectedValue The value of the option the field shows.
            * @param $displayedOptions An array with the displayed options the user can choose from.
            * @param $optionValues An array with the values for each option. If optionValues a direct mapping of selectedValue to displayedOptions is assumed.
            * @param $style Optional GUIStyle.
            * @returns The value of the option that has been selected by the user. 
            */
            public static IntPopup ($position: UnityEngine.Rect, $label: UnityEngine.GUIContent, $selectedValue: number, $displayedOptions: System.Array$1<UnityEngine.GUIContent>, $optionValues: System.Array$1<number>) : number
            /** Makes an integer popup selection field.
            * @param $position Rectangle on the screen to use for the field.
            * @param $label Optional label in front of the field.
            * @param $selectedValue The value of the option the field shows.
            * @param $displayedOptions An array with the displayed options the user can choose from.
            * @param $optionValues An array with the values for each option. If optionValues a direct mapping of selectedValue to displayedOptions is assumed.
            * @param $style Optional GUIStyle.
            * @returns The value of the option that has been selected by the user. 
            */
            public static IntPopup ($position: UnityEngine.Rect, $label: UnityEngine.GUIContent, $selectedValue: number, $displayedOptions: System.Array$1<UnityEngine.GUIContent>, $optionValues: System.Array$1<number>, $style: UnityEngine.GUIStyle) : number
            /** * @param $position Rectangle on the screen to use for the field.
            * @param $property The SerializedProperty to use for the control.
            * @param $displayedOptions An array with the displayed options the user can choose from.
            * @param $optionValues An array with the values for each option. If optionValues a direct   mapping of selectedValue to displayedOptions is assumed.
            * @param $label Optional label in front of the field.
            */
            public static IntPopup ($position: UnityEngine.Rect, $property: UnityEditor.SerializedProperty, $displayedOptions: System.Array$1<UnityEngine.GUIContent>, $optionValues: System.Array$1<number>) : void
            /** * @param $position Rectangle on the screen to use for the field.
            * @param $property The SerializedProperty to use for the control.
            * @param $displayedOptions An array with the displayed options the user can choose from.
            * @param $optionValues An array with the values for each option. If optionValues a direct   mapping of selectedValue to displayedOptions is assumed.
            * @param $label Optional label in front of the field.
            */
            public static IntPopup ($position: UnityEngine.Rect, $property: UnityEditor.SerializedProperty, $displayedOptions: System.Array$1<UnityEngine.GUIContent>, $optionValues: System.Array$1<number>, $label: UnityEngine.GUIContent) : void
            /** Makes an integer popup selection field.
            * @param $position Rectangle on the screen to use for the field.
            * @param $label Optional label in front of the field.
            * @param $selectedValue The value of the option the field shows.
            * @param $displayedOptions An array with the displayed options the user can choose from.
            * @param $optionValues An array with the values for each option. If optionValues a direct mapping of selectedValue to displayedOptions is assumed.
            * @param $style Optional GUIStyle.
            * @returns The value of the option that has been selected by the user. 
            */
            public static IntPopup ($position: UnityEngine.Rect, $label: string, $selectedValue: number, $displayedOptions: System.Array$1<string>, $optionValues: System.Array$1<number>) : number
            /** Makes an integer popup selection field.
            * @param $position Rectangle on the screen to use for the field.
            * @param $label Optional label in front of the field.
            * @param $selectedValue The value of the option the field shows.
            * @param $displayedOptions An array with the displayed options the user can choose from.
            * @param $optionValues An array with the values for each option. If optionValues a direct mapping of selectedValue to displayedOptions is assumed.
            * @param $style Optional GUIStyle.
            * @returns The value of the option that has been selected by the user. 
            */
            public static IntPopup ($position: UnityEngine.Rect, $label: string, $selectedValue: number, $displayedOptions: System.Array$1<string>, $optionValues: System.Array$1<number>, $style: UnityEngine.GUIStyle) : number
            /** Makes a tag selection field.
            * @param $position Rectangle on the screen to use for the field.
            * @param $label Optional label in front of the field.
            * @param $tag The tag the field shows.
            * @param $style Optional GUIStyle.
            * @returns The tag selected by the user. 
            */
            public static TagField ($position: UnityEngine.Rect, $tag: string) : string
            /** Makes a tag selection field.
            * @param $position Rectangle on the screen to use for the field.
            * @param $label Optional label in front of the field.
            * @param $tag The tag the field shows.
            * @param $style Optional GUIStyle.
            * @returns The tag selected by the user. 
            */
            public static TagField ($position: UnityEngine.Rect, $tag: string, $style: UnityEngine.GUIStyle) : string
            /** Makes a tag selection field.
            * @param $position Rectangle on the screen to use for the field.
            * @param $label Optional label in front of the field.
            * @param $tag The tag the field shows.
            * @param $style Optional GUIStyle.
            * @returns The tag selected by the user. 
            */
            public static TagField ($position: UnityEngine.Rect, $label: string, $tag: string) : string
            /** Makes a tag selection field.
            * @param $position Rectangle on the screen to use for the field.
            * @param $label Optional label in front of the field.
            * @param $tag The tag the field shows.
            * @param $style Optional GUIStyle.
            * @returns The tag selected by the user. 
            */
            public static TagField ($position: UnityEngine.Rect, $label: string, $tag: string, $style: UnityEngine.GUIStyle) : string
            /** Makes a tag selection field.
            * @param $position Rectangle on the screen to use for the field.
            * @param $label Optional label in front of the field.
            * @param $tag The tag the field shows.
            * @param $style Optional GUIStyle.
            * @returns The tag selected by the user. 
            */
            public static TagField ($position: UnityEngine.Rect, $label: UnityEngine.GUIContent, $tag: string) : string
            /** Makes a tag selection field.
            * @param $position Rectangle on the screen to use for the field.
            * @param $label Optional label in front of the field.
            * @param $tag The tag the field shows.
            * @param $style Optional GUIStyle.
            * @returns The tag selected by the user. 
            */
            public static TagField ($position: UnityEngine.Rect, $label: UnityEngine.GUIContent, $tag: string, $style: UnityEngine.GUIStyle) : string
            /** Makes a layer selection field.
            * @param $position Rectangle on the screen to use for the field.
            * @param $label Optional label in front of the field.
            * @param $layer The layer shown in the field.
            * @param $style Optional GUIStyle.
            * @returns The layer selected by the user. 
            */
            public static LayerField ($position: UnityEngine.Rect, $layer: number) : number
            /** Makes a layer selection field.
            * @param $position Rectangle on the screen to use for the field.
            * @param $label Optional label in front of the field.
            * @param $layer The layer shown in the field.
            * @param $style Optional GUIStyle.
            * @returns The layer selected by the user. 
            */
            public static LayerField ($position: UnityEngine.Rect, $layer: number, $style: UnityEngine.GUIStyle) : number
            /** Makes a layer selection field.
            * @param $position Rectangle on the screen to use for the field.
            * @param $label Optional label in front of the field.
            * @param $layer The layer shown in the field.
            * @param $style Optional GUIStyle.
            * @returns The layer selected by the user. 
            */
            public static LayerField ($position: UnityEngine.Rect, $label: string, $layer: number) : number
            /** Makes a layer selection field.
            * @param $position Rectangle on the screen to use for the field.
            * @param $label Optional label in front of the field.
            * @param $layer The layer shown in the field.
            * @param $style Optional GUIStyle.
            * @returns The layer selected by the user. 
            */
            public static LayerField ($position: UnityEngine.Rect, $label: string, $layer: number, $style: UnityEngine.GUIStyle) : number
            /** Makes a layer selection field.
            * @param $position Rectangle on the screen to use for the field.
            * @param $label Optional label in front of the field.
            * @param $layer The layer shown in the field.
            * @param $style Optional GUIStyle.
            * @returns The layer selected by the user. 
            */
            public static LayerField ($position: UnityEngine.Rect, $label: UnityEngine.GUIContent, $layer: number) : number
            /** Makes a layer selection field.
            * @param $position Rectangle on the screen to use for the field.
            * @param $label Optional label in front of the field.
            * @param $layer The layer shown in the field.
            * @param $style Optional GUIStyle.
            * @returns The layer selected by the user. 
            */
            public static LayerField ($position: UnityEngine.Rect, $label: UnityEngine.GUIContent, $layer: number, $style: UnityEngine.GUIStyle) : number
            /** Makes a field for masks.
            * @param $position Rectangle on the screen to use for this control.
            * @param $label Label for the field.
            * @param $mask The current mask to display.
            * @param $displayedOption A string array containing the labels for each flag.
            * @param $style Optional GUIStyle.
            * @param $displayedOptions A string array containing the labels for each flag.
            * @returns The value modified by the user. 
            */
            public static MaskField ($position: UnityEngine.Rect, $label: UnityEngine.GUIContent, $mask: number, $displayedOptions: System.Array$1<string>) : number
            /** Makes a field for masks.
            * @param $position Rectangle on the screen to use for this control.
            * @param $label Label for the field.
            * @param $mask The current mask to display.
            * @param $displayedOption A string array containing the labels for each flag.
            * @param $style Optional GUIStyle.
            * @param $displayedOptions A string array containing the labels for each flag.
            * @returns The value modified by the user. 
            */
            public static MaskField ($position: UnityEngine.Rect, $label: UnityEngine.GUIContent, $mask: number, $displayedOptions: System.Array$1<string>, $style: UnityEngine.GUIStyle) : number
            /** Makes a field for masks.
            * @param $position Rectangle on the screen to use for this control.
            * @param $label Label for the field.
            * @param $mask The current mask to display.
            * @param $displayedOption A string array containing the labels for each flag.
            * @param $style Optional GUIStyle.
            * @param $displayedOptions A string array containing the labels for each flag.
            * @returns The value modified by the user. 
            */
            public static MaskField ($position: UnityEngine.Rect, $label: string, $mask: number, $displayedOptions: System.Array$1<string>) : number
            /** Makes a field for masks.
            * @param $position Rectangle on the screen to use for this control.
            * @param $label Label for the field.
            * @param $mask The current mask to display.
            * @param $displayedOption A string array containing the labels for each flag.
            * @param $style Optional GUIStyle.
            * @param $displayedOptions A string array containing the labels for each flag.
            * @returns The value modified by the user. 
            */
            public static MaskField ($position: UnityEngine.Rect, $label: string, $mask: number, $displayedOptions: System.Array$1<string>, $style: UnityEngine.GUIStyle) : number
            /** Makes a field for masks.
            * @param $position Rectangle on the screen to use for this control.
            * @param $label Label for the field.
            * @param $mask The current mask to display.
            * @param $displayedOption A string array containing the labels for each flag.
            * @param $style Optional GUIStyle.
            * @param $displayedOptions A string array containing the labels for each flag.
            * @returns The value modified by the user. 
            */
            public static MaskField ($position: UnityEngine.Rect, $mask: number, $displayedOptions: System.Array$1<string>) : number
            /** Makes a field for masks.
            * @param $position Rectangle on the screen to use for this control.
            * @param $label Label for the field.
            * @param $mask The current mask to display.
            * @param $displayedOption A string array containing the labels for each flag.
            * @param $style Optional GUIStyle.
            * @param $displayedOptions A string array containing the labels for each flag.
            * @returns The value modified by the user. 
            */
            public static MaskField ($position: UnityEngine.Rect, $mask: number, $displayedOptions: System.Array$1<string>, $style: UnityEngine.GUIStyle) : number
            /** Makes a label with a foldout arrow to the left of it.
            * @param $position Rectangle on the screen to use for the arrow and label.
            * @param $foldout The shown foldout state.
            * @param $content The label to show.
            * @param $style Optional GUIStyle.
            * @param $toggleOnLabelClick Should the label be a clickable part of the control?
            * @returns The foldout state selected by the user. If true, you should render sub-objects. 
            */
            public static Foldout ($position: UnityEngine.Rect, $foldout: boolean, $content: string) : boolean
            /** Makes a label with a foldout arrow to the left of it.
            * @param $position Rectangle on the screen to use for the arrow and label.
            * @param $foldout The shown foldout state.
            * @param $content The label to show.
            * @param $style Optional GUIStyle.
            * @param $toggleOnLabelClick Should the label be a clickable part of the control?
            * @returns The foldout state selected by the user. If true, you should render sub-objects. 
            */
            public static Foldout ($position: UnityEngine.Rect, $foldout: boolean, $content: string, $style: UnityEngine.GUIStyle) : boolean
            /** Makes a label with a foldout arrow to the left of it.
            * @param $position Rectangle on the screen to use for the arrow and label.
            * @param $foldout The shown foldout state.
            * @param $content The label to show.
            * @param $style Optional GUIStyle.
            * @param $toggleOnLabelClick Should the label be a clickable part of the control?
            * @returns The foldout state selected by the user. If true, you should render sub-objects. 
            */
            public static Foldout ($position: UnityEngine.Rect, $foldout: boolean, $content: string, $toggleOnLabelClick: boolean) : boolean
            /** Makes a label with a foldout arrow to the left of it.
            * @param $position Rectangle on the screen to use for the arrow and label.
            * @param $foldout The shown foldout state.
            * @param $content The label to show.
            * @param $style Optional GUIStyle.
            * @param $toggleOnLabelClick Should the label be a clickable part of the control?
            * @returns The foldout state selected by the user. If true, you should render sub-objects. 
            */
            public static Foldout ($position: UnityEngine.Rect, $foldout: boolean, $content: string, $toggleOnLabelClick: boolean, $style: UnityEngine.GUIStyle) : boolean
            /** Makes a label with a foldout arrow to the left of it.
            * @param $position Rectangle on the screen to use for the arrow and label.
            * @param $foldout The shown foldout state.
            * @param $content The label to show.
            * @param $style Optional GUIStyle.
            * @param $toggleOnLabelClick Should the label be a clickable part of the control?
            * @returns The foldout state selected by the user. If true, you should render sub-objects. 
            */
            public static Foldout ($position: UnityEngine.Rect, $foldout: boolean, $content: UnityEngine.GUIContent) : boolean
            /** Makes a label with a foldout arrow to the left of it.
            * @param $position Rectangle on the screen to use for the arrow and label.
            * @param $foldout The shown foldout state.
            * @param $content The label to show.
            * @param $style Optional GUIStyle.
            * @param $toggleOnLabelClick Should the label be a clickable part of the control?
            * @returns The foldout state selected by the user. If true, you should render sub-objects. 
            */
            public static Foldout ($position: UnityEngine.Rect, $foldout: boolean, $content: UnityEngine.GUIContent, $style: UnityEngine.GUIStyle) : boolean
            /** Makes a label with a foldout arrow to the left of it.
            * @param $position Rectangle on the screen to use for the arrow and label.
            * @param $foldout The shown foldout state.
            * @param $content The label to show.
            * @param $style Optional GUIStyle.
            * @param $toggleOnLabelClick Should the label be a clickable part of the control?
            * @returns The foldout state selected by the user. If true, you should render sub-objects. 
            */
            public static Foldout ($position: UnityEngine.Rect, $foldout: boolean, $content: UnityEngine.GUIContent, $toggleOnLabelClick: boolean) : boolean
            /** Makes a label with a foldout arrow to the left of it.
            * @param $position Rectangle on the screen to use for the arrow and label.
            * @param $foldout The shown foldout state.
            * @param $content The label to show.
            * @param $style Optional GUIStyle.
            * @param $toggleOnLabelClick Should the label be a clickable part of the control?
            * @returns The foldout state selected by the user. If true, you should render sub-objects. 
            */
            public static Foldout ($position: UnityEngine.Rect, $foldout: boolean, $content: UnityEngine.GUIContent, $toggleOnLabelClick: boolean, $style: UnityEngine.GUIStyle) : boolean
            /** Makes a label for some control.
            * @param $totalPosition Rectangle on the screen to use in total for both the label and the control.
            * @param $labelPosition Rectangle on the screen to use for the label.
            * @param $label Label to show for the control.
            * @param $id The unique ID of the control. If none specified, the ID of the following control is used.
            * @param $style Optional GUIStyle to use for the label.
            */
            public static HandlePrefixLabel ($totalPosition: UnityEngine.Rect, $labelPosition: UnityEngine.Rect, $label: UnityEngine.GUIContent, $id: number) : void
            /** Makes a label for some control.
            * @param $totalPosition Rectangle on the screen to use in total for both the label and the control.
            * @param $labelPosition Rectangle on the screen to use for the label.
            * @param $label Label to show for the control.
            * @param $id The unique ID of the control. If none specified, the ID of the following control is used.
            * @param $style Optional GUIStyle to use for the label.
            */
            public static HandlePrefixLabel ($totalPosition: UnityEngine.Rect, $labelPosition: UnityEngine.Rect, $label: UnityEngine.GUIContent) : void
            /** Makes a label for some control.
            * @param $totalPosition Rectangle on the screen to use in total for both the label and the control.
            * @param $labelPosition Rectangle on the screen to use for the label.
            * @param $label Label to show for the control.
            * @param $id The unique ID of the control. If none specified, the ID of the following control is used.
            * @param $style Optional GUIStyle to use for the label.
            */
            public static HandlePrefixLabel ($totalPosition: UnityEngine.Rect, $labelPosition: UnityEngine.Rect, $label: UnityEngine.GUIContent, $id: number, $style: UnityEngine.GUIStyle) : void
            /** Get the height needed for a PropertyField control.
            * @param $property Height of the property area.
            * @param $label Descriptive text or image.
            * @param $includeChildren Should the returned height include the height of child properties?
            */
            public static GetPropertyHeight ($property: UnityEditor.SerializedProperty, $includeChildren: boolean) : number
            /** Get the height needed for a PropertyField control.
            * @param $property Height of the property area.
            * @param $label Descriptive text or image.
            * @param $includeChildren Should the returned height include the height of child properties?
            */
            public static GetPropertyHeight ($property: UnityEditor.SerializedProperty, $label: UnityEngine.GUIContent) : number
            /** Get the height needed for a PropertyField control.
            * @param $property Height of the property area.
            * @param $label Descriptive text or image.
            * @param $includeChildren Should the returned height include the height of child properties?
            */
            public static GetPropertyHeight ($property: UnityEditor.SerializedProperty) : number
            /** Get the height needed for a PropertyField control.
            * @param $property Height of the property area.
            * @param $label Descriptive text or image.
            * @param $includeChildren Should the returned height include the height of child properties?
            */
            public static GetPropertyHeight ($property: UnityEditor.SerializedProperty, $label: UnityEngine.GUIContent, $includeChildren: boolean) : number
            public static PropertyField ($position: UnityEngine.Rect, $property: UnityEditor.SerializedProperty) : boolean
            /** Use this to make a field for a SerializedProperty in the Editor.
            * @param $position Rectangle on the screen to use for the property field.
            * @param $property The SerializedProperty to make a field for.
            * @param $label Optional label to use. If not specified the label of the property itself is used. Use GUIContent.none to not display a label at all.
            * @param $includeChildren If true the property including children is drawn; otherwise only the control itself (such as only a foldout but nothing below it).
            * @returns True if the property has children and is expanded and includeChildren was set to false; otherwise false. 
            */
            public static PropertyField ($position: UnityEngine.Rect, $property: UnityEditor.SerializedProperty, $includeChildren: boolean) : boolean
            public static PropertyField ($position: UnityEngine.Rect, $property: UnityEditor.SerializedProperty, $label: UnityEngine.GUIContent) : boolean
            /** Use this to make a field for a SerializedProperty in the Editor.
            * @param $position Rectangle on the screen to use for the property field.
            * @param $property The SerializedProperty to make a field for.
            * @param $label Optional label to use. If not specified the label of the property itself is used. Use GUIContent.none to not display a label at all.
            * @param $includeChildren If true the property including children is drawn; otherwise only the control itself (such as only a foldout but nothing below it).
            * @returns True if the property has children and is expanded and includeChildren was set to false; otherwise false. 
            */
            public static PropertyField ($position: UnityEngine.Rect, $property: UnityEditor.SerializedProperty, $label: UnityEngine.GUIContent, $includeChildren: boolean) : boolean
            public static BeginFoldoutHeaderGroup ($position: UnityEngine.Rect, $foldout: boolean, $content: string, $style?: UnityEngine.GUIStyle, $menuAction?: System.Action$1<UnityEngine.Rect>, $menuIcon?: UnityEngine.GUIStyle) : boolean
            public static BeginFoldoutHeaderGroup ($position: UnityEngine.Rect, $foldout: boolean, $content: UnityEngine.GUIContent, $style?: UnityEngine.GUIStyle, $menuAction?: System.Action$1<UnityEngine.Rect>, $menuIcon?: UnityEngine.GUIStyle) : boolean
            /** Closes a group started with BeginFoldoutHeaderGroup.
            Additional resources: EditorGUILayout.BeginFoldoutHeaderGroup.
            */
            public static EndFoldoutHeaderGroup () : void
            /** Makes a field for editing a Gradient.
            * @param $position Rectangle on the screen to use for the field.
            * @param $label Optional label to display in front of the field.
            * @param $gradient The gradient to edit.
            * @param $hdr Display the HDR Gradient Editor.
            * @param $colorSpace Display the gradient and Gradient Editor in this color space.
            * @returns The gradient edited by the user. 
            */
            public static GradientField ($position: UnityEngine.Rect, $gradient: UnityEngine.Gradient) : UnityEngine.Gradient
            /** Makes a field for editing a Gradient.
            * @param $position Rectangle on the screen to use for the field.
            * @param $label Optional label to display in front of the field.
            * @param $gradient The gradient to edit.
            * @param $hdr Display the HDR Gradient Editor.
            * @param $colorSpace Display the gradient and Gradient Editor in this color space.
            * @returns The gradient edited by the user. 
            */
            public static GradientField ($position: UnityEngine.Rect, $label: string, $gradient: UnityEngine.Gradient) : UnityEngine.Gradient
            /** Makes a field for editing a Gradient.
            * @param $position Rectangle on the screen to use for the field.
            * @param $label Optional label to display in front of the field.
            * @param $gradient The gradient to edit.
            * @param $hdr Display the HDR Gradient Editor.
            * @param $colorSpace Display the gradient and Gradient Editor in this color space.
            * @returns The gradient edited by the user. 
            */
            public static GradientField ($position: UnityEngine.Rect, $label: UnityEngine.GUIContent, $gradient: UnityEngine.Gradient) : UnityEngine.Gradient
            /** Makes a field for editing a Gradient.
            * @param $position Rectangle on the screen to use for the field.
            * @param $label Optional label to display in front of the field.
            * @param $gradient The gradient to edit.
            * @param $hdr Display the HDR Gradient Editor.
            * @param $colorSpace Display the gradient and Gradient Editor in this color space.
            * @returns The gradient edited by the user. 
            */
            public static GradientField ($position: UnityEngine.Rect, $label: UnityEngine.GUIContent, $gradient: UnityEngine.Gradient, $hdr: boolean) : UnityEngine.Gradient
            /** Makes a field for editing a Gradient.
            * @param $position Rectangle on the screen to use for the field.
            * @param $label Optional label to display in front of the field.
            * @param $gradient The gradient to edit.
            * @param $hdr Display the HDR Gradient Editor.
            * @param $colorSpace Display the gradient and Gradient Editor in this color space.
            * @returns The gradient edited by the user. 
            */
            public static GradientField ($position: UnityEngine.Rect, $label: UnityEngine.GUIContent, $gradient: UnityEngine.Gradient, $hdr: boolean, $colorSpace: UnityEngine.ColorSpace) : UnityEngine.Gradient
            public static LargeSplitButtonWithDropdownList ($content: UnityEngine.GUIContent, $buttonNames: System.Array$1<string>, $callback: UnityEditor.GenericMenu.MenuFunction2) : boolean
            /** Draws a filled rectangle of color at the specified position and size within the current editor window.
            * @param $rect The position and size of the rectangle to draw.
            * @param $color The color of the rectange.
            */
            public static DrawRect ($rect: UnityEngine.Rect, $color: UnityEngine.Color) : void
            public constructor ()
        }
        /** Arguments for the event EditorGUI.hyperLinkClicked.
        */
        class HyperLinkClickedEventArgs extends System.Object
        {
            protected [__keep_incompatibility]: never;
            /** Parameters found in the hyperlink tag.
            */
            public get hyperLinkData(): System.Collections.Generic.Dictionary$2<string, string>;
        }
        /** Used as input to ColorField to configure the HDR color ranges in the ColorPicker.
        */
        class ColorPickerHDRConfig extends System.Object
        {
            protected [__keep_incompatibility]: never;
            /** Minimum allowed color component value when using the ColorPicker.
            */
            public minBrightness : number
            /** Maximum allowed color component value when using the ColorPicker.
            */
            public maxBrightness : number
            /** Minimum exposure value allowed in the Color Picker.
            */
            public minExposureValue : number
            /** Maximum exposure value allowed in the Color Picker.
            */
            public maxExposureValue : number
            public constructor ($minBrightness: number, $maxBrightness: number, $minExposureValue: number, $maxExposureValue: number)
        }
        /** User message types.
        */
        enum MessageType
        { None = 0, Info = 1, Warning = 2, Error = 3 }
        /** Represents the type of a SerializedProperty.
        */
        enum SerializedPropertyType
        { Generic = -1, Integer = 0, Boolean = 1, Float = 2, String = 3, Color = 4, ObjectReference = 5, LayerMask = 6, Enum = 7, Vector2 = 8, Vector3 = 9, Vector4 = 10, Rect = 11, ArraySize = 12, Character = 13, AnimationCurve = 14, Bounds = 15, Gradient = 16, Quaternion = 17, ExposedReference = 18, FixedBufferSize = 19, Vector2Int = 20, Vector3Int = 21, RectInt = 22, BoundsInt = 23, ManagedReference = 24, Hash128 = 25 }
        /** Auto laid out version of EditorGUI.
        */
        class EditorGUILayout extends System.Object
        {
            protected [__keep_incompatibility]: never;
            /** Make a label with a foldout arrow to the left of it.
            * @param $foldout The shown foldout state.
            * @param $content The label to show.
            * @param $style Optional GUIStyle.
            * @param $toggleOnLabelClick Specifies whether clicking the label toggles the foldout state. The default value is false. Set to true to include the label in the clickable area.
            * @returns The foldout state selected by the user. If true, you should render sub-objects. 
            */
            public static Foldout ($foldout: boolean, $content: string) : boolean
            /** Make a label with a foldout arrow to the left of it.
            * @param $foldout The shown foldout state.
            * @param $content The label to show.
            * @param $style Optional GUIStyle.
            * @param $toggleOnLabelClick Specifies whether clicking the label toggles the foldout state. The default value is false. Set to true to include the label in the clickable area.
            * @returns The foldout state selected by the user. If true, you should render sub-objects. 
            */
            public static Foldout ($foldout: boolean, $content: string, $style: UnityEngine.GUIStyle) : boolean
            /** Make a label with a foldout arrow to the left of it.
            * @param $foldout The shown foldout state.
            * @param $content The label to show.
            * @param $style Optional GUIStyle.
            * @param $toggleOnLabelClick Specifies whether clicking the label toggles the foldout state. The default value is false. Set to true to include the label in the clickable area.
            * @returns The foldout state selected by the user. If true, you should render sub-objects. 
            */
            public static Foldout ($foldout: boolean, $content: UnityEngine.GUIContent) : boolean
            /** Make a label with a foldout arrow to the left of it.
            * @param $foldout The shown foldout state.
            * @param $content The label to show.
            * @param $style Optional GUIStyle.
            * @param $toggleOnLabelClick Specifies whether clicking the label toggles the foldout state. The default value is false. Set to true to include the label in the clickable area.
            * @returns The foldout state selected by the user. If true, you should render sub-objects. 
            */
            public static Foldout ($foldout: boolean, $content: UnityEngine.GUIContent, $style: UnityEngine.GUIStyle) : boolean
            public static Foldout ($foldout: boolean, $content: string, $toggleOnLabelClick: boolean) : boolean
            /** Make a label with a foldout arrow to the left of it.
            * @param $foldout The shown foldout state.
            * @param $content The label to show.
            * @param $style Optional GUIStyle.
            * @param $toggleOnLabelClick Specifies whether clicking the label toggles the foldout state. The default value is false. Set to true to include the label in the clickable area.
            * @returns The foldout state selected by the user. If true, you should render sub-objects. 
            */
            public static Foldout ($foldout: boolean, $content: string, $toggleOnLabelClick: boolean, $style: UnityEngine.GUIStyle) : boolean
            public static Foldout ($foldout: boolean, $content: UnityEngine.GUIContent, $toggleOnLabelClick: boolean) : boolean
            /** Make a label with a foldout arrow to the left of it.
            * @param $foldout The shown foldout state.
            * @param $content The label to show.
            * @param $style Optional GUIStyle.
            * @param $toggleOnLabelClick Specifies whether clicking the label toggles the foldout state. The default value is false. Set to true to include the label in the clickable area.
            * @returns The foldout state selected by the user. If true, you should render sub-objects. 
            */
            public static Foldout ($foldout: boolean, $content: UnityEngine.GUIContent, $toggleOnLabelClick: boolean, $style: UnityEngine.GUIStyle) : boolean
            /** Make a label in front of some control.
            * @param $label Label to show to the left of the control.
            */
            public static PrefixLabel ($label: string) : void
            /** Make a label in front of some control.
            * @param $label Label to show to the left of the control.
            */
            public static PrefixLabel ($label: string, $followingStyle: UnityEngine.GUIStyle) : void
            /** Make a label in front of some control.
            * @param $label Label to show to the left of the control.
            */
            public static PrefixLabel ($label: string, $followingStyle: UnityEngine.GUIStyle, $labelStyle: UnityEngine.GUIStyle) : void
            /** Make a label in front of some control.
            * @param $label Label to show to the left of the control.
            */
            public static PrefixLabel ($label: UnityEngine.GUIContent) : void
            /** Make a label in front of some control.
            * @param $label Label to show to the left of the control.
            */
            public static PrefixLabel ($label: UnityEngine.GUIContent, $followingStyle: UnityEngine.GUIStyle) : void
            /** Make a label in front of some control.
            * @param $label Label to show to the left of the control.
            */
            public static PrefixLabel ($label: UnityEngine.GUIContent, $followingStyle: UnityEngine.GUIStyle, $labelStyle: UnityEngine.GUIStyle) : void
            /** Make a label field. (Useful for showing read-only info.)
            * @param $label Label in front of the label field.
            * @param $label2 The label to show to the right.
            * @param $options An optional list of layout options that specify extra layout properties. Any values passed in here will override settings defined by the style.<br>
            Additional resources: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
            GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.
            */
            public static LabelField ($label: string, ...options: UnityEngine.GUILayoutOption[]) : void
            /** Make a label field. (Useful for showing read-only info.)
            * @param $label Label in front of the label field.
            * @param $label2 The label to show to the right.
            * @param $options An optional list of layout options that specify extra layout properties. Any values passed in here will override settings defined by the style.<br>
            Additional resources: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
            GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.
            */
            public static LabelField ($label: string, $style: UnityEngine.GUIStyle, ...options: UnityEngine.GUILayoutOption[]) : void
            /** Make a label field. (Useful for showing read-only info.)
            * @param $label Label in front of the label field.
            * @param $label2 The label to show to the right.
            * @param $options An optional list of layout options that specify extra layout properties. Any values passed in here will override settings defined by the style.<br>
            Additional resources: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
            GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.
            */
            public static LabelField ($label: UnityEngine.GUIContent, ...options: UnityEngine.GUILayoutOption[]) : void
            /** Make a label field. (Useful for showing read-only info.)
            * @param $label Label in front of the label field.
            * @param $label2 The label to show to the right.
            * @param $options An optional list of layout options that specify extra layout properties. Any values passed in here will override settings defined by the style.<br>
            Additional resources: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
            GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.
            */
            public static LabelField ($label: UnityEngine.GUIContent, $style: UnityEngine.GUIStyle, ...options: UnityEngine.GUILayoutOption[]) : void
            /** Make a label field. (Useful for showing read-only info.)
            * @param $label Label in front of the label field.
            * @param $label2 The label to show to the right.
            * @param $options An optional list of layout options that specify extra layout properties. Any values passed in here will override settings defined by the style.<br>
            Additional resources: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
            GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.
            */
            public static LabelField ($label: string, $label2: string, ...options: UnityEngine.GUILayoutOption[]) : void
            /** Make a label field. (Useful for showing read-only info.)
            * @param $label Label in front of the label field.
            * @param $label2 The label to show to the right.
            * @param $options An optional list of layout options that specify extra layout properties. Any values passed in here will override settings defined by the style.<br>
            Additional resources: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
            GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.
            */
            public static LabelField ($label: string, $label2: string, $style: UnityEngine.GUIStyle, ...options: UnityEngine.GUILayoutOption[]) : void
            /** Make a label field. (Useful for showing read-only info.)
            * @param $label Label in front of the label field.
            * @param $label2 The label to show to the right.
            * @param $options An optional list of layout options that specify extra layout properties. Any values passed in here will override settings defined by the style.<br>
            Additional resources: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
            GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.
            */
            public static LabelField ($label: UnityEngine.GUIContent, $label2: UnityEngine.GUIContent, ...options: UnityEngine.GUILayoutOption[]) : void
            /** Make a label field. (Useful for showing read-only info.)
            * @param $label Label in front of the label field.
            * @param $label2 The label to show to the right.
            * @param $options An optional list of layout options that specify extra layout properties. Any values passed in here will override settings defined by the style.<br>
            Additional resources: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
            GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.
            */
            public static LabelField ($label: UnityEngine.GUIContent, $label2: UnityEngine.GUIContent, $style: UnityEngine.GUIStyle, ...options: UnityEngine.GUILayoutOption[]) : void
            /** Make a clickable link label.
            * @param $label Label of the link.
            * @param $options An optional list of layout options that specify extra layout properties. Any values passed in here will override settings defined by the style.<br>
            Additional resources: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
            GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.
            * @returns true when the user clicks the link. 
            */
            public static LinkButton ($label: string, ...options: UnityEngine.GUILayoutOption[]) : boolean
            /** Make a clickable link label.
            * @param $label Label of the link.
            * @param $options An optional list of layout options that specify extra layout properties. Any values passed in here will override settings defined by the style.<br>
            Additional resources: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
            GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.
            * @returns true when the user clicks the link. 
            */
            public static LinkButton ($label: UnityEngine.GUIContent, ...options: UnityEngine.GUILayoutOption[]) : boolean
            /** Make a toggle.
            * @param $label Optional label in front of the toggle.
            * @param $value The shown state of the toggle.
            * @param $style Optional GUIStyle.
            * @param $options An optional list of layout options that specify extra layout
            properties. Any values passed in here will override settings defined by the style.<br>
            Additional resources: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
            GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.
            * @returns The selected state of the toggle. 
            */
            public static Toggle ($value: boolean, ...options: UnityEngine.GUILayoutOption[]) : boolean
            /** Make a toggle.
            * @param $label Optional label in front of the toggle.
            * @param $value The shown state of the toggle.
            * @param $style Optional GUIStyle.
            * @param $options An optional list of layout options that specify extra layout
            properties. Any values passed in here will override settings defined by the style.<br>
            Additional resources: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
            GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.
            * @returns The selected state of the toggle. 
            */
            public static Toggle ($label: string, $value: boolean, ...options: UnityEngine.GUILayoutOption[]) : boolean
            /** Make a toggle.
            * @param $label Optional label in front of the toggle.
            * @param $value The shown state of the toggle.
            * @param $style Optional GUIStyle.
            * @param $options An optional list of layout options that specify extra layout
            properties. Any values passed in here will override settings defined by the style.<br>
            Additional resources: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
            GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.
            * @returns The selected state of the toggle. 
            */
            public static Toggle ($label: UnityEngine.GUIContent, $value: boolean, ...options: UnityEngine.GUILayoutOption[]) : boolean
            /** Make a toggle.
            * @param $label Optional label in front of the toggle.
            * @param $value The shown state of the toggle.
            * @param $style Optional GUIStyle.
            * @param $options An optional list of layout options that specify extra layout
            properties. Any values passed in here will override settings defined by the style.<br>
            Additional resources: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
            GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.
            * @returns The selected state of the toggle. 
            */
            public static Toggle ($value: boolean, $style: UnityEngine.GUIStyle, ...options: UnityEngine.GUILayoutOption[]) : boolean
            /** Make a toggle.
            * @param $label Optional label in front of the toggle.
            * @param $value The shown state of the toggle.
            * @param $style Optional GUIStyle.
            * @param $options An optional list of layout options that specify extra layout
            properties. Any values passed in here will override settings defined by the style.<br>
            Additional resources: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
            GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.
            * @returns The selected state of the toggle. 
            */
            public static Toggle ($label: string, $value: boolean, $style: UnityEngine.GUIStyle, ...options: UnityEngine.GUILayoutOption[]) : boolean
            /** Make a toggle.
            * @param $label Optional label in front of the toggle.
            * @param $value The shown state of the toggle.
            * @param $style Optional GUIStyle.
            * @param $options An optional list of layout options that specify extra layout
            properties. Any values passed in here will override settings defined by the style.<br>
            Additional resources: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
            GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.
            * @returns The selected state of the toggle. 
            */
            public static Toggle ($label: UnityEngine.GUIContent, $value: boolean, $style: UnityEngine.GUIStyle, ...options: UnityEngine.GUILayoutOption[]) : boolean
            /** Make a toggle field where the toggle is to the left and the label immediately to the right of it.
            * @param $label Label to display next to the toggle.
            * @param $value The value to edit.
            * @param $labelStyle Optional GUIStyle to use for the label.
            * @param $options An optional list of layout options that specify extra layout properties. Any values passed in here will override settings defined by the style.<br>
            Additional resources: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
            GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.
            */
            public static ToggleLeft ($label: string, $value: boolean, ...options: UnityEngine.GUILayoutOption[]) : boolean
            /** Make a toggle field where the toggle is to the left and the label immediately to the right of it.
            * @param $label Label to display next to the toggle.
            * @param $value The value to edit.
            * @param $labelStyle Optional GUIStyle to use for the label.
            * @param $options An optional list of layout options that specify extra layout properties. Any values passed in here will override settings defined by the style.<br>
            Additional resources: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
            GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.
            */
            public static ToggleLeft ($label: UnityEngine.GUIContent, $value: boolean, ...options: UnityEngine.GUILayoutOption[]) : boolean
            /** Make a toggle field where the toggle is to the left and the label immediately to the right of it.
            * @param $label Label to display next to the toggle.
            * @param $value The value to edit.
            * @param $labelStyle Optional GUIStyle to use for the label.
            * @param $options An optional list of layout options that specify extra layout properties. Any values passed in here will override settings defined by the style.<br>
            Additional resources: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
            GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.
            */
            public static ToggleLeft ($label: string, $value: boolean, $labelStyle: UnityEngine.GUIStyle, ...options: UnityEngine.GUILayoutOption[]) : boolean
            /** Make a toggle field where the toggle is to the left and the label immediately to the right of it.
            * @param $label Label to display next to the toggle.
            * @param $value The value to edit.
            * @param $labelStyle Optional GUIStyle to use for the label.
            * @param $options An optional list of layout options that specify extra layout properties. Any values passed in here will override settings defined by the style.<br>
            Additional resources: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
            GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.
            */
            public static ToggleLeft ($label: UnityEngine.GUIContent, $value: boolean, $labelStyle: UnityEngine.GUIStyle, ...options: UnityEngine.GUILayoutOption[]) : boolean
            /** Make a text field.
            * @param $label Optional label to display in front of the text field.
            * @param $text The text to edit.
            * @param $style Optional GUIStyle.
            * @param $options An optional list of layout options that specify extra layout properties. Any values passed in here will override settings defined by the style.<br>
            Additional resources: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
            GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.
            * @returns The text entered by the user. 
            */
            public static TextField ($text: string, ...options: UnityEngine.GUILayoutOption[]) : string
            /** Make a text field.
            * @param $label Optional label to display in front of the text field.
            * @param $text The text to edit.
            * @param $style Optional GUIStyle.
            * @param $options An optional list of layout options that specify extra layout properties. Any values passed in here will override settings defined by the style.<br>
            Additional resources: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
            GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.
            * @returns The text entered by the user. 
            */
            public static TextField ($text: string, $style: UnityEngine.GUIStyle, ...options: UnityEngine.GUILayoutOption[]) : string
            /** Make a text field.
            * @param $label Optional label to display in front of the text field.
            * @param $text The text to edit.
            * @param $style Optional GUIStyle.
            * @param $options An optional list of layout options that specify extra layout properties. Any values passed in here will override settings defined by the style.<br>
            Additional resources: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
            GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.
            * @returns The text entered by the user. 
            */
            public static TextField ($label: string, $text: string, ...options: UnityEngine.GUILayoutOption[]) : string
            /** Make a text field.
            * @param $label Optional label to display in front of the text field.
            * @param $text The text to edit.
            * @param $style Optional GUIStyle.
            * @param $options An optional list of layout options that specify extra layout properties. Any values passed in here will override settings defined by the style.<br>
            Additional resources: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
            GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.
            * @returns The text entered by the user. 
            */
            public static TextField ($label: string, $text: string, $style: UnityEngine.GUIStyle, ...options: UnityEngine.GUILayoutOption[]) : string
            /** Make a text field.
            * @param $label Optional label to display in front of the text field.
            * @param $text The text to edit.
            * @param $style Optional GUIStyle.
            * @param $options An optional list of layout options that specify extra layout properties. Any values passed in here will override settings defined by the style.<br>
            Additional resources: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
            GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.
            * @returns The text entered by the user. 
            */
            public static TextField ($label: UnityEngine.GUIContent, $text: string, ...options: UnityEngine.GUILayoutOption[]) : string
            /** Make a text field.
            * @param $label Optional label to display in front of the text field.
            * @param $text The text to edit.
            * @param $style Optional GUIStyle.
            * @param $options An optional list of layout options that specify extra layout properties. Any values passed in here will override settings defined by the style.<br>
            Additional resources: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
            GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.
            * @returns The text entered by the user. 
            */
            public static TextField ($label: UnityEngine.GUIContent, $text: string, $style: UnityEngine.GUIStyle, ...options: UnityEngine.GUILayoutOption[]) : string
            /** Make a delayed text field.
            * @param $label Optional label to display in front of the int field.
            * @param $text The text to edit.
            * @param $style Optional GUIStyle.
            * @param $options An optional list of layout options that specify extra layout properties. Any values passed in here will override settings defined by the style.<br>
            Additional resources: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
            GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.
            * @returns The value entered by the user. Note that the return value will not change until the user has pressed enter or focus is moved away from the text field. 
            */
            public static DelayedTextField ($text: string, ...options: UnityEngine.GUILayoutOption[]) : string
            /** Make a delayed text field.
            * @param $label Optional label to display in front of the int field.
            * @param $text The text to edit.
            * @param $style Optional GUIStyle.
            * @param $options An optional list of layout options that specify extra layout properties. Any values passed in here will override settings defined by the style.<br>
            Additional resources: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
            GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.
            * @returns The value entered by the user. Note that the return value will not change until the user has pressed enter or focus is moved away from the text field. 
            */
            public static DelayedTextField ($text: string, $style: UnityEngine.GUIStyle, ...options: UnityEngine.GUILayoutOption[]) : string
            /** Make a delayed text field.
            * @param $label Optional label to display in front of the int field.
            * @param $text The text to edit.
            * @param $style Optional GUIStyle.
            * @param $options An optional list of layout options that specify extra layout properties. Any values passed in here will override settings defined by the style.<br>
            Additional resources: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
            GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.
            * @returns The value entered by the user. Note that the return value will not change until the user has pressed enter or focus is moved away from the text field. 
            */
            public static DelayedTextField ($label: string, $text: string, ...options: UnityEngine.GUILayoutOption[]) : string
            /** Make a delayed text field.
            * @param $label Optional label to display in front of the int field.
            * @param $text The text to edit.
            * @param $style Optional GUIStyle.
            * @param $options An optional list of layout options that specify extra layout properties. Any values passed in here will override settings defined by the style.<br>
            Additional resources: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
            GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.
            * @returns The value entered by the user. Note that the return value will not change until the user has pressed enter or focus is moved away from the text field. 
            */
            public static DelayedTextField ($label: string, $text: string, $style: UnityEngine.GUIStyle, ...options: UnityEngine.GUILayoutOption[]) : string
            /** Make a delayed text field.
            * @param $label Optional label to display in front of the int field.
            * @param $text The text to edit.
            * @param $style Optional GUIStyle.
            * @param $options An optional list of layout options that specify extra layout properties. Any values passed in here will override settings defined by the style.<br>
            Additional resources: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
            GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.
            * @returns The value entered by the user. Note that the return value will not change until the user has pressed enter or focus is moved away from the text field. 
            */
            public static DelayedTextField ($label: UnityEngine.GUIContent, $text: string, ...options: UnityEngine.GUILayoutOption[]) : string
            /** Make a delayed text field.
            * @param $label Optional label to display in front of the int field.
            * @param $text The text to edit.
            * @param $style Optional GUIStyle.
            * @param $options An optional list of layout options that specify extra layout properties. Any values passed in here will override settings defined by the style.<br>
            Additional resources: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
            GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.
            * @returns The value entered by the user. Note that the return value will not change until the user has pressed enter or focus is moved away from the text field. 
            */
            public static DelayedTextField ($label: UnityEngine.GUIContent, $text: string, $style: UnityEngine.GUIStyle, ...options: UnityEngine.GUILayoutOption[]) : string
            /** Make a delayed text field.
            * @param $property The text property to edit.
            * @param $label Optional label to display in front of the int field. Pass GUIContent.none to hide label.
            * @param $options An optional list of layout options that specify extra layout properties. Any values passed in here will override settings defined by the style.<br>
            Additional resources: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
            GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.
            */
            public static DelayedTextField ($property: UnityEditor.SerializedProperty, ...options: UnityEngine.GUILayoutOption[]) : void
            /** Make a delayed text field.
            * @param $property The text property to edit.
            * @param $label Optional label to display in front of the int field. Pass GUIContent.none to hide label.
            * @param $options An optional list of layout options that specify extra layout properties. Any values passed in here will override settings defined by the style.<br>
            Additional resources: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
            GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.
            */
            public static DelayedTextField ($property: UnityEditor.SerializedProperty, $label: UnityEngine.GUIContent, ...options: UnityEngine.GUILayoutOption[]) : void
            /** Make a text area.
            * @param $text The text to edit.
            * @param $style Optional GUIStyle.
            * @param $options An optional list of layout options that specify extra layout properties. Any values passed in here will override settings defined by the style.<br>
            Additional resources: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
            GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.
            * @returns The text entered by the user. 
            */
            public static TextArea ($text: string, ...options: UnityEngine.GUILayoutOption[]) : string
            /** Make a text area.
            * @param $text The text to edit.
            * @param $style Optional GUIStyle.
            * @param $options An optional list of layout options that specify extra layout properties. Any values passed in here will override settings defined by the style.<br>
            Additional resources: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
            GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.
            * @returns The text entered by the user. 
            */
            public static TextArea ($text: string, $style: UnityEngine.GUIStyle, ...options: UnityEngine.GUILayoutOption[]) : string
            /** Make a selectable label field. (Useful for showing read-only info that can be copy-pasted.)
            * @param $text The text to show.
            * @param $style Optional GUIStyle.
            * @param $options An optional list of layout options that specify extra layout properties. Any values passed in here will override settings defined by the style.<br>
            Additional resources: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
            GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.
            */
            public static SelectableLabel ($text: string, ...options: UnityEngine.GUILayoutOption[]) : void
            /** Make a selectable label field. (Useful for showing read-only info that can be copy-pasted.)
            * @param $text The text to show.
            * @param $style Optional GUIStyle.
            * @param $options An optional list of layout options that specify extra layout properties. Any values passed in here will override settings defined by the style.<br>
            Additional resources: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
            GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.
            */
            public static SelectableLabel ($text: string, $style: UnityEngine.GUIStyle, ...options: UnityEngine.GUILayoutOption[]) : void
            /** Make a text field where the user can enter a password.
            * @param $label Optional label to display in front of the password field.
            * @param $password The password to edit.
            * @param $style Optional GUIStyle.
            * @param $options An optional list of layout options that specify extra layout properties. Any values passed in here will override settings defined by the style.<br>
            Additional resources: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
            GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.
            * @returns The password entered by the user. 
            */
            public static PasswordField ($password: string, ...options: UnityEngine.GUILayoutOption[]) : string
            /** Make a text field where the user can enter a password.
            * @param $label Optional label to display in front of the password field.
            * @param $password The password to edit.
            * @param $style Optional GUIStyle.
            * @param $options An optional list of layout options that specify extra layout properties. Any values passed in here will override settings defined by the style.<br>
            Additional resources: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
            GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.
            * @returns The password entered by the user. 
            */
            public static PasswordField ($password: string, $style: UnityEngine.GUIStyle, ...options: UnityEngine.GUILayoutOption[]) : string
            /** Make a text field where the user can enter a password.
            * @param $label Optional label to display in front of the password field.
            * @param $password The password to edit.
            * @param $style Optional GUIStyle.
            * @param $options An optional list of layout options that specify extra layout properties. Any values passed in here will override settings defined by the style.<br>
            Additional resources: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
            GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.
            * @returns The password entered by the user. 
            */
            public static PasswordField ($label: string, $password: string, ...options: UnityEngine.GUILayoutOption[]) : string
            /** Make a text field where the user can enter a password.
            * @param $label Optional label to display in front of the password field.
            * @param $password The password to edit.
            * @param $style Optional GUIStyle.
            * @param $options An optional list of layout options that specify extra layout properties. Any values passed in here will override settings defined by the style.<br>
            Additional resources: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
            GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.
            * @returns The password entered by the user. 
            */
            public static PasswordField ($label: string, $password: string, $style: UnityEngine.GUIStyle, ...options: UnityEngine.GUILayoutOption[]) : string
            /** Make a text field where the user can enter a password.
            * @param $label Optional label to display in front of the password field.
            * @param $password The password to edit.
            * @param $style Optional GUIStyle.
            * @param $options An optional list of layout options that specify extra layout properties. Any values passed in here will override settings defined by the style.<br>
            Additional resources: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
            GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.
            * @returns The password entered by the user. 
            */
            public static PasswordField ($label: UnityEngine.GUIContent, $password: string, ...options: UnityEngine.GUILayoutOption[]) : string
            /** Make a text field where the user can enter a password.
            * @param $label Optional label to display in front of the password field.
            * @param $password The password to edit.
            * @param $style Optional GUIStyle.
            * @param $options An optional list of layout options that specify extra layout properties. Any values passed in here will override settings defined by the style.<br>
            Additional resources: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
            GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.
            * @returns The password entered by the user. 
            */
            public static PasswordField ($label: UnityEngine.GUIContent, $password: string, $style: UnityEngine.GUIStyle, ...options: UnityEngine.GUILayoutOption[]) : string
            /** Make a text field for entering float values.
            * @param $label Optional label to display in front of the float field.
            * @param $value The value to edit.
            * @param $style Optional GUIStyle.
            * @param $options An optional list of layout options that specify extra layout properties. Any values passed in here will override settings defined by the style.<br>
            Additional resources: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
            GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.
            * @returns The value entered by the user. 
            */
            public static FloatField ($value: number, ...options: UnityEngine.GUILayoutOption[]) : number
            /** Make a text field for entering float values.
            * @param $label Optional label to display in front of the float field.
            * @param $value The value to edit.
            * @param $style Optional GUIStyle.
            * @param $options An optional list of layout options that specify extra layout properties. Any values passed in here will override settings defined by the style.<br>
            Additional resources: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
            GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.
            * @returns The value entered by the user. 
            */
            public static FloatField ($value: number, $style: UnityEngine.GUIStyle, ...options: UnityEngine.GUILayoutOption[]) : number
            /** Make a text field for entering float values.
            * @param $label Optional label to display in front of the float field.
            * @param $value The value to edit.
            * @param $style Optional GUIStyle.
            * @param $options An optional list of layout options that specify extra layout properties. Any values passed in here will override settings defined by the style.<br>
            Additional resources: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
            GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.
            * @returns The value entered by the user. 
            */
            public static FloatField ($label: string, $value: number, ...options: UnityEngine.GUILayoutOption[]) : number
            /** Make a text field for entering float values.
            * @param $label Optional label to display in front of the float field.
            * @param $value The value to edit.
            * @param $style Optional GUIStyle.
            * @param $options An optional list of layout options that specify extra layout properties. Any values passed in here will override settings defined by the style.<br>
            Additional resources: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
            GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.
            * @returns The value entered by the user. 
            */
            public static FloatField ($label: string, $value: number, $style: UnityEngine.GUIStyle, ...options: UnityEngine.GUILayoutOption[]) : number
            /** Make a text field for entering float values.
            * @param $label Optional label to display in front of the float field.
            * @param $value The value to edit.
            * @param $style Optional GUIStyle.
            * @param $options An optional list of layout options that specify extra layout properties. Any values passed in here will override settings defined by the style.<br>
            Additional resources: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
            GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.
            * @returns The value entered by the user. 
            */
            public static FloatField ($label: UnityEngine.GUIContent, $value: number, ...options: UnityEngine.GUILayoutOption[]) : number
            /** Make a text field for entering float values.
            * @param $label Optional label to display in front of the float field.
            * @param $value The value to edit.
            * @param $style Optional GUIStyle.
            * @param $options An optional list of layout options that specify extra layout properties. Any values passed in here will override settings defined by the style.<br>
            Additional resources: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
            GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.
            * @returns The value entered by the user. 
            */
            public static FloatField ($label: UnityEngine.GUIContent, $value: number, $style: UnityEngine.GUIStyle, ...options: UnityEngine.GUILayoutOption[]) : number
            /** Make a delayed text field for entering floats.
            * @param $label Optional label to display in front of the float field.
            * @param $value The value to edit.
            * @param $style Optional GUIStyle.
            * @param $options An optional list of layout options that specify extra layout properties. Any values passed in here will override settings defined by the style.<br>
            Additional resources: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
            GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.
            * @returns The value entered by the user. Note that the return value will not change until the user has pressed enter or focus is moved away from the float field. 
            */
            public static DelayedFloatField ($value: number, ...options: UnityEngine.GUILayoutOption[]) : number
            /** Make a delayed text field for entering floats.
            * @param $label Optional label to display in front of the float field.
            * @param $value The value to edit.
            * @param $style Optional GUIStyle.
            * @param $options An optional list of layout options that specify extra layout properties. Any values passed in here will override settings defined by the style.<br>
            Additional resources: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
            GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.
            * @returns The value entered by the user. Note that the return value will not change until the user has pressed enter or focus is moved away from the float field. 
            */
            public static DelayedFloatField ($value: number, $style: UnityEngine.GUIStyle, ...options: UnityEngine.GUILayoutOption[]) : number
            /** Make a delayed text field for entering floats.
            * @param $label Optional label to display in front of the float field.
            * @param $value The value to edit.
            * @param $style Optional GUIStyle.
            * @param $options An optional list of layout options that specify extra layout properties. Any values passed in here will override settings defined by the style.<br>
            Additional resources: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
            GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.
            * @returns The value entered by the user. Note that the return value will not change until the user has pressed enter or focus is moved away from the float field. 
            */
            public static DelayedFloatField ($label: string, $value: number, ...options: UnityEngine.GUILayoutOption[]) : number
            /** Make a delayed text field for entering floats.
            * @param $label Optional label to display in front of the float field.
            * @param $value The value to edit.
            * @param $style Optional GUIStyle.
            * @param $options An optional list of layout options that specify extra layout properties. Any values passed in here will override settings defined by the style.<br>
            Additional resources: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
            GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.
            * @returns The value entered by the user. Note that the return value will not change until the user has pressed enter or focus is moved away from the float field. 
            */
            public static DelayedFloatField ($label: string, $value: number, $style: UnityEngine.GUIStyle, ...options: UnityEngine.GUILayoutOption[]) : number
            /** Make a delayed text field for entering floats.
            * @param $label Optional label to display in front of the float field.
            * @param $value The value to edit.
            * @param $style Optional GUIStyle.
            * @param $options An optional list of layout options that specify extra layout properties. Any values passed in here will override settings defined by the style.<br>
            Additional resources: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
            GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.
            * @returns The value entered by the user. Note that the return value will not change until the user has pressed enter or focus is moved away from the float field. 
            */
            public static DelayedFloatField ($label: UnityEngine.GUIContent, $value: number, ...options: UnityEngine.GUILayoutOption[]) : number
            /** Make a delayed text field for entering floats.
            * @param $label Optional label to display in front of the float field.
            * @param $value The value to edit.
            * @param $style Optional GUIStyle.
            * @param $options An optional list of layout options that specify extra layout properties. Any values passed in here will override settings defined by the style.<br>
            Additional resources: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
            GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.
            * @returns The value entered by the user. Note that the return value will not change until the user has pressed enter or focus is moved away from the float field. 
            */
            public static DelayedFloatField ($label: UnityEngine.GUIContent, $value: number, $style: UnityEngine.GUIStyle, ...options: UnityEngine.GUILayoutOption[]) : number
            /** Make a delayed text field for entering floats.
            * @param $property The float property to edit.
            * @param $label Optional label to display in front of the float field. Pass GUIContent.none to hide label.
            * @param $options An optional list of layout options that specify extra layout properties. Any values passed in here will override settings defined by the style.<br>
            Additional resources: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
            GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.
            */
            public static DelayedFloatField ($property: UnityEditor.SerializedProperty, ...options: UnityEngine.GUILayoutOption[]) : void
            /** Make a delayed text field for entering floats.
            * @param $property The float property to edit.
            * @param $label Optional label to display in front of the float field. Pass GUIContent.none to hide label.
            * @param $options An optional list of layout options that specify extra layout properties. Any values passed in here will override settings defined by the style.<br>
            Additional resources: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
            GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.
            */
            public static DelayedFloatField ($property: UnityEditor.SerializedProperty, $label: UnityEngine.GUIContent, ...options: UnityEngine.GUILayoutOption[]) : void
            /** Make a text field for entering double values.
            * @param $label Optional label to display in front of the double field.
            * @param $value The value to edit.
            * @param $style Optional GUIStyle.
            * @param $options An optional list of layout options that specify extra layout properties. Any values passed in here will override settings defined by the style.<br>
            Additional resources: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
            GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.
            * @returns The value entered by the user. 
            */
            public static DoubleField ($value: number, ...options: UnityEngine.GUILayoutOption[]) : number
            /** Make a text field for entering double values.
            * @param $label Optional label to display in front of the double field.
            * @param $value The value to edit.
            * @param $style Optional GUIStyle.
            * @param $options An optional list of layout options that specify extra layout properties. Any values passed in here will override settings defined by the style.<br>
            Additional resources: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
            GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.
            * @returns The value entered by the user. 
            */
            public static DoubleField ($value: number, $style: UnityEngine.GUIStyle, ...options: UnityEngine.GUILayoutOption[]) : number
            /** Make a text field for entering double values.
            * @param $label Optional label to display in front of the double field.
            * @param $value The value to edit.
            * @param $style Optional GUIStyle.
            * @param $options An optional list of layout options that specify extra layout properties. Any values passed in here will override settings defined by the style.<br>
            Additional resources: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
            GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.
            * @returns The value entered by the user. 
            */
            public static DoubleField ($label: string, $value: number, ...options: UnityEngine.GUILayoutOption[]) : number
            /** Make a text field for entering double values.
            * @param $label Optional label to display in front of the double field.
            * @param $value The value to edit.
            * @param $style Optional GUIStyle.
            * @param $options An optional list of layout options that specify extra layout properties. Any values passed in here will override settings defined by the style.<br>
            Additional resources: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
            GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.
            * @returns The value entered by the user. 
            */
            public static DoubleField ($label: string, $value: number, $style: UnityEngine.GUIStyle, ...options: UnityEngine.GUILayoutOption[]) : number
            /** Make a text field for entering double values.
            * @param $label Optional label to display in front of the double field.
            * @param $value The value to edit.
            * @param $style Optional GUIStyle.
            * @param $options An optional list of layout options that specify extra layout properties. Any values passed in here will override settings defined by the style.<br>
            Additional resources: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
            GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.
            * @returns The value entered by the user. 
            */
            public static DoubleField ($label: UnityEngine.GUIContent, $value: number, ...options: UnityEngine.GUILayoutOption[]) : number
            /** Make a text field for entering double values.
            * @param $label Optional label to display in front of the double field.
            * @param $value The value to edit.
            * @param $style Optional GUIStyle.
            * @param $options An optional list of layout options that specify extra layout properties. Any values passed in here will override settings defined by the style.<br>
            Additional resources: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
            GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.
            * @returns The value entered by the user. 
            */
            public static DoubleField ($label: UnityEngine.GUIContent, $value: number, $style: UnityEngine.GUIStyle, ...options: UnityEngine.GUILayoutOption[]) : number
            /** Make a delayed text field for entering doubles.
            * @param $label Optional label to display in front of the double field.
            * @param $value The value to edit.
            * @param $style Optional GUIStyle.
            * @param $options 
            An optional list of layout options that specify extra layout properties. Any values passed in here will override settings defined by the style.<br>
            Additional resources: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
            GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.
            * @returns The value entered by the user. Note that the return value will not change until the user has pressed enter or focus is moved away from the double field. 
            */
            public static DelayedDoubleField ($value: number, ...options: UnityEngine.GUILayoutOption[]) : number
            /** Make a delayed text field for entering doubles.
            * @param $label Optional label to display in front of the double field.
            * @param $value The value to edit.
            * @param $style Optional GUIStyle.
            * @param $options 
            An optional list of layout options that specify extra layout properties. Any values passed in here will override settings defined by the style.<br>
            Additional resources: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
            GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.
            * @returns The value entered by the user. Note that the return value will not change until the user has pressed enter or focus is moved away from the double field. 
            */
            public static DelayedDoubleField ($value: number, $style: UnityEngine.GUIStyle, ...options: UnityEngine.GUILayoutOption[]) : number
            /** Make a delayed text field for entering doubles.
            * @param $label Optional label to display in front of the double field.
            * @param $value The value to edit.
            * @param $style Optional GUIStyle.
            * @param $options 
            An optional list of layout options that specify extra layout properties. Any values passed in here will override settings defined by the style.<br>
            Additional resources: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
            GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.
            * @returns The value entered by the user. Note that the return value will not change until the user has pressed enter or focus is moved away from the double field. 
            */
            public static DelayedDoubleField ($label: string, $value: number, ...options: UnityEngine.GUILayoutOption[]) : number
            /** Make a delayed text field for entering doubles.
            * @param $label Optional label to display in front of the double field.
            * @param $value The value to edit.
            * @param $style Optional GUIStyle.
            * @param $options 
            An optional list of layout options that specify extra layout properties. Any values passed in here will override settings defined by the style.<br>
            Additional resources: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
            GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.
            * @returns The value entered by the user. Note that the return value will not change until the user has pressed enter or focus is moved away from the double field. 
            */
            public static DelayedDoubleField ($label: string, $value: number, $style: UnityEngine.GUIStyle, ...options: UnityEngine.GUILayoutOption[]) : number
            /** Make a delayed text field for entering doubles.
            * @param $label Optional label to display in front of the double field.
            * @param $value The value to edit.
            * @param $style Optional GUIStyle.
            * @param $options 
            An optional list of layout options that specify extra layout properties. Any values passed in here will override settings defined by the style.<br>
            Additional resources: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
            GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.
            * @returns The value entered by the user. Note that the return value will not change until the user has pressed enter or focus is moved away from the double field. 
            */
            public static DelayedDoubleField ($label: UnityEngine.GUIContent, $value: number, ...options: UnityEngine.GUILayoutOption[]) : number
            /** Make a delayed text field for entering doubles.
            * @param $label Optional label to display in front of the double field.
            * @param $value The value to edit.
            * @param $style Optional GUIStyle.
            * @param $options 
            An optional list of layout options that specify extra layout properties. Any values passed in here will override settings defined by the style.<br>
            Additional resources: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
            GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.
            * @returns The value entered by the user. Note that the return value will not change until the user has pressed enter or focus is moved away from the double field. 
            */
            public static DelayedDoubleField ($label: UnityEngine.GUIContent, $value: number, $style: UnityEngine.GUIStyle, ...options: UnityEngine.GUILayoutOption[]) : number
            /** Make a text field for entering integers.
            * @param $label Optional label to display in front of the int field.
            * @param $value The value to edit.
            * @param $style Optional GUIStyle.
            * @param $options An optional list of layout options that specify extra layout properties. Any values passed in here will override settings defined by the style.<br>
            Additional resources: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
            GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.
            * @returns The value entered by the user. 
            */
            public static IntField ($value: number, ...options: UnityEngine.GUILayoutOption[]) : number
            /** Make a text field for entering integers.
            * @param $label Optional label to display in front of the int field.
            * @param $value The value to edit.
            * @param $style Optional GUIStyle.
            * @param $options An optional list of layout options that specify extra layout properties. Any values passed in here will override settings defined by the style.<br>
            Additional resources: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
            GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.
            * @returns The value entered by the user. 
            */
            public static IntField ($value: number, $style: UnityEngine.GUIStyle, ...options: UnityEngine.GUILayoutOption[]) : number
            /** Make a text field for entering integers.
            * @param $label Optional label to display in front of the int field.
            * @param $value The value to edit.
            * @param $style Optional GUIStyle.
            * @param $options An optional list of layout options that specify extra layout properties. Any values passed in here will override settings defined by the style.<br>
            Additional resources: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
            GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.
            * @returns The value entered by the user. 
            */
            public static IntField ($label: string, $value: number, ...options: UnityEngine.GUILayoutOption[]) : number
            /** Make a text field for entering integers.
            * @param $label Optional label to display in front of the int field.
            * @param $value The value to edit.
            * @param $style Optional GUIStyle.
            * @param $options An optional list of layout options that specify extra layout properties. Any values passed in here will override settings defined by the style.<br>
            Additional resources: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
            GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.
            * @returns The value entered by the user. 
            */
            public static IntField ($label: string, $value: number, $style: UnityEngine.GUIStyle, ...options: UnityEngine.GUILayoutOption[]) : number
            /** Make a text field for entering integers.
            * @param $label Optional label to display in front of the int field.
            * @param $value The value to edit.
            * @param $style Optional GUIStyle.
            * @param $options An optional list of layout options that specify extra layout properties. Any values passed in here will override settings defined by the style.<br>
            Additional resources: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
            GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.
            * @returns The value entered by the user. 
            */
            public static IntField ($label: UnityEngine.GUIContent, $value: number, ...options: UnityEngine.GUILayoutOption[]) : number
            /** Make a text field for entering integers.
            * @param $label Optional label to display in front of the int field.
            * @param $value The value to edit.
            * @param $style Optional GUIStyle.
            * @param $options An optional list of layout options that specify extra layout properties. Any values passed in here will override settings defined by the style.<br>
            Additional resources: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
            GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.
            * @returns The value entered by the user. 
            */
            public static IntField ($label: UnityEngine.GUIContent, $value: number, $style: UnityEngine.GUIStyle, ...options: UnityEngine.GUILayoutOption[]) : number
            /** Make a delayed text field for entering integers.
            * @param $label Optional label to display in front of the int field.
            * @param $value The value to edit.
            * @param $style Optional GUIStyle.
            * @param $options An optional list of layout options that specify extra layout properties. Any values passed in here will override settings defined by the style.<br>
            Additional resources: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
            GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.
            * @returns The value entered by the user. Note that the return value will not change until the user has pressed enter or focus is moved away from the int field. 
            */
            public static DelayedIntField ($value: number, ...options: UnityEngine.GUILayoutOption[]) : number
            /** Make a delayed text field for entering integers.
            * @param $label Optional label to display in front of the int field.
            * @param $value The value to edit.
            * @param $style Optional GUIStyle.
            * @param $options An optional list of layout options that specify extra layout properties. Any values passed in here will override settings defined by the style.<br>
            Additional resources: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
            GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.
            * @returns The value entered by the user. Note that the return value will not change until the user has pressed enter or focus is moved away from the int field. 
            */
            public static DelayedIntField ($value: number, $style: UnityEngine.GUIStyle, ...options: UnityEngine.GUILayoutOption[]) : number
            /** Make a delayed text field for entering integers.
            * @param $label Optional label to display in front of the int field.
            * @param $value The value to edit.
            * @param $style Optional GUIStyle.
            * @param $options An optional list of layout options that specify extra layout properties. Any values passed in here will override settings defined by the style.<br>
            Additional resources: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
            GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.
            * @returns The value entered by the user. Note that the return value will not change until the user has pressed enter or focus is moved away from the int field. 
            */
            public static DelayedIntField ($label: string, $value: number, ...options: UnityEngine.GUILayoutOption[]) : number
            /** Make a delayed text field for entering integers.
            * @param $label Optional label to display in front of the int field.
            * @param $value The value to edit.
            * @param $style Optional GUIStyle.
            * @param $options An optional list of layout options that specify extra layout properties. Any values passed in here will override settings defined by the style.<br>
            Additional resources: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
            GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.
            * @returns The value entered by the user. Note that the return value will not change until the user has pressed enter or focus is moved away from the int field. 
            */
            public static DelayedIntField ($label: string, $value: number, $style: UnityEngine.GUIStyle, ...options: UnityEngine.GUILayoutOption[]) : number
            /** Make a delayed text field for entering integers.
            * @param $label Optional label to display in front of the int field.
            * @param $value The value to edit.
            * @param $style Optional GUIStyle.
            * @param $options An optional list of layout options that specify extra layout properties. Any values passed in here will override settings defined by the style.<br>
            Additional resources: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
            GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.
            * @returns The value entered by the user. Note that the return value will not change until the user has pressed enter or focus is moved away from the int field. 
            */
            public static DelayedIntField ($label: UnityEngine.GUIContent, $value: number, ...options: UnityEngine.GUILayoutOption[]) : number
            /** Make a delayed text field for entering integers.
            * @param $label Optional label to display in front of the int field.
            * @param $value The value to edit.
            * @param $style Optional GUIStyle.
            * @param $options An optional list of layout options that specify extra layout properties. Any values passed in here will override settings defined by the style.<br>
            Additional resources: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
            GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.
            * @returns The value entered by the user. Note that the return value will not change until the user has pressed enter or focus is moved away from the int field. 
            */
            public static DelayedIntField ($label: UnityEngine.GUIContent, $value: number, $style: UnityEngine.GUIStyle, ...options: UnityEngine.GUILayoutOption[]) : number
            /** Make a delayed text field for entering integers.
            * @param $property The int property to edit.
            * @param $label Optional label to display in front of the int field. Pass GUIContent.none to hide label.
            * @param $options An optional list of layout options that specify extra layout properties. Any values passed in here will override settings defined by the style.<br>
            Additional resources: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
            GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.
            */
            public static DelayedIntField ($property: UnityEditor.SerializedProperty, ...options: UnityEngine.GUILayoutOption[]) : void
            /** Make a delayed text field for entering integers.
            * @param $property The int property to edit.
            * @param $label Optional label to display in front of the int field. Pass GUIContent.none to hide label.
            * @param $options An optional list of layout options that specify extra layout properties. Any values passed in here will override settings defined by the style.<br>
            Additional resources: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
            GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.
            */
            public static DelayedIntField ($property: UnityEditor.SerializedProperty, $label: UnityEngine.GUIContent, ...options: UnityEngine.GUILayoutOption[]) : void
            /** Make a text field for entering long integers.
            * @param $label Optional label to display in front of the long field.
            * @param $value The value to edit.
            * @param $style Optional GUIStyle.
            * @param $options An optional list of layout options that specify extra layout properties. Any values passed in here will override settings defined by the style.<br>
            Additional resources: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
            GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.
            * @returns The value entered by the user. 
            */
            public static LongField ($value: bigint, ...options: UnityEngine.GUILayoutOption[]) : bigint
            /** Make a text field for entering long integers.
            * @param $label Optional label to display in front of the long field.
            * @param $value The value to edit.
            * @param $style Optional GUIStyle.
            * @param $options An optional list of layout options that specify extra layout properties. Any values passed in here will override settings defined by the style.<br>
            Additional resources: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
            GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.
            * @returns The value entered by the user. 
            */
            public static LongField ($value: bigint, $style: UnityEngine.GUIStyle, ...options: UnityEngine.GUILayoutOption[]) : bigint
            /** Make a text field for entering long integers.
            * @param $label Optional label to display in front of the long field.
            * @param $value The value to edit.
            * @param $style Optional GUIStyle.
            * @param $options An optional list of layout options that specify extra layout properties. Any values passed in here will override settings defined by the style.<br>
            Additional resources: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
            GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.
            * @returns The value entered by the user. 
            */
            public static LongField ($label: string, $value: bigint, ...options: UnityEngine.GUILayoutOption[]) : bigint
            /** Make a text field for entering long integers.
            * @param $label Optional label to display in front of the long field.
            * @param $value The value to edit.
            * @param $style Optional GUIStyle.
            * @param $options An optional list of layout options that specify extra layout properties. Any values passed in here will override settings defined by the style.<br>
            Additional resources: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
            GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.
            * @returns The value entered by the user. 
            */
            public static LongField ($label: string, $value: bigint, $style: UnityEngine.GUIStyle, ...options: UnityEngine.GUILayoutOption[]) : bigint
            /** Make a text field for entering long integers.
            * @param $label Optional label to display in front of the long field.
            * @param $value The value to edit.
            * @param $style Optional GUIStyle.
            * @param $options An optional list of layout options that specify extra layout properties. Any values passed in here will override settings defined by the style.<br>
            Additional resources: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
            GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.
            * @returns The value entered by the user. 
            */
            public static LongField ($label: UnityEngine.GUIContent, $value: bigint, ...options: UnityEngine.GUILayoutOption[]) : bigint
            /** Make a text field for entering long integers.
            * @param $label Optional label to display in front of the long field.
            * @param $value The value to edit.
            * @param $style Optional GUIStyle.
            * @param $options An optional list of layout options that specify extra layout properties. Any values passed in here will override settings defined by the style.<br>
            Additional resources: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
            GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.
            * @returns The value entered by the user. 
            */
            public static LongField ($label: UnityEngine.GUIContent, $value: bigint, $style: UnityEngine.GUIStyle, ...options: UnityEngine.GUILayoutOption[]) : bigint
            /** Make a slider the user can drag to change a value between a min and a max.
            * @param $label Optional label in front of the slider.
            * @param $value The value the slider shows. This determines the position of the draggable thumb.
            * @param $leftValue The value at the left end of the slider.
            * @param $rightValue The value at the right end of the slider.
            * @param $options An optional list of layout options that specify extra layout properties. Any values passed in here will override settings defined by the style.<br>
            Additional resources: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
            GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.
            * @returns The value that has been set by the user. 
            */
            public static Slider ($value: number, $leftValue: number, $rightValue: number, ...options: UnityEngine.GUILayoutOption[]) : number
            /** Make a slider the user can drag to change a value between a min and a max.
            * @param $label Optional label in front of the slider.
            * @param $value The value the slider shows. This determines the position of the draggable thumb.
            * @param $leftValue The value at the left end of the slider.
            * @param $rightValue The value at the right end of the slider.
            * @param $options An optional list of layout options that specify extra layout properties. Any values passed in here will override settings defined by the style.<br>
            Additional resources: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
            GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.
            * @returns The value that has been set by the user. 
            */
            public static Slider ($label: string, $value: number, $leftValue: number, $rightValue: number, ...options: UnityEngine.GUILayoutOption[]) : number
            /** Make a slider the user can drag to change a value between a min and a max.
            * @param $label Optional label in front of the slider.
            * @param $value The value the slider shows. This determines the position of the draggable thumb.
            * @param $leftValue The value at the left end of the slider.
            * @param $rightValue The value at the right end of the slider.
            * @param $options An optional list of layout options that specify extra layout properties. Any values passed in here will override settings defined by the style.<br>
            Additional resources: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
            GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.
            * @returns The value that has been set by the user. 
            */
            public static Slider ($label: UnityEngine.GUIContent, $value: number, $leftValue: number, $rightValue: number, ...options: UnityEngine.GUILayoutOption[]) : number
            /** Make a slider the user can drag to change a value between a min and a max.
            * @param $label Optional label in front of the slider.
            * @param $property The value the slider shows. This determines the position of the draggable thumb.
            * @param $leftValue The value at the left end of the slider.
            * @param $rightValue The value at the right end of the slider.
            * @param $options An optional list of layout options that specify extra layout properties. Any values passed in here will override settings defined by the style.<br>
            Additional resources: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
            GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.
            */
            public static Slider ($property: UnityEditor.SerializedProperty, $leftValue: number, $rightValue: number, ...options: UnityEngine.GUILayoutOption[]) : void
            /** Make a slider the user can drag to change a value between a min and a max.
            * @param $label Optional label in front of the slider.
            * @param $property The value the slider shows. This determines the position of the draggable thumb.
            * @param $leftValue The value at the left end of the slider.
            * @param $rightValue The value at the right end of the slider.
            * @param $options An optional list of layout options that specify extra layout properties. Any values passed in here will override settings defined by the style.<br>
            Additional resources: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
            GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.
            */
            public static Slider ($property: UnityEditor.SerializedProperty, $leftValue: number, $rightValue: number, $label: string, ...options: UnityEngine.GUILayoutOption[]) : void
            /** Make a slider the user can drag to change a value between a min and a max.
            * @param $label Optional label in front of the slider.
            * @param $property The value the slider shows. This determines the position of the draggable thumb.
            * @param $leftValue The value at the left end of the slider.
            * @param $rightValue The value at the right end of the slider.
            * @param $options An optional list of layout options that specify extra layout properties. Any values passed in here will override settings defined by the style.<br>
            Additional resources: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
            GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.
            */
            public static Slider ($property: UnityEditor.SerializedProperty, $leftValue: number, $rightValue: number, $label: UnityEngine.GUIContent, ...options: UnityEngine.GUILayoutOption[]) : void
            /** Make a slider the user can drag to change an integer value between a min and a max.
            * @param $label Optional label in front of the slider.
            * @param $value The value the slider shows. This determines the position of the draggable thumb.
            * @param $leftValue The value at the left end of the slider.
            * @param $rightValue The value at the right end of the slider.
            * @param $options An optional list of layout options that specify extra layout properties. Any values passed in here will override settings defined by the style.<br>
            Additional resources: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
            GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.
            * @returns The value that has been set by the user. 
            */
            public static IntSlider ($value: number, $leftValue: number, $rightValue: number, ...options: UnityEngine.GUILayoutOption[]) : number
            /** Make a slider the user can drag to change an integer value between a min and a max.
            * @param $label Optional label in front of the slider.
            * @param $value The value the slider shows. This determines the position of the draggable thumb.
            * @param $leftValue The value at the left end of the slider.
            * @param $rightValue The value at the right end of the slider.
            * @param $options An optional list of layout options that specify extra layout properties. Any values passed in here will override settings defined by the style.<br>
            Additional resources: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
            GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.
            * @returns The value that has been set by the user. 
            */
            public static IntSlider ($label: string, $value: number, $leftValue: number, $rightValue: number, ...options: UnityEngine.GUILayoutOption[]) : number
            /** Make a slider the user can drag to change an integer value between a min and a max.
            * @param $label Optional label in front of the slider.
            * @param $value The value the slider shows. This determines the position of the draggable thumb.
            * @param $leftValue The value at the left end of the slider.
            * @param $rightValue The value at the right end of the slider.
            * @param $options An optional list of layout options that specify extra layout properties. Any values passed in here will override settings defined by the style.<br>
            Additional resources: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
            GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.
            * @returns The value that has been set by the user. 
            */
            public static IntSlider ($label: UnityEngine.GUIContent, $value: number, $leftValue: number, $rightValue: number, ...options: UnityEngine.GUILayoutOption[]) : number
            /** Make a slider the user can drag to change an integer value between a min and a max.
            * @param $label Optional label in front of the slider.
            * @param $property The value the slider shows. This determines the position of the draggable thumb.
            * @param $leftValue The value at the left end of the slider.
            * @param $rightValue The value at the right end of the slider.
            * @param $options An optional list of layout options that specify extra layout properties. Any values passed in here will override settings defined by the style.<br>
            Additional resources: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
            GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.
            */
            public static IntSlider ($property: UnityEditor.SerializedProperty, $leftValue: number, $rightValue: number, ...options: UnityEngine.GUILayoutOption[]) : void
            /** Make a slider the user can drag to change an integer value between a min and a max.
            * @param $label Optional label in front of the slider.
            * @param $property The value the slider shows. This determines the position of the draggable thumb.
            * @param $leftValue The value at the left end of the slider.
            * @param $rightValue The value at the right end of the slider.
            * @param $options An optional list of layout options that specify extra layout properties. Any values passed in here will override settings defined by the style.<br>
            Additional resources: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
            GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.
            */
            public static IntSlider ($property: UnityEditor.SerializedProperty, $leftValue: number, $rightValue: number, $label: string, ...options: UnityEngine.GUILayoutOption[]) : void
            /** Make a slider the user can drag to change an integer value between a min and a max.
            * @param $label Optional label in front of the slider.
            * @param $property The value the slider shows. This determines the position of the draggable thumb.
            * @param $leftValue The value at the left end of the slider.
            * @param $rightValue The value at the right end of the slider.
            * @param $options An optional list of layout options that specify extra layout properties. Any values passed in here will override settings defined by the style.<br>
            Additional resources: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
            GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.
            */
            public static IntSlider ($property: UnityEditor.SerializedProperty, $leftValue: number, $rightValue: number, $label: UnityEngine.GUIContent, ...options: UnityEngine.GUILayoutOption[]) : void
            /** Make a special slider the user can use to specify a range between a min and a max.
            * @param $label Optional label in front of the slider.
            * @param $minValue The lower value of the range the slider shows, passed by reference.
            * @param $maxValue The upper value at the range the slider shows, passed by reference.
            * @param $minLimit The limit at the left end of the slider.
            * @param $maxLimit The limit at the right end of the slider.
            * @param $options An optional list of layout options that specify extra layout properties. Any values passed in here will override settings defined by the style.<br>
            Additional resources: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
            GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.
            */
            public static MinMaxSlider ($minValue: $Ref<number>, $maxValue: $Ref<number>, $minLimit: number, $maxLimit: number, ...options: UnityEngine.GUILayoutOption[]) : void
            /** Make a special slider the user can use to specify a range between a min and a max.
            * @param $label Optional label in front of the slider.
            * @param $minValue The lower value of the range the slider shows, passed by reference.
            * @param $maxValue The upper value at the range the slider shows, passed by reference.
            * @param $minLimit The limit at the left end of the slider.
            * @param $maxLimit The limit at the right end of the slider.
            * @param $options An optional list of layout options that specify extra layout properties. Any values passed in here will override settings defined by the style.<br>
            Additional resources: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
            GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.
            */
            public static MinMaxSlider ($label: string, $minValue: $Ref<number>, $maxValue: $Ref<number>, $minLimit: number, $maxLimit: number, ...options: UnityEngine.GUILayoutOption[]) : void
            /** Make a special slider the user can use to specify a range between a min and a max.
            * @param $label Optional label in front of the slider.
            * @param $minValue The lower value of the range the slider shows, passed by reference.
            * @param $maxValue The upper value at the range the slider shows, passed by reference.
            * @param $minLimit The limit at the left end of the slider.
            * @param $maxLimit The limit at the right end of the slider.
            * @param $options An optional list of layout options that specify extra layout properties. Any values passed in here will override settings defined by the style.<br>
            Additional resources: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
            GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.
            */
            public static MinMaxSlider ($label: UnityEngine.GUIContent, $minValue: $Ref<number>, $maxValue: $Ref<number>, $minLimit: number, $maxLimit: number, ...options: UnityEngine.GUILayoutOption[]) : void
            /** Make a generic popup selection field.
            * @param $label Optional label in front of the field.
            * @param $selectedIndex The index of the option the field shows.
            * @param $displayedOptions An array with the options shown in the popup. Use a slash to separate sub-items (ex. Menu/SubMenu). Use null or an empty string to add a separator. "
            * @param $style Optional GUIStyle.
            * @param $options An optional list of layout options that specify extra layout properties. Any values passed in here will override settings defined by the style.<br>
            Additional resources: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
            GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.
            * @returns The index of the option that has been selected by the user. 
            */
            public static Popup ($selectedIndex: number, $displayedOptions: System.Array$1<string>, ...options: UnityEngine.GUILayoutOption[]) : number
            /** Make a generic popup selection field.
            * @param $label Optional label in front of the field.
            * @param $selectedIndex The index of the option the field shows.
            * @param $displayedOptions An array with the options shown in the popup. Use a slash to separate sub-items (ex. Menu/SubMenu). Use null or an empty string to add a separator. "
            * @param $style Optional GUIStyle.
            * @param $options An optional list of layout options that specify extra layout properties. Any values passed in here will override settings defined by the style.<br>
            Additional resources: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
            GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.
            * @returns The index of the option that has been selected by the user. 
            */
            public static Popup ($selectedIndex: number, $displayedOptions: System.Array$1<string>, $style: UnityEngine.GUIStyle, ...options: UnityEngine.GUILayoutOption[]) : number
            /** Make a generic popup selection field.
            * @param $label Optional label in front of the field.
            * @param $selectedIndex The index of the option the field shows.
            * @param $displayedOptions An array with the options shown in the popup. Use a slash to separate sub-items (ex. Menu/SubMenu). Use null or an empty string to add a separator. "
            * @param $style Optional GUIStyle.
            * @param $options An optional list of layout options that specify extra layout properties. Any values passed in here will override settings defined by the style.<br>
            Additional resources: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
            GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.
            * @returns The index of the option that has been selected by the user. 
            */
            public static Popup ($selectedIndex: number, $displayedOptions: System.Array$1<UnityEngine.GUIContent>, ...options: UnityEngine.GUILayoutOption[]) : number
            /** Make a generic popup selection field.
            * @param $label Optional label in front of the field.
            * @param $selectedIndex The index of the option the field shows.
            * @param $displayedOptions An array with the options shown in the popup. Use a slash to separate sub-items (ex. Menu/SubMenu). Use null or an empty string to add a separator. "
            * @param $style Optional GUIStyle.
            * @param $options An optional list of layout options that specify extra layout properties. Any values passed in here will override settings defined by the style.<br>
            Additional resources: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
            GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.
            * @returns The index of the option that has been selected by the user. 
            */
            public static Popup ($selectedIndex: number, $displayedOptions: System.Array$1<UnityEngine.GUIContent>, $style: UnityEngine.GUIStyle, ...options: UnityEngine.GUILayoutOption[]) : number
            /** Make a generic popup selection field.
            * @param $label Optional label in front of the field.
            * @param $selectedIndex The index of the option the field shows.
            * @param $displayedOptions An array with the options shown in the popup. Use a slash to separate sub-items (ex. Menu/SubMenu). Use null or an empty string to add a separator. "
            * @param $style Optional GUIStyle.
            * @param $options An optional list of layout options that specify extra layout properties. Any values passed in here will override settings defined by the style.<br>
            Additional resources: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
            GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.
            * @returns The index of the option that has been selected by the user. 
            */
            public static Popup ($label: string, $selectedIndex: number, $displayedOptions: System.Array$1<string>, ...options: UnityEngine.GUILayoutOption[]) : number
            public static Popup ($label: UnityEngine.GUIContent, $selectedIndex: number, $displayedOptions: System.Array$1<string>, ...options: UnityEngine.GUILayoutOption[]) : number
            /** Make a generic popup selection field.
            * @param $label Optional label in front of the field.
            * @param $selectedIndex The index of the option the field shows.
            * @param $displayedOptions An array with the options shown in the popup. Use a slash to separate sub-items (ex. Menu/SubMenu). Use null or an empty string to add a separator. "
            * @param $style Optional GUIStyle.
            * @param $options An optional list of layout options that specify extra layout properties. Any values passed in here will override settings defined by the style.<br>
            Additional resources: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
            GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.
            * @returns The index of the option that has been selected by the user. 
            */
            public static Popup ($label: string, $selectedIndex: number, $displayedOptions: System.Array$1<string>, $style: UnityEngine.GUIStyle, ...options: UnityEngine.GUILayoutOption[]) : number
            /** Make a generic popup selection field.
            * @param $label Optional label in front of the field.
            * @param $selectedIndex The index of the option the field shows.
            * @param $displayedOptions An array with the options shown in the popup. Use a slash to separate sub-items (ex. Menu/SubMenu). Use null or an empty string to add a separator. "
            * @param $style Optional GUIStyle.
            * @param $options An optional list of layout options that specify extra layout properties. Any values passed in here will override settings defined by the style.<br>
            Additional resources: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
            GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.
            * @returns The index of the option that has been selected by the user. 
            */
            public static Popup ($label: UnityEngine.GUIContent, $selectedIndex: number, $displayedOptions: System.Array$1<UnityEngine.GUIContent>, ...options: UnityEngine.GUILayoutOption[]) : number
            /** Make a generic popup selection field.
            * @param $label Optional label in front of the field.
            * @param $selectedIndex The index of the option the field shows.
            * @param $displayedOptions An array with the options shown in the popup. Use a slash to separate sub-items (ex. Menu/SubMenu). Use null or an empty string to add a separator. "
            * @param $style Optional GUIStyle.
            * @param $options An optional list of layout options that specify extra layout properties. Any values passed in here will override settings defined by the style.<br>
            Additional resources: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
            GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.
            * @returns The index of the option that has been selected by the user. 
            */
            public static Popup ($label: UnityEngine.GUIContent, $selectedIndex: number, $displayedOptions: System.Array$1<UnityEngine.GUIContent>, $style: UnityEngine.GUIStyle, ...options: UnityEngine.GUILayoutOption[]) : number
            /** Make an enum popup selection field.
            * @param $label Optional label in front of the field.
            * @param $selected The enum option the field shows.
            * @param $style Optional GUIStyle.
            * @param $options An optional list of layout options that specify extra layout properties. Any values passed in here will override settings defined by the style.<br>
            Additional resources: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
            GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.
            * @param $includeObsolete Set to true to include Enum values with ObsoleteAttribute. Set to false to exclude Enum values with ObsoleteAttribute.
            * @param $checkEnabled Method called for each Enum value displayed. The specified method should return true if the option can be selected, false otherwise.
            * @returns The enum option that has been selected by the user. 
            */
            public static EnumPopup ($selected: System.Enum, ...options: UnityEngine.GUILayoutOption[]) : System.Enum
            /** Make an enum popup selection field.
            * @param $label Optional label in front of the field.
            * @param $selected The enum option the field shows.
            * @param $style Optional GUIStyle.
            * @param $options An optional list of layout options that specify extra layout properties. Any values passed in here will override settings defined by the style.<br>
            Additional resources: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
            GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.
            * @param $includeObsolete Set to true to include Enum values with ObsoleteAttribute. Set to false to exclude Enum values with ObsoleteAttribute.
            * @param $checkEnabled Method called for each Enum value displayed. The specified method should return true if the option can be selected, false otherwise.
            * @returns The enum option that has been selected by the user. 
            */
            public static EnumPopup ($selected: System.Enum, $style: UnityEngine.GUIStyle, ...options: UnityEngine.GUILayoutOption[]) : System.Enum
            /** Make an enum popup selection field.
            * @param $label Optional label in front of the field.
            * @param $selected The enum option the field shows.
            * @param $style Optional GUIStyle.
            * @param $options An optional list of layout options that specify extra layout properties. Any values passed in here will override settings defined by the style.<br>
            Additional resources: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
            GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.
            * @param $includeObsolete Set to true to include Enum values with ObsoleteAttribute. Set to false to exclude Enum values with ObsoleteAttribute.
            * @param $checkEnabled Method called for each Enum value displayed. The specified method should return true if the option can be selected, false otherwise.
            * @returns The enum option that has been selected by the user. 
            */
            public static EnumPopup ($label: string, $selected: System.Enum, ...options: UnityEngine.GUILayoutOption[]) : System.Enum
            /** Make an enum popup selection field.
            * @param $label Optional label in front of the field.
            * @param $selected The enum option the field shows.
            * @param $style Optional GUIStyle.
            * @param $options An optional list of layout options that specify extra layout properties. Any values passed in here will override settings defined by the style.<br>
            Additional resources: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
            GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.
            * @param $includeObsolete Set to true to include Enum values with ObsoleteAttribute. Set to false to exclude Enum values with ObsoleteAttribute.
            * @param $checkEnabled Method called for each Enum value displayed. The specified method should return true if the option can be selected, false otherwise.
            * @returns The enum option that has been selected by the user. 
            */
            public static EnumPopup ($label: string, $selected: System.Enum, $style: UnityEngine.GUIStyle, ...options: UnityEngine.GUILayoutOption[]) : System.Enum
            /** Make an enum popup selection field.
            * @param $label Optional label in front of the field.
            * @param $selected The enum option the field shows.
            * @param $style Optional GUIStyle.
            * @param $options An optional list of layout options that specify extra layout properties. Any values passed in here will override settings defined by the style.<br>
            Additional resources: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
            GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.
            * @param $includeObsolete Set to true to include Enum values with ObsoleteAttribute. Set to false to exclude Enum values with ObsoleteAttribute.
            * @param $checkEnabled Method called for each Enum value displayed. The specified method should return true if the option can be selected, false otherwise.
            * @returns The enum option that has been selected by the user. 
            */
            public static EnumPopup ($label: UnityEngine.GUIContent, $selected: System.Enum, ...options: UnityEngine.GUILayoutOption[]) : System.Enum
            /** Make an enum popup selection field.
            * @param $label Optional label in front of the field.
            * @param $selected The enum option the field shows.
            * @param $style Optional GUIStyle.
            * @param $options An optional list of layout options that specify extra layout properties. Any values passed in here will override settings defined by the style.<br>
            Additional resources: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
            GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.
            * @param $includeObsolete Set to true to include Enum values with ObsoleteAttribute. Set to false to exclude Enum values with ObsoleteAttribute.
            * @param $checkEnabled Method called for each Enum value displayed. The specified method should return true if the option can be selected, false otherwise.
            * @returns The enum option that has been selected by the user. 
            */
            public static EnumPopup ($label: UnityEngine.GUIContent, $selected: System.Enum, $style: UnityEngine.GUIStyle, ...options: UnityEngine.GUILayoutOption[]) : System.Enum
            public static EnumPopup ($label: UnityEngine.GUIContent, $selected: System.Enum, $checkEnabled: System.Func$2<System.Enum, boolean>, $includeObsolete: boolean, ...options: UnityEngine.GUILayoutOption[]) : System.Enum
            public static EnumPopup ($label: UnityEngine.GUIContent, $selected: System.Enum, $checkEnabled: System.Func$2<System.Enum, boolean>, $includeObsolete: boolean, $style: UnityEngine.GUIStyle, ...options: UnityEngine.GUILayoutOption[]) : System.Enum
            /** Make an integer popup selection field.
            * @param $label Optional label in front of the field.
            * @param $selectedValue The value of the option the field shows.
            * @param $displayedOptions An array with the displayed options the user can choose from.
            * @param $optionValues An array with the values for each option.
            * @param $style Optional GUIStyle.
            * @param $options An optional list of layout options that specify extra layout properties. Any values passed in here will override settings defined by the style.<br>
            Additional resources: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
            GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.
            * @returns The value of the option that has been selected by the user. 
            */
            public static IntPopup ($selectedValue: number, $displayedOptions: System.Array$1<string>, $optionValues: System.Array$1<number>, ...options: UnityEngine.GUILayoutOption[]) : number
            /** Make an integer popup selection field.
            * @param $label Optional label in front of the field.
            * @param $selectedValue The value of the option the field shows.
            * @param $displayedOptions An array with the displayed options the user can choose from.
            * @param $optionValues An array with the values for each option.
            * @param $style Optional GUIStyle.
            * @param $options An optional list of layout options that specify extra layout properties. Any values passed in here will override settings defined by the style.<br>
            Additional resources: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
            GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.
            * @returns The value of the option that has been selected by the user. 
            */
            public static IntPopup ($selectedValue: number, $displayedOptions: System.Array$1<string>, $optionValues: System.Array$1<number>, $style: UnityEngine.GUIStyle, ...options: UnityEngine.GUILayoutOption[]) : number
            /** Make an integer popup selection field.
            * @param $label Optional label in front of the field.
            * @param $selectedValue The value of the option the field shows.
            * @param $displayedOptions An array with the displayed options the user can choose from.
            * @param $optionValues An array with the values for each option.
            * @param $style Optional GUIStyle.
            * @param $options An optional list of layout options that specify extra layout properties. Any values passed in here will override settings defined by the style.<br>
            Additional resources: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
            GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.
            * @returns The value of the option that has been selected by the user. 
            */
            public static IntPopup ($selectedValue: number, $displayedOptions: System.Array$1<UnityEngine.GUIContent>, $optionValues: System.Array$1<number>, ...options: UnityEngine.GUILayoutOption[]) : number
            /** Make an integer popup selection field.
            * @param $label Optional label in front of the field.
            * @param $selectedValue The value of the option the field shows.
            * @param $displayedOptions An array with the displayed options the user can choose from.
            * @param $optionValues An array with the values for each option.
            * @param $style Optional GUIStyle.
            * @param $options An optional list of layout options that specify extra layout properties. Any values passed in here will override settings defined by the style.<br>
            Additional resources: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
            GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.
            * @returns The value of the option that has been selected by the user. 
            */
            public static IntPopup ($selectedValue: number, $displayedOptions: System.Array$1<UnityEngine.GUIContent>, $optionValues: System.Array$1<number>, $style: UnityEngine.GUIStyle, ...options: UnityEngine.GUILayoutOption[]) : number
            /** Make an integer popup selection field.
            * @param $label Optional label in front of the field.
            * @param $selectedValue The value of the option the field shows.
            * @param $displayedOptions An array with the displayed options the user can choose from.
            * @param $optionValues An array with the values for each option.
            * @param $style Optional GUIStyle.
            * @param $options An optional list of layout options that specify extra layout properties. Any values passed in here will override settings defined by the style.<br>
            Additional resources: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
            GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.
            * @returns The value of the option that has been selected by the user. 
            */
            public static IntPopup ($label: string, $selectedValue: number, $displayedOptions: System.Array$1<string>, $optionValues: System.Array$1<number>, ...options: UnityEngine.GUILayoutOption[]) : number
            /** Make an integer popup selection field.
            * @param $label Optional label in front of the field.
            * @param $selectedValue The value of the option the field shows.
            * @param $displayedOptions An array with the displayed options the user can choose from.
            * @param $optionValues An array with the values for each option.
            * @param $style Optional GUIStyle.
            * @param $options An optional list of layout options that specify extra layout properties. Any values passed in here will override settings defined by the style.<br>
            Additional resources: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
            GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.
            * @returns The value of the option that has been selected by the user. 
            */
            public static IntPopup ($label: string, $selectedValue: number, $displayedOptions: System.Array$1<string>, $optionValues: System.Array$1<number>, $style: UnityEngine.GUIStyle, ...options: UnityEngine.GUILayoutOption[]) : number
            /** Make an integer popup selection field.
            * @param $label Optional label in front of the field.
            * @param $selectedValue The value of the option the field shows.
            * @param $displayedOptions An array with the displayed options the user can choose from.
            * @param $optionValues An array with the values for each option.
            * @param $style Optional GUIStyle.
            * @param $options An optional list of layout options that specify extra layout properties. Any values passed in here will override settings defined by the style.<br>
            Additional resources: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
            GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.
            * @returns The value of the option that has been selected by the user. 
            */
            public static IntPopup ($label: UnityEngine.GUIContent, $selectedValue: number, $displayedOptions: System.Array$1<UnityEngine.GUIContent>, $optionValues: System.Array$1<number>, ...options: UnityEngine.GUILayoutOption[]) : number
            /** Make an integer popup selection field.
            * @param $label Optional label in front of the field.
            * @param $selectedValue The value of the option the field shows.
            * @param $displayedOptions An array with the displayed options the user can choose from.
            * @param $optionValues An array with the values for each option.
            * @param $style Optional GUIStyle.
            * @param $options An optional list of layout options that specify extra layout properties. Any values passed in here will override settings defined by the style.<br>
            Additional resources: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
            GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.
            * @returns The value of the option that has been selected by the user. 
            */
            public static IntPopup ($label: UnityEngine.GUIContent, $selectedValue: number, $displayedOptions: System.Array$1<UnityEngine.GUIContent>, $optionValues: System.Array$1<number>, $style: UnityEngine.GUIStyle, ...options: UnityEngine.GUILayoutOption[]) : number
            /** Make an integer popup selection field.
            * @param $property The value of the option the field shows.
            * @param $displayedOptions An array with the displayed options the user can choose from.
            * @param $optionValues An array with the values for each option.
            * @param $label Optional label in front of the field.
            * @param $options An optional list of layout options that specify extra layout properties. Any values passed in here will override settings defined by the style.<br>
            Additional resources: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
            GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.
            */
            public static IntPopup ($property: UnityEditor.SerializedProperty, $displayedOptions: System.Array$1<UnityEngine.GUIContent>, $optionValues: System.Array$1<number>, ...options: UnityEngine.GUILayoutOption[]) : void
            /** Make an integer popup selection field.
            * @param $property The value of the option the field shows.
            * @param $displayedOptions An array with the displayed options the user can choose from.
            * @param $optionValues An array with the values for each option.
            * @param $label Optional label in front of the field.
            * @param $options An optional list of layout options that specify extra layout properties. Any values passed in here will override settings defined by the style.<br>
            Additional resources: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
            GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.
            */
            public static IntPopup ($property: UnityEditor.SerializedProperty, $displayedOptions: System.Array$1<UnityEngine.GUIContent>, $optionValues: System.Array$1<number>, $label: UnityEngine.GUIContent, ...options: UnityEngine.GUILayoutOption[]) : void
            /** Make a tag selection field.
            * @param $label Optional label in front of the field.
            * @param $tag The tag the field shows.
            * @param $style Optional GUIStyle.
            * @param $options An optional list of layout options that specify extra layout properties. Any values passed in here will override settings defined by the style.<br>
            Additional resources: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
            GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.
            * @returns The tag selected by the user. 
            */
            public static TagField ($tag: string, ...options: UnityEngine.GUILayoutOption[]) : string
            /** Make a tag selection field.
            * @param $label Optional label in front of the field.
            * @param $tag The tag the field shows.
            * @param $style Optional GUIStyle.
            * @param $options An optional list of layout options that specify extra layout properties. Any values passed in here will override settings defined by the style.<br>
            Additional resources: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
            GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.
            * @returns The tag selected by the user. 
            */
            public static TagField ($tag: string, $style: UnityEngine.GUIStyle, ...options: UnityEngine.GUILayoutOption[]) : string
            /** Make a tag selection field.
            * @param $label Optional label in front of the field.
            * @param $tag The tag the field shows.
            * @param $style Optional GUIStyle.
            * @param $options An optional list of layout options that specify extra layout properties. Any values passed in here will override settings defined by the style.<br>
            Additional resources: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
            GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.
            * @returns The tag selected by the user. 
            */
            public static TagField ($label: string, $tag: string, ...options: UnityEngine.GUILayoutOption[]) : string
            /** Make a tag selection field.
            * @param $label Optional label in front of the field.
            * @param $tag The tag the field shows.
            * @param $style Optional GUIStyle.
            * @param $options An optional list of layout options that specify extra layout properties. Any values passed in here will override settings defined by the style.<br>
            Additional resources: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
            GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.
            * @returns The tag selected by the user. 
            */
            public static TagField ($label: string, $tag: string, $style: UnityEngine.GUIStyle, ...options: UnityEngine.GUILayoutOption[]) : string
            /** Make a tag selection field.
            * @param $label Optional label in front of the field.
            * @param $tag The tag the field shows.
            * @param $style Optional GUIStyle.
            * @param $options An optional list of layout options that specify extra layout properties. Any values passed in here will override settings defined by the style.<br>
            Additional resources: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
            GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.
            * @returns The tag selected by the user. 
            */
            public static TagField ($label: UnityEngine.GUIContent, $tag: string, ...options: UnityEngine.GUILayoutOption[]) : string
            /** Make a tag selection field.
            * @param $label Optional label in front of the field.
            * @param $tag The tag the field shows.
            * @param $style Optional GUIStyle.
            * @param $options An optional list of layout options that specify extra layout properties. Any values passed in here will override settings defined by the style.<br>
            Additional resources: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
            GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.
            * @returns The tag selected by the user. 
            */
            public static TagField ($label: UnityEngine.GUIContent, $tag: string, $style: UnityEngine.GUIStyle, ...options: UnityEngine.GUILayoutOption[]) : string
            /** Make a layer selection field.
            * @param $label Optional label in front of the field.
            * @param $layer The layer shown in the field.
            * @param $style Optional GUIStyle.
            * @param $options An optional list of layout options that specify extra layout properties. Any values passed in here will override settings defined by the style.<br>
            Additional resources: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
            GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.
            * @returns The layer selected by the user. 
            */
            public static LayerField ($layer: number, ...options: UnityEngine.GUILayoutOption[]) : number
            /** Make a layer selection field.
            * @param $label Optional label in front of the field.
            * @param $layer The layer shown in the field.
            * @param $style Optional GUIStyle.
            * @param $options An optional list of layout options that specify extra layout properties. Any values passed in here will override settings defined by the style.<br>
            Additional resources: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
            GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.
            * @returns The layer selected by the user. 
            */
            public static LayerField ($layer: number, $style: UnityEngine.GUIStyle, ...options: UnityEngine.GUILayoutOption[]) : number
            /** Make a layer selection field.
            * @param $label Optional label in front of the field.
            * @param $layer The layer shown in the field.
            * @param $style Optional GUIStyle.
            * @param $options An optional list of layout options that specify extra layout properties. Any values passed in here will override settings defined by the style.<br>
            Additional resources: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
            GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.
            * @returns The layer selected by the user. 
            */
            public static LayerField ($label: string, $layer: number, ...options: UnityEngine.GUILayoutOption[]) : number
            /** Make a layer selection field.
            * @param $label Optional label in front of the field.
            * @param $layer The layer shown in the field.
            * @param $style Optional GUIStyle.
            * @param $options An optional list of layout options that specify extra layout properties. Any values passed in here will override settings defined by the style.<br>
            Additional resources: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
            GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.
            * @returns The layer selected by the user. 
            */
            public static LayerField ($label: string, $layer: number, $style: UnityEngine.GUIStyle, ...options: UnityEngine.GUILayoutOption[]) : number
            /** Make a layer selection field.
            * @param $label Optional label in front of the field.
            * @param $layer The layer shown in the field.
            * @param $style Optional GUIStyle.
            * @param $options An optional list of layout options that specify extra layout properties. Any values passed in here will override settings defined by the style.<br>
            Additional resources: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
            GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.
            * @returns The layer selected by the user. 
            */
            public static LayerField ($label: UnityEngine.GUIContent, $layer: number, ...options: UnityEngine.GUILayoutOption[]) : number
            /** Make a layer selection field.
            * @param $label Optional label in front of the field.
            * @param $layer The layer shown in the field.
            * @param $style Optional GUIStyle.
            * @param $options An optional list of layout options that specify extra layout properties. Any values passed in here will override settings defined by the style.<br>
            Additional resources: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
            GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.
            * @returns The layer selected by the user. 
            */
            public static LayerField ($label: UnityEngine.GUIContent, $layer: number, $style: UnityEngine.GUIStyle, ...options: UnityEngine.GUILayoutOption[]) : number
            /** Make a field for masks.
            * @param $label Prefix label of the field.
            * @param $mask The current mask to display.
            * @param $displayedOption A string array containing the labels for each flag.
            * @param $options An optional list of layout options that specify extra layout properties. Any values passed in here will override settings defined by the style.<br>
            Additional resources: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
            GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.
            * @returns The value modified by the user. 
            */
            public static MaskField ($label: UnityEngine.GUIContent, $mask: number, $displayedOptions: System.Array$1<string>, $style: UnityEngine.GUIStyle, ...options: UnityEngine.GUILayoutOption[]) : number
            /** Make a field for masks.
            * @param $label Prefix label of the field.
            * @param $mask The current mask to display.
            * @param $displayedOption A string array containing the labels for each flag.
            * @param $options An optional list of layout options that specify extra layout properties. Any values passed in here will override settings defined by the style.<br>
            Additional resources: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
            GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.
            * @returns The value modified by the user. 
            */
            public static MaskField ($label: string, $mask: number, $displayedOptions: System.Array$1<string>, $style: UnityEngine.GUIStyle, ...options: UnityEngine.GUILayoutOption[]) : number
            /** Make a field for masks.
            * @param $label Prefix label of the field.
            * @param $mask The current mask to display.
            * @param $displayedOption A string array containing the labels for each flag.
            * @param $options An optional list of layout options that specify extra layout properties. Any values passed in here will override settings defined by the style.<br>
            Additional resources: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
            GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.
            * @returns The value modified by the user. 
            */
            public static MaskField ($label: UnityEngine.GUIContent, $mask: number, $displayedOptions: System.Array$1<string>, ...options: UnityEngine.GUILayoutOption[]) : number
            /** Make a field for masks.
            * @param $label Prefix label of the field.
            * @param $mask The current mask to display.
            * @param $displayedOption A string array containing the labels for each flag.
            * @param $options An optional list of layout options that specify extra layout properties. Any values passed in here will override settings defined by the style.<br>
            Additional resources: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
            GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.
            * @returns The value modified by the user. 
            */
            public static MaskField ($label: string, $mask: number, $displayedOptions: System.Array$1<string>, ...options: UnityEngine.GUILayoutOption[]) : number
            /** Make a field for masks.
            * @param $label Prefix label of the field.
            * @param $mask The current mask to display.
            * @param $displayedOption A string array containing the labels for each flag.
            * @param $options An optional list of layout options that specify extra layout properties. Any values passed in here will override settings defined by the style.<br>
            Additional resources: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
            GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.
            * @returns The value modified by the user. 
            */
            public static MaskField ($mask: number, $displayedOptions: System.Array$1<string>, $style: UnityEngine.GUIStyle, ...options: UnityEngine.GUILayoutOption[]) : number
            /** Make a field for masks.
            * @param $label Prefix label of the field.
            * @param $mask The current mask to display.
            * @param $displayedOption A string array containing the labels for each flag.
            * @param $options An optional list of layout options that specify extra layout properties. Any values passed in here will override settings defined by the style.<br>
            Additional resources: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
            GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.
            * @returns The value modified by the user. 
            */
            public static MaskField ($mask: number, $displayedOptions: System.Array$1<string>, ...options: UnityEngine.GUILayoutOption[]) : number
            /** Displays a menu with an option for every value of the enum type when clicked.
            * @param $label Optional label to display in front of the enum flags field.
            * @param $enumValue Enum flags value.
            * @param $style Optional GUIStyle.
            * @param $options An optional list of layout options that specify extra layout properties. Any values passed in here will override settings defined by the style.<br>
            Additional resources: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
            GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.
            * @param $includeObsolete Set to true to include Enum values with ObsoleteAttribute. Set to false to exclude Enum values with ObsoleteAttribute.
            * @returns The enum flags value modified by the user. This is a selection BitMask where each bit represents an Enum value index. (Note this returned value is not itself an Enum). 
            */
            public static EnumFlagsField ($enumValue: System.Enum, ...options: UnityEngine.GUILayoutOption[]) : System.Enum
            /** Displays a menu with an option for every value of the enum type when clicked.
            * @param $label Optional label to display in front of the enum flags field.
            * @param $enumValue Enum flags value.
            * @param $style Optional GUIStyle.
            * @param $options An optional list of layout options that specify extra layout properties. Any values passed in here will override settings defined by the style.<br>
            Additional resources: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
            GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.
            * @param $includeObsolete Set to true to include Enum values with ObsoleteAttribute. Set to false to exclude Enum values with ObsoleteAttribute.
            * @returns The enum flags value modified by the user. This is a selection BitMask where each bit represents an Enum value index. (Note this returned value is not itself an Enum). 
            */
            public static EnumFlagsField ($enumValue: System.Enum, $style: UnityEngine.GUIStyle, ...options: UnityEngine.GUILayoutOption[]) : System.Enum
            /** Displays a menu with an option for every value of the enum type when clicked.
            * @param $label Optional label to display in front of the enum flags field.
            * @param $enumValue Enum flags value.
            * @param $style Optional GUIStyle.
            * @param $options An optional list of layout options that specify extra layout properties. Any values passed in here will override settings defined by the style.<br>
            Additional resources: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
            GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.
            * @param $includeObsolete Set to true to include Enum values with ObsoleteAttribute. Set to false to exclude Enum values with ObsoleteAttribute.
            * @returns The enum flags value modified by the user. This is a selection BitMask where each bit represents an Enum value index. (Note this returned value is not itself an Enum). 
            */
            public static EnumFlagsField ($label: string, $enumValue: System.Enum, ...options: UnityEngine.GUILayoutOption[]) : System.Enum
            /** Displays a menu with an option for every value of the enum type when clicked.
            * @param $label Optional label to display in front of the enum flags field.
            * @param $enumValue Enum flags value.
            * @param $style Optional GUIStyle.
            * @param $options An optional list of layout options that specify extra layout properties. Any values passed in here will override settings defined by the style.<br>
            Additional resources: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
            GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.
            * @param $includeObsolete Set to true to include Enum values with ObsoleteAttribute. Set to false to exclude Enum values with ObsoleteAttribute.
            * @returns The enum flags value modified by the user. This is a selection BitMask where each bit represents an Enum value index. (Note this returned value is not itself an Enum). 
            */
            public static EnumFlagsField ($label: string, $enumValue: System.Enum, $style: UnityEngine.GUIStyle, ...options: UnityEngine.GUILayoutOption[]) : System.Enum
            /** Displays a menu with an option for every value of the enum type when clicked.
            * @param $label Optional label to display in front of the enum flags field.
            * @param $enumValue Enum flags value.
            * @param $style Optional GUIStyle.
            * @param $options An optional list of layout options that specify extra layout properties. Any values passed in here will override settings defined by the style.<br>
            Additional resources: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
            GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.
            * @param $includeObsolete Set to true to include Enum values with ObsoleteAttribute. Set to false to exclude Enum values with ObsoleteAttribute.
            * @returns The enum flags value modified by the user. This is a selection BitMask where each bit represents an Enum value index. (Note this returned value is not itself an Enum). 
            */
            public static EnumFlagsField ($label: UnityEngine.GUIContent, $enumValue: System.Enum, ...options: UnityEngine.GUILayoutOption[]) : System.Enum
            /** Displays a menu with an option for every value of the enum type when clicked.
            * @param $label Optional label to display in front of the enum flags field.
            * @param $enumValue Enum flags value.
            * @param $style Optional GUIStyle.
            * @param $options An optional list of layout options that specify extra layout properties. Any values passed in here will override settings defined by the style.<br>
            Additional resources: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
            GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.
            * @param $includeObsolete Set to true to include Enum values with ObsoleteAttribute. Set to false to exclude Enum values with ObsoleteAttribute.
            * @returns The enum flags value modified by the user. This is a selection BitMask where each bit represents an Enum value index. (Note this returned value is not itself an Enum). 
            */
            public static EnumFlagsField ($label: UnityEngine.GUIContent, $enumValue: System.Enum, $style: UnityEngine.GUIStyle, ...options: UnityEngine.GUILayoutOption[]) : System.Enum
            /** Displays a menu with an option for every value of the enum type when clicked.
            * @param $label Optional label to display in front of the enum flags field.
            * @param $enumValue Enum flags value.
            * @param $style Optional GUIStyle.
            * @param $options An optional list of layout options that specify extra layout properties. Any values passed in here will override settings defined by the style.<br>
            Additional resources: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
            GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.
            * @param $includeObsolete Set to true to include Enum values with ObsoleteAttribute. Set to false to exclude Enum values with ObsoleteAttribute.
            * @returns The enum flags value modified by the user. This is a selection BitMask where each bit represents an Enum value index. (Note this returned value is not itself an Enum). 
            */
            public static EnumFlagsField ($label: UnityEngine.GUIContent, $enumValue: System.Enum, $includeObsolete: boolean, ...options: UnityEngine.GUILayoutOption[]) : System.Enum
            /** Displays a menu with an option for every value of the enum type when clicked.
            * @param $label Optional label to display in front of the enum flags field.
            * @param $enumValue Enum flags value.
            * @param $style Optional GUIStyle.
            * @param $options An optional list of layout options that specify extra layout properties. Any values passed in here will override settings defined by the style.<br>
            Additional resources: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
            GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.
            * @param $includeObsolete Set to true to include Enum values with ObsoleteAttribute. Set to false to exclude Enum values with ObsoleteAttribute.
            * @returns The enum flags value modified by the user. This is a selection BitMask where each bit represents an Enum value index. (Note this returned value is not itself an Enum). 
            */
            public static EnumFlagsField ($label: UnityEngine.GUIContent, $enumValue: System.Enum, $includeObsolete: boolean, $style: UnityEngine.GUIStyle, ...options: UnityEngine.GUILayoutOption[]) : System.Enum
            public static ObjectField ($obj: UnityEngine.Object, $objType: System.Type, $targetBeingEdited: UnityEngine.Object, ...options: UnityEngine.GUILayoutOption[]) : UnityEngine.Object
            /** Make a field to receive any object type.
            * @param $label Optional label in front of the field.
            * @param $obj The object the field shows.
            * @param $objType The type of the objects that can be assigned.
            * @param $allowSceneObjects Allow assigning Scene objects. See Description for more info.
            * @param $options An optional list of layout options that specify extra layout properties. Any values passed in here will override settings defined by the style.
            Additional resources: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
            GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.
            * @returns The object that has been set by the user. 
            */
            public static ObjectField ($obj: UnityEngine.Object, $objType: System.Type, $allowSceneObjects: boolean, ...options: UnityEngine.GUILayoutOption[]) : UnityEngine.Object
            public static ObjectField ($label: string, $obj: UnityEngine.Object, $objType: System.Type, $targetBeingEdited: UnityEngine.Object, ...options: UnityEngine.GUILayoutOption[]) : UnityEngine.Object
            /** Make a field to receive any object type.
            * @param $label Optional label in front of the field.
            * @param $obj The object the field shows.
            * @param $objType The type of the objects that can be assigned.
            * @param $allowSceneObjects Allow assigning Scene objects. See Description for more info.
            * @param $options An optional list of layout options that specify extra layout properties. Any values passed in here will override settings defined by the style.
            Additional resources: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
            GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.
            * @returns The object that has been set by the user. 
            */
            public static ObjectField ($label: string, $obj: UnityEngine.Object, $objType: System.Type, $allowSceneObjects: boolean, ...options: UnityEngine.GUILayoutOption[]) : UnityEngine.Object
            public static ObjectField ($label: UnityEngine.GUIContent, $obj: UnityEngine.Object, $objType: System.Type, $targetBeingEdited: UnityEngine.Object, ...options: UnityEngine.GUILayoutOption[]) : UnityEngine.Object
            /** Make a field to receive any object type.
            * @param $label Optional label in front of the field.
            * @param $obj The object the field shows.
            * @param $objType The type of the objects that can be assigned.
            * @param $allowSceneObjects Allow assigning Scene objects. See Description for more info.
            * @param $options An optional list of layout options that specify extra layout properties. Any values passed in here will override settings defined by the style.
            Additional resources: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
            GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.
            * @returns The object that has been set by the user. 
            */
            public static ObjectField ($label: UnityEngine.GUIContent, $obj: UnityEngine.Object, $objType: System.Type, $allowSceneObjects: boolean, ...options: UnityEngine.GUILayoutOption[]) : UnityEngine.Object
            /** Make a field to receive any object type.
            * @param $property The object reference property the field shows.
            * @param $objType The type of the objects that can be assigned.
            * @param $label Optional label in front of the field. Pass GUIContent.none to hide the label.
            * @param $options An optional list of layout options that specify extra layout properties. Any values passed in here will override settings defined by the style.<br>
            Additional resources: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
            GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.
            */
            public static ObjectField ($property: UnityEditor.SerializedProperty, ...options: UnityEngine.GUILayoutOption[]) : void
            /** Make a field to receive any object type.
            * @param $property The object reference property the field shows.
            * @param $objType The type of the objects that can be assigned.
            * @param $label Optional label in front of the field. Pass GUIContent.none to hide the label.
            * @param $options An optional list of layout options that specify extra layout properties. Any values passed in here will override settings defined by the style.<br>
            Additional resources: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
            GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.
            */
            public static ObjectField ($property: UnityEditor.SerializedProperty, $label: UnityEngine.GUIContent, ...options: UnityEngine.GUILayoutOption[]) : void
            /** Make a field to receive any object type.
            * @param $property The object reference property the field shows.
            * @param $objType The type of the objects that can be assigned.
            * @param $label Optional label in front of the field. Pass GUIContent.none to hide the label.
            * @param $options An optional list of layout options that specify extra layout properties. Any values passed in here will override settings defined by the style.<br>
            Additional resources: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
            GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.
            */
            public static ObjectField ($property: UnityEditor.SerializedProperty, $objType: System.Type, ...options: UnityEngine.GUILayoutOption[]) : void
            /** Make a field to receive any object type.
            * @param $property The object reference property the field shows.
            * @param $objType The type of the objects that can be assigned.
            * @param $label Optional label in front of the field. Pass GUIContent.none to hide the label.
            * @param $options An optional list of layout options that specify extra layout properties. Any values passed in here will override settings defined by the style.<br>
            Additional resources: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
            GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.
            */
            public static ObjectField ($property: UnityEditor.SerializedProperty, $objType: System.Type, $label: UnityEngine.GUIContent, ...options: UnityEngine.GUILayoutOption[]) : void
            /** Make an X & Y field for entering a Vector2.
            * @param $label Label to display above the field.
            * @param $value The value to edit.
            * @param $options An optional list of layout options that specify extra layout properties. Any values passed in here will override settings defined by the style.<br>
            * @returns The value entered by the user. 
            */
            public static Vector2Field ($label: string, $value: UnityEngine.Vector2, ...options: UnityEngine.GUILayoutOption[]) : UnityEngine.Vector2
            /** Make an X & Y field for entering a Vector2.
            * @param $label Label to display above the field.
            * @param $value The value to edit.
            * @param $options An optional list of layout options that specify extra layout properties. Any values passed in here will override settings defined by the style.<br>
            * @returns The value entered by the user. 
            */
            public static Vector2Field ($label: UnityEngine.GUIContent, $value: UnityEngine.Vector2, ...options: UnityEngine.GUILayoutOption[]) : UnityEngine.Vector2
            /** Make an X, Y & Z field for entering a Vector3.
            * @param $label Label to display above the field.
            * @param $value The value to edit.
            * @param $options An optional list of layout options that specify extra layout
            properties. Any values passed in here will override settings defined by the style.<br>
            Additional resources: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
            GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.
            * @returns The value entered by the user. 
            */
            public static Vector3Field ($label: string, $value: UnityEngine.Vector3, ...options: UnityEngine.GUILayoutOption[]) : UnityEngine.Vector3
            /** Make an X, Y & Z field for entering a Vector3.
            * @param $label Label to display above the field.
            * @param $value The value to edit.
            * @param $options An optional list of layout options that specify extra layout
            properties. Any values passed in here will override settings defined by the style.<br>
            Additional resources: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
            GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.
            * @returns The value entered by the user. 
            */
            public static Vector3Field ($label: UnityEngine.GUIContent, $value: UnityEngine.Vector3, ...options: UnityEngine.GUILayoutOption[]) : UnityEngine.Vector3
            /** Make an X, Y, Z & W field for entering a Vector4.
            * @param $label Label to display above the field.
            * @param $value The value to edit.
            * @param $options An optional list of layout options that specify extra layout properties. Any values passed in here will override settings defined by the style.<br>
            Additional resources: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
            GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.
            * @returns The value entered by the user. 
            */
            public static Vector4Field ($label: string, $value: UnityEngine.Vector4, ...options: UnityEngine.GUILayoutOption[]) : UnityEngine.Vector4
            public static Vector4Field ($label: UnityEngine.GUIContent, $value: UnityEngine.Vector4, ...options: UnityEngine.GUILayoutOption[]) : UnityEngine.Vector4
            /** Make an X & Y integer field for entering a Vector2Int.
            * @param $label Label to display above the field.
            * @param $value The value to edit.
            * @param $options An optional list of layout options that specify extra layout properties. Any values passed in here will override settings defined by the style.<br>
            Additional resources: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
            GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.
            * @returns The value entered by the user. 
            */
            public static Vector2IntField ($label: string, $value: UnityEngine.Vector2Int, ...options: UnityEngine.GUILayoutOption[]) : UnityEngine.Vector2Int
            /** Make an X & Y integer field for entering a Vector2Int.
            * @param $label Label to display above the field.
            * @param $value The value to edit.
            * @param $options An optional list of layout options that specify extra layout properties. Any values passed in here will override settings defined by the style.<br>
            Additional resources: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
            GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.
            * @returns The value entered by the user. 
            */
            public static Vector2IntField ($label: UnityEngine.GUIContent, $value: UnityEngine.Vector2Int, ...options: UnityEngine.GUILayoutOption[]) : UnityEngine.Vector2Int
            /** Make an X, Y & Z integer field for entering a Vector3Int.
            * @param $label Label to display above the field.
            * @param $value The value to edit.
            * @param $options An optional list of layout options that specify extra layout properties. Any values passed in here will override settings defined by the style.<br>
            Additional resources: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
            GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.
            * @returns The value entered by the user. 
            */
            public static Vector3IntField ($label: string, $value: UnityEngine.Vector3Int, ...options: UnityEngine.GUILayoutOption[]) : UnityEngine.Vector3Int
            /** Make an X, Y & Z integer field for entering a Vector3Int.
            * @param $label Label to display above the field.
            * @param $value The value to edit.
            * @param $options An optional list of layout options that specify extra layout properties. Any values passed in here will override settings defined by the style.<br>
            Additional resources: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
            GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.
            * @returns The value entered by the user. 
            */
            public static Vector3IntField ($label: UnityEngine.GUIContent, $value: UnityEngine.Vector3Int, ...options: UnityEngine.GUILayoutOption[]) : UnityEngine.Vector3Int
            /** Make an X, Y, W & H field for entering a Rect.
            * @param $label Label to display above the field.
            * @param $value The value to edit.
            * @param $options An optional list of layout options that specify extra layout properties. Any values passed in here will override settings defined by the style.<br>
            Additional resources: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
            GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.
            * @returns The value entered by the user. 
            */
            public static RectField ($value: UnityEngine.Rect, ...options: UnityEngine.GUILayoutOption[]) : UnityEngine.Rect
            /** Make an X, Y, W & H field for entering a Rect.
            * @param $label Label to display above the field.
            * @param $value The value to edit.
            * @param $options An optional list of layout options that specify extra layout properties. Any values passed in here will override settings defined by the style.<br>
            Additional resources: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
            GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.
            * @returns The value entered by the user. 
            */
            public static RectField ($label: string, $value: UnityEngine.Rect, ...options: UnityEngine.GUILayoutOption[]) : UnityEngine.Rect
            /** Make an X, Y, W & H field for entering a Rect.
            * @param $label Label to display above the field.
            * @param $value The value to edit.
            * @param $options An optional list of layout options that specify extra layout properties. Any values passed in here will override settings defined by the style.<br>
            Additional resources: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
            GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.
            * @returns The value entered by the user. 
            */
            public static RectField ($label: UnityEngine.GUIContent, $value: UnityEngine.Rect, ...options: UnityEngine.GUILayoutOption[]) : UnityEngine.Rect
            /** Make an X, Y, W & H field for entering a RectInt.
            * @param $label Label to display above the field.
            * @param $value The value to edit.
            * @param $options An optional list of layout options that specify extra layout properties. Any values passed in here will override settings defined by the style.<br>
            Additional resources: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
            GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.
            * @returns The value entered by the user. 
            */
            public static RectIntField ($value: UnityEngine.RectInt, ...options: UnityEngine.GUILayoutOption[]) : UnityEngine.RectInt
            /** Make an X, Y, W & H field for entering a RectInt.
            * @param $label Label to display above the field.
            * @param $value The value to edit.
            * @param $options An optional list of layout options that specify extra layout properties. Any values passed in here will override settings defined by the style.<br>
            Additional resources: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
            GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.
            * @returns The value entered by the user. 
            */
            public static RectIntField ($label: string, $value: UnityEngine.RectInt, ...options: UnityEngine.GUILayoutOption[]) : UnityEngine.RectInt
            /** Make an X, Y, W & H field for entering a RectInt.
            * @param $label Label to display above the field.
            * @param $value The value to edit.
            * @param $options An optional list of layout options that specify extra layout properties. Any values passed in here will override settings defined by the style.<br>
            Additional resources: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
            GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.
            * @returns The value entered by the user. 
            */
            public static RectIntField ($label: UnityEngine.GUIContent, $value: UnityEngine.RectInt, ...options: UnityEngine.GUILayoutOption[]) : UnityEngine.RectInt
            /** Make Center & Extents field for entering a Bounds.
            * @param $label Label to display above the field.
            * @param $value The value to edit.
            * @param $options An optional list of layout options that specify extra layout properties. Any values passed in here will override settings defined by the style.<br>
            Additional resources: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
            GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.
            * @returns The value entered by the user. 
            */
            public static BoundsField ($value: UnityEngine.Bounds, ...options: UnityEngine.GUILayoutOption[]) : UnityEngine.Bounds
            /** Make Center & Extents field for entering a Bounds.
            * @param $label Label to display above the field.
            * @param $value The value to edit.
            * @param $options An optional list of layout options that specify extra layout properties. Any values passed in here will override settings defined by the style.<br>
            Additional resources: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
            GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.
            * @returns The value entered by the user. 
            */
            public static BoundsField ($label: string, $value: UnityEngine.Bounds, ...options: UnityEngine.GUILayoutOption[]) : UnityEngine.Bounds
            /** Make Center & Extents field for entering a Bounds.
            * @param $label Label to display above the field.
            * @param $value The value to edit.
            * @param $options An optional list of layout options that specify extra layout properties. Any values passed in here will override settings defined by the style.<br>
            Additional resources: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
            GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.
            * @returns The value entered by the user. 
            */
            public static BoundsField ($label: UnityEngine.GUIContent, $value: UnityEngine.Bounds, ...options: UnityEngine.GUILayoutOption[]) : UnityEngine.Bounds
            /** Make Position & Size field for entering a BoundsInt.
            * @param $label Make Position & Size field for entering a Bounds.
            * @param $value The value to edit.
            * @param $options An optional list of layout options that specify extra layout properties. Any values passed in here will override settings defined by the style.<br>
            Additional resources: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
            GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.
            * @returns The value entered by the user. 
            */
            public static BoundsIntField ($value: UnityEngine.BoundsInt, ...options: UnityEngine.GUILayoutOption[]) : UnityEngine.BoundsInt
            /** Make Position & Size field for entering a BoundsInt.
            * @param $label Make Position & Size field for entering a Bounds.
            * @param $value The value to edit.
            * @param $options An optional list of layout options that specify extra layout properties. Any values passed in here will override settings defined by the style.<br>
            Additional resources: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
            GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.
            * @returns The value entered by the user. 
            */
            public static BoundsIntField ($label: string, $value: UnityEngine.BoundsInt, ...options: UnityEngine.GUILayoutOption[]) : UnityEngine.BoundsInt
            /** Make Position & Size field for entering a BoundsInt.
            * @param $label Make Position & Size field for entering a Bounds.
            * @param $value The value to edit.
            * @param $options An optional list of layout options that specify extra layout properties. Any values passed in here will override settings defined by the style.<br>
            Additional resources: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
            GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.
            * @returns The value entered by the user. 
            */
            public static BoundsIntField ($label: UnityEngine.GUIContent, $value: UnityEngine.BoundsInt, ...options: UnityEngine.GUILayoutOption[]) : UnityEngine.BoundsInt
            /** Make a field for selecting a Color.
            * @param $label Optional label to display in front of the field.
            * @param $value The color to edit.
            * @param $showEyedropper If true, the color picker should show the eyedropper control. If false, don't show it.
            * @param $showAlpha If true, allow the user to set an alpha value for the color. If false, hide the alpha component.
            * @param $hdr If true, treat the color as an HDR value. If false, treat it as a standard LDR value.
            * @param $options An optional list of layout options that specify extra layout properties. Any values passed in here will override settings defined by the style.<br>
            Additional resources: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
            GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.
            * @returns The color selected by the user. 
            */
            public static ColorField ($value: UnityEngine.Color, ...options: UnityEngine.GUILayoutOption[]) : UnityEngine.Color
            /** Make a field for selecting a Color.
            * @param $label Optional label to display in front of the field.
            * @param $value The color to edit.
            * @param $showEyedropper If true, the color picker should show the eyedropper control. If false, don't show it.
            * @param $showAlpha If true, allow the user to set an alpha value for the color. If false, hide the alpha component.
            * @param $hdr If true, treat the color as an HDR value. If false, treat it as a standard LDR value.
            * @param $options An optional list of layout options that specify extra layout properties. Any values passed in here will override settings defined by the style.<br>
            Additional resources: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
            GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.
            * @returns The color selected by the user. 
            */
            public static ColorField ($label: string, $value: UnityEngine.Color, ...options: UnityEngine.GUILayoutOption[]) : UnityEngine.Color
            /** Make a field for selecting a Color.
            * @param $label Optional label to display in front of the field.
            * @param $value The color to edit.
            * @param $showEyedropper If true, the color picker should show the eyedropper control. If false, don't show it.
            * @param $showAlpha If true, allow the user to set an alpha value for the color. If false, hide the alpha component.
            * @param $hdr If true, treat the color as an HDR value. If false, treat it as a standard LDR value.
            * @param $options An optional list of layout options that specify extra layout properties. Any values passed in here will override settings defined by the style.<br>
            Additional resources: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
            GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.
            * @returns The color selected by the user. 
            */
            public static ColorField ($label: UnityEngine.GUIContent, $value: UnityEngine.Color, ...options: UnityEngine.GUILayoutOption[]) : UnityEngine.Color
            /** Make a field for selecting a Color.
            * @param $label Optional label to display in front of the field.
            * @param $value The color to edit.
            * @param $showEyedropper If true, the color picker should show the eyedropper control. If false, don't show it.
            * @param $showAlpha If true, allow the user to set an alpha value for the color. If false, hide the alpha component.
            * @param $hdr If true, treat the color as an HDR value. If false, treat it as a standard LDR value.
            * @param $options An optional list of layout options that specify extra layout properties. Any values passed in here will override settings defined by the style.<br>
            Additional resources: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
            GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.
            * @returns The color selected by the user. 
            */
            public static ColorField ($label: UnityEngine.GUIContent, $value: UnityEngine.Color, $showEyedropper: boolean, $showAlpha: boolean, $hdr: boolean, ...options: UnityEngine.GUILayoutOption[]) : UnityEngine.Color
            /** Make a field for editing an AnimationCurve.
            * @param $label Optional label to display in front of the field.
            * @param $value The curve to edit.
            * @param $color The color to show the curve with.
            * @param $ranges Optional rectangle that the curve is restrained within.
            * @param $options An optional list of layout options that specify extra layout properties. Any values passed in here will override settings defined by the style.<br>
            Additional resources: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
            GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.
            * @returns The curve edited by the user. 
            */
            public static CurveField ($value: UnityEngine.AnimationCurve, ...options: UnityEngine.GUILayoutOption[]) : UnityEngine.AnimationCurve
            /** Make a field for editing an AnimationCurve.
            * @param $label Optional label to display in front of the field.
            * @param $value The curve to edit.
            * @param $color The color to show the curve with.
            * @param $ranges Optional rectangle that the curve is restrained within.
            * @param $options An optional list of layout options that specify extra layout properties. Any values passed in here will override settings defined by the style.<br>
            Additional resources: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
            GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.
            * @returns The curve edited by the user. 
            */
            public static CurveField ($label: string, $value: UnityEngine.AnimationCurve, ...options: UnityEngine.GUILayoutOption[]) : UnityEngine.AnimationCurve
            /** Make a field for editing an AnimationCurve.
            * @param $label Optional label to display in front of the field.
            * @param $value The curve to edit.
            * @param $color The color to show the curve with.
            * @param $ranges Optional rectangle that the curve is restrained within.
            * @param $options An optional list of layout options that specify extra layout properties. Any values passed in here will override settings defined by the style.<br>
            Additional resources: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
            GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.
            * @returns The curve edited by the user. 
            */
            public static CurveField ($label: UnityEngine.GUIContent, $value: UnityEngine.AnimationCurve, ...options: UnityEngine.GUILayoutOption[]) : UnityEngine.AnimationCurve
            /** Make a field for editing an AnimationCurve.
            * @param $label Optional label to display in front of the field.
            * @param $value The curve to edit.
            * @param $color The color to show the curve with.
            * @param $ranges Optional rectangle that the curve is restrained within.
            * @param $options An optional list of layout options that specify extra layout properties. Any values passed in here will override settings defined by the style.<br>
            Additional resources: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
            GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.
            * @returns The curve edited by the user. 
            */
            public static CurveField ($value: UnityEngine.AnimationCurve, $color: UnityEngine.Color, $ranges: UnityEngine.Rect, ...options: UnityEngine.GUILayoutOption[]) : UnityEngine.AnimationCurve
            /** Make a field for editing an AnimationCurve.
            * @param $label Optional label to display in front of the field.
            * @param $value The curve to edit.
            * @param $color The color to show the curve with.
            * @param $ranges Optional rectangle that the curve is restrained within.
            * @param $options An optional list of layout options that specify extra layout properties. Any values passed in here will override settings defined by the style.<br>
            Additional resources: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
            GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.
            * @returns The curve edited by the user. 
            */
            public static CurveField ($label: string, $value: UnityEngine.AnimationCurve, $color: UnityEngine.Color, $ranges: UnityEngine.Rect, ...options: UnityEngine.GUILayoutOption[]) : UnityEngine.AnimationCurve
            /** Make a field for editing an AnimationCurve.
            * @param $label Optional label to display in front of the field.
            * @param $value The curve to edit.
            * @param $color The color to show the curve with.
            * @param $ranges Optional rectangle that the curve is restrained within.
            * @param $options An optional list of layout options that specify extra layout properties. Any values passed in here will override settings defined by the style.<br>
            Additional resources: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
            GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.
            * @returns The curve edited by the user. 
            */
            public static CurveField ($label: UnityEngine.GUIContent, $value: UnityEngine.AnimationCurve, $color: UnityEngine.Color, $ranges: UnityEngine.Rect, ...options: UnityEngine.GUILayoutOption[]) : UnityEngine.AnimationCurve
            /** Make a field for editing an AnimationCurve.
            * @param $property The curve to edit.
            * @param $color The color to show the curve with.
            * @param $ranges Optional rectangle that the curve is restrained within.
            * @param $options An optional list of layout options that specify extra layout properties. Any values passed in here will override settings defined by the style.<br>
            Additional resources: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
            GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.
            * @param $label Optional label to display in front of the field. Pass [[GUIContent.none] to hide the label.
            */
            public static CurveField ($property: UnityEditor.SerializedProperty, $color: UnityEngine.Color, $ranges: UnityEngine.Rect, ...options: UnityEngine.GUILayoutOption[]) : void
            /** Make a field for editing an AnimationCurve.
            * @param $property The curve to edit.
            * @param $color The color to show the curve with.
            * @param $ranges Optional rectangle that the curve is restrained within.
            * @param $options An optional list of layout options that specify extra layout properties. Any values passed in here will override settings defined by the style.<br>
            Additional resources: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
            GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.
            * @param $label Optional label to display in front of the field. Pass [[GUIContent.none] to hide the label.
            */
            public static CurveField ($property: UnityEditor.SerializedProperty, $color: UnityEngine.Color, $ranges: UnityEngine.Rect, $label: UnityEngine.GUIContent, ...options: UnityEngine.GUILayoutOption[]) : void
            /** Make an inspector-window-like titlebar.
            * @param $foldout The foldout state shown with the arrow.
            * @param $targetObj The object (for example a component) or objects that the titlebar is for.
            * @returns The foldout state selected by the user. 
            */
            public static InspectorTitlebar ($foldout: boolean, $targetObj: UnityEngine.Object) : boolean
            public static InspectorTitlebar ($foldout: boolean, $targetObj: UnityEngine.Object, $expandable: boolean) : boolean
            /** Make an inspector-window-like titlebar.
            * @param $foldout The foldout state shown with the arrow.
            * @param $targetObj The object (for example a component) or objects that the titlebar is for.
            * @returns The foldout state selected by the user. 
            */
            public static InspectorTitlebar ($foldout: boolean, $targetObjs: System.Array$1<UnityEngine.Object>) : boolean
            public static InspectorTitlebar ($foldout: boolean, $targetObjs: System.Array$1<UnityEngine.Object>, $expandable: boolean) : boolean
            public static InspectorTitlebar ($foldout: boolean, $editor: UnityEditor.Editor) : boolean
            public static InspectorTitlebar ($targetObjs: System.Array$1<UnityEngine.Object>) : void
            /** Make a help box with a message to the user.
            * @param $message The message text.
            * @param $type The type of message.
            * @param $wide If true, the box will cover the whole width of the window; otherwise it will cover the controls part only.
            * @param $content The message contents. If an image is provided, it will be displayed to the left of the message. The expect image size is 32x32 pixels.
            */
            public static HelpBox ($message: string, $type: UnityEditor.MessageType) : void
            /** Make a help box with a message to the user.
            * @param $message The message text.
            * @param $type The type of message.
            * @param $wide If true, the box will cover the whole width of the window; otherwise it will cover the controls part only.
            * @param $content The message contents. If an image is provided, it will be displayed to the left of the message. The expect image size is 32x32 pixels.
            */
            public static HelpBox ($message: string, $type: UnityEditor.MessageType, $wide: boolean) : void
            /** Make a help box with a message to the user.
            * @param $message The message text.
            * @param $type The type of message.
            * @param $wide If true, the box will cover the whole width of the window; otherwise it will cover the controls part only.
            * @param $content The message contents. If an image is provided, it will be displayed to the left of the message. The expect image size is 32x32 pixels.
            */
            public static HelpBox ($content: UnityEngine.GUIContent, $wide?: boolean) : void
            /** Make a small space between the previous control and the following.
            * @param $width The width of the empty space. Use this for horizontal layout.
            * @param $expand Option passed to enable or disable horizontal expansion.
            */
            public static Space () : void
            /** Make a small space between the previous control and the following.
            * @param $width The width of the empty space. Use this for horizontal layout.
            * @param $expand Option passed to enable or disable horizontal expansion.
            */
            public static Space ($width: number) : void
            /** Make a small space between the previous control and the following.
            * @param $width The width of the empty space. Use this for horizontal layout.
            * @param $expand Option passed to enable or disable horizontal expansion.
            */
            public static Space ($width: number, $expand: boolean) : void
            public static Separator () : void
            /** Begin a vertical group with a toggle to enable or disable all the controls within at once.
            * @param $label Label to show above the toggled controls.
            * @param $toggle Enabled state of the toggle group.
            * @returns The enabled state selected by the user. 
            */
            public static BeginToggleGroup ($label: string, $toggle: boolean) : boolean
            /** Begin a vertical group with a toggle to enable or disable all the controls within at once.
            * @param $label Label to show above the toggled controls.
            * @param $toggle Enabled state of the toggle group.
            * @returns The enabled state selected by the user. 
            */
            public static BeginToggleGroup ($label: UnityEngine.GUIContent, $toggle: boolean) : boolean
            /** Close a group started with BeginToggleGroup.
            */
            public static EndToggleGroup () : void
            /** Begin a horizontal group and get its rect back.
            * @param $style Optional GUIStyle.
            * @param $options An optional list of layout options that specify extra layout
            properties. Any values passed in here will override settings defined by the style.<br>
            Additional resources: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
            GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.
            */
            public static BeginHorizontal (...options: UnityEngine.GUILayoutOption[]) : UnityEngine.Rect
            /** Begin a horizontal group and get its rect back.
            * @param $style Optional GUIStyle.
            * @param $options An optional list of layout options that specify extra layout
            properties. Any values passed in here will override settings defined by the style.<br>
            Additional resources: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
            GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.
            */
            public static BeginHorizontal ($style: UnityEngine.GUIStyle, ...options: UnityEngine.GUILayoutOption[]) : UnityEngine.Rect
            /** Close a group started with BeginHorizontal.
            */
            public static EndHorizontal () : void
            /** Begin a vertical group and get its rect back.
            * @param $style Optional GUIStyle.
            * @param $options An optional list of layout options that specify extra layout properties.
            Any values passed in here will override settings defined by the style.<br>
            Additional resources: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
            GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.
            */
            public static BeginVertical (...options: UnityEngine.GUILayoutOption[]) : UnityEngine.Rect
            /** Begin a vertical group and get its rect back.
            * @param $style Optional GUIStyle.
            * @param $options An optional list of layout options that specify extra layout properties.
            Any values passed in here will override settings defined by the style.<br>
            Additional resources: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
            GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.
            */
            public static BeginVertical ($style: UnityEngine.GUIStyle, ...options: UnityEngine.GUILayoutOption[]) : UnityEngine.Rect
            /** Close a group started with BeginVertical.
            */
            public static EndVertical () : void
            /** Begin an automatically laid out scrollview.
            * @param $scrollPosition The position to use display.
            * @param $style Optional GUIStyle to use for the background.
            * @param $background Optional GUIStyle to use for the background.
            * @param $alwayShowHorizontal Optional parameter to always show the horizontal scrollbar. If false or left out, it is only shown when the content inside the ScrollView is wider than the scrollview itself.
            * @param $alwayShowVertical Optional parameter to always show the vertical scrollbar. If false or left out, it is only shown when content inside the ScrollView is taller than the scrollview itself.
            * @param $horizontalScrollbar Optional GUIStyle to use for the horizontal scrollbar. If left out, the horizontalScrollbar style from the current GUISkin is used.
            * @param $verticalScrollbar Optional GUIStyle to use for the vertical scrollbar. If left out, the verticalScrollbar style from the current GUISkin is used.
            * @returns The modified scrollPosition. Feed this back into the variable you pass in, as shown in the example. 
            */
            public static BeginScrollView ($scrollPosition: UnityEngine.Vector2, ...options: UnityEngine.GUILayoutOption[]) : UnityEngine.Vector2
            /** Begin an automatically laid out scrollview.
            * @param $scrollPosition The position to use display.
            * @param $style Optional GUIStyle to use for the background.
            * @param $background Optional GUIStyle to use for the background.
            * @param $alwayShowHorizontal Optional parameter to always show the horizontal scrollbar. If false or left out, it is only shown when the content inside the ScrollView is wider than the scrollview itself.
            * @param $alwayShowVertical Optional parameter to always show the vertical scrollbar. If false or left out, it is only shown when content inside the ScrollView is taller than the scrollview itself.
            * @param $horizontalScrollbar Optional GUIStyle to use for the horizontal scrollbar. If left out, the horizontalScrollbar style from the current GUISkin is used.
            * @param $verticalScrollbar Optional GUIStyle to use for the vertical scrollbar. If left out, the verticalScrollbar style from the current GUISkin is used.
            * @returns The modified scrollPosition. Feed this back into the variable you pass in, as shown in the example. 
            */
            public static BeginScrollView ($scrollPosition: UnityEngine.Vector2, $alwaysShowHorizontal: boolean, $alwaysShowVertical: boolean, ...options: UnityEngine.GUILayoutOption[]) : UnityEngine.Vector2
            /** Begin an automatically laid out scrollview.
            * @param $scrollPosition The position to use display.
            * @param $style Optional GUIStyle to use for the background.
            * @param $background Optional GUIStyle to use for the background.
            * @param $alwayShowHorizontal Optional parameter to always show the horizontal scrollbar. If false or left out, it is only shown when the content inside the ScrollView is wider than the scrollview itself.
            * @param $alwayShowVertical Optional parameter to always show the vertical scrollbar. If false or left out, it is only shown when content inside the ScrollView is taller than the scrollview itself.
            * @param $horizontalScrollbar Optional GUIStyle to use for the horizontal scrollbar. If left out, the horizontalScrollbar style from the current GUISkin is used.
            * @param $verticalScrollbar Optional GUIStyle to use for the vertical scrollbar. If left out, the verticalScrollbar style from the current GUISkin is used.
            * @returns The modified scrollPosition. Feed this back into the variable you pass in, as shown in the example. 
            */
            public static BeginScrollView ($scrollPosition: UnityEngine.Vector2, $horizontalScrollbar: UnityEngine.GUIStyle, $verticalScrollbar: UnityEngine.GUIStyle, ...options: UnityEngine.GUILayoutOption[]) : UnityEngine.Vector2
            /** Begin an automatically laid out scrollview.
            * @param $scrollPosition The position to use display.
            * @param $style Optional GUIStyle to use for the background.
            * @param $background Optional GUIStyle to use for the background.
            * @param $alwayShowHorizontal Optional parameter to always show the horizontal scrollbar. If false or left out, it is only shown when the content inside the ScrollView is wider than the scrollview itself.
            * @param $alwayShowVertical Optional parameter to always show the vertical scrollbar. If false or left out, it is only shown when content inside the ScrollView is taller than the scrollview itself.
            * @param $horizontalScrollbar Optional GUIStyle to use for the horizontal scrollbar. If left out, the horizontalScrollbar style from the current GUISkin is used.
            * @param $verticalScrollbar Optional GUIStyle to use for the vertical scrollbar. If left out, the verticalScrollbar style from the current GUISkin is used.
            * @returns The modified scrollPosition. Feed this back into the variable you pass in, as shown in the example. 
            */
            public static BeginScrollView ($scrollPosition: UnityEngine.Vector2, $style: UnityEngine.GUIStyle, ...options: UnityEngine.GUILayoutOption[]) : UnityEngine.Vector2
            /** Begin an automatically laid out scrollview.
            * @param $scrollPosition The position to use display.
            * @param $style Optional GUIStyle to use for the background.
            * @param $background Optional GUIStyle to use for the background.
            * @param $alwayShowHorizontal Optional parameter to always show the horizontal scrollbar. If false or left out, it is only shown when the content inside the ScrollView is wider than the scrollview itself.
            * @param $alwayShowVertical Optional parameter to always show the vertical scrollbar. If false or left out, it is only shown when content inside the ScrollView is taller than the scrollview itself.
            * @param $horizontalScrollbar Optional GUIStyle to use for the horizontal scrollbar. If left out, the horizontalScrollbar style from the current GUISkin is used.
            * @param $verticalScrollbar Optional GUIStyle to use for the vertical scrollbar. If left out, the verticalScrollbar style from the current GUISkin is used.
            * @returns The modified scrollPosition. Feed this back into the variable you pass in, as shown in the example. 
            */
            public static BeginScrollView ($scrollPosition: UnityEngine.Vector2, $alwaysShowHorizontal: boolean, $alwaysShowVertical: boolean, $horizontalScrollbar: UnityEngine.GUIStyle, $verticalScrollbar: UnityEngine.GUIStyle, $background: UnityEngine.GUIStyle, ...options: UnityEngine.GUILayoutOption[]) : UnityEngine.Vector2
            /** Ends a scrollview started with a call to BeginScrollView.
            */
            public static EndScrollView () : void
            /** Make a field for SerializedProperty.
            * @param $property The SerializedProperty to make a field for.
            * @param $label Optional label to use. If not specified the label of the property itself is used. Use GUIContent.none to not display a label at all.
            * @param $includeChildren If true the property including children is drawn; otherwise only the control itself (such as only a foldout but nothing below it).
            * @param $options An optional list of layout options that specify extra layout properties. Any values passed in here will override settings defined by the style.<br>
            Additional resources: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
            GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.
            * @returns True if the property has children, is expanded, and includeChildren is set to false; otherwise false. You can use it to determine the isExpanded state of the property and customize the rendering of children if necessary. 
            */
            public static PropertyField ($property: UnityEditor.SerializedProperty, ...options: UnityEngine.GUILayoutOption[]) : boolean
            /** Make a field for SerializedProperty.
            * @param $property The SerializedProperty to make a field for.
            * @param $label Optional label to use. If not specified the label of the property itself is used. Use GUIContent.none to not display a label at all.
            * @param $includeChildren If true the property including children is drawn; otherwise only the control itself (such as only a foldout but nothing below it).
            * @param $options An optional list of layout options that specify extra layout properties. Any values passed in here will override settings defined by the style.<br>
            Additional resources: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
            GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.
            * @returns True if the property has children, is expanded, and includeChildren is set to false; otherwise false. You can use it to determine the isExpanded state of the property and customize the rendering of children if necessary. 
            */
            public static PropertyField ($property: UnityEditor.SerializedProperty, $label: UnityEngine.GUIContent, ...options: UnityEngine.GUILayoutOption[]) : boolean
            /** Make a field for SerializedProperty.
            * @param $property The SerializedProperty to make a field for.
            * @param $label Optional label to use. If not specified the label of the property itself is used. Use GUIContent.none to not display a label at all.
            * @param $includeChildren If true the property including children is drawn; otherwise only the control itself (such as only a foldout but nothing below it).
            * @param $options An optional list of layout options that specify extra layout properties. Any values passed in here will override settings defined by the style.<br>
            Additional resources: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
            GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.
            * @returns True if the property has children, is expanded, and includeChildren is set to false; otherwise false. You can use it to determine the isExpanded state of the property and customize the rendering of children if necessary. 
            */
            public static PropertyField ($property: UnityEditor.SerializedProperty, $includeChildren: boolean, ...options: UnityEngine.GUILayoutOption[]) : boolean
            /** Make a field for SerializedProperty.
            * @param $property The SerializedProperty to make a field for.
            * @param $label Optional label to use. If not specified the label of the property itself is used. Use GUIContent.none to not display a label at all.
            * @param $includeChildren If true the property including children is drawn; otherwise only the control itself (such as only a foldout but nothing below it).
            * @param $options An optional list of layout options that specify extra layout properties. Any values passed in here will override settings defined by the style.<br>
            Additional resources: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
            GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.
            * @returns True if the property has children, is expanded, and includeChildren is set to false; otherwise false. You can use it to determine the isExpanded state of the property and customize the rendering of children if necessary. 
            */
            public static PropertyField ($property: UnityEditor.SerializedProperty, $label: UnityEngine.GUIContent, $includeChildren: boolean, ...options: UnityEngine.GUILayoutOption[]) : boolean
            /** Get a rect for an Editor control.
            * @param $hasLabel Optional boolean to specify if the control has a label. Default is true.
            * @param $height The height in pixels of the control. Default is EditorGUIUtility.singleLineHeight.
            * @param $style Optional GUIStyle to use for the control.
            * @param $options An optional list of layout options that specify extra layout properties. Any values passed in here will override settings defined by the style.
            Additional resources: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
            GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.
            */
            public static GetControlRect (...options: UnityEngine.GUILayoutOption[]) : UnityEngine.Rect
            /** Get a rect for an Editor control.
            * @param $hasLabel Optional boolean to specify if the control has a label. Default is true.
            * @param $height The height in pixels of the control. Default is EditorGUIUtility.singleLineHeight.
            * @param $style Optional GUIStyle to use for the control.
            * @param $options An optional list of layout options that specify extra layout properties. Any values passed in here will override settings defined by the style.
            Additional resources: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
            GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.
            */
            public static GetControlRect ($hasLabel: boolean, ...options: UnityEngine.GUILayoutOption[]) : UnityEngine.Rect
            /** Get a rect for an Editor control.
            * @param $hasLabel Optional boolean to specify if the control has a label. Default is true.
            * @param $height The height in pixels of the control. Default is EditorGUIUtility.singleLineHeight.
            * @param $style Optional GUIStyle to use for the control.
            * @param $options An optional list of layout options that specify extra layout properties. Any values passed in here will override settings defined by the style.
            Additional resources: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
            GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.
            */
            public static GetControlRect ($hasLabel: boolean, $height: number, ...options: UnityEngine.GUILayoutOption[]) : UnityEngine.Rect
            /** Get a rect for an Editor control.
            * @param $hasLabel Optional boolean to specify if the control has a label. Default is true.
            * @param $height The height in pixels of the control. Default is EditorGUIUtility.singleLineHeight.
            * @param $style Optional GUIStyle to use for the control.
            * @param $options An optional list of layout options that specify extra layout properties. Any values passed in here will override settings defined by the style.
            Additional resources: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
            GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.
            */
            public static GetControlRect ($hasLabel: boolean, $height: number, $style: UnityEngine.GUIStyle, ...options: UnityEngine.GUILayoutOption[]) : UnityEngine.Rect
            /** Begins a group that can be be hidden/shown and the transition will be animated.
            * @param $value A value between 0 and 1, 0 being hidden, and 1 being fully visible.
            * @returns If the group is visible or not. 
            */
            public static BeginFadeGroup ($value: number) : boolean
            /** Closes a group started with BeginFadeGroup.
            */
            public static EndFadeGroup () : void
            /** Begin a build target grouping and get the selected BuildTargetGroup back.
            */
            public static BeginBuildTargetSelectionGrouping () : UnityEditor.BuildTargetGroup
            /** Close a group started with BeginBuildTargetSelectionGrouping.
            */
            public static EndBuildTargetSelectionGrouping () : void
            /** Make a button that reacts to mouse down, for displaying your own dropdown content.
            * @param $content Text, image and tooltip for this button.
            * @param $focusType Whether the button should be selectable by keyboard or not.
            * @param $style Optional style to use.
            * @param $options An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the style.<br>
            Additional resources: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
            GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.
            * @returns true when the user clicks the button. 
            */
            public static DropdownButton ($content: UnityEngine.GUIContent, $focusType: UnityEngine.FocusType, ...options: UnityEngine.GUILayoutOption[]) : boolean
            /** Make a button that reacts to mouse down, for displaying your own dropdown content.
            * @param $content Text, image and tooltip for this button.
            * @param $focusType Whether the button should be selectable by keyboard or not.
            * @param $style Optional style to use.
            * @param $options An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the style.<br>
            Additional resources: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
            GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.
            * @returns true when the user clicks the button. 
            */
            public static DropdownButton ($content: UnityEngine.GUIContent, $focusType: UnityEngine.FocusType, $style: UnityEngine.GUIStyle, ...options: UnityEngine.GUILayoutOption[]) : boolean
            public static BeginFoldoutHeaderGroup ($foldout: boolean, $content: string, $style?: UnityEngine.GUIStyle, $menuAction?: System.Action$1<UnityEngine.Rect>, $menuIcon?: UnityEngine.GUIStyle) : boolean
            public static BeginFoldoutHeaderGroup ($foldout: boolean, $content: UnityEngine.GUIContent, $style?: UnityEngine.GUIStyle, $menuAction?: System.Action$1<UnityEngine.Rect>, $menuIcon?: UnityEngine.GUIStyle) : boolean
            /** Closes a group started with BeginFoldoutHeaderGroup.
            */
            public static EndFoldoutHeaderGroup () : void
            /** Make a field for editing a Gradient.
            * @param $label Optional label to display in front of the field.
            * @param $value The gradient to edit.
            * @param $options An optional list of layout options that specify extra layout properties. Any values passed in here will override settings defined by the style.<br>
            Additional resources: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
            GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.
            * @returns The gradient edited by the user. 
            */
            public static GradientField ($value: UnityEngine.Gradient, ...options: UnityEngine.GUILayoutOption[]) : UnityEngine.Gradient
            /** Make a field for editing a Gradient.
            * @param $label Optional label to display in front of the field.
            * @param $value The gradient to edit.
            * @param $options An optional list of layout options that specify extra layout properties. Any values passed in here will override settings defined by the style.<br>
            Additional resources: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
            GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.
            * @returns The gradient edited by the user. 
            */
            public static GradientField ($label: string, $value: UnityEngine.Gradient, ...options: UnityEngine.GUILayoutOption[]) : UnityEngine.Gradient
            /** Make a field for editing a Gradient.
            * @param $label Optional label to display in front of the field.
            * @param $value The gradient to edit.
            * @param $options An optional list of layout options that specify extra layout properties. Any values passed in here will override settings defined by the style.<br>
            Additional resources: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
            GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.
            * @returns The gradient edited by the user. 
            */
            public static GradientField ($label: UnityEngine.GUIContent, $value: UnityEngine.Gradient, ...options: UnityEngine.GUILayoutOption[]) : UnityEngine.Gradient
            /** Make a field for editing a Gradient.
            * @param $label Optional label to display in front of the field.
            * @param $value The gradient to edit.
            * @param $options An optional list of layout options that specify extra layout properties. Any values passed in here will override settings defined by the style.<br>
            Additional resources: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
            GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.
            * @returns The gradient edited by the user. 
            */
            public static GradientField ($label: UnityEngine.GUIContent, $value: UnityEngine.Gradient, $hdr: boolean, ...options: UnityEngine.GUILayoutOption[]) : UnityEngine.Gradient
            public static Knob ($knobSize: UnityEngine.Vector2, $value: number, $minValue: number, $maxValue: number, $unit: string, $backgroundColor: UnityEngine.Color, $activeColor: UnityEngine.Color, $showValue: boolean, ...options: UnityEngine.GUILayoutOption[]) : number
            /** Makes a toolbar populated with the collection of editor tools that match the EditorToolAttribute of the target object.
            * @param $target The target object.
            * @param $content An optional prefix label.
            */
            public static EditorToolbarForTarget ($target: UnityEngine.Object) : void
            /** Makes a toolbar populated with the collection of editor tools that match the EditorToolAttribute of the target object.
            * @param $target The target object.
            * @param $content An optional prefix label.
            */
            public static EditorToolbarForTarget ($content: UnityEngine.GUIContent, $target: UnityEngine.Object) : void
            /** Makes a toolbar populated with the collection of EditorToolContext that match the EditorToolContextAttribute.targetType of the target object.
            * @param $content An optional prefix label. Pass null to omit the label.
            * @param $target The target object. This may be either a Component or an Editor.
            */
            public static ToolContextToolbarForTarget ($content: UnityEngine.GUIContent, $target: UnityEngine.Object) : void
            /** Makes a toolbar populated with the specified collection of editor tools.
            * @param $tools The collection of editor tools for the toolbar.
            */
            public static EditorToolbar (...tools: UnityEditor.EditorTools.EditorTool[]) : void
            public static EditorToolbar ($tools: System.Collections.Generic.IList$1<UnityEditor.EditorTools.EditorTool>) : void
            public static ToolContextToolbar ($content: UnityEngine.GUIContent, $contexts: System.Collections.Generic.IList$1<UnityEditor.EditorTools.EditorToolContext>) : void
            public constructor ()
        }
        /** Custom mouse cursor shapes used with EditorGUIUtility.AddCursorRect.
        */
        enum MouseCursor
        { Arrow = 0, Text = 1, ResizeVertical = 2, ResizeHorizontal = 3, Link = 4, SlideArrow = 5, ResizeUpRight = 6, ResizeUpLeft = 7, MoveArrow = 8, RotateArrow = 9, ScaleArrow = 10, ArrowPlus = 11, ArrowMinus = 12, Pan = 13, Orbit = 14, Zoom = 15, FPS = 16, CustomCursor = 17, SplitResizeUpDown = 18, SplitResizeLeftRight = 19, NotAllowed = 20 }
        /** Enum that selects which skin to return from EditorGUIUtility.GetBuiltinSkin.
        */
        enum EditorSkin
        { Game = 0, Inspector = 1, Scene = 2 }
        /** Miscellaneous helper stuff for EditorGUI.
        */
        class EditorGUIUtility extends UnityEngine.GUIUtility
        {
            protected [__keep_incompatibility]: never;
            /** Get a white texture.
            */
            public static get whiteTexture(): UnityEngine.Texture2D;
            /** The system copy buffer.
            */
            public static get systemCopyBuffer(): string;
            public static set systemCopyBuffer(value: string);
            /** The scale of GUI points relative to screen pixels for the current view
            This value is the number of screen pixels per point of interface space. For instance, 2.0 on retina displays. Note that the value may differ from one view to the next if the views are on monitors with different UI scales.
            */
            public static get pixelsPerPoint(): number;
            /** Get the height used for a single Editor control such as a one-line EditorGUI.TextField or EditorGUI.Popup.
            */
            public static get singleLineHeight(): number;
            /** Get the height used by default for vertical spacing between controls.
            */
            public static get standardVerticalSpacing(): number;
            /** Is the user currently using the pro skin? (Read Only)
            */
            public static get isProSkin(): boolean;
            /** Is a text field currently editing text?
            */
            public static get editingTextField(): boolean;
            public static set editingTextField(value: boolean);
            /** True if a text field currently has focused and the text in it is selected.
            */
            public static get textFieldHasSelection(): boolean;
            /** Is the Editor GUI in hierarchy mode?
            */
            public static get hierarchyMode(): boolean;
            public static set hierarchyMode(value: boolean);
            /** Is the Editor GUI currently in wide mode?
            */
            public static get wideMode(): boolean;
            public static set wideMode(value: boolean);
            /** The width of the GUI area for the current EditorWindow or other view. This Property should only be accessed within an OnGUI call.
            */
            public static get currentViewWidth(): number;
            /** The width in pixels reserved for labels of Editor GUI controls.
            */
            public static get labelWidth(): number;
            public static set labelWidth(value: number);
            /** The minimum width in pixels reserved for the fields of Editor GUI controls.
            */
            public static get fieldWidth(): number;
            public static set fieldWidth(value: number);
            public static SerializeMainMenuToString () : string
            public static SetMenuLocalizationTestMode ($onoff: boolean) : void
            /** Set icons rendered as part of GUIContent to be rendered at a specific size.
            */
            public static SetIconSize ($size: UnityEngine.Vector2) : void
            public static SetWantsMouseJumping ($wantz: number) : void
            /** Check if any enabled camera can render to a particular display.
            * @param $displayIndex Display index.
            * @returns True if a camera will render to the display. 
            */
            public static IsDisplayReferencedByCameras ($displayIndex: number) : boolean
            /** Send an input event into the game.
            */
            public static QueueGameViewInputEvent ($evt: UnityEngine.Event) : void
            /** Sets a custom icon to associate with a GameObject or MonoScript. The custom icon is displayed in the Scene view and the Inspector.
            * @param $obj The GameObject or MonoScript to associate the icon with.
            * @param $icon The custom icon to associate with the GameObject or MonoScript. When this value is null, the default icon is restored.
            */
            public static SetIconForObject ($obj: UnityEngine.Object, $icon: UnityEngine.Texture2D) : void
            /** Gets the custom icon associated with an object. Only GameObjects and MonoScripts have associated custom icons.
            * @param $obj The GameObject or MonoScript to query
            * @returns Returns the custom icon associated with the object. If there is no custom icon associated with the object, returns null. 
            */
            public static GetIconForObject ($obj: UnityEngine.Object) : UnityEngine.Texture2D
            /** Returns position of Unity Editor's main window.
            * @returns Position of Unity Editor's main window. 
            */
            public static GetMainWindowPosition () : UnityEngine.Rect
            /** Sets position of Unity Editor's main window.
            */
            public static SetMainWindowPosition ($position: UnityEngine.Rect) : void
            /** Converts a position from point to pixel space.
            * @param $rect A GUI position in point space.
            * @returns The same position in pixel space. 
            */
            public static PointsToPixels ($rect: UnityEngine.Rect) : UnityEngine.Rect
            /** Convert a Rect from pixel space to point space.
            * @param $rect A GUI rect measured in pixels.
            * @returns A rect representing the same area in points. 
            */
            public static PixelsToPoints ($rect: UnityEngine.Rect) : UnityEngine.Rect
            /** Convert a Rect from point space to pixel space.
            * @param $position A GUI rect measured in points.
            * @returns A rect representing the same area in pixels. 
            */
            public static PointsToPixels ($position: UnityEngine.Vector2) : UnityEngine.Vector2
            /** Convert a position from pixel to point space.
            * @param $position A GUI position in pixel space.
            * @returns A vector representing the same position in point space. 
            */
            public static PixelsToPoints ($position: UnityEngine.Vector2) : UnityEngine.Vector2
            public static GetFlowLayoutedRects ($rect: UnityEngine.Rect, $style: UnityEngine.GUIStyle, $horizontalSpacing: number, $verticalSpacing: number, $items: System.Collections.Generic.List$1<string>) : System.Collections.Generic.List$1<UnityEngine.Rect>
            /** Get a texture from its source filename.
            */
            public static FindTexture ($name: string) : UnityEngine.Texture2D
            /** Gets the GUIContent from the Unity built-in resources with the given key or creates a GUIContent for a GUI element.
            The text and the tooltip are localized and loaded with an icon.
            Typically, the icon from `AssetsEditor Default ResourcesIcons` is fetched using the icon name. Only the name of the icon, without the .png extension is needed.
            * @param $key The key of the existing GUIContent.
            * @param $text The text associated with the GUIContent.text.
            * @param $tooltip The tooltip to display when the cursor hovers over the icon.
            * @param $icon The icon to associate with the GUIContent.image.
            * @param $iconName The name of the icon.
            */
            public static TrTextContent ($key: string, $text: string, $tooltip: string, $icon: UnityEngine.Texture) : UnityEngine.GUIContent
            /** Gets the GUIContent from the Unity built-in resources with the given key or creates a GUIContent for a GUI element.
            The text and the tooltip are localized and loaded with an icon.
            Typically, the icon from `AssetsEditor Default ResourcesIcons` is fetched using the icon name. Only the name of the icon, without the .png extension is needed.
            * @param $key The key of the existing GUIContent.
            * @param $text The text associated with the GUIContent.text.
            * @param $tooltip The tooltip to display when the cursor hovers over the icon.
            * @param $icon The icon to associate with the GUIContent.image.
            * @param $iconName The name of the icon.
            */
            public static TrTextContent ($text: string, $tooltip?: string, $icon?: UnityEngine.Texture) : UnityEngine.GUIContent
            /** Gets the GUIContent from the Unity built-in resources with the given key or creates a GUIContent for a GUI element.
            The text and the tooltip are localized and loaded with an icon.
            Typically, the icon from `AssetsEditor Default ResourcesIcons` is fetched using the icon name. Only the name of the icon, without the .png extension is needed.
            * @param $key The key of the existing GUIContent.
            * @param $text The text associated with the GUIContent.text.
            * @param $tooltip The tooltip to display when the cursor hovers over the icon.
            * @param $icon The icon to associate with the GUIContent.image.
            * @param $iconName The name of the icon.
            */
            public static TrTextContent ($text: string, $tooltip: string, $iconName: string) : UnityEngine.GUIContent
            /** Gets the GUIContent from the Unity built-in resources with the given key or creates a GUIContent for a GUI element.
            The text and the tooltip are localized and loaded with an icon.
            Typically, the icon from `AssetsEditor Default ResourcesIcons` is fetched using the icon name. Only the name of the icon, without the .png extension is needed.
            * @param $key The key of the existing GUIContent.
            * @param $text The text associated with the GUIContent.text.
            * @param $tooltip The tooltip to display when the cursor hovers over the icon.
            * @param $icon The icon to associate with the GUIContent.image.
            * @param $iconName The name of the icon.
            */
            public static TrTextContent ($text: string, $icon: UnityEngine.Texture) : UnityEngine.GUIContent
            /** Gets the GUIContent from Unity built-in resources with the given information or creates a GUIContent for a GUI element.
            The text and the tooltip are localized and loaded with an icon.
            Typically, the icon from `AssetsEditor Default ResourcesIcons` is fetched using the icon name. Only the name of the icon, without the .png extension is needed.
            If a message type is specified instead of an icon or an icon name, the GUIContent.image is the icon associated with that message type.
            * @param $text The text associated with the GUIContent.text.
            * @param $icon The icon associated with the GUIContent.image.
            * @param $iconName The name of the icon.
            * @param $tooltip The tooltip to display when the cursor hovers over the icon.
            * @param $messageType The type of the message to fetch the icon for.
            */
            public static TrTextContentWithIcon ($text: string, $icon: UnityEngine.Texture) : UnityEngine.GUIContent
            /** Gets the GUIContent from Unity built-in resources with the given information or creates a GUIContent for a GUI element.
            The text and the tooltip are localized and loaded with an icon.
            Typically, the icon from `AssetsEditor Default ResourcesIcons` is fetched using the icon name. Only the name of the icon, without the .png extension is needed.
            If a message type is specified instead of an icon or an icon name, the GUIContent.image is the icon associated with that message type.
            * @param $text The text associated with the GUIContent.text.
            * @param $icon The icon associated with the GUIContent.image.
            * @param $iconName The name of the icon.
            * @param $tooltip The tooltip to display when the cursor hovers over the icon.
            * @param $messageType The type of the message to fetch the icon for.
            */
            public static TrTextContentWithIcon ($text: string, $iconName: string) : UnityEngine.GUIContent
            /** Gets the GUIContent from Unity built-in resources with the given information or creates a GUIContent for a GUI element.
            The text and the tooltip are localized and loaded with an icon.
            Typically, the icon from `AssetsEditor Default ResourcesIcons` is fetched using the icon name. Only the name of the icon, without the .png extension is needed.
            If a message type is specified instead of an icon or an icon name, the GUIContent.image is the icon associated with that message type.
            * @param $text The text associated with the GUIContent.text.
            * @param $icon The icon associated with the GUIContent.image.
            * @param $iconName The name of the icon.
            * @param $tooltip The tooltip to display when the cursor hovers over the icon.
            * @param $messageType The type of the message to fetch the icon for.
            */
            public static TrTextContentWithIcon ($text: string, $tooltip: string, $iconName: string) : UnityEngine.GUIContent
            /** Gets the GUIContent from Unity built-in resources with the given information or creates a GUIContent for a GUI element.
            The text and the tooltip are localized and loaded with an icon.
            Typically, the icon from `AssetsEditor Default ResourcesIcons` is fetched using the icon name. Only the name of the icon, without the .png extension is needed.
            If a message type is specified instead of an icon or an icon name, the GUIContent.image is the icon associated with that message type.
            * @param $text The text associated with the GUIContent.text.
            * @param $icon The icon associated with the GUIContent.image.
            * @param $iconName The name of the icon.
            * @param $tooltip The tooltip to display when the cursor hovers over the icon.
            * @param $messageType The type of the message to fetch the icon for.
            */
            public static TrTextContentWithIcon ($text: string, $tooltip: string, $icon: UnityEngine.Texture) : UnityEngine.GUIContent
            /** Gets the GUIContent from Unity built-in resources with the given information or creates a GUIContent for a GUI element.
            The text and the tooltip are localized and loaded with an icon.
            Typically, the icon from `AssetsEditor Default ResourcesIcons` is fetched using the icon name. Only the name of the icon, without the .png extension is needed.
            If a message type is specified instead of an icon or an icon name, the GUIContent.image is the icon associated with that message type.
            * @param $text The text associated with the GUIContent.text.
            * @param $icon The icon associated with the GUIContent.image.
            * @param $iconName The name of the icon.
            * @param $tooltip The tooltip to display when the cursor hovers over the icon.
            * @param $messageType The type of the message to fetch the icon for.
            */
            public static TrTextContentWithIcon ($text: string, $tooltip: string, $messageType: UnityEditor.MessageType) : UnityEngine.GUIContent
            /** Gets the GUIContent from Unity built-in resources with the given information or creates a GUIContent for a GUI element.
            The text and the tooltip are localized and loaded with an icon.
            Typically, the icon from `AssetsEditor Default ResourcesIcons` is fetched using the icon name. Only the name of the icon, without the .png extension is needed.
            If a message type is specified instead of an icon or an icon name, the GUIContent.image is the icon associated with that message type.
            * @param $text The text associated with the GUIContent.text.
            * @param $icon The icon associated with the GUIContent.image.
            * @param $iconName The name of the icon.
            * @param $tooltip The tooltip to display when the cursor hovers over the icon.
            * @param $messageType The type of the message to fetch the icon for.
            */
            public static TrTextContentWithIcon ($text: string, $messageType: UnityEditor.MessageType) : UnityEngine.GUIContent
            /** Gets the GUIContent from Unity built-in resources with the given information or creates a GUIContent for a GUI element.
            The icon is loaded with a localized tooltip. 
            Typically, the icon from `AssetsEditor Default ResourcesIcons` is fetched using the icon name. Only the name of the icon, without the .png extension is needed.
            * @param $iconName The name of the icon.
            * @param $tooltip The tooltip to display when the cursor hovers over the icon.
            * @param $icon The icon to associate with the GUIContent.image.
            */
            public static TrIconContent ($iconName: string, $tooltip?: string) : UnityEngine.GUIContent
            /** Gets the GUIContent from Unity built-in resources with the given information or creates a GUIContent for a GUI element.
            The icon is loaded with a localized tooltip. 
            Typically, the icon from `AssetsEditor Default ResourcesIcons` is fetched using the icon name. Only the name of the icon, without the .png extension is needed.
            * @param $iconName The name of the icon.
            * @param $tooltip The tooltip to display when the cursor hovers over the icon.
            * @param $icon The icon to associate with the GUIContent.image.
            */
            public static TrIconContent ($icon: UnityEngine.Texture, $tooltip?: string) : UnityEngine.GUIContent
            public static TrTempContent ($t: string) : UnityEngine.GUIContent
            public static TrTempContent ($texts: System.Array$1<string>) : System.Array$1<UnityEngine.GUIContent>
            public static TrTempContent ($texts: System.Array$1<string>, $tooltips: System.Array$1<string>) : System.Array$1<UnityEngine.GUIContent>
            /** Fetch the GUIContent from the Unity builtin resources with the given name.
            * @param $name Name of the desired icon.
            * @param $text Tooltip for hovering over the icon.
            */
            public static IconContent ($name: string) : UnityEngine.GUIContent
            /** Fetch the GUIContent from the Unity builtin resources with the given name.
            * @param $name Name of the desired icon.
            * @param $text Tooltip for hovering over the icon.
            */
            public static IconContent ($name: string, $text: string) : UnityEngine.GUIContent
            /** Return a GUIContent object with the name and icon of an Object.
            */
            public static ObjectContent ($obj: UnityEngine.Object, $type: System.Type) : UnityEngine.GUIContent
            /** Does a given class have per-object thumbnails?
            */
            public static HasObjectThumbnail ($objType: System.Type) : boolean
            /** Get the size that has been set using SetIconSize.
            */
            public static GetIconSize () : UnityEngine.Vector2
            /** Get one of the built-in GUI skins, which can be the game view, inspector or Scene view skin as chosen by the parameter.
            */
            public static GetBuiltinSkin ($skin: UnityEditor.EditorSkin) : UnityEngine.GUISkin
            /** Load a required built-in resource.
            */
            public static LoadRequired ($path: string) : UnityEngine.Object
            /** Load a built-in resource.
            */
            public static Load ($path: string) : UnityEngine.Object
            /** Ping an object in the Scene like clicking it in an inspector.
            * @param $obj The object to be pinged.
            */
            public static PingObject ($obj: UnityEngine.Object) : void
            /** Ping an object in the Scene like clicking it in an inspector.
            * @param $obj The object to be pinged.
            */
            public static PingObject ($targetInstanceID: number) : void
            /** Creates an event that can be sent to another window.
            * @param $commandName The command to be sent.
            */
            public static CommandEvent ($commandName: string) : UnityEngine.Event
            /** Draw a color swatch.
            * @param $position The rectangle to draw the color swatch within.
            * @param $color The color to draw.
            */
            public static DrawColorSwatch ($position: UnityEngine.Rect, $color: UnityEngine.Color) : void
            /** Draw a curve swatch.
            * @param $position The rectangle to draw the color swatch within.
            * @param $curve The curve to draw.
            * @param $property The curve to draw as a SerializedProperty.
            * @param $color The color to draw the curve with.
            * @param $bgColor The color to draw the background with.
            * @param $curveRanges Optional parameter to specify the range of the curve which should be included in swatch.
            */
            public static DrawCurveSwatch ($position: UnityEngine.Rect, $curve: UnityEngine.AnimationCurve, $property: UnityEditor.SerializedProperty, $color: UnityEngine.Color, $bgColor: UnityEngine.Color) : void
            public static DrawCurveSwatch ($position: UnityEngine.Rect, $curve: UnityEngine.AnimationCurve, $property: UnityEditor.SerializedProperty, $color: UnityEngine.Color, $bgColor: UnityEngine.Color, $topFillColor: UnityEngine.Color, $bottomFillColor: UnityEngine.Color) : void
            public static DrawCurveSwatch ($position: UnityEngine.Rect, $curve: UnityEngine.AnimationCurve, $property: UnityEditor.SerializedProperty, $color: UnityEngine.Color, $bgColor: UnityEngine.Color, $topFillColor: UnityEngine.Color, $bottomFillColor: UnityEngine.Color, $curveRanges: UnityEngine.Rect) : void
            /** Draw a curve swatch.
            * @param $position The rectangle to draw the color swatch within.
            * @param $curve The curve to draw.
            * @param $property The curve to draw as a SerializedProperty.
            * @param $color The color to draw the curve with.
            * @param $bgColor The color to draw the background with.
            * @param $curveRanges Optional parameter to specify the range of the curve which should be included in swatch.
            */
            public static DrawCurveSwatch ($position: UnityEngine.Rect, $curve: UnityEngine.AnimationCurve, $property: UnityEditor.SerializedProperty, $color: UnityEngine.Color, $bgColor: UnityEngine.Color, $curveRanges: UnityEngine.Rect) : void
            /** Draw swatch with a filled region between two SerializedProperty curves.
            */
            public static DrawRegionSwatch ($position: UnityEngine.Rect, $property: UnityEditor.SerializedProperty, $property2: UnityEditor.SerializedProperty, $color: UnityEngine.Color, $bgColor: UnityEngine.Color, $curveRanges: UnityEngine.Rect) : void
            /** Draw swatch with a filled region between two curves.
            */
            public static DrawRegionSwatch ($position: UnityEngine.Rect, $curve: UnityEngine.AnimationCurve, $curve2: UnityEngine.AnimationCurve, $color: UnityEngine.Color, $bgColor: UnityEngine.Color, $curveRanges: UnityEngine.Rect) : void
            /** Add a custom mouse pointer to a control.
            * @param $position The rectangle the control should be shown within.
            * @param $mouse The mouse cursor to use.
            * @param $controlID ID of a target control.
            */
            public static AddCursorRect ($position: UnityEngine.Rect, $mouse: UnityEditor.MouseCursor) : void
            /** Add a custom mouse pointer to a control.
            * @param $position The rectangle the control should be shown within.
            * @param $mouse The mouse cursor to use.
            * @param $controlID ID of a target control.
            */
            public static AddCursorRect ($position: UnityEngine.Rect, $mouse: UnityEditor.MouseCursor, $controlID: number) : void
            /** The object currently selected in the object picker.
            */
            public static GetObjectPickerObject () : UnityEngine.Object
            /** The controlID of the currently showing object picker.
            */
            public static GetObjectPickerControlID () : number
            public constructor ()
        }
        /** SessionState is a Key-Value Store intended for storing and retrieving Editor session state that should survive assembly reloading.
        */
        class SessionState extends System.Object
        {
            protected [__keep_incompatibility]: never;
            /** Store a Boolean value.
            */
            public static SetBool ($key: string, $value: boolean) : void
            /** Retrieve a Boolean value.
            */
            public static GetBool ($key: string, $defaultValue: boolean) : boolean
            /** Erase a Boolean entry in the key-value store.
            */
            public static EraseBool ($key: string) : void
            /** Store a Float value.
            */
            public static SetFloat ($key: string, $value: number) : void
            /** Retrieve a Float value.
            */
            public static GetFloat ($key: string, $defaultValue: number) : number
            /** Erase a Float entry in the key-value store.
            */
            public static EraseFloat ($key: string) : void
            /** Store an Integer value.
            */
            public static SetInt ($key: string, $value: number) : void
            /** Retrieve an Integer value.
            */
            public static GetInt ($key: string, $defaultValue: number) : number
            /** Erase an Integer entry in the key-value store.
            */
            public static EraseInt ($key: string) : void
            /** Store a String value.
            */
            public static SetString ($key: string, $value: string) : void
            /** Retrieve a String value.
            */
            public static GetString ($key: string, $defaultValue: string) : string
            /** Erase a String entry in the key-value store.
            */
            public static EraseString ($key: string) : void
            /** Store a Vector3.
            */
            public static SetVector3 ($key: string, $value: UnityEngine.Vector3) : void
            /** Retrieve a Vector3.
            */
            public static GetVector3 ($key: string, $defaultValue: UnityEngine.Vector3) : UnityEngine.Vector3
            /** Erase a Vector3 entry in the key-value store.
            */
            public static EraseVector3 ($key: string) : void
            /** Erase an Integer array entry in the key-value store.
            */
            public static EraseIntArray ($key: string) : void
            /** Store an Integer array.
            */
            public static SetIntArray ($key: string, $value: System.Array$1<number>) : void
            /** Retrieve an Integer array.
            */
            public static GetIntArray ($key: string, $defaultValue: System.Array$1<number>) : System.Array$1<number>
            public constructor ()
        }
        /** Custom 3D GUI controls and drawing in the Scene view.
        */
        class Handles extends System.Object
        {
            protected [__keep_incompatibility]: never;
            /** Are handles lit?
            */
            public static get lighting(): boolean;
            public static set lighting(value: boolean);
            /** Sets the color of handles. Color is a persistent state and affects any handles drawn after it is set. Use Handles.DrawingScope to set the color for a block of handles without affecting the color of other handles.
            */
            public static get color(): UnityEngine.Color;
            public static set color(value: UnityEngine.Color);
            /** zTest of the handles.
            */
            public static get zTest(): UnityEngine.Rendering.CompareFunction;
            public static set zTest(value: UnityEngine.Rendering.CompareFunction);
            /** Matrix for all handle operations. This is used by functions in HandleUtility and Handles to transform controls.
            */
            public static get matrix(): UnityEngine.Matrix4x4;
            public static set matrix(value: UnityEngine.Matrix4x4);
            /** The inverse of the matrix for all handle operations.
            */
            public static get inverseMatrix(): UnityEngine.Matrix4x4;
            /** Color to use for handles that manipulates the X coordinate of something.
            */
            public static get xAxisColor(): UnityEngine.Color;
            /** Color to use for handles that manipulates the Y coordinate of something.
            */
            public static get yAxisColor(): UnityEngine.Color;
            /** Color to use for handles that manipulates the Z coordinate of something.
            */
            public static get zAxisColor(): UnityEngine.Color;
            /** Color to use for handles that represent the center of something.
            */
            public static get centerColor(): UnityEngine.Color;
            /** Color to use for the currently active handle.
            */
            public static get selectedColor(): UnityEngine.Color;
            /** Color to use to highlight an unselected handle currently under the mouse pointer.
            */
            public static get preselectionColor(): UnityEngine.Color;
            /** Soft color to use for for general things.
            */
            public static get secondaryColor(): UnityEngine.Color;
            /** The default color of objects in an Edit Mode.
            */
            public static get elementColor(): UnityEngine.Color;
            /** Color to use to highlight an unselected object currently under the mouse pointer in a custom Edit Mode.
            */
            public static get elementPreselectionColor(): UnityEngine.Color;
            /** The color of selected objects in a Edit Mode.
            */
            public static get elementSelectionColor(): UnityEngine.Color;
            /** Color to use for the Unity UI's padding visualization.
            */
            public static get UIColliderHandleColor(): UnityEngine.Color;
            /** Retrieves the user preference setting that controls the thickness of tool handle lines. (Read Only)
            */
            public static get lineThickness(): number;
            /** Gets or sets the camera that is currently rendering.
            */
            public get currentCamera(): UnityEngine.Camera;
            public set currentCamera(value: UnityEngine.Camera);
            public static DoPositionHandle ($position: UnityEngine.Vector3, $rotation: UnityEngine.Quaternion) : UnityEngine.Vector3
            public static DoRotationHandle ($rotation: UnityEngine.Quaternion, $position: UnityEngine.Vector3) : UnityEngine.Quaternion
            public static DoScaleHandle ($scale: UnityEngine.Vector3, $position: UnityEngine.Vector3, $rotation: UnityEngine.Quaternion, $size: number) : UnityEngine.Vector3
            /** Creates a transform handle.
            * @param $position Position of the handle.
            * @param $rotation The orientation of the handle in 3D space.
            * @param $scale Scale value to modify.
            * @param $uniformScale Uniform scale value to modify.
            */
            public static TransformHandle ($position: $Ref<UnityEngine.Vector3>, $rotation: $Ref<UnityEngine.Quaternion>, $scale: $Ref<UnityEngine.Vector3>) : void
            public static TransformHandle ($position: $Ref<UnityEngine.Vector3>, $rotation: UnityEngine.Quaternion, $scale: $Ref<UnityEngine.Vector3>) : void
            public static TransformHandle ($position: UnityEngine.Vector3, $rotation: $Ref<UnityEngine.Quaternion>, $scale: $Ref<UnityEngine.Vector3>) : void
            /** Creates a transform handle.
            * @param $position Position of the handle.
            * @param $rotation The orientation of the handle in 3D space.
            * @param $scale Scale value to modify.
            * @param $uniformScale Uniform scale value to modify.
            */
            public static TransformHandle ($position: $Ref<UnityEngine.Vector3>, $rotation: $Ref<UnityEngine.Quaternion>, $uniformScale: $Ref<number>) : void
            public static TransformHandle ($position: $Ref<UnityEngine.Vector3>, $rotation: UnityEngine.Quaternion, $uniformScale: $Ref<number>) : void
            public static TransformHandle ($position: UnityEngine.Vector3, $rotation: $Ref<UnityEngine.Quaternion>, $uniformScale: $Ref<number>) : void
            /** Creates a transform handle.
            * @param $position Position of the handle.
            * @param $rotation The orientation of the handle in 3D space.
            * @param $scale Scale value to modify.
            * @param $uniformScale Uniform scale value to modify.
            */
            public static TransformHandle ($position: $Ref<UnityEngine.Vector3>, $rotation: $Ref<UnityEngine.Quaternion>) : void
            /** Draw a line going through the list of points.
            */
            public static DrawPolyLine (...points: UnityEngine.Vector3[]) : void
            /** Draws a line from p1 to p2.
            * @param $p1 The position of the first line's end point in world space.
            * @param $p2 The position of the second line's end point in world space.
            * @param $thickness Line thickness in UI points (zero thickness draws single-pixel line).
            */
            public static DrawLine ($p1: UnityEngine.Vector3, $p2: UnityEngine.Vector3) : void
            /** Draws a line from p1 to p2.
            * @param $p1 The position of the first line's end point in world space.
            * @param $p2 The position of the second line's end point in world space.
            * @param $thickness Line thickness in UI points (zero thickness draws single-pixel line).
            */
            public static DrawLine ($p1: UnityEngine.Vector3, $p2: UnityEngine.Vector3, $thickness: number) : void
            /** Draw a list of line segments.
            * @param $lineSegments A list of pairs of points that represent the start and end of line segments.
            */
            public static DrawLines ($lineSegments: System.Array$1<UnityEngine.Vector3>) : void
            /** Draw a list of indexed line segments.
            * @param $points A list of points.
            * @param $segmentIndices A list of pairs of indices to the start and end points of the line segments.
            */
            public static DrawLines ($points: System.Array$1<UnityEngine.Vector3>, $segmentIndices: System.Array$1<number>) : void
            /** Draw a dotted line from p1 to p2.
            * @param $p1 The start point.
            * @param $p2 The end point.
            * @param $screenSpaceSize The size in pixels for the lengths of the line segments and the gaps between them.
            */
            public static DrawDottedLine ($p1: UnityEngine.Vector3, $p2: UnityEngine.Vector3, $screenSpaceSize: number) : void
            /** Draw a list of dotted line segments.
            * @param $lineSegments A list of pairs of points that represent the start and end of line segments.
            * @param $screenSpaceSize The size in pixels for the lengths of the line segments and the gaps between them.
            */
            public static DrawDottedLines ($lineSegments: System.Array$1<UnityEngine.Vector3>, $screenSpaceSize: number) : void
            /** Draw a list of indexed dotted line segments.
            * @param $points A list of points.
            * @param $segmentIndices A list of pairs of indices to the start and end points of the line segments.
            * @param $screenSpaceSize The size in pixels for the lengths of the line segments and the gaps between them.
            */
            public static DrawDottedLines ($points: System.Array$1<UnityEngine.Vector3>, $segmentIndices: System.Array$1<number>, $screenSpaceSize: number) : void
            /** Draw a wireframe box with center and size.
            */
            public static DrawWireCube ($center: UnityEngine.Vector3, $size: UnityEngine.Vector3) : void
            /** Determines whether or not to draw Gizmos.
            */
            public static ShouldRenderGizmos () : boolean
            public static DrawGizmos ($camera: UnityEngine.Camera) : void
            /** Make a 3D slider that moves along one axis.
            * @param $position The position of the current point in the space of Handles.matrix.
            * @param $direction The direction axis of the slider in the space of Handles.matrix.
            * @param $size The size of the handle in the space of Handles.matrix. Use HandleUtility.GetHandleSize if you want a constant screen-space size.
            * @param $snap The snap increment. See Handles.SnapValue.
            * @param $capFunction The function to call for doing the actual drawing. By default it is Handles.ArrowHandleCap, but any function that has the same signature can be used.
            * @returns The new value modified by the user's interaction with the handle. If the user has not moved the handle, it will return the position value passed into the function. 
            */
            public static Slider ($position: UnityEngine.Vector3, $direction: UnityEngine.Vector3) : UnityEngine.Vector3
            public static Slider ($position: UnityEngine.Vector3, $direction: UnityEngine.Vector3, $size: number, $capFunction: UnityEditor.Handles.CapFunction, $snap: number) : UnityEngine.Vector3
            public static Slider ($controlID: number, $position: UnityEngine.Vector3, $direction: UnityEngine.Vector3, $size: number, $capFunction: UnityEditor.Handles.CapFunction, $snap: number) : UnityEngine.Vector3
            public static Slider ($controlID: number, $position: UnityEngine.Vector3, $offset: UnityEngine.Vector3, $direction: UnityEngine.Vector3, $size: number, $capFunction: UnityEditor.Handles.CapFunction, $snap: number) : UnityEngine.Vector3
            public static FreeMoveHandle ($position: UnityEngine.Vector3, $size: number, $snap: UnityEngine.Vector3, $capFunction: UnityEditor.Handles.CapFunction) : UnityEngine.Vector3
            public static FreeMoveHandle ($controlID: number, $position: UnityEngine.Vector3, $size: number, $snap: UnityEngine.Vector3, $capFunction: UnityEditor.Handles.CapFunction) : UnityEngine.Vector3
            public static ScaleValueHandle ($value: number, $position: UnityEngine.Vector3, $rotation: UnityEngine.Quaternion, $size: number, $capFunction: UnityEditor.Handles.CapFunction, $snap: number) : number
            public static ScaleValueHandle ($controlID: number, $value: number, $position: UnityEngine.Vector3, $rotation: UnityEngine.Quaternion, $size: number, $capFunction: UnityEditor.Handles.CapFunction, $snap: number) : number
            public static Button ($position: UnityEngine.Vector3, $direction: UnityEngine.Quaternion, $size: number, $pickSize: number, $capFunction: UnityEditor.Handles.CapFunction) : boolean
            /** Draw a cube handle. Pass this into handle functions.
            * @param $controlID The control ID for the handle.
            * @param $position The position of the handle in the space of Handles.matrix.
            * @param $rotation The rotation of the handle in the space of Handles.matrix.
            * @param $size The size of the handle in the space of Handles.matrix. Use HandleUtility.GetHandleSize if you want a constant screen-space size.
            * @param $eventType Event type for the handle to act upon. By design it handles EventType.Layout and EventType.Repaint events.
            */
            public static CubeHandleCap ($controlID: number, $position: UnityEngine.Vector3, $rotation: UnityEngine.Quaternion, $size: number, $eventType: UnityEngine.EventType) : void
            /** Draw a sphere handle. Pass this into handle functions.
            * @param $controlID The control ID for the handle.
            * @param $position The position of the handle in the space of Handles.matrix.
            * @param $rotation The rotation of the handle in the space of Handles.matrix.
            * @param $eventType Event type for the handle to act upon. By design it handles EventType.Layout and EventType.Repaint events.
            * @param $size The size of the handle in the space of Handles.matrix. Use HandleUtility.GetHandleSize if you want a constant screen-space size.
            */
            public static SphereHandleCap ($controlID: number, $position: UnityEngine.Vector3, $rotation: UnityEngine.Quaternion, $size: number, $eventType: UnityEngine.EventType) : void
            /** Draw a cone handle. Pass this into handle functions.
            * @param $controlID The control ID for the handle.
            * @param $position The position of the handle in the space of Handles.matrix.
            * @param $rotation The rotation of the handle in the space of Handles.matrix.
            * @param $size The size of the handle in the space of Handles.matrix. Use HandleUtility.GetHandleSize if you want a constant screen-space size.
            * @param $eventType Event type for the handle to act upon. By design it handles EventType.Layout and EventType.Repaint events.
            */
            public static ConeHandleCap ($controlID: number, $position: UnityEngine.Vector3, $rotation: UnityEngine.Quaternion, $size: number, $eventType: UnityEngine.EventType) : void
            /** Draw a cylinder handle. Pass this into handle functions.
            * @param $controlID The control ID for the handle.
            * @param $position The position of the handle in the space of Handles.matrix.
            * @param $rotation The rotation of the handle in the space of Handles.matrix.
            * @param $size The size of the handle in the space of Handles.matrix. Use HandleUtility.GetHandleSize if you want a constant screen-space size.
            * @param $eventType Event type for the handle to act upon. By design it handles EventType.Layout and EventType.Repaint events.
            */
            public static CylinderHandleCap ($controlID: number, $position: UnityEngine.Vector3, $rotation: UnityEngine.Quaternion, $size: number, $eventType: UnityEngine.EventType) : void
            /** Draw a rectangle handle. Pass this into handle functions.
            * @param $controlID The control ID for the handle.
            * @param $position The position of the handle in the space of Handles.matrix.
            * @param $rotation The rotation of the handle in the space of Handles.matrix.
            * @param $size The size of the handle in the space of Handles.matrix. Use HandleUtility.GetHandleSize if you want a constant screen-space size.
            * @param $eventType Event type for the handle to act upon. By design it handles EventType.Layout and EventType.Repaint events.
            */
            public static RectangleHandleCap ($controlID: number, $position: UnityEngine.Vector3, $rotation: UnityEngine.Quaternion, $size: number, $eventType: UnityEngine.EventType) : void
            /** Draw a dot handle. Pass this into handle functions.
            * @param $controlID The control ID for the handle.
            * @param $position The position of the handle in the space of Handles.matrix.
            * @param $rotation The rotation of the handle in the space of Handles.matrix.
            * @param $size The size of the handle in the space of Handles.matrix. Use HandleUtility.GetHandleSize if you want a constant screen-space size.
            * @param $eventType Event type for the handle to act upon. By design it handles EventType.Layout and EventType.Repaint events.
            */
            public static DotHandleCap ($controlID: number, $position: UnityEngine.Vector3, $rotation: UnityEngine.Quaternion, $size: number, $eventType: UnityEngine.EventType) : void
            /** Draw a circle handle. Pass this into handle functions.
            * @param $controlID The control ID for the handle.
            * @param $position The position of the handle in the space of Handles.matrix.
            * @param $rotation The rotation of the handle in the space of Handles.matrix.
            * @param $size The size of the handle in the space of Handles.matrix. Use HandleUtility.GetHandleSize if you want a constant screen-space size.
            * @param $eventType Event type for the handle to act upon. By design it handles EventType.Layout and EventType.Repaint events.
            */
            public static CircleHandleCap ($controlID: number, $position: UnityEngine.Vector3, $rotation: UnityEngine.Quaternion, $size: number, $eventType: UnityEngine.EventType) : void
            /** Draw an arrow like those used by the move tool.
            * @param $controlID The control ID for the handle.
            * @param $position The position of the handle in the space of Handles.matrix.
            * @param $rotation The rotation of the handle in the space of Handles.matrix.
            * @param $size The size of the handle in the space of Handles.matrix. Use HandleUtility.GetHandleSize if you want a constant screen-space size.
            * @param $eventType Event type for the handle to act upon. By design it handles EventType.Layout and EventType.Repaint events.
            */
            public static ArrowHandleCap ($controlID: number, $position: UnityEngine.Vector3, $rotation: UnityEngine.Quaternion, $size: number, $eventType: UnityEngine.EventType) : void
            /** Creates a square at a position and rotation with a specified size.
            * @param $position The position of the handle in the space of Handles.matrix.
            * @param $rotation The rotation of the handle in the space of Handles.matrix.
            * @param $size The size of the handle in the space of Handles.matrix. Use HandleUtility.GetHandleSize if you want a constant screen space size.
            * @param $controlID The control ID for the handle.
            * @param $eventType The type of event for the handle to act on. You can only use this function with EventType.Repaint.
            */
            public static DrawSelectionFrame ($controlID: number, $position: UnityEngine.Vector3, $rotation: UnityEngine.Quaternion, $size: number, $eventType: UnityEngine.EventType) : void
            /** Make a position handle.
            * @param $position The center of the handle in 3D space.
            * @param $rotation The orientation of the handle in 3D space.
            * @param $ids The control IDs of the handles. Use PositionHandleIds.default.
            * @returns The new value modified by the user's interaction with the handle. If the user has not moved the handle, it will return the same value as you passed into the function. 
            */
            public static PositionHandle ($position: UnityEngine.Vector3, $rotation: UnityEngine.Quaternion) : UnityEngine.Vector3
            public static PositionHandle ($ids: UnityEditor.Handles.PositionHandleIds, $position: UnityEngine.Vector3, $rotation: UnityEngine.Quaternion) : UnityEngine.Vector3
            /** Make a Scene view rotation handle.
            * @param $rotation The orientation of the handle in 3D space.
            * @param $position The center of the handle in 3D space.
            * @param $ids The control IDs of the handles. Use RotationHandleIds.default.
            * @returns The new rotation value modified by the user's interaction with the handle. If the user has not moved the handle, it will return the same value as you passed into the function. 
            */
            public static RotationHandle ($rotation: UnityEngine.Quaternion, $position: UnityEngine.Vector3) : UnityEngine.Quaternion
            public static RotationHandle ($ids: UnityEditor.Handles.RotationHandleIds, $rotation: UnityEngine.Quaternion, $position: UnityEngine.Vector3) : UnityEngine.Quaternion
            public static ScaleHandle ($scale: UnityEngine.Vector3, $position: UnityEngine.Vector3, $rotation: UnityEngine.Quaternion) : UnityEngine.Vector3
            /** Make a Scene view scale handle.
            * @param $scale Scale to modify.
            * @param $position The position of the handle.
            * @param $rotation The rotation of the handle.
            * @param $size Allows you to scale the size of the handle on-screen.
            * @returns The new value modified by the user's interaction with the handle. If the user has not moved the handle, it will return the same value as you passed into the function. 
            */
            public static ScaleHandle ($scale: UnityEngine.Vector3, $position: UnityEngine.Vector3, $rotation: UnityEngine.Quaternion, $size: number) : UnityEngine.Vector3
            /** Make a Scene view radius handle.
            * @param $rotation The orientation of the handle in 3D space.
            * @param $position The center of the handle in 3D space.
            * @param $radius Radius to modify.
            * @param $handlesOnly Whether to omit the circular outline of the radius and only draw the point handles.
            * @returns The new value modified by the user's interaction with the handle. If the user has not moved the handle, it will return the same value as you passed into the function.
            Note: Use HandleUtility.GetHandleSize where you might want to have constant screen-sized handles. 
            */
            public static RadiusHandle ($rotation: UnityEngine.Quaternion, $position: UnityEngine.Vector3, $radius: number, $handlesOnly: boolean) : number
            /** Make a Scene view radius handle.
            * @param $rotation The orientation of the handle in 3D space.
            * @param $position The center of the handle in 3D space.
            * @param $radius Radius to modify.
            * @param $handlesOnly Whether to omit the circular outline of the radius and only draw the point handles.
            * @returns The new value modified by the user's interaction with the handle. If the user has not moved the handle, it will return the same value as you passed into the function.
            Note: Use HandleUtility.GetHandleSize where you might want to have constant screen-sized handles. 
            */
            public static RadiusHandle ($rotation: UnityEngine.Quaternion, $position: UnityEngine.Vector3, $radius: number) : number
            public static Slider2D ($id: number, $handlePos: UnityEngine.Vector3, $offset: UnityEngine.Vector3, $handleDir: UnityEngine.Vector3, $slideDir1: UnityEngine.Vector3, $slideDir2: UnityEngine.Vector3, $handleSize: number, $capFunction: UnityEditor.Handles.CapFunction, $snap: UnityEngine.Vector2) : UnityEngine.Vector3
            public static Slider2D ($id: number, $handlePos: UnityEngine.Vector3, $offset: UnityEngine.Vector3, $handleDir: UnityEngine.Vector3, $slideDir1: UnityEngine.Vector3, $slideDir2: UnityEngine.Vector3, $handleSize: number, $capFunction: UnityEditor.Handles.CapFunction, $snap: UnityEngine.Vector2, $drawHelper: boolean) : UnityEngine.Vector3
            public static Slider2D ($handlePos: UnityEngine.Vector3, $handleDir: UnityEngine.Vector3, $slideDir1: UnityEngine.Vector3, $slideDir2: UnityEngine.Vector3, $handleSize: number, $capFunction: UnityEditor.Handles.CapFunction, $snap: UnityEngine.Vector2) : UnityEngine.Vector3
            public static Slider2D ($handlePos: UnityEngine.Vector3, $handleDir: UnityEngine.Vector3, $slideDir1: UnityEngine.Vector3, $slideDir2: UnityEngine.Vector3, $handleSize: number, $capFunction: UnityEditor.Handles.CapFunction, $snap: UnityEngine.Vector2, $drawHelper: boolean) : UnityEngine.Vector3
            public static Slider2D ($id: number, $handlePos: UnityEngine.Vector3, $handleDir: UnityEngine.Vector3, $slideDir1: UnityEngine.Vector3, $slideDir2: UnityEngine.Vector3, $handleSize: number, $capFunction: UnityEditor.Handles.CapFunction, $snap: UnityEngine.Vector2) : UnityEngine.Vector3
            public static Slider2D ($id: number, $handlePos: UnityEngine.Vector3, $handleDir: UnityEngine.Vector3, $slideDir1: UnityEngine.Vector3, $slideDir2: UnityEngine.Vector3, $handleSize: number, $capFunction: UnityEditor.Handles.CapFunction, $snap: UnityEngine.Vector2, $drawHelper: boolean) : UnityEngine.Vector3
            public static Slider2D ($handlePos: UnityEngine.Vector3, $handleDir: UnityEngine.Vector3, $slideDir1: UnityEngine.Vector3, $slideDir2: UnityEngine.Vector3, $handleSize: number, $capFunction: UnityEditor.Handles.CapFunction, $snap: number) : UnityEngine.Vector3
            public static Slider2D ($handlePos: UnityEngine.Vector3, $handleDir: UnityEngine.Vector3, $slideDir1: UnityEngine.Vector3, $slideDir2: UnityEngine.Vector3, $handleSize: number, $capFunction: UnityEditor.Handles.CapFunction, $snap: number, $drawHelper: boolean) : UnityEngine.Vector3
            /** Make an unconstrained rotation handle.
            * @param $id The control ID of the handle.
            * @param $rotation The orientation of the handle in 3D space.
            * @param $position The center of the handle in 3D space.
            * @param $size The size of the handle.
            Note: Use HandleUtility.GetHandleSize where you might want to have constant screen-sized handles.
            * @returns The new rotation value modified by the user's interaction with the handle. If the user has not moved the handle, it will return the same value as you passed into the function. 
            */
            public static FreeRotateHandle ($id: number, $rotation: UnityEngine.Quaternion, $position: UnityEngine.Vector3, $size: number) : UnityEngine.Quaternion
            /** Make an unconstrained rotation handle.
            * @param $id The control ID of the handle.
            * @param $rotation The orientation of the handle in 3D space.
            * @param $position The center of the handle in 3D space.
            * @param $size The size of the handle.
            Note: Use HandleUtility.GetHandleSize where you might want to have constant screen-sized handles.
            * @returns The new rotation value modified by the user's interaction with the handle. If the user has not moved the handle, it will return the same value as you passed into the function. 
            */
            public static FreeRotateHandle ($rotation: UnityEngine.Quaternion, $position: UnityEngine.Vector3, $size: number) : UnityEngine.Quaternion
            /** Make a directional scale slider.
            * @param $scale The value the user can modify.
            * @param $position The position of the handle in the space of Handles.matrix.
            * @param $direction The direction of the handle in the space of Handles.matrix.
            * @param $rotation The rotation of the handle in the space of Handles.matrix.
            * @param $size The size of the handle in the space of Handles.matrix. Use HandleUtility.GetHandleSize if you want a constant screen-space size.
            * @param $snap The snap increment. See Handles.SnapValue.
            * @param $id The control ID of the handle.
            * @returns The new value modified by the user's interaction with the handle. If the user has not moved the handle, it will return the same value as you passed into the function. 
            */
            public static ScaleSlider ($id: number, $scale: number, $position: UnityEngine.Vector3, $direction: UnityEngine.Vector3, $rotation: UnityEngine.Quaternion, $size: number, $snap: number) : number
            /** Make a directional scale slider.
            * @param $scale The value the user can modify.
            * @param $position The position of the handle in the space of Handles.matrix.
            * @param $direction The direction of the handle in the space of Handles.matrix.
            * @param $rotation The rotation of the handle in the space of Handles.matrix.
            * @param $size The size of the handle in the space of Handles.matrix. Use HandleUtility.GetHandleSize if you want a constant screen-space size.
            * @param $snap The snap increment. See Handles.SnapValue.
            * @param $id The control ID of the handle.
            * @returns The new value modified by the user's interaction with the handle. If the user has not moved the handle, it will return the same value as you passed into the function. 
            */
            public static ScaleSlider ($scale: number, $position: UnityEngine.Vector3, $direction: UnityEngine.Vector3, $rotation: UnityEngine.Quaternion, $size: number, $snap: number) : number
            /** Make a 3D disc that can be dragged with the mouse.
            * @param $id The control ID of the handle.
            * @param $rotation The rotation of the disc.
            * @param $position The center of the disc.
            * @param $axis The axis to rotate around.
            * @param $size The size of the disc in world space.
            * @param $cutoffPlane If true, only the front-facing half of the circle is draw / draggable. This is useful when you have many overlapping rotation axes (like in the default rotate tool) to avoid clutter.
            * @param $snap The grid size to snap to.
            * @returns The new rotation value modified by the user's interaction with the handle. If the user has not moved the handle, it will return the same value as you passed into the function. 
            */
            public static Disc ($id: number, $rotation: UnityEngine.Quaternion, $position: UnityEngine.Vector3, $axis: UnityEngine.Vector3, $size: number, $cutoffPlane: boolean, $snap: number) : UnityEngine.Quaternion
            /** Make a 3D disc that can be dragged with the mouse.
            * @param $id The control ID of the handle.
            * @param $rotation The rotation of the disc.
            * @param $position The center of the disc.
            * @param $axis The axis to rotate around.
            * @param $size The size of the disc in world space.
            * @param $cutoffPlane If true, only the front-facing half of the circle is draw / draggable. This is useful when you have many overlapping rotation axes (like in the default rotate tool) to avoid clutter.
            * @param $snap The grid size to snap to.
            * @returns The new rotation value modified by the user's interaction with the handle. If the user has not moved the handle, it will return the same value as you passed into the function. 
            */
            public static Disc ($rotation: UnityEngine.Quaternion, $position: UnityEngine.Vector3, $axis: UnityEngine.Vector3, $size: number, $cutoffPlane: boolean, $snap: number) : UnityEngine.Quaternion
            /** Rounds value to the closest multiple of snap if snapping is active. Note that snap can only be positive.
            * @param $value The value to snap.
            * @param $snap The increment to snap to.
            * @returns If snapping is active, rounds value to the closest multiple of snap (snap can only be positive). 
            */
            public static SnapValue ($value: number, $snap: number) : number
            /** Rounds value to the closest multiple of snap if snapping is active. Note that snap can only be positive.
            * @param $value The value to snap.
            * @param $snap The increment to snap to.
            * @returns If snapping is active, rounds value to the closest multiple of snap (snap can only be positive). 
            */
            public static SnapValue ($value: UnityEngine.Vector2, $snap: UnityEngine.Vector2) : UnityEngine.Vector2
            /** Rounds value to the closest multiple of snap if snapping is active. Note that snap can only be positive.
            * @param $value The value to snap.
            * @param $snap The increment to snap to.
            * @returns If snapping is active, rounds value to the closest multiple of snap (snap can only be positive). 
            */
            public static SnapValue ($value: UnityEngine.Vector3, $snap: UnityEngine.Vector3) : UnityEngine.Vector3
            /** Rounds each Transform.position or Vector3 to the closest multiple of EditorSnapSettings.gridSize.
            * @param $transforms The transforms to snap.
            * @param $positions The positions to snap.
            * @param $axis The axes on which to apply snapping.
            */
            public static SnapToGrid ($transforms: System.Array$1<UnityEngine.Transform>, $axis?: UnityEngine.SnapAxis) : void
            /** Rounds each Transform.position or Vector3 to the closest multiple of EditorSnapSettings.gridSize.
            * @param $transforms The transforms to snap.
            * @param $positions The positions to snap.
            * @param $axis The axes on which to apply snapping.
            */
            public static SnapToGrid ($positions: System.Array$1<UnityEngine.Vector3>, $axis?: UnityEngine.SnapAxis) : void
            public static SelectionFrame ($controlID: number, $position: UnityEngine.Vector3, $rotation: UnityEngine.Quaternion, $size: number) : void
            /** Draw anti-aliased line specified with point array and width.
            * @param $lineTex The AA texture used for rendering.
            * @param $width The width of the line.
            * @param $points List of points to build the line from.
            * @param $colors The colors to apply to each point. Must match the length of the points array or actualNumberOfPoints, whichever is lower and greater than zero.
            * @param $actualNumberOfPoints The total number of vertices to draw of the points array. Use this to keep a reusable buffer of point values without the need to resize frequently.
            */
            public static DrawAAPolyLine ($colors: System.Array$1<UnityEngine.Color>, $points: System.Array$1<UnityEngine.Vector3>) : void
            /** Draw anti-aliased line specified with point array and width.
            * @param $lineTex The AA texture used for rendering.
            * @param $width The width of the line.
            * @param $points List of points to build the line from.
            * @param $colors The colors to apply to each point. Must match the length of the points array or actualNumberOfPoints, whichever is lower and greater than zero.
            * @param $actualNumberOfPoints The total number of vertices to draw of the points array. Use this to keep a reusable buffer of point values without the need to resize frequently.
            */
            public static DrawAAPolyLine ($width: number, $colors: System.Array$1<UnityEngine.Color>, $points: System.Array$1<UnityEngine.Vector3>) : void
            /** Draw anti-aliased line specified with point array and width.
            * @param $lineTex The AA texture used for rendering.
            * @param $width The width of the line.
            * @param $points List of points to build the line from.
            * @param $colors The colors to apply to each point. Must match the length of the points array or actualNumberOfPoints, whichever is lower and greater than zero.
            * @param $actualNumberOfPoints The total number of vertices to draw of the points array. Use this to keep a reusable buffer of point values without the need to resize frequently.
            */
            public static DrawAAPolyLine (...points: UnityEngine.Vector3[]) : void
            /** Draw anti-aliased line specified with point array and width.
            * @param $lineTex The AA texture used for rendering.
            * @param $width The width of the line.
            * @param $points List of points to build the line from.
            * @param $colors The colors to apply to each point. Must match the length of the points array or actualNumberOfPoints, whichever is lower and greater than zero.
            * @param $actualNumberOfPoints The total number of vertices to draw of the points array. Use this to keep a reusable buffer of point values without the need to resize frequently.
            */
            public static DrawAAPolyLine ($width: number, ...points: UnityEngine.Vector3[]) : void
            /** Draw anti-aliased line specified with point array and width.
            * @param $lineTex The AA texture used for rendering.
            * @param $width The width of the line.
            * @param $points List of points to build the line from.
            * @param $colors The colors to apply to each point. Must match the length of the points array or actualNumberOfPoints, whichever is lower and greater than zero.
            * @param $actualNumberOfPoints The total number of vertices to draw of the points array. Use this to keep a reusable buffer of point values without the need to resize frequently.
            */
            public static DrawAAPolyLine ($lineTex: UnityEngine.Texture2D, ...points: UnityEngine.Vector3[]) : void
            /** Draw anti-aliased line specified with point array and width.
            * @param $lineTex The AA texture used for rendering.
            * @param $width The width of the line.
            * @param $points List of points to build the line from.
            * @param $colors The colors to apply to each point. Must match the length of the points array or actualNumberOfPoints, whichever is lower and greater than zero.
            * @param $actualNumberOfPoints The total number of vertices to draw of the points array. Use this to keep a reusable buffer of point values without the need to resize frequently.
            */
            public static DrawAAPolyLine ($width: number, $actualNumberOfPoints: number, ...points: UnityEngine.Vector3[]) : void
            /** Draw anti-aliased line specified with point array and width.
            * @param $lineTex The AA texture used for rendering.
            * @param $width The width of the line.
            * @param $points List of points to build the line from.
            * @param $colors The colors to apply to each point. Must match the length of the points array or actualNumberOfPoints, whichever is lower and greater than zero.
            * @param $actualNumberOfPoints The total number of vertices to draw of the points array. Use this to keep a reusable buffer of point values without the need to resize frequently.
            */
            public static DrawAAPolyLine ($lineTex: UnityEngine.Texture2D, $width: number, ...points: UnityEngine.Vector3[]) : void
            /** Draw anti-aliased convex polygon specified with point array.
            * @param $points List of points describing the convex polygon.
            */
            public static DrawAAConvexPolygon (...points: UnityEngine.Vector3[]) : void
            /** Draw textured bezier line through start and end points with the given tangents.
            * @param $startPosition The start point of the bezier line.
            * @param $endPosition The end point of the bezier line.
            * @param $startTangent The start tangent of the bezier line.
            * @param $endTangent The end tangent of the bezier line.
            * @param $color The color to use for the bezier line.
            * @param $texture The texture to use for drawing the bezier line.
            * @param $width The width of the bezier line.
            */
            public static DrawBezier ($startPosition: UnityEngine.Vector3, $endPosition: UnityEngine.Vector3, $startTangent: UnityEngine.Vector3, $endTangent: UnityEngine.Vector3, $color: UnityEngine.Color, $texture: UnityEngine.Texture2D, $width: number) : void
            /** Draws the outline of a flat disc in 3D space.
            * @param $center The center of the disc in world space.
            * @param $normal The normal of the disc in world space.
            * @param $radius The radius of the disc in world space units.
            * @param $thickness Line thickness in UI points (zero thickness draws single-pixel line).
            */
            public static DrawWireDisc ($center: UnityEngine.Vector3, $normal: UnityEngine.Vector3, $radius: number) : void
            /** Draws the outline of a flat disc in 3D space.
            * @param $center The center of the disc in world space.
            * @param $normal The normal of the disc in world space.
            * @param $radius The radius of the disc in world space units.
            * @param $thickness Line thickness in UI points (zero thickness draws single-pixel line).
            */
            public static DrawWireDisc ($center: UnityEngine.Vector3, $normal: UnityEngine.Vector3, $radius: number, $thickness: number) : void
            /** Draws a circular arc in 3D space.
            * @param $center The center of the circle in world space.
            * @param $normal The normal of the circle in world space.
            * @param $from The direction of the point on the circle circumference, relative to the center, where the arc begins.
            * @param $angle The angle of the arc, in degrees.
            * @param $radius The radius of the circle in world space units.
            * @param $thickness Line thickness in UI points (zero thickness draws single-pixel line).
            */
            public static DrawWireArc ($center: UnityEngine.Vector3, $normal: UnityEngine.Vector3, $from: UnityEngine.Vector3, $angle: number, $radius: number) : void
            /** Draws a circular arc in 3D space.
            * @param $center The center of the circle in world space.
            * @param $normal The normal of the circle in world space.
            * @param $from The direction of the point on the circle circumference, relative to the center, where the arc begins.
            * @param $angle The angle of the arc, in degrees.
            * @param $radius The radius of the circle in world space units.
            * @param $thickness Line thickness in UI points (zero thickness draws single-pixel line).
            */
            public static DrawWireArc ($center: UnityEngine.Vector3, $normal: UnityEngine.Vector3, $from: UnityEngine.Vector3, $angle: number, $radius: number, $thickness: number) : void
            public static DrawSolidRectangleWithOutline ($rectangle: UnityEngine.Rect, $faceColor: UnityEngine.Color, $outlineColor: UnityEngine.Color) : void
            /** Draw a solid outlined rectangle in 3D space.
            * @param $verts The 4 vertices of the rectangle in world coordinates.
            * @param $faceColor The color of the rectangle's face.
            * @param $outlineColor The outline color of the rectangle.
            */
            public static DrawSolidRectangleWithOutline ($verts: System.Array$1<UnityEngine.Vector3>, $faceColor: UnityEngine.Color, $outlineColor: UnityEngine.Color) : void
            /** Draw a solid flat disc in 3D space.
            * @param $center The center of the disc.
            * @param $normal The normal of the disc.
            * @param $radius The radius of the disc.
            Note: Use HandleUtility.GetHandleSize where you might want to have constant screen-sized handles.
            */
            public static DrawSolidDisc ($center: UnityEngine.Vector3, $normal: UnityEngine.Vector3, $radius: number) : void
            /** Draw a circular sector (pie piece) in 3D space.
            * @param $center The center of the circle.
            * @param $normal The normal of the circle.
            * @param $from The direction of the point on the circumference, relative to the center, where the sector begins.
            * @param $angle The angle of the sector, in degrees.
            * @param $radius The radius of the circle
            Note: Use HandleUtility.GetHandleSize where you might want to have constant screen-sized handles.
            */
            public static DrawSolidArc ($center: UnityEngine.Vector3, $normal: UnityEngine.Vector3, $from: UnityEngine.Vector3, $angle: number, $radius: number) : void
            /** Creates a text label for a handle that is positioned in 3D space.
            * @param $position The position in 3D space as seen from the current handle camera.
            * @param $text The text to display on the label.
            * @param $image The texture to display on the label.
            * @param $content The text, image, and tooltip for this label.
            * @param $style The style to use for this label. If left out, the label style from the current GUISkin is used.
            */
            public static Label ($position: UnityEngine.Vector3, $text: string) : void
            /** Creates a text label for a handle that is positioned in 3D space.
            * @param $position The position in 3D space as seen from the current handle camera.
            * @param $text The text to display on the label.
            * @param $image The texture to display on the label.
            * @param $content The text, image, and tooltip for this label.
            * @param $style The style to use for this label. If left out, the label style from the current GUISkin is used.
            */
            public static Label ($position: UnityEngine.Vector3, $image: UnityEngine.Texture) : void
            /** Creates a text label for a handle that is positioned in 3D space.
            * @param $position The position in 3D space as seen from the current handle camera.
            * @param $text The text to display on the label.
            * @param $image The texture to display on the label.
            * @param $content The text, image, and tooltip for this label.
            * @param $style The style to use for this label. If left out, the label style from the current GUISkin is used.
            */
            public static Label ($position: UnityEngine.Vector3, $content: UnityEngine.GUIContent) : void
            /** Creates a text label for a handle that is positioned in 3D space.
            * @param $position The position in 3D space as seen from the current handle camera.
            * @param $text The text to display on the label.
            * @param $image The texture to display on the label.
            * @param $content The text, image, and tooltip for this label.
            * @param $style The style to use for this label. If left out, the label style from the current GUISkin is used.
            */
            public static Label ($position: UnityEngine.Vector3, $text: string, $style: UnityEngine.GUIStyle) : void
            /** Creates a text label for a handle that is positioned in 3D space.
            * @param $position The position in 3D space as seen from the current handle camera.
            * @param $text The text to display on the label.
            * @param $image The texture to display on the label.
            * @param $content The text, image, and tooltip for this label.
            * @param $style The style to use for this label. If left out, the label style from the current GUISkin is used.
            */
            public static Label ($position: UnityEngine.Vector3, $content: UnityEngine.GUIContent, $style: UnityEngine.GUIStyle) : void
            /** Get the width and height of the main game view.
            */
            public static GetMainGameViewSize () : UnityEngine.Vector2
            /** Draws an outline around the specified GameObjects in the Scene View.
            * @param $objects The GameObjects to outline.
            * @param $parentNodeColor The color of the outline of the GameObjects provided explicitly in the objects parameter and the parentRenderers parameters. The alpha value controls the intensity of the outline.
            * @param $childNodeColor The color of the outline of the GameObjects which are children to the GameObjects in the objects parameter. The alpha value controls the intensity of the outline.
            * @param $color The color of the outline for the objects and renderers.
            * @param $parentRenderers The instance IDs of the first set of Renderers. If you provide GameObjects or Renderers as parameters, these Renderers belong to the GameObjects provided explicitly in the parameters.
            * @param $childRenderers The instance IDs of the second set of Renderers. If you provide GameObjects or Renderers as parameters, these Renderers belong to the child GameObjects of the objects provided in the parameters.
            * @param $fillOpacity The opacity of the Renderers within each outline.
            * @param $renderers The Renderers to outline.
            */
            public static DrawOutline ($parentRenderers: System.Array$1<number>, $childRenderers: System.Array$1<number>, $parentNodeColor: UnityEngine.Color, $childNodeColor: UnityEngine.Color, $fillOpacity?: number) : void
            /** Draws an outline around the specified GameObjects in the Scene View.
            * @param $objects The GameObjects to outline.
            * @param $parentNodeColor The color of the outline of the GameObjects provided explicitly in the objects parameter and the parentRenderers parameters. The alpha value controls the intensity of the outline.
            * @param $childNodeColor The color of the outline of the GameObjects which are children to the GameObjects in the objects parameter. The alpha value controls the intensity of the outline.
            * @param $color The color of the outline for the objects and renderers.
            * @param $parentRenderers The instance IDs of the first set of Renderers. If you provide GameObjects or Renderers as parameters, these Renderers belong to the GameObjects provided explicitly in the parameters.
            * @param $childRenderers The instance IDs of the second set of Renderers. If you provide GameObjects or Renderers as parameters, these Renderers belong to the child GameObjects of the objects provided in the parameters.
            * @param $fillOpacity The opacity of the Renderers within each outline.
            * @param $renderers The Renderers to outline.
            */
            public static DrawOutline ($renderers: System.Array$1<number>, $color: UnityEngine.Color, $fillOpacity?: number) : void
            /** Draws an outline around the specified GameObjects in the Scene View.
            * @param $objects The GameObjects to outline.
            * @param $parentNodeColor The color of the outline of the GameObjects provided explicitly in the objects parameter and the parentRenderers parameters. The alpha value controls the intensity of the outline.
            * @param $childNodeColor The color of the outline of the GameObjects which are children to the GameObjects in the objects parameter. The alpha value controls the intensity of the outline.
            * @param $color The color of the outline for the objects and renderers.
            * @param $parentRenderers The instance IDs of the first set of Renderers. If you provide GameObjects or Renderers as parameters, these Renderers belong to the GameObjects provided explicitly in the parameters.
            * @param $childRenderers The instance IDs of the second set of Renderers. If you provide GameObjects or Renderers as parameters, these Renderers belong to the child GameObjects of the objects provided in the parameters.
            * @param $fillOpacity The opacity of the Renderers within each outline.
            * @param $renderers The Renderers to outline.
            */
            public static DrawOutline ($renderers: System.Array$1<UnityEngine.Renderer>, $parentNodeColor: UnityEngine.Color, $childNodeColor: UnityEngine.Color, $fillOpacity?: number) : void
            /** Draws an outline around the specified GameObjects in the Scene View.
            * @param $objects The GameObjects to outline.
            * @param $parentNodeColor The color of the outline of the GameObjects provided explicitly in the objects parameter and the parentRenderers parameters. The alpha value controls the intensity of the outline.
            * @param $childNodeColor The color of the outline of the GameObjects which are children to the GameObjects in the objects parameter. The alpha value controls the intensity of the outline.
            * @param $color The color of the outline for the objects and renderers.
            * @param $parentRenderers The instance IDs of the first set of Renderers. If you provide GameObjects or Renderers as parameters, these Renderers belong to the GameObjects provided explicitly in the parameters.
            * @param $childRenderers The instance IDs of the second set of Renderers. If you provide GameObjects or Renderers as parameters, these Renderers belong to the child GameObjects of the objects provided in the parameters.
            * @param $fillOpacity The opacity of the Renderers within each outline.
            * @param $renderers The Renderers to outline.
            */
            public static DrawOutline ($renderers: System.Array$1<UnityEngine.Renderer>, $color: UnityEngine.Color, $fillOpacity?: number) : void
            /** Draws an outline around the specified GameObjects in the Scene View.
            * @param $objects The GameObjects to outline.
            * @param $parentNodeColor The color of the outline of the GameObjects provided explicitly in the objects parameter and the parentRenderers parameters. The alpha value controls the intensity of the outline.
            * @param $childNodeColor The color of the outline of the GameObjects which are children to the GameObjects in the objects parameter. The alpha value controls the intensity of the outline.
            * @param $color The color of the outline for the objects and renderers.
            * @param $parentRenderers The instance IDs of the first set of Renderers. If you provide GameObjects or Renderers as parameters, these Renderers belong to the GameObjects provided explicitly in the parameters.
            * @param $childRenderers The instance IDs of the second set of Renderers. If you provide GameObjects or Renderers as parameters, these Renderers belong to the child GameObjects of the objects provided in the parameters.
            * @param $fillOpacity The opacity of the Renderers within each outline.
            * @param $renderers The Renderers to outline.
            */
            public static DrawOutline ($objects: System.Array$1<UnityEngine.GameObject>, $parentNodeColor: UnityEngine.Color, $childNodeColor: UnityEngine.Color, $fillOpacity?: number) : void
            /** Draws an outline around the specified GameObjects in the Scene View.
            * @param $objects The GameObjects to outline.
            * @param $parentNodeColor The color of the outline of the GameObjects provided explicitly in the objects parameter and the parentRenderers parameters. The alpha value controls the intensity of the outline.
            * @param $childNodeColor The color of the outline of the GameObjects which are children to the GameObjects in the objects parameter. The alpha value controls the intensity of the outline.
            * @param $color The color of the outline for the objects and renderers.
            * @param $parentRenderers The instance IDs of the first set of Renderers. If you provide GameObjects or Renderers as parameters, these Renderers belong to the GameObjects provided explicitly in the parameters.
            * @param $childRenderers The instance IDs of the second set of Renderers. If you provide GameObjects or Renderers as parameters, these Renderers belong to the child GameObjects of the objects provided in the parameters.
            * @param $fillOpacity The opacity of the Renderers within each outline.
            * @param $renderers The Renderers to outline.
            */
            public static DrawOutline ($objects: System.Array$1<UnityEngine.GameObject>, $color: UnityEngine.Color, $fillOpacity?: number) : void
            public static DrawOutline ($objects: System.Collections.Generic.List$1<UnityEngine.GameObject>, $parentNodeColor: UnityEngine.Color, $childNodeColor: UnityEngine.Color, $fillOpacity?: number) : void
            public static DrawOutline ($objects: System.Collections.Generic.List$1<UnityEngine.GameObject>, $color: UnityEngine.Color, $fillOpacity?: number) : void
            /** Clears the camera.
            * @param $position Where in the Scene to clear.
            * @param $camera The camera to clear.
            */
            public static ClearCamera ($position: UnityEngine.Rect, $camera: UnityEngine.Camera) : void
            /** Draws a camera inside a rectangle.
            * @param $position The area to draw the camera within in GUI coordinates.
            * @param $camera The camera to draw.
            * @param $drawMode How the camera is drawn (textured, wireframe, etc.).
            */
            public static DrawCamera ($position: UnityEngine.Rect, $camera: UnityEngine.Camera) : void
            /** Draws a camera inside a rectangle.
            * @param $position The area to draw the camera within in GUI coordinates.
            * @param $camera The camera to draw.
            * @param $drawMode How the camera is drawn (textured, wireframe, etc.).
            */
            public static DrawCamera ($position: UnityEngine.Rect, $camera: UnityEngine.Camera, $drawMode: UnityEditor.DrawCameraMode) : void
            public static DrawCamera ($position: UnityEngine.Rect, $camera: UnityEngine.Camera, $drawMode: UnityEditor.DrawCameraMode, $drawGizmos: boolean) : void
            /** Set the current camera so all Handles and Gizmos are draw with its settings.
            */
            public static SetCamera ($camera: UnityEngine.Camera) : void
            /** Set the current camera so all Handles and Gizmos are draw with its settings.
            */
            public static SetCamera ($position: UnityEngine.Rect, $camera: UnityEngine.Camera) : void
            /** Begin a 2D GUI block inside the 3D handle GUI.
            */
            public static BeginGUI () : void
            /** End a 2D GUI block and get back to the 3D handle GUI.
            */
            public static EndGUI () : void
            /** Retuns an array of points to representing the bezier curve.
            */
            public static MakeBezierPoints ($startPosition: UnityEngine.Vector3, $endPosition: UnityEngine.Vector3, $startTangent: UnityEngine.Vector3, $endTangent: UnityEngine.Vector3, $division: number) : System.Array$1<UnityEngine.Vector3>
            /** Draws a 3D texture using Signed Distance Field rendering mode in 3D space.
            * @param $texture The volumetric texture to draw.
            * @param $stepScale The number by which to multiply the ray step size. The ray step size is the distance between 2 neighboring pixels. The default value is 1.
            * @param $surfaceOffset The intensity of the pixels at which the surface is rendered. When this value is positive, Unity will expand the rendered surface. When this value is negative, Unity will render empty space as a surface, and a surface as empty space. The default value is 0.
            * @param $customColorRamp The custom gradient that Unity uses as a color ramp. If this is not specified, Unity uses <a href="https:ai.googleblog.com201908turbo-improved-rainbow-colormap-for.html">Google Turbo color ramp<a>.
            */
            public static DrawTexture3DSDF ($texture: UnityEngine.Texture, $stepScale?: number, $surfaceOffset?: number, $customColorRamp?: UnityEngine.Gradient) : void
            /** Draws a 3D texture using Slice rendering mode in 3D space.
            * @param $texture The volumetric texture to draw.
            * @param $slicePositions The positions of the texture sampling planes.
            * @param $filterMode Sets the texture filtering mode to use.
            * @param $useColorRamp Enables color ramp visualization.
            * @param $customColorRamp The custom gradient that Unity uses as a color ramp. If this is not specified, Unity uses <a href="https:ai.googleblog.com201908turbo-improved-rainbow-colormap-for.html">Google Turbo color ramp<a>.
            */
            public static DrawTexture3DSlice ($texture: UnityEngine.Texture, $slicePositions: UnityEngine.Vector3, $filterMode?: UnityEngine.FilterMode, $useColorRamp?: boolean, $customColorRamp?: UnityEngine.Gradient) : void
            /** Draws a 3D texture using Volume rendering mode in 3D space.
            * @param $texture The volumetric texture to draw.
            * @param $opacity The non-linear volume opacity modifier. Use this to control the opacity of the visualization. Valid values are 0-1, inclusive. A value of 1 is fully opaque and a value of 0 is fully transparent. The default value is 1.
            * @param $qualityModifier Sets the sample per texture pixel count. Higher values result in a higher quality render. The default value is 1.
            * @param $filterMode Sets the texture filtering mode to use.
            * @param $useColorRamp Enables color ramp visualization.
            * @param $customColorRamp The custom gradient that Unity uses as a color ramp. If this is not specified, Unity uses <a href="https:ai.googleblog.com201908turbo-improved-rainbow-colormap-for.html">Google Turbo color ramp<a>.
            */
            public static DrawTexture3DVolume ($texture: UnityEngine.Texture, $opacity?: number, $qualityModifier?: number, $filterMode?: UnityEngine.FilterMode, $useColorRamp?: boolean, $customColorRamp?: UnityEngine.Gradient) : void
            public constructor ()
        }
        class ModeService extends System.Object
        {
            protected [__keep_incompatibility]: never;
            public static get modeNames(): System.Array$1<string>;
            public static get modeCount(): number;
            public static get currentId(): string;
            public static get currentIndex(): number;
            public static add_modeChanged ($value: System.Action$1<UnityEditor.ModeService.ModeChangedArgs>) : void
            public static remove_modeChanged ($value: System.Action$1<UnityEditor.ModeService.ModeChangedArgs>) : void
            public static ChangeModeById ($modeId: string) : void
            public static Update () : void
            public static HasContextMenu ($menuId: string) : boolean
            public static PopupContextMenu ($menuId: string) : void
        }
        /** Stores and accesses Unity Editor preferences.
        */
        class EditorPrefs extends System.Object
        {
            protected [__keep_incompatibility]: never;
            /** Sets the value of the preference identified by key as an integer.
            * @param $key Name of key to write integer to.
            * @param $value Value of the integer to write into the storage.
            */
            public static SetInt ($key: string, $value: number) : void
            /** Returns the value corresponding to key in the preference file if it exists.
            * @param $key Name of key to read integer from.
            * @param $defaultValue Integer value to return if the key is not in the storage.
            * @returns The value stored in the preference file. 
            */
            public static GetInt ($key: string, $defaultValue: number) : number
            /** Returns the value corresponding to key in the preference file if it exists.
            * @param $key Name of key to read integer from.
            * @param $defaultValue Integer value to return if the key is not in the storage.
            * @returns The value stored in the preference file. 
            */
            public static GetInt ($key: string) : number
            /** Sets the float value of the preference identified by key.
            * @param $key Name of key to write float into.
            * @param $value Float value to write into the storage.
            */
            public static SetFloat ($key: string, $value: number) : void
            /** Returns the float value corresponding to key if it exists in the preference file.
            * @param $key Name of key to read float from.
            * @param $defaultValue Float value to return if the key is not in the storage.
            * @returns The float value stored in the preference file or the defaultValue id the
            requested float does not exist. 
            */
            public static GetFloat ($key: string, $defaultValue: number) : number
            /** Returns the float value corresponding to key if it exists in the preference file.
            * @param $key Name of key to read float from.
            * @param $defaultValue Float value to return if the key is not in the storage.
            * @returns The float value stored in the preference file or the defaultValue id the
            requested float does not exist. 
            */
            public static GetFloat ($key: string) : number
            /** Sets the value of the preference identified by key. Note that EditorPrefs does not support null strings and will store an empty string instead.
            */
            public static SetString ($key: string, $value: string) : void
            /** Returns the value corresponding to key in the preference file if it exists.
            */
            public static GetString ($key: string, $defaultValue: string) : string
            /** Returns the value corresponding to key in the preference file if it exists.
            */
            public static GetString ($key: string) : string
            /** Sets the value of the preference identified by key.
            */
            public static SetBool ($key: string, $value: boolean) : void
            /** Returns the value corresponding to key in the preference file if it exists.
            */
            public static GetBool ($key: string, $defaultValue: boolean) : boolean
            /** Returns the value corresponding to key in the preference file if it exists.
            */
            public static GetBool ($key: string) : boolean
            /** Returns true if key exists in the preferences file.
            * @param $key Name of key to check for.
            * @returns The existence or not of the key. 
            */
            public static HasKey ($key: string) : boolean
            /** Removes key and its corresponding value from the preferences.
            */
            public static DeleteKey ($key: string) : void
            /** Removes all keys and values from the preferences. Use with caution.
            */
            public static DeleteAll () : void
            public constructor ()
        }
        /** Represents a managed reference object that has a missing type.
        */
        class ManagedReferenceMissingType extends System.ValueType implements System.IComparable$1<UnityEditor.ManagedReferenceMissingType>, System.IEquatable$1<UnityEditor.ManagedReferenceMissingType>
        {
            protected [__keep_incompatibility]: never;
            /** Name of the Assembly where Unity expects to find the class. (Read Only)
            */
            public get assemblyName(): string;
            /** Name of the class that is needed to instantiate the Managed Reference. (Read Only)
            */
            public get className(): string;
            /** Namespace where Unity expects to find the class.  Namespaces are optional so this might contain an empty string. (Read Only)
            */
            public get namespaceName(): string;
            /** The Managed Reference ID. (Read Only)
            */
            public get referenceId(): bigint;
            /** String summarizing the content of the serialized data of the missing object. (Read Only)
            */
            public get serializedData(): string;
            public Equals ($other: UnityEditor.ManagedReferenceMissingType) : boolean
            public CompareTo ($other: UnityEditor.ManagedReferenceMissingType) : number
        }
        /** Utility functions related to Serialization.
        */
        class SerializationUtility extends System.Object
        {
            protected [__keep_incompatibility]: never;
            /** This API returns true if one or more managed references is missing its type.
            */
            public static HasManagedReferencesWithMissingTypes ($obj: UnityEngine.Object) : boolean
            /** Returns the list of managed references that could not be deserialized because of a missing type.
            */
            public static GetManagedReferencesWithMissingTypes ($obj: UnityEngine.Object) : System.Array$1<UnityEditor.ManagedReferenceMissingType>
            /** Removes all managed references that are missing their type.
            */
            public static ClearAllManagedReferencesWithMissingTypes ($obj: UnityEngine.Object) : boolean
            /** Drop the serialized data associated with a specific managed reference object that is missing its type.
            */
            public static ClearManagedReferenceWithMissingType ($obj: UnityEngine.Object, $id: bigint) : boolean
            public constructor ()
        }
        enum SerializationMode
        { Mixed = 0, ForceBinary = 1, ForceText = 2 }
        enum EditorBehaviorMode
        { Mode3D = 0, Mode2D = 1 }
        /** Sprite Packer mode for the current project.
        */
        enum SpritePackerMode
        { Disabled = 0, BuildTimeOnly = 1, AlwaysOn = 2, BuildTimeOnlyAtlas = 3, AlwaysOnAtlas = 4, SpriteAtlasV2 = 5, SpriteAtlasV2Build = 6 }
        /** Defines the type of line endings used when creating new C# files from within the editor.
        */
        enum LineEndingsMode
        { OSNative = 0, Unix = 1, Windows = 2 }
        /** Selects the Assetpipeline mode to use.
        */
        enum AssetPipelineMode
        { Version1 = 0, Version2 = 1 }
        /** Selects the cache server configuration mode.
        */
        enum CacheServerMode
        { AsPreferences = 0, Enabled = 1, Disabled = 2 }
        /** Options for the accelerate server validation mode.
        */
        enum CacheServerValidationMode
        { Disabled = 0, UploadOnly = 1, Enabled = 2, Required = 3 }
        /** Determines the flags for the Enter Play Mode Options in the Unity Editor.
        */
        enum EnterPlayModeOptions
        { None = 0, DisableDomainReload = 1, DisableSceneReload = 2, DisableSceneBackupUnlessDirty = 4 }
        /** User settings for Unity Editor.
        */
        class EditorSettings extends UnityEngine.Object
        {
            protected [__keep_incompatibility]: never;
            /** Gets or sets device ID used for Unity Remote feature.
            */
            public static get unityRemoteDevice(): string;
            public static set unityRemoteDevice(value: string);
            /** Gets or sets compression method used for Unity Remote screen stream.
            */
            public static get unityRemoteCompression(): string;
            public static set unityRemoteCompression(value: string);
            /** Gets or sets resolution used for Unity Remote screen stream.
            */
            public static get unityRemoteResolution(): string;
            public static set unityRemoteResolution(value: string);
            /** Gets or sets joystick source used in editor when Unity Remote is connected.
            */
            public static get unityRemoteJoystickSource(): string;
            public static set unityRemoteJoystickSource(value: string);
            public static get serializationMode(): UnityEditor.SerializationMode;
            public static set serializationMode(value: UnityEditor.SerializationMode);
            /** Determines what line endings to use in a new C# file created in the Editor.
            */
            public static get lineEndingsForNewScripts(): UnityEditor.LineEndingsMode;
            public static set lineEndingsForNewScripts(value: UnityEditor.LineEndingsMode);
            public static get defaultBehaviorMode(): UnityEditor.EditorBehaviorMode;
            public static set defaultBehaviorMode(value: UnityEditor.EditorBehaviorMode);
            /** Allows you to specify a Scene to use as the for Prefabs.
            */
            public static get prefabRegularEnvironment(): UnityEditor.SceneAsset;
            public static set prefabRegularEnvironment(value: UnityEditor.SceneAsset);
            /** Allows you to specify a Scene to use as the for UI Prefabs.
            */
            public static get prefabUIEnvironment(): UnityEditor.SceneAsset;
            public static set prefabUIEnvironment(value: UnityEditor.SceneAsset);
            /** Allow Auto Save in Prefab Mode for this project.
            */
            public static get prefabModeAllowAutoSave(): boolean;
            public static set prefabModeAllowAutoSave(value: boolean);
            public static get spritePackerMode(): UnityEditor.SpritePackerMode;
            public static set spritePackerMode(value: UnityEditor.SpritePackerMode);
            /** Power of 2 value to add a boundary (padding) to Sprites packed to the Atlas (Legacy Sprite Packer).
            */
            public static get spritePackerPaddingPower(): number;
            public static set spritePackerPaddingPower(value: number);
            public static get etcTextureCompressorBehavior(): number;
            public static set etcTextureCompressorBehavior(value: number);
            public static get etcTextureFastCompressor(): number;
            public static set etcTextureFastCompressor(value: number);
            public static get etcTextureNormalCompressor(): number;
            public static set etcTextureNormalCompressor(value: number);
            public static get etcTextureBestCompressor(): number;
            public static set etcTextureBestCompressor(value: number);
            /** Enable texture mipmap streaming system when in Edit Mode.
            */
            public static get enableTextureStreamingInEditMode(): boolean;
            public static set enableTextureStreamingInEditMode(value: boolean);
            /** Enable texture mipmap streaming system when in Play Mode.
            */
            public static get enableTextureStreamingInPlayMode(): boolean;
            public static set enableTextureStreamingInPlayMode(value: boolean);
            /** Enable asynchronous Shader compilation in Game and Scene view.
            */
            public static get asyncShaderCompilation(): boolean;
            public static set asyncShaderCompilation(value: boolean);
            /** This property is now obsolete. Unity always uses the Caching Shader Preprocessor.
            */
            public static get cachingShaderPreprocessor(): boolean;
            public static set cachingShaderPreprocessor(value: boolean);
            /** Controls list of extensions of files that will be included in the c# .csproj projects that Unity generates.
            */
            public static get projectGenerationUserExtensions(): System.Array$1<string>;
            public static set projectGenerationUserExtensions(value: System.Array$1<string>);
            public static get projectGenerationBuiltinExtensions(): System.Array$1<string>;
            /** Controls which root namespace gets written into the c# .csproj projects that Unity generates.
            */
            public static get projectGenerationRootNamespace(): string;
            public static set projectGenerationRootNamespace(value: string);
            /** Enable the legacy fixed sample counts for baking Light Probes with Progressive Lightmapper.
            */
            public static get useLegacyProbeSampleCount(): boolean;
            public static set useLegacyProbeSampleCount(value: boolean);
            /** Determines whether cookies should be evaluated by the Progressive Lightmapper during Global Illumination calculations.
            */
            public static get enableCookiesInLightmapper(): boolean;
            public static set enableCookiesInLightmapper(value: boolean);
            /** Determines whether the Enter Play Mode Options are enabled in the Unity Editor or not.
            */
            public static get enterPlayModeOptionsEnabled(): boolean;
            public static set enterPlayModeOptionsEnabled(value: boolean);
            /** Determines the state of the Enter Play Mode Options in the Unity Editor.
            */
            public static get enterPlayModeOptions(): UnityEditor.EnterPlayModeOptions;
            public static set enterPlayModeOptions(value: UnityEditor.EnterPlayModeOptions);
            /** Forces Unity to write references and similar YAML structures on one line, which reduces version control noise.
            */
            public static get serializeInlineMappingsOnOneLine(): boolean;
            public static set serializeInlineMappingsOnOneLine(value: boolean);
            /** Select the assetpipeline mode.
            */
            public static get assetPipelineMode(): UnityEditor.AssetPipelineMode;
            /** Select cache server mode
            */
            public static get cacheServerMode(): UnityEditor.CacheServerMode;
            public static set cacheServerMode(value: UnityEditor.CacheServerMode);
            /** Controls the Editor's use of parallel processes when it imports assets during an asset database refresh, for this project.
            */
            public static get refreshImportMode(): UnityEditor.AssetDatabase.RefreshImportMode;
            public static set refreshImportMode(value: UnityEditor.AssetDatabase.RefreshImportMode);
            /** Cache server endpoint IP address
            */
            public static get cacheServerEndpoint(): string;
            public static set cacheServerEndpoint(value: string);
            /** Sets the namespace prefix to use for the cache server.
            */
            public static get cacheServerNamespacePrefix(): string;
            public static set cacheServerNamespacePrefix(value: string);
            /** Toggle whether to enable downloading from cache server.
            */
            public static get cacheServerEnableDownload(): boolean;
            public static set cacheServerEnableDownload(value: boolean);
            /** Toggle whether to enable uploading from cache server.
            */
            public static get cacheServerEnableUpload(): boolean;
            public static set cacheServerEnableUpload(value: boolean);
            /** Toggle whether to enable authentication to cache server.
            */
            public static get cacheServerEnableAuth(): boolean;
            public static set cacheServerEnableAuth(value: boolean);
            /** Toggle whether to enable TLS encryption to cache server.
            */
            public static get cacheServerEnableTls(): boolean;
            public static set cacheServerEnableTls(value: boolean);
            /** Select Accelerator server validation mode.
            */
            public static get cacheServerValidationMode(): UnityEditor.CacheServerValidationMode;
            public static set cacheServerValidationMode(value: UnityEditor.CacheServerValidationMode);
            /** Controls the size of the batches used when making cacheserver download requests.
            */
            public static get cacheServerDownloadBatchSize(): number;
            public static set cacheServerDownloadBatchSize(value: number);
            /** Indicates the amount of digits to use for the numbers in a duplicated GameoObject's name.
            */
            public static get gameObjectNamingDigits(): number;
            public static set gameObjectNamingDigits(value: number);
            /** Indicates which naming scheme to use for duplicated GameObjects.
            */
            public static get gameObjectNamingScheme(): UnityEditor.EditorSettings.NamingScheme;
            public static set gameObjectNamingScheme(value: UnityEditor.EditorSettings.NamingScheme);
            /** Controls whether to insert a space before a number in duplicated Asset names.
            */
            public static get assetNamingUsesSpace(): boolean;
            public static set assetNamingUsesSpace(value: boolean);
        }
        /** SceneAsset is used to reference Scene objects in the Editor.
        */
        class SceneAsset extends UnityEngine.Object
        {
            protected [__keep_incompatibility]: never;
        }
        /** Desktop platform subtarget type.
        */
        enum StandaloneBuildSubtarget
        { Default = 0, Player = 2, Server = 1 }
        enum PS4BuildSubtarget
        { PCHosted = 0, Package = 1, Iso = 2, GP4Project = 3 }
        enum PS4HardwareTarget
        { BaseOnly = 0, NeoAndBase = 1, ProAndBase = 1 }
        /** Target Xbox build type.
        */
        enum XboxBuildSubtarget
        { Development = 0, Master = 1, Debug = 2 }
        enum XboxOneDeployMethod
        { Push = 0, RunFromPC = 2, Package = 3, PackageStreaming = 4 }
        enum XboxOneDeployDrive
        { Default = 0, Retail = 1, Development = 2, Ext1 = 3, Ext2 = 4, Ext3 = 5, Ext4 = 6, Ext5 = 7, Ext6 = 8, Ext7 = 9 }
        enum AndroidBuildSubtarget
        { Generic = -1, DXT = -1, PVRTC = -1, ATC = -1, ETC = -1, ETC2 = -1, ASTC = -1 }
        /** Defines the options available for choosing the type of symbol file to create in an Android build.
        */
        enum AndroidCreateSymbols
        { Disabled = 0, Public = 1, Debugging = 2 }
        /** Compressed texture format for target build platform.
        */
        enum MobileTextureSubtarget
        { Generic = 0, DXT = 1, PVRTC = 2, ATC = 3, ETC = 4, ETC2 = 5, ASTC = 6 }
        /** This enumeration has values for different qualities to decompress ETC2 textures on Android devices that don't support the ETC2 texture format.
        */
        enum AndroidETC2Fallback
        { Quality32Bit = 0, Quality16Bit = 1, Quality32BitDownscaled = 2 }
        /** Compressed texture format for target build platform.
        */
        enum WebGLTextureSubtarget
        { Generic = 0, DXT = 1, ETC2 = 3, ASTC = 4 }
        /** An enum containing the supported client web browsers.
        */
        enum WebGLClientBrowserType
        { Default = 0, Edge = 1, Safari = 2, Firefox = 3, Chrome = 4, Chromium = 5 }
        /** Target device type for a Windows Store application to run on.
        */
        enum WSASubtarget
        { AnyDevice = 0, PC = 1, Mobile = 2, HoloLens = 3 }
        enum WSASDK
        { SDK80 = 0, SDK81 = 1, PhoneSDK81 = 2, UniversalSDK81 = 3, UWP = 4 }
        /** Determines the output build type when building to Universal Windows Platform.
        */
        enum WSAUWPBuildType
        { XAML = 0, D3D = 1, ExecutableOnly = 2 }
        /** Specifies the Windows device to deploy and launch the UWP app on when using Build and Run from the Editor.
        */
        enum WSABuildAndRunDeployTarget
        { LocalMachine = 0, WindowsPhone = 1, DevicePortal = 2 }
        /** Specifies which Windows device to deploy and launch the Windows app on when using Build and Run from the Editor.
        */
        enum WindowsBuildAndRunDeployTarget
        { LocalMachine = 0, DevicePortal = 2 }
        /** Build configurations for Windows Store Visual Studio solutions.
        */
        enum WSABuildType
        { Debug = 0, Release = 1, Master = 2 }
        /** Build configurations for the Xcode project Unity generates.
        */
        enum XcodeBuildConfig
        { Debug = 0, Release = 1 }
        /** Build configurations for the generated Xcode project.
        */
        enum iOSBuildType
        { Debug = 0, Release = 1 }
        /** Type of Android build system.
        */
        enum AndroidBuildSystem
        { Internal = 0, Gradle = 1, ADT = 2, VisualStudio = 3 }
        /** Build configurations for the generated project.
        */
        enum AndroidBuildType
        { Debug = 0, Development = 1, Release = 2 }
        /** How to minify the java code of your binary.
        */
        enum AndroidMinification
        { None = 0, Proguard = 1, Gradle = 2 }
        enum SwitchRomCompressionType
        { None = 0, Lz4 = 1 }
        enum QNXOsVersion
        { Neutrino70 = 0, Neutrino71 = 1 }
        enum EmbeddedArchitecture
        { Arm64 = 0, Arm32 = 1, X64 = 2, X86 = 3 }
        enum QNXArchitecture
        { Arm64 = 0, Arm32 = 1, X64 = 2, X86 = 3 }
        enum EmbeddedLinuxArchitecture
        { Arm64 = 0, Arm32 = 1, X64 = 2, X86 = 3 }
        /** User build settings for the Editor
        */
        class EditorUserBuildSettings extends UnityEngine.Object
        {
            protected [__keep_incompatibility]: never;
            /** The currently selected build target group.
            */
            public static get selectedBuildTargetGroup(): UnityEditor.BuildTargetGroup;
            public static set selectedBuildTargetGroup(value: UnityEditor.BuildTargetGroup);
            public static get selectedQnxOsVersion(): UnityEditor.QNXOsVersion;
            public static set selectedQnxOsVersion(value: UnityEditor.QNXOsVersion);
            public static get selectedQnxArchitecture(): UnityEditor.QNXArchitecture;
            public static set selectedQnxArchitecture(value: UnityEditor.QNXArchitecture);
            public static get selectedEmbeddedLinuxArchitecture(): UnityEditor.EmbeddedLinuxArchitecture;
            public static set selectedEmbeddedLinuxArchitecture(value: UnityEditor.EmbeddedLinuxArchitecture);
            public static get remoteDeviceInfo(): boolean;
            public static set remoteDeviceInfo(value: boolean);
            public static get remoteDeviceAddress(): string;
            public static set remoteDeviceAddress(value: string);
            public static get remoteDeviceUsername(): string;
            public static set remoteDeviceUsername(value: string);
            public static get remoteDeviceExports(): string;
            public static set remoteDeviceExports(value: string);
            public static get pathOnRemoteDevice(): string;
            public static set pathOnRemoteDevice(value: string);
            /** The currently selected target for a standalone build.
            */
            public static get selectedStandaloneTarget(): UnityEditor.BuildTarget;
            public static set selectedStandaloneTarget(value: UnityEditor.BuildTarget);
            /** Desktop standalone build subtarget.
            */
            public static get standaloneBuildSubtarget(): UnityEditor.StandaloneBuildSubtarget;
            public static set standaloneBuildSubtarget(value: UnityEditor.StandaloneBuildSubtarget);
            /** PS4 Build Subtarget.
            */
            public static get ps4BuildSubtarget(): UnityEditor.PS4BuildSubtarget;
            public static set ps4BuildSubtarget(value: UnityEditor.PS4BuildSubtarget);
            /** Specifies which version of PS4 hardware to target.
            */
            public static get ps4HardwareTarget(): UnityEditor.PS4HardwareTarget;
            public static set ps4HardwareTarget(value: UnityEditor.PS4HardwareTarget);
            /** Are null references actively validated?
            */
            public static get explicitNullChecks(): boolean;
            public static set explicitNullChecks(value: boolean);
            /** Are divide by zero's actively validated?
            */
            public static get explicitDivideByZeroChecks(): boolean;
            public static set explicitDivideByZeroChecks(value: boolean);
            /** Are array bounds actively validated?
            */
            public static get explicitArrayBoundsChecks(): boolean;
            public static set explicitArrayBoundsChecks(value: boolean);
            /** Build submission materials.
            */
            public static get needSubmissionMaterials(): boolean;
            public static set needSubmissionMaterials(value: boolean);
            /** Force installation of package, even if error.
            */
            public static get forceInstallation(): boolean;
            public static set forceInstallation(value: boolean);
            /** Places the package on the outer edge of the disk.
            */
            public static get movePackageToDiscOuterEdge(): boolean;
            public static set movePackageToDiscOuterEdge(value: boolean);
            /** Compress files in package.
            */
            public static get compressFilesInPackage(): boolean;
            public static set compressFilesInPackage(value: boolean);
            /** Is build script only enabled.
            */
            public static get buildScriptsOnly(): boolean;
            public static set buildScriptsOnly(value: boolean);
            /** Android platform options.
            */
            public static get androidBuildSubtarget(): UnityEditor.MobileTextureSubtarget;
            public static set androidBuildSubtarget(value: UnityEditor.MobileTextureSubtarget);
            /** WebGL Build subtarget.
            */
            public static get webGLBuildSubtarget(): UnityEditor.WebGLTextureSubtarget;
            public static set webGLBuildSubtarget(value: UnityEditor.WebGLTextureSubtarget);
            /** The path to the executable of the browser in which to load the web application.
            */
            public static get webGLClientBrowserPath(): string;
            public static set webGLClientBrowserPath(value: string);
            /** Defines the client browser type in which to load the web application.
            */
            public static get webGLClientBrowserType(): UnityEditor.WebGLClientBrowserType;
            public static set webGLClientBrowserType(value: UnityEditor.WebGLClientBrowserType);
            public static get androidBuildSystem(): UnityEditor.AndroidBuildSystem;
            public static set androidBuildSystem(value: UnityEditor.AndroidBuildSystem);
            public static get androidBuildType(): UnityEditor.AndroidBuildType;
            public static set androidBuildType(value: UnityEditor.AndroidBuildType);
            /** Specifies the type of symbol package to create.
            */
            public static get androidCreateSymbols(): UnityEditor.AndroidCreateSymbols;
            public static set androidCreateSymbols(value: UnityEditor.AndroidCreateSymbols);
            /** The build type for the Universal Windows Platform.
            */
            public static get wsaUWPBuildType(): UnityEditor.WSAUWPBuildType;
            public static set wsaUWPBuildType(value: UnityEditor.WSAUWPBuildType);
            /** Sets and gets target UWP SDK to build Windows Store application against.
            */
            public static get wsaUWPSDK(): string;
            public static set wsaUWPSDK(value: string);
            public static get wsaMinUWPSDK(): string;
            public static set wsaMinUWPSDK(value: string);
            public static get wsaArchitecture(): string;
            public static set wsaArchitecture(value: string);
            /** Sets and gets Visual Studio version to build Windows Store application with.
            */
            public static get wsaUWPVisualStudioVersion(): string;
            public static set wsaUWPVisualStudioVersion(value: string);
            /** Specifies the Windows DevicePortal connection address of the device to deploy and launch the UWP app on when using Build and Run.
            */
            public static get windowsDevicePortalAddress(): string;
            public static set windowsDevicePortalAddress(value: string);
            /** Specifies the Windows DevicePortal username for the device to deploy and launch the UWP app on when using Build and Run.
            */
            public static get windowsDevicePortalUsername(): string;
            public static set windowsDevicePortalUsername(value: string);
            /** Specifies the Windows DevicePortal password for the device to deploy and launch the UWP app on when using Build and Run.
            */
            public static get windowsDevicePortalPassword(): string;
            public static set windowsDevicePortalPassword(value: string);
            /** Sets and gets the Windows device to launch the UWP app when using Build and Run.
            */
            public static get wsaBuildAndRunDeployTarget(): UnityEditor.WSABuildAndRunDeployTarget;
            public static set wsaBuildAndRunDeployTarget(value: UnityEditor.WSABuildAndRunDeployTarget);
            /** Sets and gets the Windows device to launch the Windows app when using Build and Run.
            */
            public static get windowsBuildAndRunDeployTarget(): UnityEditor.WindowsBuildAndRunDeployTarget;
            public static set windowsBuildAndRunDeployTarget(value: UnityEditor.WindowsBuildAndRunDeployTarget);
            /** The override for the maximum texture size when importing assets.
            */
            public static get overrideMaxTextureSize(): number;
            public static set overrideMaxTextureSize(value: number);
            /** The asset importing override of texture compression.
            */
            public static get overrideTextureCompression(): UnityEditor.Build.OverrideTextureCompression;
            public static set overrideTextureCompression(value: UnityEditor.Build.OverrideTextureCompression);
            /** The currently active build target.
            */
            public static get activeBuildTarget(): UnityEditor.BuildTarget;
            /** DEFINE directives for the compiler.
            */
            public static get activeScriptCompilationDefines(): System.Array$1<string>;
            /** Enables a development build.
            */
            public static get development(): boolean;
            public static set development(value: boolean);
            /** Start the player with a connection to the profiler.
            */
            public static get connectProfiler(): boolean;
            public static set connectProfiler(value: boolean);
            /** Enables Deep Profiling support in the player.
            */
            public static get buildWithDeepProfilingSupport(): boolean;
            public static set buildWithDeepProfilingSupport(value: boolean);
            /** Enable source-level debuggers to connect.
            */
            public static get allowDebugging(): boolean;
            public static set allowDebugging(value: boolean);
            /** Sets the Player to wait for player connection on player start.
            */
            public static get waitForPlayerConnection(): boolean;
            public static set waitForPlayerConnection(value: boolean);
            /** Export Android Project for use with Android Studio/Gradle.
            */
            public static get exportAsGoogleAndroidProject(): boolean;
            public static set exportAsGoogleAndroidProject(value: boolean);
            /** Set to true to build an Android App Bundle (aab file) instead of an apk. The default value is false.
            */
            public static get buildAppBundle(): boolean;
            public static set buildAppBundle(value: boolean);
            /** Symlink sources when generating the project.
            */
            public static get symlinkSources(): boolean;
            public static set symlinkSources(value: boolean);
            /** The scheme Xcode uses to run this project.
            */
            public static get iOSXcodeBuildConfig(): UnityEditor.XcodeBuildConfig;
            public static set iOSXcodeBuildConfig(value: UnityEditor.XcodeBuildConfig);
            /** The scheme Xcode uses to run this project.
            */
            public static get macOSXcodeBuildConfig(): UnityEditor.XcodeBuildConfig;
            public static set macOSXcodeBuildConfig(value: UnityEditor.XcodeBuildConfig);
            public static get switchCreateRomFile(): boolean;
            public static set switchCreateRomFile(value: boolean);
            public static get switchEnableRomCompression(): boolean;
            public static set switchEnableRomCompression(value: boolean);
            public static get switchSaveADF(): boolean;
            public static set switchSaveADF(value: boolean);
            public static get switchRomCompressionType(): UnityEditor.SwitchRomCompressionType;
            public static set switchRomCompressionType(value: UnityEditor.SwitchRomCompressionType);
            public static get switchRomCompressionLevel(): number;
            public static set switchRomCompressionLevel(value: number);
            public static get switchRomCompressionConfig(): string;
            public static set switchRomCompressionConfig(value: string);
            public static get switchNVNGraphicsDebugger(): boolean;
            public static set switchNVNGraphicsDebugger(value: boolean);
            public static get generateNintendoSwitchShaderInfo(): boolean;
            public static set generateNintendoSwitchShaderInfo(value: boolean);
            public static get switchNVNShaderDebugging(): boolean;
            public static set switchNVNShaderDebugging(value: boolean);
            public static get switchNVNDrawValidation_Light(): boolean;
            public static set switchNVNDrawValidation_Light(value: boolean);
            public static get switchNVNDrawValidation_Heavy(): boolean;
            public static set switchNVNDrawValidation_Heavy(value: boolean);
            public static get switchEnableMemoryTracker(): boolean;
            public static set switchEnableMemoryTracker(value: boolean);
            public static get switchWaitForMemoryTrackerOnStartup(): boolean;
            public static set switchWaitForMemoryTrackerOnStartup(value: boolean);
            public static get switchEnableDebugPad(): boolean;
            public static set switchEnableDebugPad(value: boolean);
            public static get switchRedirectWritesToHostMount(): boolean;
            public static set switchRedirectWritesToHostMount(value: boolean);
            public static get switchHTCSScriptDebugging(): boolean;
            public static set switchHTCSScriptDebugging(value: boolean);
            public static get switchUseLegacyNvnPoolAllocator(): boolean;
            public static set switchUseLegacyNvnPoolAllocator(value: boolean);
            /** Place the built player in the build folder.
            */
            public static get installInBuildFolder(): boolean;
            public static set installInBuildFolder(value: boolean);
            /** Instructs the player to wait for managed debugger to attach before executing any script code.
            */
            public static get waitForManagedDebugger(): boolean;
            public static set waitForManagedDebugger(value: boolean);
            /** Force the port used by the managed debugger. Default is 0 which means platform-specific auto-selection of a port.
            */
            public static get managedDebuggerFixedPort(): number;
            public static set managedDebuggerFixedPort(value: number);
            /** Select a new build target to be active.
            * @param $target Target build platform.
            * @param $targetGroup Build target group.
            * @param $namedBuildTarget Target named build platform.
            * @returns True if the build target was successfully switched, false otherwise (for example, if license checks fail, files are missing, or if the user has cancelled the operation via the UI). 
            */
            public static SwitchActiveBuildTarget ($targetGroup: UnityEditor.BuildTargetGroup, $target: UnityEditor.BuildTarget) : boolean
            /** Select a new build target to be active during the next Editor update.
            * @param $targetGroup Target build platform.
            * @param $target Build target group.
            * @returns True if the build target was successfully switched, false otherwise (for example, if license checks fail, files are missing, or if the user has cancelled the operation via the UI). 
            */
            public static SwitchActiveBuildTargetAsync ($targetGroup: UnityEditor.BuildTargetGroup, $target: UnityEditor.BuildTarget) : boolean
            /** Select a new build target to be active.
            * @param $target Target build platform.
            * @param $targetGroup Build target group.
            * @param $namedBuildTarget Target named build platform.
            * @returns True if the build target was successfully switched, false otherwise (for example, if license checks fail, files are missing, or if the user has cancelled the operation via the UI). 
            */
            public static SwitchActiveBuildTarget ($namedBuildTarget: UnityEditor.Build.NamedBuildTarget, $target: UnityEditor.BuildTarget) : boolean
            /** Get the current location for the build.
            */
            public static GetBuildLocation ($target: UnityEditor.BuildTarget) : string
            /** Set a new location for the build.
            */
            public static SetBuildLocation ($target: UnityEditor.BuildTarget, $location: string) : void
            public static SetPlatformSettings ($platformName: string, $name: string, $value: string) : void
            public static SetPlatformSettings ($buildTargetGroup: string, $buildTarget: string, $name: string, $value: string) : void
            public static GetPlatformSettings ($platformName: string, $name: string) : string
            public static GetPlatformSettings ($buildTargetGroup: string, $platformName: string, $name: string) : string
        }
        /** Behavior of semantic merge.
        */
        enum SemanticMergeMode
        { Off = 0, Premerge = 1, Ask = 2 }
        class EditorUserSettings extends UnityEngine.Object
        {
            protected [__keep_incompatibility]: never;
            public static get AutomaticAdd(): boolean;
            public static set AutomaticAdd(value: boolean);
            public static get WorkOffline(): boolean;
            public static set WorkOffline(value: boolean);
            public static get showFailedCheckout(): boolean;
            public static set showFailedCheckout(value: boolean);
            public static get overwriteFailedCheckoutAssets(): boolean;
            public static set overwriteFailedCheckoutAssets(value: boolean);
            public static get overlayIcons(): boolean;
            public static set overlayIcons(value: boolean);
            public static get hierarchyOverlayIcons(): boolean;
            public static set hierarchyOverlayIcons(value: boolean);
            public static get otherOverlayIcons(): boolean;
            public static set otherOverlayIcons(value: boolean);
            public static get allowAsyncStatusUpdate(): boolean;
            public static set allowAsyncStatusUpdate(value: boolean);
            public static get artifactGarbageCollection(): boolean;
            public static set artifactGarbageCollection(value: boolean);
            public static get compressAssetsOnImport(): boolean;
            public static set compressAssetsOnImport(value: boolean);
            public static get semanticMergeMode(): UnityEditor.SemanticMergeMode;
            public static set semanticMergeMode(value: UnityEditor.SemanticMergeMode);
            public static get desiredImportWorkerCount(): number;
            public static set desiredImportWorkerCount(value: number);
            public static get standbyImportWorkerCount(): number;
            public static set standbyImportWorkerCount(value: number);
            public static get idleImportWorkerShutdownDelayMilliseconds(): number;
            public static set idleImportWorkerShutdownDelayMilliseconds(value: number);
            public static GetConfigValue ($name: string) : string
            public static SetConfigValue ($name: string, $value: string) : void
        }
        /** Editor utility functions.
        */
        class EditorUtility extends System.Object
        {
            protected [__keep_incompatibility]: never;
            public static get audioMasterMute(): boolean;
            public static set audioMasterMute(value: boolean);
            /** True if there are any compilation error messages in the log.
            */
            public static get scriptCompilationFailed(): boolean;
            /** Displays the "open file" dialog and returns the selected path name.
            * @param $title The text to display in the toolbar of the dialog window. 
            * @param $directory The default file directory that this dialog opens. This parameter is relative to the project directory. For example, "Assets" displays the Assets directory when this dialog opens.
            * @param $extension The file extensions to filter in this dialog. Do not precede file extension names with a period. Enter an empty string to include all file types. Separate multiple file extensions with a comma.
            */
            public static OpenFilePanel ($title: string, $directory: string, $extension: string) : string
            /** Displays the "open file" dialog and returns the selected path name.
            * @param $title Title for dialog.
            * @param $directory Default directory.
            * @param $filters File extensions in form { "Image files", "png,jpg,jpeg", "All files", "*" }.
            */
            public static OpenFilePanelWithFilters ($title: string, $directory: string, $filters: System.Array$1<string>) : string
            public static RevealInFinder ($path: string) : void
            /** This method displays a modal dialog.
            * @param $title The title of the message box.
            * @param $message The text of the message.
            * @param $ok Label displayed on the OK dialog button.
            * @param $cancel Label displayed on the Cancel dialog button.
            * @returns Returns true if the user clicks the OK button. Returns false otherwise. 
            */
            public static DisplayDialog ($title: string, $message: string, $ok: string, $cancel: string) : boolean
            /** This method displays a modal dialog.
            * @param $title The title of the message box.
            * @param $message The text of the message.
            * @param $ok Label displayed on the OK dialog button.
            * @param $cancel Label displayed on the Cancel dialog button.
            * @returns Returns true if the user clicks the OK button. Returns false otherwise. 
            */
            public static DisplayDialog ($title: string, $message: string, $ok: string) : boolean
            /** Displays a modal dialog with three buttons.
            * @param $title Title for dialog.
            * @param $message Purpose for the dialog.
            * @param $ok Dialog function chosen.
            * @param $cancel Close dialog with no operation.
            * @param $alt Choose alternative dialog purpose.
            * @returns Returns the ID of a button. IDs are 0, 1, or 2 and they correspond to the ok, cancel and alt buttons respectively. An ID of 1, which corresponds to cancel, returns if the dialog is closed or the user presses the Escape key. 
            */
            public static DisplayDialogComplex ($title: string, $message: string, $ok: string, $cancel: string, $alt: string) : number
            /** Displays the "open folder" dialog and returns the selected path name.
            */
            public static OpenFolderPanel ($title: string, $folder: string, $defaultName: string) : string
            /** Displays the "save folder" dialog and returns the selected path name.
            */
            public static SaveFolderPanel ($title: string, $folder: string, $defaultName: string) : string
            public static WarnPrefab ($target: UnityEngine.Object, $title: string, $warning: string, $okButton: string) : boolean
            /** Returns a boolean value which represents the state of initialization of Unity extensions.
            */
            public static IsUnityExtensionsInitialized () : boolean
            /** Determines if an object is stored on disk.
            */
            public static IsPersistent ($target: UnityEngine.Object) : boolean
            /** Returns true if the provided string can be parsed as YAML.
            * @param $yaml String containing the value to be parsed.
            */
            public static IsValidUnityYAML ($yaml: string) : boolean
            /** Displays the "save file" dialog and returns the selected path name.
            * @param $title The title of the window to display.
            * @param $directory The working directory that this dialog opens on.
            * @param $defaultName The placeholder text to display in the "Save As" text field. This is the name of file to be saved. 
            * @param $extension The file extension to use in the saved file path. For example, enter "png" to save an image in the PNG format.
            * @returns A string path to the saved file if the dialog was canceled or the save failed, it returns an empty string. 
            */
            public static SaveFilePanel ($title: string, $directory: string, $defaultName: string, $extension: string) : string
            /** Human-like sorting.
            */
            public static NaturalCompare ($a: string, $b: string) : number
            /** Translates an instance ID to a reference to an object.
            */
            public static InstanceIDToObject ($instanceID: number) : UnityEngine.Object
            /** Compress a texture.
            */
            public static CompressTexture ($texture: UnityEngine.Texture2D, $format: UnityEngine.TextureFormat, $quality: number) : void
            /** Compress a cubemap texture.
            */
            public static CompressCubemapTexture ($texture: UnityEngine.Cubemap, $format: UnityEngine.TextureFormat, $quality: number) : void
            /** Marks target object as dirty.
            * @param $target The object to mark as dirty.
            */
            public static SetDirty ($target: UnityEngine.Object) : void
            /** Clear target's dirty flag.
            */
            public static ClearDirty ($target: UnityEngine.Object) : void
            public static InvokeDiffTool ($leftTitle: string, $leftFile: string, $rightTitle: string, $rightFile: string, $ancestorTitle: string, $ancestorFile: string) : string
            /** Copy all settings of a Unity Object.
            */
            public static CopySerialized ($source: UnityEngine.Object, $dest: UnityEngine.Object) : void
            /** Copies the serializable fields from one managed object to another.
            * @param $source The object to copy data from.
            * @param $dest The object to copy data to.
            */
            public static CopySerializedManagedFieldsOnly ($source: any, $dest: any) : void
            /** Calculates and returns a list of all assets the assets listed in roots depend on.
            */
            public static CollectDependencies ($roots: System.Array$1<UnityEngine.Object>) : System.Array$1<UnityEngine.Object>
            /** Collect all objects in the hierarchy rooted at each of the given objects.
            * @param $roots Array of objects where the search will start.
            * @returns Array of objects heirarchically attached to the search array. 
            */
            public static CollectDeepHierarchy ($roots: System.Array$1<UnityEngine.Object>) : System.Array$1<UnityEngine.Object>
            public static FormatBytes ($bytes: bigint) : string
            /** Displays or updates a progress bar.
            */
            public static DisplayProgressBar ($title: string, $info: string, $progress: number) : void
            /** Displays or updates a progress bar that has a cancel button.
            */
            public static DisplayCancelableProgressBar ($title: string, $info: string, $progress: number) : boolean
            /** Removes the progress bar.
            */
            public static ClearProgressBar () : void
            /** Is the object enabled (0 disabled, 1 enabled, -1 has no enabled button).
            */
            public static GetObjectEnabled ($target: UnityEngine.Object) : number
            /** Set the enabled state of the object.
            */
            public static SetObjectEnabled ($target: UnityEngine.Object, $enabled: boolean) : void
            /** Set the Scene View selected display mode for this Renderer.
            */
            public static SetSelectedRenderState ($renderer: UnityEngine.Renderer, $renderState: UnityEditor.EditorSelectedRenderState) : void
            public static OpenWithDefaultApp ($fileName: string) : void
            /** Sets this camera to allow animation of materials in the Editor.
            */
            public static SetCameraAnimateMaterials ($camera: UnityEngine.Camera, $animate: boolean) : void
            /** Sets the global time for this camera to use when rendering.
            */
            public static SetCameraAnimateMaterialsTime ($camera: UnityEngine.Camera, $time: number) : void
            /** Updates the global shader properties to use when rendering.
            * @param $time Time to use. -1 to disable.
            */
            public static UpdateGlobalShaderProperties ($time: number) : void
            /** Returns an integer that indicates the number of times the specified object's serialized properties have changed.
            * @param $instanceID The object's instance ID.
            * @param $target The object.
            */
            public static GetDirtyCount ($instanceID: number) : number
            /** Returns an integer that indicates the number of times the specified object's serialized properties have changed.
            * @param $instanceID The object's instance ID.
            * @param $target The object.
            */
            public static GetDirtyCount ($target: UnityEngine.Object) : number
            /** Gets a boolean value that indicates whether the specified object has changed since the last time it was saved.
            * @param $instanceID The object's instance ID.
            * @param $target The object.
            * @returns True if the object has changed; otherwise false. 
            */
            public static IsDirty ($instanceID: number) : boolean
            /** Gets a boolean value that indicates whether the specified object has changed since the last time it was saved.
            * @param $instanceID The object's instance ID.
            * @param $target The object.
            * @returns True if the object has changed; otherwise false. 
            */
            public static IsDirty ($target: UnityEngine.Object) : boolean
            /** Brings the project window to the front and focuses it.
            */
            public static FocusProjectWindow () : void
            /** The Unity Editor reloads script assemblies asynchronously on the next frame. This resets the state of all the scripts, but Unity does not compile any code that has changed since the previous compilation.
            */
            public static RequestScriptReload () : void
            /** Gets a boolean value. This value indicates whether your CPU is unable to execute Unity natively and is running an emulated version.
            */
            public static IsRunningUnderCPUEmulation () : boolean
            public static LoadWindowLayout ($path: string) : boolean
            /** Compress a texture.
            */
            public static CompressTexture ($texture: UnityEngine.Texture2D, $format: UnityEngine.TextureFormat, $quality: UnityEditor.TextureCompressionQuality) : void
            /** Compress a cubemap texture.
            */
            public static CompressCubemapTexture ($texture: UnityEngine.Cubemap, $format: UnityEngine.TextureFormat, $quality: UnityEditor.TextureCompressionQuality) : void
            /** Displays the "save file" dialog in the Assets folder of the project and returns the selected path name.
            * @param $title The title of the window to display.
            * @param $defaultName The placeholder text to display in the "Save As" text field. This is the name of file to be saved. 
            * @param $extension The file extension to use in the saved file path. For example, enter "png" to save an image in the PNG format.
            * @param $message The text summary to display in the dialog window.
            * @param $path The working directory for this dialog to open in. The default value is "Assets.".
            * @returns A string path to the saved file. If the dialog was canceled or the save failed, it returns an empty string. 
            */
            public static SaveFilePanelInProject ($title: string, $defaultName: string, $extension: string, $message: string) : string
            /** Displays the "save file" dialog in the Assets folder of the project and returns the selected path name.
            * @param $title The title of the window to display.
            * @param $defaultName The placeholder text to display in the "Save As" text field. This is the name of file to be saved. 
            * @param $extension The file extension to use in the saved file path. For example, enter "png" to save an image in the PNG format.
            * @param $message The text summary to display in the dialog window.
            * @param $path The working directory for this dialog to open in. The default value is "Assets.".
            * @returns A string path to the saved file. If the dialog was canceled or the save failed, it returns an empty string. 
            */
            public static SaveFilePanelInProject ($title: string, $defaultName: string, $extension: string, $message: string, $path: string) : string
            /** Copy all settings of a Unity Object to a second Object if they differ.
            */
            public static CopySerializedIfDifferent ($source: UnityEngine.Object, $dest: UnityEngine.Object) : void
            /** Unloads assets that are not used.
            * @param $includeMonoReferencesAsRoots When true, this method does not unload assets referenced by script properties and static variables.
            */
            public static UnloadUnusedAssetsImmediate () : void
            /** Unloads assets that are not used.
            * @param $includeMonoReferencesAsRoots When true, this method does not unload assets referenced by script properties and static variables.
            */
            public static UnloadUnusedAssetsImmediate ($includeMonoReferencesAsRoots: boolean) : void
            /** This method displays a modal dialog that lets the user opt-out of being shown the current dialog box again.
            * @param $dialogOptOutDecisionType The type of opt-out decision a user can make.
            * @param $dialogOptOutDecisionStorageKey The unique key setting to store the decision under.
            * @returns true if the user previously opted out of seeing the dialog associated with dialogOptOutDecisionStorageKey. Returns false if the user did not yet opt out. 
            */
            public static GetDialogOptOutDecision ($dialogOptOutDecisionType: UnityEditor.DialogOptOutDecisionType, $dialogOptOutDecisionStorageKey: string) : boolean
            /** This method displays a modal dialog that lets the user opt-out of being shown the current dialog box again.
            * @param $dialogOptOutDecisionType The type of opt-out decision a user can make.
            * @param $dialogOptOutDecisionStorageKey The unique key setting to store the decision under.
            * @param $optOutDecision The unique key setting to store the decision under.
            */
            public static SetDialogOptOutDecision ($dialogOptOutDecisionType: UnityEditor.DialogOptOutDecisionType, $dialogOptOutDecisionStorageKey: string, $optOutDecision: boolean) : void
            /** This method displays a modal dialog that lets the user opt-out of being shown the current dialog box again.
            * @param $title The title of the message box.
            * @param $message The text of the message.
            * @param $ok Label displayed on the OK dialog button.
            * @param $cancel Label displayed on the Cancel dialog button.
            * @param $dialogOptOutDecisionType The type of opt-out decision a user can make.
            * @param $dialogOptOutDecisionStorageKey The unique key setting to store the decision under.
            * @returns true if the user clicks the ok button, or previously opted out. Returns false if the user cancels or closes the dialog without making a decision. 
            */
            public static DisplayDialog ($title: string, $message: string, $ok: string, $dialogOptOutDecisionType: UnityEditor.DialogOptOutDecisionType, $dialogOptOutDecisionStorageKey: string) : boolean
            /** This method displays a modal dialog that lets the user opt-out of being shown the current dialog box again.
            * @param $title The title of the message box.
            * @param $message The text of the message.
            * @param $ok Label displayed on the OK dialog button.
            * @param $cancel Label displayed on the Cancel dialog button.
            * @param $dialogOptOutDecisionType The type of opt-out decision a user can make.
            * @param $dialogOptOutDecisionStorageKey The unique key setting to store the decision under.
            * @returns true if the user clicks the ok button, or previously opted out. Returns false if the user cancels or closes the dialog without making a decision. 
            */
            public static DisplayDialog ($title: string, $message: string, $ok: string, $cancel: string, $dialogOptOutDecisionType: UnityEditor.DialogOptOutDecisionType, $dialogOptOutDecisionStorageKey: string) : boolean
            /** Displays a popup menu.
            */
            public static DisplayPopupMenu ($position: UnityEngine.Rect, $menuItemPath: string, $command: UnityEditor.MenuCommand) : void
            public static DisplayCustomMenu ($position: UnityEngine.Rect, $options: System.Array$1<UnityEngine.GUIContent>, $selected: number, $callback: UnityEditor.EditorUtility.SelectMenuItemFunction, $userData: any) : void
            public static DisplayCustomMenu ($position: UnityEngine.Rect, $options: System.Array$1<UnityEngine.GUIContent>, $selected: number, $callback: UnityEditor.EditorUtility.SelectMenuItemFunction, $userData: any, $showHotkey: boolean) : void
            public static DisplayCustomMenu ($position: UnityEngine.Rect, $options: System.Array$1<UnityEngine.GUIContent>, $checkEnabled: System.Func$2<number, boolean>, $selected: number, $callback: UnityEditor.EditorUtility.SelectMenuItemFunction, $userData: any, $showHotkey?: boolean) : void
            /** Returns a text for a number of bytes.
            */
            public static FormatBytes ($bytes: number) : string
            /** Creates a game object with HideFlags and specified components.
            */
            public static CreateGameObjectWithHideFlags ($name: string, $flags: UnityEngine.HideFlags, ...components: System.Type[]) : UnityEngine.GameObject
            public static DisplayCustomMenuWithSeparators ($position: UnityEngine.Rect, $options: System.Array$1<string>, $enabled: System.Array$1<boolean>, $separator: System.Array$1<boolean>, $selected: System.Array$1<number>, $callback: UnityEditor.EditorUtility.SelectMenuItemFunction, $userData: any) : void
            /** Set custom diff tool settings.
            * @param $path Diff tool path.
            * @param $twoWayDiff Two - way diff command line.
            * @param $threeWayDiff Three - way diff command line.
            * @param $mergeCommand Merge command line.
            * @param $forceEnableCustomTool Sets Custom Tool as current active Revision Control Diff/Merge tool.
            */
            public static SetCustomDiffTool ($path: string, $twoWayDiff: string, $threeWayDiff: string, $mergeCommand: string, $forceEnableCustomTool?: boolean) : void
            /** Sets the default parent object for the active Scene.
            * @param $defaultParentObject The GameObject to set as the default parent object.
            */
            public static SetDefaultParentObject ($defaultParentObject: UnityEngine.GameObject) : void
            /** Clears the default parent GameObject from either a specific Scene or the active Scene.
            * @param $scene Specify a Scene to clear the default parent object for a specific Scene. If a Scene is not specified, this method clears the default parent object for the active Scene.
            */
            public static ClearDefaultParentObject ($scene: UnityEngine.SceneManagement.Scene) : void
            /** Clears the default parent GameObject from either a specific Scene or the active Scene.
            * @param $scene Specify a Scene to clear the default parent object for a specific Scene. If a Scene is not specified, this method clears the default parent object for the active Scene.
            */
            public static ClearDefaultParentObject () : void
            /** Open properties editor for an Object.
            * @param $obj The object to open in the properties editor.
            */
            public static OpenPropertyEditor ($obj: UnityEngine.Object) : void
            public constructor ()
        }
        /** The editor selected render mode for Scene View selection.
        */
        enum EditorSelectedRenderState
        { Hidden = 0, Wireframe = 1, Highlight = 2 }
        /** Compression Quality.
        */
        enum TextureCompressionQuality
        { Fast = 0, Normal = 50, Best = 100 }
        /** The type of opt-out decision a user can make.
        */
        enum DialogOptOutDecisionType
        { ForThisMachine = 0, ForThisSession = 1 }
        /** Used to extract the context for a MenuItem.
        */
        class MenuCommand extends System.Object
        {
            protected [__keep_incompatibility]: never;
            /** Context is the object that is the target of a menu command.
            */
            public context : UnityEngine.Object
            /** An integer for passing custom information to a menu item.
            */
            public userData : number
            public constructor ($inContext: UnityEngine.Object, $inUserData: number)
            public constructor ($inContext: UnityEngine.Object)
        }
        /** Flags for the PrefabUtility.ReplacePrefab function.
        */
        enum ReplacePrefabOptions
        { Default = 0, ConnectToPrefab = 1, ReplaceNameBased = 2 }
        /** The type of a Prefab object as returned by PrefabUtility.GetPrefabType.
        */
        enum PrefabType
        { None = 0, Prefab = 1, ModelPrefab = 2, PrefabInstance = 3, ModelPrefabInstance = 4, MissingPrefabInstance = 5, DisconnectedPrefabInstance = 6, DisconnectedModelPrefabInstance = 7 }
        /** The mode of interaction, user or automated, that an API method is called with.
        */
        enum InteractionMode
        { AutomatedAction = 0, UserAction = 1 }
        /** Use this class to set title text and icon for an Editor window.
        */
        class EditorWindowTitleAttribute extends System.Attribute implements System.Runtime.InteropServices._Attribute
        {
            protected [__keep_incompatibility]: never;
            /** Specifies an Editor window's title text.
            */
            public get title(): string;
            public set title(value: string);
            /** Specifies the path to an Editor window's default icon.
            */
            public get icon(): string;
            public set icon(value: string);
            /** When set to true Unity sets the window's icon name to be the same as its type name.
            */
            public get useTypeNameAsIconName(): boolean;
            public set useTypeNameAsIconName(value: boolean);
            public constructor ()
        }
        /** Lets you do move, copy, delete operations over files or directories.
        */
        class FileUtil extends System.Object
        {
            protected [__keep_incompatibility]: never;
            /** Deletes a file or a directory given a path.
            */
            public static DeleteFileOrDirectory ($path: string) : boolean
            /** Copies a file or a directory.
            */
            public static CopyFileOrDirectory ($source: string, $dest: string) : void
            /** Copies the file or directory.
            */
            public static CopyFileOrDirectoryFollowSymlinks ($source: string, $dest: string) : void
            /** Moves a file or a directory from a given path to another path.
            */
            public static MoveFileOrDirectory ($source: string, $dest: string) : void
            /** Returns a unique path in the Temp folder within your current project.
            */
            public static GetUniqueTempPathInProject () : string
            public static GetProjectRelativePath ($path: string) : string
            /** Converts a physical path to a logical path.
            * @param $path Physical path.
            * @returns Logical path. 
            */
            public static GetLogicalPath ($path: string) : string
            /** Converts a logical path to a physical path.
            * @param $path Logical path.
            * @returns Physical path. 
            */
            public static GetPhysicalPath ($path: string) : string
            /** Replaces a file.
            */
            public static ReplaceFile ($src: string, $dst: string) : void
            /** Replaces a directory.
            */
            public static ReplaceDirectory ($src: string, $dst: string) : void
            public constructor ()
        }
        /** GameObject utility functions.
        */
        class GameObjectUtility extends System.Object
        {
            protected [__keep_incompatibility]: never;
            /** Gets the StaticEditorFlags of the GameObject specified.
            * @param $go The GameObject whose flags you are interested in.
            * @returns The static editor flags of the GameObject specified. 
            */
            public static GetStaticEditorFlags ($go: UnityEngine.GameObject) : UnityEditor.StaticEditorFlags
            /** Sets the StaticEditorFlags of the specified GameObject.
            * @param $go The GameObject whose Static Editor Flags you want to set.
            * @param $flags The StaticEditorFlags to set on the GameObject.
            */
            public static SetStaticEditorFlags ($go: UnityEngine.GameObject, $flags: UnityEditor.StaticEditorFlags) : void
            /** Returns true if the passed in StaticEditorFlags are set on the GameObject specified.
            * @param $go The GameObject to check.
            * @param $flags The flags you want to check.
            * @returns Whether the GameObject's static flags match the flags specified. 
            */
            public static AreStaticEditorFlagsSet ($go: UnityEngine.GameObject, $flags: UnityEditor.StaticEditorFlags) : boolean
            /** Get the navmesh area index for the GameObject.
            * @param $go The GameObject to query.
            * @returns NavMesh area index. 
            */
            public static GetNavMeshArea ($go: UnityEngine.GameObject) : number
            /** Set the navmesh area for the gameobject.
            * @param $go GameObject to modify.
            * @param $areaIndex NavMesh area index to set.
            */
            public static SetNavMeshArea ($go: UnityEngine.GameObject, $areaIndex: number) : void
            /** Get the navmesh area index from the area name.
            * @param $name NavMesh area name to query.
            * @returns The NavMesh area index. If there is no NavMesh area with the requested name, the return value is -1. 
            */
            public static GetNavMeshAreaFromName ($name: string) : number
            /** Get all the navmesh area names.
            * @returns Names of all the NavMesh areas. 
            */
            public static GetNavMeshAreaNames () : System.Array$1<string>
            /** You can use this method before instantiating a new sibling, or before parenting one GameObject to another, to ensure the new child GameObject has a unique name compared to its siblings in the hierarchy.
            * @param $parent Target parent for a new GameObject. Null means root level.
            * @param $name Requested name for a new GameObject.
            * @returns Unique name for a new GameObject. 
            */
            public static GetUniqueNameForSibling ($parent: UnityEngine.Transform, $name: string) : string
            /** You can use this method after parenting one GameObject to another to ensure the child GameObject has a unique name compared to its siblings in the hierarchy.
            * @param $self The GameObject whose name you want to ensure is unique.
            */
            public static EnsureUniqueNameForSibling ($self: UnityEngine.GameObject) : void
            /** Sets the parent and gives the child the same layer and position.
            * @param $child The GameObject that should have a new parent set.
            * @param $parent The GameObject that the child should get as a parent and have position and layer copied from. If null, this function does nothing.
            */
            public static SetParentAndAlign ($child: UnityEngine.GameObject, $parent: UnityEngine.GameObject) : void
            /** Gets the number of MonoBehaviours with a missing script for the given GameObject.
            * @param $go GameObject to query.
            * @returns The number of MonoBehaviours with a missing script. 
            */
            public static GetMonoBehavioursWithMissingScriptCount ($go: UnityEngine.GameObject) : number
            /** Removes the MonoBehaviours with a missing script from the given GameObject.
            * @param $go The GameObject to remove MonoBehaviours with a missing script from.
            * @returns The number of MonoBehaviours with a missing script that were removed. 
            */
            public static RemoveMonoBehavioursWithMissingScript ($go: UnityEngine.GameObject) : number
            /** Use this method if a custom scene culling mask is needed for renderers that should be shown or hidden in a Scene view when Prefab Mode in Context is active.
            * @param $sceneCullingMask The scene culling mask intended to be used with the custom renderer.
            * @param $gameObject The GameObject associated with the custom renderer.
            * @returns If the GameObject is hidden for Prefab Mode in Context, a modified scene culling mask is returned. If it's not hidden, then the input scene culling mask is returned. 
            */
            public static ModifyMaskIfGameObjectIsHiddenForPrefabModeInContext ($sceneCullingMask: bigint, $gameObject: UnityEngine.GameObject) : bigint
            /** Duplicates an array of GameObjects and returns the array of the new GameObject roots.
            * @param $gameObjects The array of GameObjects to be duplicated.
            * @returns The array of the duplicated GameObject roots. 
            */
            public static DuplicateGameObjects ($gameObjects: System.Array$1<UnityEngine.GameObject>) : System.Array$1<UnityEngine.GameObject>
            /** Duplicates a single GameObject and returns the new GameObject.
            * @param $gameObject The GameObject to be duplicated.
            * @returns The duplicated GameObject. 
            */
            public static DuplicateGameObject ($gameObject: UnityEngine.GameObject) : UnityEngine.GameObject
            public constructor ()
        }
        /** Describes which Unity systems consider the GameObject as static, and include the GameObject in their precomputations in the Unity Editor.
        */
        enum StaticEditorFlags
        { ContributeGI = 1, OccluderStatic = 2, OccludeeStatic = 16, BatchingStatic = 4, NavigationStatic = 8, OffMeshLinkGeneration = 32, ReflectionProbeStatic = 64, LightmapStatic = 1 }
        enum GameViewSizeGroupType
        { Standalone = 0, WebPlayer = 1, iOS = 2, Android = 3, PS3 = 4, WiiU = 5, Tizen = 6, WP8 = 7, N3DS = 8, HMD = 9 }
        /** The lighting data asset used by the active Scene.
        */
        class LightingDataAsset extends UnityEngine.Object
        {
            protected [__keep_incompatibility]: never;
        }
        /** This class is now obsolete. Use LightingSettings.
        */
        class LightmapEditorSettings extends System.Object
        {
            protected [__keep_incompatibility]: never;
            /** Determines how Unity will compress baked reflection cubemap.
            */
            public static get reflectionCubemapCompression(): UnityEngine.Rendering.ReflectionCubemapCompression;
            public static set reflectionCubemapCompression(value: UnityEngine.Rendering.ReflectionCubemapCompression);
        }
        /** Bake quality setting for LightmapEditorSettings.
        */
        enum LightmapBakeQuality
        { High = 0, Low = 1 }
        /** Configures how Unity bakes lighting and can be assigned to a LightingSettings instance or asset.
        */
        class LightmapParameters extends UnityEngine.Object
        {
            protected [__keep_incompatibility]: never;
            /** The texel resolution per meter used for real-time lightmaps. This value is multiplied by LightingSettings.indirectResolution.
            */
            public get resolution(): number;
            public set resolution(value: number);
            /** Controls the resolution at which Enlighten Realtime Global Illumination stores and can transfer input light.
            */
            public get clusterResolution(): number;
            public set clusterResolution(value: number);
            /** The amount of data used for Enlighten Realtime Global Illumination texels. Specifies how detailed view of the Scene a texel has. Small values mean more averaged out lighting.
            */
            public get irradianceBudget(): number;
            public set irradianceBudget(value: number);
            /** The number of rays to cast for computing irradiance form factors.
            */
            public get irradianceQuality(): number;
            public set irradianceQuality(value: number);
            /** Maximum size of gaps that can be ignored for GI (multiplier on pixel size).
            */
            public get modellingTolerance(): number;
            public set modellingTolerance(value: number);
            /** Whether pairs of edges should be stitched together.
            */
            public get stitchEdges(): boolean;
            public set stitchEdges(value: boolean);
            /** If enabled, the object appears transparent during GlobalIllumination lighting calculations.
            */
            public get isTransparent(): boolean;
            public set isTransparent(value: boolean);
            /** System tag is an integer identifier. It lets you force an object into a different Enlighten Realtime Global Illumination system even though all the other parameters are the same.
            */
            public get systemTag(): number;
            public set systemTag(value: number);
            /** The radius (in texels) of the post-processing filter that blurs baked direct lighting.
            */
            public get blurRadius(): number;
            public set blurRadius(value: number);
            /** The kernel width the lightmapper uses when sampling a lightmap texel.
            */
            public get antiAliasingSamples(): number;
            public set antiAliasingSamples(value: number);
            /** The number of rays used for lights with an area. Allows for accurate soft shadowing.
            */
            public get directLightQuality(): number;
            public set directLightQuality(value: number);
            /** The distance to offset the ray origin from the geometry when performing ray tracing, in modelling units. Unity applies the offset to all baked lighting: direct lighting, indirect lighting, environment lighting and ambient occlusion.
            */
            public get pushoff(): number;
            public set pushoff(value: number);
            /** BakedLightmapTag is an integer that affects the assignment to baked lightmaps. Objects with different values for bakedLightmapTag are guaranteed to not be assigned to the same lightmap even if the other baking parameters are the same.
            */
            public get bakedLightmapTag(): number;
            public set bakedLightmapTag(value: number);
            /** If enabled, objects sharing the same lightmap parameters will be packed into LightmapParameters.maxLightmapCount lightmaps.
            */
            public get limitLightmapCount(): boolean;
            public set limitLightmapCount(value: boolean);
            /** The maximum number of lightmaps created for objects sharing the same lightmap parameters. This property is ignored if LightmapParameters.limitLightmapCount is false.
            */
            public get maxLightmapCount(): number;
            public set maxLightmapCount(value: number);
            /** The number of rays to cast for computing ambient occlusion.
            */
            public get AOQuality(): number;
            public set AOQuality(value: number);
            /** The maximum number of times to supersample a texel to reduce aliasing in AO.
            */
            public get AOAntiAliasingSamples(): number;
            public set AOAntiAliasingSamples(value: number);
            /** The percentage of rays shot from a ray origin that must hit front faces to be considered usable.
            */
            public get backFaceTolerance(): number;
            public set backFaceTolerance(value: number);
            /** Returns the assigned LightmapParameters for the specified LightingSettings.
            */
            public static GetLightmapParametersForLightingSettings ($lightingSettings: UnityEngine.LightingSettings) : UnityEditor.LightmapParameters
            /** Sets the LightmapParameters for the specified LightingSettings.
            */
            public static SetLightmapParametersForLightingSettings ($parameters: UnityEditor.LightmapParameters, $lightingSettings: UnityEngine.LightingSettings) : void
            /** Assignes itself to a LightingSettings instance or asset.
            */
            public AssignToLightingSettings ($lightingSettings: UnityEngine.LightingSettings) : void
            public constructor ()
        }
        /** Allows to control the lightmapping job.
        */
        class Lightmapping extends System.Object
        {
            protected [__keep_incompatibility]: never;
            /** This property is now obsolete. Use LightingSettings.realtimeGI.
            */
            public static get realtimeGI(): boolean;
            public static set realtimeGI(value: boolean);
            /** This property is now obsolete. Use LightingSettings.bakedGI.
            */
            public static get bakedGI(): boolean;
            public static set bakedGI(value: boolean);
            /** Returns true when the bake job is running, false otherwise (Read Only).
            */
            public static get isRunning(): boolean;
            /** Returns the current lightmapping build progress or 0 if Lightmapping.isRunning is false.
            */
            public static get buildProgress(): number;
            /** The lighting data asset used by the active Scene.
            */
            public static get lightingDataAsset(): UnityEditor.LightingDataAsset;
            public static set lightingDataAsset(value: UnityEditor.LightingDataAsset);
            /** The LightingSettings that will be used for the current Scene. Will throw an exception if it is null.
            */
            public static get lightingSettings(): UnityEngine.LightingSettings;
            public static set lightingSettings(value: UnityEngine.LightingSettings);
            /** Default LightingSettings that Unity uses for Scenes where lightingSettings is not assigned. (Read only)
            */
            public static get lightingSettingsDefaults(): UnityEngine.LightingSettings;
            /** Clears the cache used by lightmaps, reflection probes and default reflection.
            */
            public static ClearDiskCache () : void
            /** Starts an asynchronous bake job.
            * @returns Returns true if the bake was successfully started. Will return false and print a warning message if it's not possible to start the bake. 
            */
            public static BakeAsync () : boolean
            /** Starts a synchronous bake job.
            * @returns Returns true if the bake ran successfully. Will return false and print a warning message if it's not possible to start the bake. 
            */
            public static Bake () : boolean
            /** Cancels the currently running asynchronous bake job.
            */
            public static Cancel () : void
            public static add_started ($value: UnityEditor.Lightmapping.OnStartedFunction) : void
            public static remove_started ($value: UnityEditor.Lightmapping.OnStartedFunction) : void
            public static add_bakeStarted ($value: System.Action) : void
            public static remove_bakeStarted ($value: System.Action) : void
            public static add_lightingDataUpdated ($value: System.Action) : void
            public static remove_lightingDataUpdated ($value: System.Action) : void
            public static add_lightingDataCleared ($value: System.Action) : void
            public static remove_lightingDataCleared ($value: System.Action) : void
            public static add_lightingDataAssetCleared ($value: System.Action) : void
            public static remove_lightingDataAssetCleared ($value: System.Action) : void
            public static add_bakeCompleted ($value: System.Action) : void
            public static remove_bakeCompleted ($value: System.Action) : void
            /** Deletes all runtime data for the currently loaded Scenes.
            */
            public static Clear () : void
            /** For the currently loaded Scenes, this method deletes the Lighting Data Asset and any linked lightmaps and Reflection Probe assets.
            */
            public static ClearLightingDataAsset () : void
            /** Calculates tetrahderons from positions using Delaunay Tetrahedralization.
            * @param $positions An array of Light Probe positions.
            * @param $outIndices An array that Unity populates with updated Light Probe indices.
            * @param $outPositions An array that Unity populates with updated Light Probe positions.
            */
            public static Tetrahedralize ($positions: System.Array$1<UnityEngine.Vector3>, $outIndices: $Ref<System.Array$1<number>>, $outPositions: $Ref<System.Array$1<UnityEngine.Vector3>>) : void
            /** Starts a synchronous bake job for the probe.
            * @param $probe Target probe.
            * @param $path The location where cubemap will be saved.
            * @returns Returns true if baking was succesful. 
            */
            public static BakeReflectionProbe ($probe: UnityEngine.ReflectionProbe, $path: string) : boolean
            /** Get how many chunks the terrain is divided into for GI baking.
            * @param $terrain The terrain.
            * @param $numChunksX Number of chunks in terrain width.
            * @param $numChunksY Number of chunks in terrain length.
            */
            public static GetTerrainGIChunks ($terrain: UnityEngine.Terrain, $numChunksX: $Ref<number>, $numChunksY: $Ref<number>) : void
            /** Fetches the Lighting Settings for the current Scene. Will return false if it is null.
            * @param $settings See Lightmapping.lightingSettings.
            * @returns Returns true if there is an object, and false if it isn't. 
            */
            public static TryGetLightingSettings ($settings: $Ref<UnityEngine.LightingSettings>) : boolean
            /** Applies the settings specified in the LightingSettings object to the SceneManagement.Scene object.
            * @param $scene The SceneManagement.Scene object. If the Scene.isLoaded property is false, the method does not apply the settings.
            * @param $lightingSettings The LightingSettings object.
            */
            public static SetLightingSettingsForScene ($scene: UnityEngine.SceneManagement.Scene, $lightingSettings: UnityEngine.LightingSettings) : void
            /** Applies the settings specified in the LightingSettings object to an array of SceneManagement.Scene objects.
            * @param $scenes The array of SceneManagement.Scene objects. If the Scene.isLoaded property is false on a Scene object, the method does not apply the settings to that object.
            * @param $lightingSettings The LightingSettings object.
            */
            public static SetLightingSettingsForScenes ($scenes: System.Array$1<UnityEngine.SceneManagement.Scene>, $lightingSettings: UnityEngine.LightingSettings) : void
            /** Gets the LightingSettings object of a SceneManagement.Scene object.
            * @param $scene The SceneManagement.Scene object.
            * @returns The LightingSettings object if Scene.isLoaded is true. Otherwise returns null. 
            */
            public static GetLightingSettingsForScene ($scene: UnityEngine.SceneManagement.Scene) : UnityEngine.LightingSettings
            /** Bakes an array of Scenes.
            * @param $paths The path of the Scenes that should be baked.
            */
            public static BakeMultipleScenes ($paths: System.Array$1<string>) : void
        }
        class LightmapSnapshot extends UnityEngine.Object
        {
            protected [__keep_incompatibility]: never;
            public constructor ()
        }
        /** Struct providing an API for stable, project-global object identifiers.
        */
        class GlobalObjectId extends System.ValueType implements System.IComparable$1<UnityEditor.GlobalObjectId>, System.IEquatable$1<UnityEditor.GlobalObjectId>
        {
            protected [__keep_incompatibility]: never;
            /** The local file ID of the object.
            */
            public get targetObjectId(): bigint;
            /** The prefab instance id of the object.
            */
            public get targetPrefabId(): bigint;
            /** The GUID for the asset to which this object belongs.
            */
            public get assetGUID(): UnityEditor.GUID;
            /** The identifier type represented as an integer.
            */
            public get identifierType(): number;
            /** Converts an Object reference or InstanceID to a GlobalObjectId.
            * @param $targetObject The Object to be converted.
            * @param $instanceId The InstanceID of the Object to be converted.
            * @returns The converted GlobalObjectId. If the conversion is unsuccessful, the GlobalObjectId is set to the default null ID: "GlobalObjectId_V1-0-00000000000000000000000000000000-0-0". 
            */
            public static GetGlobalObjectIdSlow ($targetObject: UnityEngine.Object) : UnityEditor.GlobalObjectId
            /** Creates an array of GlobalObjectIds based on an array of Objects or InstanceIDs.
            * @param $objects Array of Objects to convert.
            * @param $outputIdentifiers Resulting array of GlobalObjectIds.
            * @param $instanceIds Array of InstanceIDs to convert.
            */
            public static GetGlobalObjectIdsSlow ($objects: System.Array$1<UnityEngine.Object>, $outputIdentifiers: System.Array$1<UnityEditor.GlobalObjectId>) : void
            /** Converts an Object reference or InstanceID to a GlobalObjectId.
            * @param $targetObject The Object to be converted.
            * @param $instanceId The InstanceID of the Object to be converted.
            * @returns The converted GlobalObjectId. If the conversion is unsuccessful, the GlobalObjectId is set to the default null ID: "GlobalObjectId_V1-0-00000000000000000000000000000000-0-0". 
            */
            public static GetGlobalObjectIdSlow ($instanceId: number) : UnityEditor.GlobalObjectId
            /** Creates an array of GlobalObjectIds based on an array of Objects or InstanceIDs.
            * @param $objects Array of Objects to convert.
            * @param $outputIdentifiers Resulting array of GlobalObjectIds.
            * @param $instanceIds Array of InstanceIDs to convert.
            */
            public static GetGlobalObjectIdsSlow ($instanceIds: System.Array$1<number>, $outputIdentifiers: System.Array$1<UnityEditor.GlobalObjectId>) : void
            /** Check equality between two GlobalObjectIds.
            */
            public Equals ($other: UnityEditor.GlobalObjectId) : boolean
            /** Returns an integer value comparing the value of the two GlobalObjectId types.
            * @param $other The other GlobalObjectId to compare.
            * @returns Value comparing the value of the two GlobalObjectId types. Zero will be returned if the values are equal. 
            */
            public CompareTo ($other: UnityEditor.GlobalObjectId) : number
            /** Parses the string representation of a GlobalObjectId into a GlobalObjectId struct.
            * @param $stringValue The string representation of a GlobalObjectId.
            Example: "GlobalObjectId_V1-2-74c253e3f16be4776bb2d88e01f77c8a-902906726-0".
            * @param $id The GlobalObjectId struct for the parsed values.
            * @returns Returns true if the string representation is successfully parsed. Otherwise, returns false. 
            */
            public static TryParse ($stringValue: string, $id: $Ref<UnityEditor.GlobalObjectId>) : boolean
            /** Converts a GlobalObjectId to an Object reference.
            * @param $id The GlobalObjectId to lookup.
            * @returns If the GlobalObjectId is found, this method returns the converted Object reference. Returns null if the GlobalObjectId is not found.
            Returns null when the object is inside a scene that is not loaded. 
            */
            public static GlobalObjectIdentifierToObjectSlow ($id: UnityEditor.GlobalObjectId) : UnityEngine.Object
            /** Creates an array of Objects based on an array of GlobalObjectIds.
            * @param $identifiers Array of GlobalObjectIds to convert.
            * @param $outputObjects Resulting array of Object references.
            */
            public static GlobalObjectIdentifiersToObjectsSlow ($identifiers: System.Array$1<UnityEditor.GlobalObjectId>, $outputObjects: System.Array$1<UnityEngine.Object>) : void
            /** Converts a GlobalObjectId to an InstanceID.
            * @param $id The GlobalObjectId to lookup.
            * @returns If the GlobalObjectId is found, this method returns the converted InstanceID. Returns 0 if the GlobalObjectId is not found.
            Returns 0 when the object is inside a scene that is not already loaded. 
            */
            public static GlobalObjectIdentifierToInstanceIDSlow ($id: UnityEditor.GlobalObjectId) : number
            /** Creates an array of InstanceIDs based on an array of GlobalObjectIds.
            * @param $identifiers Array of GlobalObjectIds to convert.
            * @param $outputInstanceIDs Resulting array of InstanceIDs.
            */
            public static GlobalObjectIdentifiersToInstanceIDsSlow ($identifiers: System.Array$1<UnityEditor.GlobalObjectId>, $outputInstanceIDs: System.Array$1<number>) : void
        }
        class EditorMaterialUtility extends System.Object
        {
            protected [__keep_incompatibility]: never;
            public static ResetDefaultTextures ($material: UnityEngine.Material, $overrideSetTextures: boolean) : void
            public static IsBackgroundMaterial ($material: UnityEngine.Material) : boolean
            public static SetShaderDefaults ($shader: UnityEngine.Shader, $name: System.Array$1<string>, $textures: System.Array$1<UnityEngine.Texture>) : void
            public static SetShaderNonModifiableDefaults ($shader: UnityEngine.Shader, $name: System.Array$1<string>, $textures: System.Array$1<UnityEngine.Texture>) : void
            public constructor ()
        }
        /** Control the behavior of handle snapping in the editor.
        */
        class EditorSnapSettings extends System.Object
        {
            protected [__keep_incompatibility]: never;
            /** Gets or sets whether grid snapping is enabled.
            */
            public static get gridSnapEnabled(): boolean;
            public static set gridSnapEnabled(value: boolean);
            /** Gets or sets whether snapping is enabled.
            */
            public static get snapEnabled(): boolean;
            public static set snapEnabled(value: boolean);
            /** Gets whether grid snapping is active.
            */
            public static get gridSnapActive(): boolean;
            /** Gets whether increment snapping is active.
            */
            public static get incrementalSnapActive(): boolean;
            /** Gets or sets the grid size used for snapping.
            */
            public static get gridSize(): UnityEngine.Vector3;
            public static set gridSize(value: UnityEngine.Vector3);
            /** Gets or sets the increment that translation handles snap to.
            */
            public static get move(): UnityEngine.Vector3;
            public static set move(value: UnityEngine.Vector3);
            /** Gets or sets the increment that rotation handles snap to.
            */
            public static get rotate(): number;
            public static set rotate(value: number);
            /** Gets or sets the increment that scale handles snap to.
            */
            public static get scale(): number;
            public static set scale(value: number);
            public static add_gridSnapEnabledChanged ($value: System.Action) : void
            public static remove_gridSnapEnabledChanged ($value: System.Action) : void
            public static add_snapEnabledChanged ($value: System.Action) : void
            public static remove_snapEnabledChanged ($value: System.Action) : void
            /** Resets EditorSnap settings to default values.
            */
            public static ResetSnapSettings () : void
        }
        /** Common GUIStyles used for EditorGUI controls.
        */
        class EditorStyles extends System.Object
        {
            protected [__keep_incompatibility]: never;
            /** Style used for the labelled on all EditorGUI overloads that take a prefix label.
            */
            public static get label(): UnityEngine.GUIStyle;
            /** Style for label with small font.
            */
            public static get miniLabel(): UnityEngine.GUIStyle;
            /** Style for label with large font.
            */
            public static get largeLabel(): UnityEngine.GUIStyle;
            /** Style for bold label.
            */
            public static get boldLabel(): UnityEngine.GUIStyle;
            /** Style for mini bold label.
            */
            public static get miniBoldLabel(): UnityEngine.GUIStyle;
            /** Style for label with small font which is centered and grey.
            */
            public static get centeredGreyMiniLabel(): UnityEngine.GUIStyle;
            /** Style for word wrapped mini label.
            */
            public static get wordWrappedMiniLabel(): UnityEngine.GUIStyle;
            /** Style for word wrapped label.
            */
            public static get wordWrappedLabel(): UnityEngine.GUIStyle;
            /** Style used for links.
            */
            public static get linkLabel(): UnityEngine.GUIStyle;
            /** Style for white label.
            */
            public static get whiteLabel(): UnityEngine.GUIStyle;
            /** Style for white mini label.
            */
            public static get whiteMiniLabel(): UnityEngine.GUIStyle;
            /** Style for white large label.
            */
            public static get whiteLargeLabel(): UnityEngine.GUIStyle;
            /** Style for white bold label.
            */
            public static get whiteBoldLabel(): UnityEngine.GUIStyle;
            /** Style used for a radio button.
            */
            public static get radioButton(): UnityEngine.GUIStyle;
            /** Style used for a standalone small button.
            */
            public static get miniButton(): UnityEngine.GUIStyle;
            /** Style used for the leftmost button in a horizontal button group.
            */
            public static get miniButtonLeft(): UnityEngine.GUIStyle;
            /** Style used for the middle buttons in a horizontal group.
            */
            public static get miniButtonMid(): UnityEngine.GUIStyle;
            /** Style used for the rightmost button in a horizontal group.
            */
            public static get miniButtonRight(): UnityEngine.GUIStyle;
            /** Style used for the drop-down controls.
            */
            public static get miniPullDown(): UnityEngine.GUIStyle;
            /** Style used for EditorGUI.TextField.
            */
            public static get textField(): UnityEngine.GUIStyle;
            /** Style used for EditorGUI.TextArea.
            */
            public static get textArea(): UnityEngine.GUIStyle;
            /** Smaller text field.
            */
            public static get miniTextField(): UnityEngine.GUIStyle;
            /** Style used for field editors for numbers.
            */
            public static get numberField(): UnityEngine.GUIStyle;
            /** Style used for EditorGUI.Popup, EditorGUI.EnumPopup,.
            */
            public static get popup(): UnityEngine.GUIStyle;
            /** Style used for headings for object fields.
            */
            public static get objectField(): UnityEngine.GUIStyle;
            /** Style used for headings for the Select button in object fields.
            */
            public static get objectFieldThumb(): UnityEngine.GUIStyle;
            /** Style used for object fields that have a thumbnail (e.g Textures). 
            */
            public static get objectFieldMiniThumb(): UnityEngine.GUIStyle;
            /** Style used for headings for Color fields.
            */
            public static get colorField(): UnityEngine.GUIStyle;
            /** Style used for headings for Layer masks.
            */
            public static get layerMaskField(): UnityEngine.GUIStyle;
            /** Style used for headings for EditorGUI.Toggle.
            */
            public static get toggle(): UnityEngine.GUIStyle;
            /** Style used for headings for EditorGUI.Foldout.
            */
            public static get foldout(): UnityEngine.GUIStyle;
            /** Style used for headings for EditorGUI.Foldout.
            */
            public static get foldoutPreDrop(): UnityEngine.GUIStyle;
            /** Style used for headings for EditorGUILayout.BeginFoldoutHeaderGroup.
            */
            public static get foldoutHeader(): UnityEngine.GUIStyle;
            /** Style used for icon for EditorGUILayout.BeginFoldoutHeaderGroup.
            */
            public static get foldoutHeaderIcon(): UnityEngine.GUIStyle;
            /** Style used for headings for EditorGUILayout.BeginToggleGroup.
            */
            public static get toggleGroup(): UnityEngine.GUIStyle;
            /** Standard font.
            */
            public static get standardFont(): UnityEngine.Font;
            /** Bold font.
            */
            public static get boldFont(): UnityEngine.Font;
            /** Mini font.
            */
            public static get miniFont(): UnityEngine.Font;
            /** Mini Bold font.
            */
            public static get miniBoldFont(): UnityEngine.Font;
            /** Toolbar background from top of windows.
            */
            public static get toolbar(): UnityEngine.GUIStyle;
            /** Style for Button and Toggles in toolbars.
            */
            public static get toolbarButton(): UnityEngine.GUIStyle;
            /** Toolbar Popup.
            */
            public static get toolbarPopup(): UnityEngine.GUIStyle;
            /** Toolbar Dropdown.
            */
            public static get toolbarDropDown(): UnityEngine.GUIStyle;
            /** Toolbar text field.
            */
            public static get toolbarTextField(): UnityEngine.GUIStyle;
            /** Wrap content in a vertical group with this style to get the default margins used in the Inspector.
            */
            public static get inspectorDefaultMargins(): UnityEngine.GUIStyle;
            /** Wrap content in a vertical group with this style to get full width margins in the Inspector.
            */
            public static get inspectorFullWidthMargins(): UnityEngine.GUIStyle;
            /** Style used for background box for EditorGUI.HelpBox.
            */
            public static get helpBox(): UnityEngine.GUIStyle;
            /** Toolbar search field.
            */
            public static get toolbarSearchField(): UnityEngine.GUIStyle;
            /** Style used for a standalone icon button.
            */
            public static get iconButton(): UnityEngine.GUIStyle;
            /** Style used to draw a marquee selection rect in the SceneView.
            */
            public static get selectionRect(): UnityEngine.GUIStyle;
            public static FromUSS ($ussStyleRuleName: string, $ussInPlaceStyleOverride?: string) : UnityEngine.GUIStyle
            public static FromUSS ($baseStyle: UnityEngine.GUIStyle, $ussStyleRuleName: string, $ussInPlaceStyleOverride?: string) : UnityEngine.GUIStyle
            public static ApplyUSS ($style: UnityEngine.GUIStyle, $ussStyleRuleName: string, $ussInPlaceStyleOverride?: string) : UnityEngine.GUIStyle
            public constructor ()
        }
        interface IApplyRevertPropertyContextMenuItemProvider
        {
            TryGetRevertMethodForFieldName ($property: UnityEditor.SerializedProperty, $revertMethod: $Ref<System.Action$1<UnityEditor.SerializedProperty>>) : boolean
            TryGetApplyMethodForFieldName ($property: UnityEditor.SerializedProperty, $applyMethod: $Ref<System.Action$1<UnityEditor.SerializedProperty>>) : boolean
            /** Returns the name of the source term to be used in the apply/revert menu item.
            */
            GetSourceTerm () : string
            /** Returns the component specific name to be used in the apply menu item.
            */
            GetSourceName ($comp: UnityEngine.Component) : string
        }
        /** Class used to display popup windows that inherit from PopupWindowContent.
        */
        class PopupWindow extends UnityEditor.EditorWindow
        {
            protected [__keep_incompatibility]: never;
            /** Show a popup with the given PopupWindowContent.
            * @param $activatorRect The rect of the button that opens the popup.
            * @param $windowContent The content to show in the popup window.
            */
            public static Show ($activatorRect: UnityEngine.Rect, $windowContent: UnityEditor.PopupWindowContent) : void
            /** Show the EditorWindow window.
            * @param $immediateDisplay Immediately display Show.
            */
            public Show () : void
            /** Show the EditorWindow window.
            * @param $immediateDisplay Immediately display Show.
            */
            public Show ($immediateDisplay: boolean) : void
        }
        /** Enum for Tools.viewTool.
        */
        enum ViewTool
        { None = -1, Orbit = 0, Pan = 1, Zoom = 2, FPS = 3 }
        /** Where is the tool handle placed.
        */
        enum PivotMode
        { Center = 0, Pivot = 1 }
        /** How is the tool handle oriented.
        */
        enum PivotRotation
        { Local = 0, Global = 1 }
        /** Which tool is active in the editor.
        */
        enum Tool
        { View = 0, Move = 1, Rotate = 2, Scale = 3, Rect = 4, Transform = 5, Custom = 6, None = -1 }
        /** Class used to manipulate the tools used in Unity's Scene View.
        */
        class Tools extends UnityEngine.ScriptableObject
        {
            protected [__keep_incompatibility]: never;
            /** The tool that is currently selected for the Scene View.
            */
            public static get current(): UnityEditor.Tool;
            public static set current(value: UnityEditor.Tool);
            /** The option that is currently active for the View tool in the Scene view.
            */
            public static get viewTool(): UnityEditor.ViewTool;
            public static set viewTool(value: UnityEditor.ViewTool);
            /** Returns true if the active tool is a view or navigation tool.
            */
            public static get viewToolActive(): boolean;
            /** The position of the tool handle in world space.
            */
            public static get handlePosition(): UnityEngine.Vector3;
            /** The rectangle used for the rect tool.
            */
            public static get handleRect(): UnityEngine.Rect;
            /** The rotation of the rect tool handle in world space.
            */
            public static get handleRectRotation(): UnityEngine.Quaternion;
            /** Are we in Center or Pivot mode.
            */
            public static get pivotMode(): UnityEditor.PivotMode;
            public static set pivotMode(value: UnityEditor.PivotMode);
            /** Is the rect handle in blueprint mode?
            */
            public static get rectBlueprintMode(): boolean;
            public static set rectBlueprintMode(value: boolean);
            /** The rotation of the tool handle in world space.
            */
            public static get handleRotation(): UnityEngine.Quaternion;
            public static set handleRotation(value: UnityEngine.Quaternion);
            /** What's the rotation of the tool handle.
            */
            public static get pivotRotation(): UnityEditor.PivotRotation;
            public static set pivotRotation(value: UnityEditor.PivotRotation);
            /** Hides the Tools(Move, Rotate, Resize) handles in the Scene view.
            */
            public static get hidden(): boolean;
            public static set hidden(value: boolean);
            /** Which layers are visible in the Scene view.
            */
            public static get visibleLayers(): number;
            public static set visibleLayers(value: number);
            public static get lockedLayers(): number;
            public static set lockedLayers(value: number);
            public static add_pivotModeChanged ($value: System.Action) : void
            public static remove_pivotModeChanged ($value: System.Action) : void
            public static add_pivotRotationChanged ($value: System.Action) : void
            public static remove_pivotRotationChanged ($value: System.Action) : void
            public static add_viewToolChanged ($value: System.Action) : void
            public static remove_viewToolChanged ($value: System.Action) : void
            public constructor ()
        }
        /** Helper functions for Scene View style 3D GUI.
        */
        class HandleUtility extends System.Object
        {
            protected [__keep_incompatibility]: never;
            /** Get standard acceleration for dragging values (Read Only).
            */
            public static get acceleration(): number;
            /** Get nice mouse delta to use for dragging a float value (Read Only).
            */
            public static get niceMouseDelta(): number;
            /** Get nice mouse delta to use for zooming (Read Only).
            */
            public static get niceMouseDeltaZoom(): number;
            /** The controlID of the nearest Handle to the mouse cursor.
            */
            public static get nearestControl(): number;
            public static set nearestControl(value: number);
            public static get handleMaterial(): UnityEngine.Material;
            /** Calculate distance between a point and a Bezier curve.
            */
            public static DistancePointBezier ($point: UnityEngine.Vector3, $startPosition: UnityEngine.Vector3, $endPosition: UnityEngine.Vector3, $startTangent: UnityEngine.Vector3, $endTangent: UnityEngine.Vector3) : number
            /** Map a mouse drag onto a movement along a line in 3D space.
            * @param $src The source point of the drag.
            * @param $dest The destination point of the drag.
            * @param $srcPosition The 3D position the dragged object had at src ray.
            * @param $constraintDir Normalized 3D direction of constrained movement.
            * @returns The distance travelled along constraintDir. 
            */
            public static CalcLineTranslation ($src: UnityEngine.Vector2, $dest: UnityEngine.Vector2, $srcPosition: UnityEngine.Vector3, $constraintDir: UnityEngine.Vector3) : number
            /** Returns the parameter for the projection of the point on the given line.
            */
            public static PointOnLineParameter ($point: UnityEngine.Vector3, $linePoint: UnityEngine.Vector3, $lineDirection: UnityEngine.Vector3) : number
            /** Project point onto a line.
            */
            public static ProjectPointLine ($point: UnityEngine.Vector3, $lineStart: UnityEngine.Vector3, $lineEnd: UnityEngine.Vector3) : UnityEngine.Vector3
            /** Calculate distance between a point and a line.
            */
            public static DistancePointLine ($point: UnityEngine.Vector3, $lineStart: UnityEngine.Vector3, $lineEnd: UnityEngine.Vector3) : number
            /** Returns the distance in pixels from the mouse pointer to a line.
            */
            public static DistanceToLine ($p1: UnityEngine.Vector3, $p2: UnityEngine.Vector3) : number
            /** Returns the distance in pixels from the mouse pointer to a camera facing circle.
            */
            public static DistanceToCircle ($position: UnityEngine.Vector3, $radius: number) : number
            public static DistanceToCircle ($projection: UnityEditor.CameraProjectionCache, $position: UnityEngine.Vector3, $radius: number) : number
            /** Returns the distance in pixels from the mouse pointer to a cone.
            * @param $position Position of the cone.
            * @param $rotation Rotation of the cone.
            * @param $size Size of the cone.
            * @returns Distance from mouse to cone in pixels. 
            */
            public static DistanceToCone ($position: UnityEngine.Vector3, $rotation: UnityEngine.Quaternion, $size: number) : number
            /** Returns the distance in pixels from the mouse pointer to a cube.
            * @param $position Position of the cube.
            * @param $rotation Rotation of the cube.
            * @param $size Size of the cube.
            * @returns Distance from mouse to cube in pixels. 
            */
            public static DistanceToCube ($position: UnityEngine.Vector3, $rotation: UnityEngine.Quaternion, $size: number) : number
            /** Returns the distance in pixels from the mouse pointer to a rectangle on screen.
            */
            public static DistanceToRectangle ($position: UnityEngine.Vector3, $rotation: UnityEngine.Quaternion, $size: number) : number
            /** Distance from a point p in 2d to a line defined by two points a and b.
            */
            public static DistancePointToLine ($p: UnityEngine.Vector2, $a: UnityEngine.Vector2, $b: UnityEngine.Vector2) : number
            /** Distance from a point p in 2d to a line segment defined by two points a and b.
            */
            public static DistancePointToLineSegment ($p: UnityEngine.Vector2, $a: UnityEngine.Vector2, $b: UnityEngine.Vector2) : number
            /** Returns the distance in pixels from the mouse pointer to a 3D disc.
            */
            public static DistanceToDisc ($center: UnityEngine.Vector3, $normal: UnityEngine.Vector3, $radius: number) : number
            /** Get the point on an disc (in 3D space) which is closest to the current mouse position.
            */
            public static ClosestPointToDisc ($center: UnityEngine.Vector3, $normal: UnityEngine.Vector3, $radius: number) : UnityEngine.Vector3
            /** Returns the distance in pixels from the mouse pointer to a 3D section of a disc.
            */
            public static DistanceToArc ($center: UnityEngine.Vector3, $normal: UnityEngine.Vector3, $from: UnityEngine.Vector3, $angle: number, $radius: number) : number
            /** Get the point on an arc (in 3D space) which is closest to the current mouse position.
            */
            public static ClosestPointToArc ($center: UnityEngine.Vector3, $normal: UnityEngine.Vector3, $from: UnityEngine.Vector3, $angle: number, $radius: number) : UnityEngine.Vector3
            /** Returns the distance in pixels from the mouse pointer to a polyline.
            */
            public static DistanceToPolyLine (...points: UnityEngine.Vector3[]) : number
            /** Get the point on a polyline (in 3D space) which is closest to the current mouse position.
            */
            public static ClosestPointToPolyLine (...vertices: UnityEngine.Vector3[]) : UnityEngine.Vector3
            /** Record a distance measurement from a handle.
            * @param $controlId The ID that is recorded as the nearest control if the mouse cursor is near the handle.
            * @param $distance The distance from the mouse cursor to the handle.
            */
            public static AddControl ($controlId: number, $distance: number) : void
            /** Add the ID for a default control. This will be picked if nothing else is.
            */
            public static AddDefaultControl ($controlId: number) : void
            /** Get world space size of a manipulator handle at given position.
            * @param $position The position of the handle in 3d space.
            * @returns A constant screen-size for the handle, based on the distance between from the supplied handle's position to the camera. 
            */
            public static GetHandleSize ($position: UnityEngine.Vector3) : number
            /** Convert a world space point to a 2D GUI position.
            * @param $world Point in world space.
            */
            public static WorldToGUIPoint ($world: UnityEngine.Vector3) : UnityEngine.Vector2
            /** Convert a world space point to a 2D GUI position.
            * @param $world Point in world space.
            * @returns A Vector3 where the x and y values relate to the 2D GUI position. The z value is the distance in world units from the camera. 
            */
            public static WorldToGUIPointWithDepth ($world: UnityEngine.Vector3) : UnityEngine.Vector3
            public static WorldToGUIPointWithDepth ($camera: UnityEngine.Camera, $world: UnityEngine.Vector3) : UnityEngine.Vector3
            /** Converts a 2D GUI position to screen pixel coordinates.
            */
            public static GUIPointToScreenPixelCoordinate ($guiPoint: UnityEngine.Vector2) : UnityEngine.Vector2
            /** Convert 2D GUI position to a world space ray.
            */
            public static GUIPointToWorldRay ($position: UnityEngine.Vector2) : UnityEngine.Ray
            /** Calculate a rectangle to display a 2D GUI element near a projected point in 3D space.
            * @param $position The world-space position to use.
            * @param $content The content to make room for.
            * @param $style The style to use. The style's alignment.
            */
            public static WorldPointToSizedRect ($position: UnityEngine.Vector3, $content: UnityEngine.GUIContent, $style: UnityEngine.GUIStyle) : UnityEngine.Rect
            /** Pick GameObjects that lie within a specified screen rectangle.
            * @param $rect A screen rectangle specified with pixel coordinates.
            */
            public static PickRectObjects ($rect: UnityEngine.Rect) : System.Array$1<UnityEngine.GameObject>
            public static PickRectObjects ($rect: UnityEngine.Rect, $selectPrefabRootsOnly: boolean) : System.Array$1<UnityEngine.GameObject>
            /** Returns the nearest vertex to a guiPoint within a maximum radius of 50 pixels.
            * @param $guiPoint A point in GUI space.
            * @param $vertex The nearest vertex position to guiPoint, or a default value if no vertex is within the minimum picking distance.
            * @param $objectsToSearch An array of Transform to consider when picking the nearest vertex. If null, all active objects in open scenes are considered.
            * @param $objectsToIgnore An array of Transform to exclude from consideration when picking nearest vertex.
            * @param $gameObject The GameObject that contains the nearest vertex found by this function. Null if no vertex was found.
            * @returns Returns true if a vertex within 50 pixels of the guiPoint was found, false if no vertex found within the minimum picking radius. 
            */
            public static FindNearestVertex ($guiPoint: UnityEngine.Vector2, $vertex: $Ref<UnityEngine.Vector3>, $gameObject: $Ref<UnityEngine.GameObject>) : boolean
            /** Returns the nearest vertex to a guiPoint within a maximum radius of 50 pixels.
            * @param $guiPoint A point in GUI space.
            * @param $vertex The nearest vertex position to guiPoint, or a default value if no vertex is within the minimum picking distance.
            * @param $objectsToSearch An array of Transform to consider when picking the nearest vertex. If null, all active objects in open scenes are considered.
            * @param $objectsToIgnore An array of Transform to exclude from consideration when picking nearest vertex.
            * @param $gameObject The GameObject that contains the nearest vertex found by this function. Null if no vertex was found.
            * @returns Returns true if a vertex within 50 pixels of the guiPoint was found, false if no vertex found within the minimum picking radius. 
            */
            public static FindNearestVertex ($guiPoint: UnityEngine.Vector2, $objectsToSearch: System.Array$1<UnityEngine.Transform>, $vertex: $Ref<UnityEngine.Vector3>, $gameObject: $Ref<UnityEngine.GameObject>) : boolean
            /** Returns the nearest vertex to a guiPoint within a maximum radius of 50 pixels.
            * @param $guiPoint A point in GUI space.
            * @param $vertex The nearest vertex position to guiPoint, or a default value if no vertex is within the minimum picking distance.
            * @param $objectsToSearch An array of Transform to consider when picking the nearest vertex. If null, all active objects in open scenes are considered.
            * @param $objectsToIgnore An array of Transform to exclude from consideration when picking nearest vertex.
            * @param $gameObject The GameObject that contains the nearest vertex found by this function. Null if no vertex was found.
            * @returns Returns true if a vertex within 50 pixels of the guiPoint was found, false if no vertex found within the minimum picking radius. 
            */
            public static FindNearestVertex ($guiPoint: UnityEngine.Vector2, $objectsToSearch: System.Array$1<UnityEngine.Transform>, $objectsToIgnore: System.Array$1<UnityEngine.Transform>, $vertex: $Ref<UnityEngine.Vector3>, $gameObject: $Ref<UnityEngine.GameObject>) : boolean
            /** Returns the nearest vertex to a guiPoint within a maximum radius of 50 pixels.
            * @param $guiPoint A point in GUI space.
            * @param $vertex The nearest vertex position to guiPoint, or a default value if no vertex is within the minimum picking distance.
            * @param $objectsToSearch An array of Transform to consider when picking the nearest vertex. If null, all active objects in open scenes are considered.
            * @param $objectsToIgnore An array of Transform to exclude from consideration when picking nearest vertex.
            * @param $gameObject The GameObject that contains the nearest vertex found by this function. Null if no vertex was found.
            * @returns Returns true if a vertex within 50 pixels of the guiPoint was found, false if no vertex found within the minimum picking radius. 
            */
            public static FindNearestVertex ($guiPoint: UnityEngine.Vector2, $vertex: $Ref<UnityEngine.Vector3>) : boolean
            /** Returns the nearest vertex to a guiPoint within a maximum radius of 50 pixels.
            * @param $guiPoint A point in GUI space.
            * @param $vertex The nearest vertex position to guiPoint, or a default value if no vertex is within the minimum picking distance.
            * @param $objectsToSearch An array of Transform to consider when picking the nearest vertex. If null, all active objects in open scenes are considered.
            * @param $objectsToIgnore An array of Transform to exclude from consideration when picking nearest vertex.
            * @param $gameObject The GameObject that contains the nearest vertex found by this function. Null if no vertex was found.
            * @returns Returns true if a vertex within 50 pixels of the guiPoint was found, false if no vertex found within the minimum picking radius. 
            */
            public static FindNearestVertex ($guiPoint: UnityEngine.Vector2, $objectsToSearch: System.Array$1<UnityEngine.Transform>, $vertex: $Ref<UnityEngine.Vector3>) : boolean
            /** Returns the nearest vertex to a guiPoint within a maximum radius of 50 pixels.
            * @param $guiPoint A point in GUI space.
            * @param $vertex The nearest vertex position to guiPoint, or a default value if no vertex is within the minimum picking distance.
            * @param $objectsToSearch An array of Transform to consider when picking the nearest vertex. If null, all active objects in open scenes are considered.
            * @param $objectsToIgnore An array of Transform to exclude from consideration when picking nearest vertex.
            * @param $gameObject The GameObject that contains the nearest vertex found by this function. Null if no vertex was found.
            * @returns Returns true if a vertex within 50 pixels of the guiPoint was found, false if no vertex found within the minimum picking radius. 
            */
            public static FindNearestVertex ($guiPoint: UnityEngine.Vector2, $objectsToSearch: System.Array$1<UnityEngine.Transform>, $objectsToIgnore: System.Array$1<UnityEngine.Transform>, $vertex: $Ref<UnityEngine.Vector3>) : boolean
            public static add_pickGameObjectCustomPasses ($value: UnityEditor.HandleUtility.PickGameObjectCallback) : void
            public static remove_pickGameObjectCustomPasses ($value: UnityEditor.HandleUtility.PickGameObjectCallback) : void
            /** Pick game object closest to specified position.
            * @param $selectPrefabRoot Select Prefab.
            * @param $materialIndex Returns index into material array of the Renderer component that is closest to specified position.
            * @param $position A position in screen coordinates. The top-left of the window is (0,0), and the bottom-right is (Screen.width, Screen.height).
            * @param $ignore An array of GameObjects that will not be considered when selecting the nearest GameObject.
            * @param $filter An array of GameObjects to be exclusively considered for selection. If null, all GameObjects in open scenes are eligible for selection.
            * @param $selection An array of GameObjects to be exclusively considered for selection. If null, all GameObjects in open scenes are eligible for selection.
            * @returns The GameObject that is under the requested position. 
            */
            public static PickGameObject ($position: UnityEngine.Vector2, $materialIndex: $Ref<number>) : UnityEngine.GameObject
            /** Pick game object closest to specified position.
            * @param $selectPrefabRoot Select Prefab.
            * @param $materialIndex Returns index into material array of the Renderer component that is closest to specified position.
            * @param $position A position in screen coordinates. The top-left of the window is (0,0), and the bottom-right is (Screen.width, Screen.height).
            * @param $ignore An array of GameObjects that will not be considered when selecting the nearest GameObject.
            * @param $filter An array of GameObjects to be exclusively considered for selection. If null, all GameObjects in open scenes are eligible for selection.
            * @param $selection An array of GameObjects to be exclusively considered for selection. If null, all GameObjects in open scenes are eligible for selection.
            * @returns The GameObject that is under the requested position. 
            */
            public static PickGameObject ($position: UnityEngine.Vector2, $ignore: System.Array$1<UnityEngine.GameObject>, $materialIndex: $Ref<number>) : UnityEngine.GameObject
            /** Pick game object closest to specified position.
            * @param $selectPrefabRoot Select Prefab.
            * @param $materialIndex Returns index into material array of the Renderer component that is closest to specified position.
            * @param $position A position in screen coordinates. The top-left of the window is (0,0), and the bottom-right is (Screen.width, Screen.height).
            * @param $ignore An array of GameObjects that will not be considered when selecting the nearest GameObject.
            * @param $filter An array of GameObjects to be exclusively considered for selection. If null, all GameObjects in open scenes are eligible for selection.
            * @param $selection An array of GameObjects to be exclusively considered for selection. If null, all GameObjects in open scenes are eligible for selection.
            * @returns The GameObject that is under the requested position. 
            */
            public static PickGameObject ($position: UnityEngine.Vector2, $selectPrefabRoot: boolean) : UnityEngine.GameObject
            /** Pick game object closest to specified position.
            * @param $selectPrefabRoot Select Prefab.
            * @param $materialIndex Returns index into material array of the Renderer component that is closest to specified position.
            * @param $position A position in screen coordinates. The top-left of the window is (0,0), and the bottom-right is (Screen.width, Screen.height).
            * @param $ignore An array of GameObjects that will not be considered when selecting the nearest GameObject.
            * @param $filter An array of GameObjects to be exclusively considered for selection. If null, all GameObjects in open scenes are eligible for selection.
            * @param $selection An array of GameObjects to be exclusively considered for selection. If null, all GameObjects in open scenes are eligible for selection.
            * @returns The GameObject that is under the requested position. 
            */
            public static PickGameObject ($position: UnityEngine.Vector2, $selectPrefabRoot: boolean, $ignore: System.Array$1<UnityEngine.GameObject>) : UnityEngine.GameObject
            /** Pick game object closest to specified position.
            * @param $selectPrefabRoot Select Prefab.
            * @param $materialIndex Returns index into material array of the Renderer component that is closest to specified position.
            * @param $position A position in screen coordinates. The top-left of the window is (0,0), and the bottom-right is (Screen.width, Screen.height).
            * @param $ignore An array of GameObjects that will not be considered when selecting the nearest GameObject.
            * @param $filter An array of GameObjects to be exclusively considered for selection. If null, all GameObjects in open scenes are eligible for selection.
            * @param $selection An array of GameObjects to be exclusively considered for selection. If null, all GameObjects in open scenes are eligible for selection.
            * @returns The GameObject that is under the requested position. 
            */
            public static PickGameObject ($position: UnityEngine.Vector2, $selectPrefabRoot: boolean, $ignore: System.Array$1<UnityEngine.GameObject>, $filter: System.Array$1<UnityEngine.GameObject>) : UnityEngine.GameObject
            /** Pick game object closest to specified position.
            * @param $selectPrefabRoot Select Prefab.
            * @param $materialIndex Returns index into material array of the Renderer component that is closest to specified position.
            * @param $position A position in screen coordinates. The top-left of the window is (0,0), and the bottom-right is (Screen.width, Screen.height).
            * @param $ignore An array of GameObjects that will not be considered when selecting the nearest GameObject.
            * @param $filter An array of GameObjects to be exclusively considered for selection. If null, all GameObjects in open scenes are eligible for selection.
            * @param $selection An array of GameObjects to be exclusively considered for selection. If null, all GameObjects in open scenes are eligible for selection.
            * @returns The GameObject that is under the requested position. 
            */
            public static PickGameObject ($position: UnityEngine.Vector2, $ignore: System.Array$1<UnityEngine.GameObject>, $selection: System.Array$1<UnityEngine.GameObject>, $materialIndex: $Ref<number>) : UnityEngine.GameObject
            /** Pick game object closest to specified position.
            * @param $selectPrefabRoot Select Prefab.
            * @param $materialIndex Returns index into material array of the Renderer component that is closest to specified position.
            * @param $position A position in screen coordinates. The top-left of the window is (0,0), and the bottom-right is (Screen.width, Screen.height).
            * @param $ignore An array of GameObjects that will not be considered when selecting the nearest GameObject.
            * @param $filter An array of GameObjects to be exclusively considered for selection. If null, all GameObjects in open scenes are eligible for selection.
            * @param $selection An array of GameObjects to be exclusively considered for selection. If null, all GameObjects in open scenes are eligible for selection.
            * @returns The GameObject that is under the requested position. 
            */
            public static PickGameObject ($position: UnityEngine.Vector2, $selectPrefabRoot: boolean, $ignore: System.Array$1<UnityEngine.GameObject>, $filter: System.Array$1<UnityEngine.GameObject>, $materialIndex: $Ref<number>) : UnityEngine.GameObject
            /** Gets the picking PickingIncludeExcludeList for the currently executing BatchRendererGroup.OnPerformCulling callback.
            * @param $allocator The allocator to use to create the PickingIncludeExcludeList object.
            * @returns The PickingIncludeExcludeList struct. 
            */
            public static GetPickingIncludeExcludeList ($allocator?: Unity.Collections.Allocator) : UnityEditor.PickingIncludeExcludeList
            /** Gets the selection outline PickingIncludeExcludeList for the currently executing BatchRendererGroup.OnPerformCulling callback.
            * @param $allocator The allocator to use to create the PickingIncludeExcludeList object.
            * @returns The PickingIncludeExcludeList struct. 
            */
            public static GetSelectionOutlineIncludeExcludeList ($allocator?: Unity.Collections.Allocator) : UnityEditor.PickingIncludeExcludeList
            public static add_getEntitiesForAuthoringObject ($value: System.Func$2<UnityEngine.Object, System.Collections.Generic.IEnumerable$1<number>>) : void
            public static remove_getEntitiesForAuthoringObject ($value: System.Func$2<UnityEngine.Object, System.Collections.Generic.IEnumerable$1<number>>) : void
            public static add_getAuthoringObjectForEntity ($value: System.Func$2<number, UnityEngine.Object>) : void
            public static remove_getAuthoringObjectForEntity ($value: System.Func$2<number, UnityEngine.Object>) : void
            /** Store all camera settings.
            */
            public static PushCamera ($camera: UnityEngine.Camera) : void
            /** Retrieve all camera settings.
            */
            public static PopCamera ($camera: UnityEngine.Camera) : void
            /** Casts ray against the Scene and reports whether an object lies in its path.
            * @returns A boxed RaycastHit, null if nothing hit it. 
            */
            public static RaySnap ($ray: UnityEngine.Ray) : any
            public static add_placeObjectCustomPasses ($value: UnityEditor.HandleUtility.PlaceObjectDelegate) : void
            public static remove_placeObjectCustomPasses ($value: UnityEditor.HandleUtility.PlaceObjectDelegate) : void
            /** Casts a ray against the loaded scenes and returns the nearest intersected point on a collider.
            * @param $guiPosition The GUI position in the SceneView. You can pass Event.current.mousePosition to this parameter in most cases.
            * @param $position Returns the nearest intersected point to a ray cast from the mouse position into the scene.
            * @param $normal Returns the normal of the nearest intersected point to a ray cast from the mouse position into the scene.
            * @returns Returns true if the raycast intersected something in the scene; otherwise, false. 
            */
            public static PlaceObject ($guiPosition: UnityEngine.Vector2, $position: $Ref<UnityEngine.Vector3>, $normal: $Ref<UnityEngine.Vector3>) : boolean
            /** Repaint the current view.
            */
            public static Repaint () : void
            public static RegisterRenderPickingCallback ($renderPickingCallback: UnityEditor.HandleUtility.RenderPickingCallback) : boolean
            public static UnregisterRenderPickingCallback ($renderPickingCallback: UnityEditor.HandleUtility.RenderPickingCallback) : boolean
            /** Translates a single integer picking index into a Vector4 selectionId value. The Vector4 selectionId is used to render the picking render textures during picking rendering.
            * @param $pickingIndex The picking index to encode. For example, a picking index passed from RenderPickingArgs.pickingIndex).
            * @returns The Vector4 selectionId value used for rendering. 
            */
            public static EncodeSelectionId ($pickingIndex: number) : UnityEngine.Vector4
            /** Translates a Vector4 selectionId value retrieved from GPU into a single integer picking index.
            * @param $selectionId The selection ID retrieved from GPU to translate into a picking index.
            * @returns The decoded picking index. 
            */
            public static DecodeSelectionId ($selectionId: UnityEngine.Vector4) : number
            public static GetOverlappingObjects ($position: UnityEngine.Vector2, $outObjectList: System.Collections.Generic.List$1<UnityEngine.Object>) : void
            public constructor ()
        }
        /** Represents a list of Unity Object and <a href="https:docs.unity3d.comPackagescom.unity.entities@latestindex.html?subfolder=manualecs_entities.html">DOTS Entity<a> IDs that picking algorithms can either consider or discard.
        */
        class PickingIncludeExcludeList extends System.ValueType implements System.IDisposable
        {
            protected [__keep_incompatibility]: never;
            /** An array of GameObjects that the picking algorithm exclusively considers when it selects the nearest object. If this is null, Unity considers all GameObjects in open scenes for selection.
            */
            public get IncludeRenderers(): Unity.Collections.NativeArray$1<number>;
            /** An array of GameObjects that the picking algorithm doesn't consider when it selects the nearest object.
            */
            public get ExcludeRenderers(): Unity.Collections.NativeArray$1<number>;
            /** An array of DOTS Entity IDs that the picking algorithm exclusively considers when it selects the nearest object. If this is null, Unity considers all DOTS Entities in open scenes for selection.
            */
            public get IncludeEntities(): Unity.Collections.NativeArray$1<number>;
            /** An array of DOTS Entity IDs that the picking algorithm doesn't consider when it selects the nearest object.
            */
            public get ExcludeEntities(): Unity.Collections.NativeArray$1<number>;
            /** Dispose all the Unity.Collections.NativeArray inside the struct.
            */
            public Dispose () : void
            public constructor ($includeRendererInstanceIDs: System.Collections.Generic.List$1<number>, $excludeRendererInstanceIDs: System.Collections.Generic.List$1<number>, $includeEntityIndices: System.Collections.Generic.List$1<number>, $excludeEntityIndices: System.Collections.Generic.List$1<number>, $allocator?: Unity.Collections.Allocator)
        }
        /** This struct contains information to notify Unity the outcome of this render picking callback.
        */
        class RenderPickingResult extends System.ValueType
        {
            protected [__keep_incompatibility]: never;
            /** The constant value to be returned from HandleUtility.RenderPickingCallback delegates signifying that nothing has been rendered.
            */
            public static NoOperation : UnityEditor.RenderPickingResult
            /** The number of consecutive picking indices used during the current HandleUtility.RenderPickingCallback.
            */
            public get renderedPickingIndexCount(): number;
            /** The callback to invoke to resolve a picking index into a GameObject reference.
            */
            public get resolver(): UnityEditor.HandleUtility.ResolvePickingCallback;
            /** The callback to invoke to resolve a picking index into a GameObject reference.
            */
            public get resolverWithWorldPos(): UnityEditor.HandleUtility.ResolvePickingWithWorldPositionCallback;
            public constructor ($renderedPickingIndexCount: number, $resolver: UnityEditor.HandleUtility.ResolvePickingCallback)
            public constructor ($renderedPickingIndexCount: number, $resolver: UnityEditor.HandleUtility.ResolvePickingWithWorldPositionCallback)
        }
        /** Provides information about what is expected to render during the current picking rendering callback.
        */
        class RenderPickingArgs extends System.ValueType
        {
            protected [__keep_incompatibility]: never;
            /** Specifies the picking index value that the first pickable object uses to write to the picking render texture.
            */
            public get pickingIndex(): number;
            /** Specifies the type of the current picking rendering the callback is invoked with.
            */
            public get renderPickingType(): UnityEditor.RenderPickingType;
            /** A set of GameObjects to check and determine what this callback is expected to render.
            */
            public get renderObjectSet(): System.Collections.Generic.IReadOnlyCollection$1<UnityEngine.GameObject>;
            /** The function tests whether a GameObject is in the RenderPickingArgs.renderObjectSet.
            * @param $go The GameObject to test.
            * @returns True if the GameObject is in either the ignore set or the filter set depending on RenderPickingArgs.renderPickingType|renderPickingType. 
            */
            public RenderObjectSetContains ($go: UnityEngine.GameObject) : boolean
            /** Checks whether a GameObject should be rendered in the current render picking callback.
            * @param $go The GameObject to test.
            * @returns True if the GameObject should be rendered. 
            */
            public NeedToRenderForPicking ($go: UnityEngine.GameObject) : boolean
        }
        /** Specifies the type of a render picking callback.
        */
        enum RenderPickingType
        { RenderFromIgnoreSet = 0, RenderFromFilterSet = 1 }
        /** Helper class to access Unity documentation.
        */
        class Help extends System.Object
        {
            protected [__keep_incompatibility]: never;
            /** Is there a help page for this object?
            */
            public static HasHelpForObject ($obj: UnityEngine.Object) : boolean
            /** Get the URL for this object's documentation.
            * @param $obj The object to retrieve documentation for.
            * @returns The documentation URL for the object. Note that this could use the https: or file: schemas. 
            */
            public static GetHelpURLForObject ($obj: UnityEngine.Object) : string
            /** Show help page for this object.
            */
            public static ShowHelpForObject ($obj: UnityEngine.Object) : void
            /** Show a help page.
            */
            public static ShowHelpPage ($page: string) : void
            /** Open url in the default web browser.
            */
            public static BrowseURL ($url: string) : void
            public constructor ()
        }
        enum HierarchyType
        { Assets = 1, GameObjects = 2 }
        enum IconDrawStyle
        { NonTexture = 0, Texture = 1 }
        enum BodyPart
        { None = -1, Avatar = 0, Body = 1, Head = 2, LeftArm = 3, LeftFingers = 4, RightArm = 5, RightFingers = 6, LeftLeg = 7, RightLeg = 8, Last = 9 }
        enum BoneState
        { None = 0, NotFound = 1, Duplicate = 2, InvalidHierarchy = 3, BoneLenghtIsZero = 4, Valid = 5 }
        /** Unity Camera Editor.
        */
        class CameraEditor extends UnityEditor.Editor implements UnityEditor.IToolModeOwner, UnityEditor.IPreviewable
        {
            protected [__keep_incompatibility]: never;
            /** See ScriptableObject.OnEnable.
            */
            public OnEnable () : void
            /** See ScriptableObject.OnDestroy.
            */
            public OnDestroy () : void
            /** See ScriptableObject.OnDisable.
            */
            public OnDisable () : void
            /** See Editor.OnSceneGUI.
            */
            public OnSceneGUI () : void
            public constructor ()
        }
        /** Utilities for cameras.
        */
        class CameraEditorUtils extends System.Object
        {
            protected [__keep_incompatibility]: never;
            /** The aspect ratio of the game view.
            */
            public static get GameViewAspectRatio(): number;
            /** Override this function to pass your own Camera provider to generate previews for virtual cameras.
            */
            public static get virtualCameraPreviewInstantiator(): System.Func$1<UnityEngine.Camera>;
            public static set virtualCameraPreviewInstantiator(value: System.Func$1<UnityEngine.Camera>);
            public static HandleFrustum ($c: UnityEngine.Camera, $cameraEditorTargetIndex: number) : void
            /** Draw the frustrum gizmo of a camera.
            * @param $camera The camera to use.
            */
            public static DrawFrustumGizmo ($camera: UnityEngine.Camera) : void
            /** Calculate the frustrum corners from the sensor physical properties, without taking gate fitting into account.
            To get the actual frustum with gate fit adjustment, use CameraEditorUtils.TryGetFrustum.
            This method is equivalent to CameraEditorUtils.TryGetFrustum for non-physical cameras.
            Corners are calculated in this order: left bottom, left top, right top, right bottom.
            * @param $camera Camera to use.
            * @param $near The corners of the near plane. (A minimum size of 4 elements is required.)
            * @param $far The corners of the far plane. (A minimum size of 4 elements is required.)
            * @param $frustumAspect The aspect ratio of the frustrum.
            * @returns Whether the frustrum was calculated. 
            */
            public static TryGetSensorGateFrustum ($camera: UnityEngine.Camera, $near: System.Array$1<UnityEngine.Vector3>, $far: System.Array$1<UnityEngine.Vector3>, $frustumAspect: $Ref<number>) : boolean
            /** Calculate the frustrum corners.
            Corners are calculated in this order: left bottom, left top, right top, right bottom.
            * @param $camera Camera to use.
            * @param $near The corners of the near plane. (A minimum size of 4 elements is required.)
            * @param $far The corners of the far plane. (A minimum size of 4 elements is required.)
            * @param $frustumAspect The aspect ratio of the frustrum.
            * @returns Whether the frustrum was calculated. 
            */
            public static TryGetFrustum ($camera: UnityEngine.Camera, $near: System.Array$1<UnityEngine.Vector3>, $far: System.Array$1<UnityEngine.Vector3>, $frustumAspect: $Ref<number>) : boolean
            /** Check whether a viewport is valid.
            * @param $normalizedViewPortRect Viewport to check.
            * @returns Whether the viewport is valid. 
            */
            public static IsViewportRectValidToRender ($normalizedViewPortRect: UnityEngine.Rect) : boolean
            /** Calculate the frustrum aspect ratio of a camera.
            * @param $camera Camera to use.
            * @returns The frustrum aspect ratio of the provided camera. 
            */
            public static GetFrustumAspectRatio ($camera: UnityEngine.Camera) : number
            /** Calculate the world space position of a point in clip space.
            The z component will be used to get the point at the distance z from the viewer.
            * @param $clipToWorld Clip to world matrix to use.
            * @param $viewPositionWS The viewer's position in world space.
            * @param $positionCS The position in clip space.
            * @returns The corresponding world space position. 
            */
            public static PerspectiveClipToWorld ($clipToWorld: UnityEngine.Matrix4x4, $viewPositionWS: UnityEngine.Vector3, $positionCS: UnityEngine.Vector3) : UnityEngine.Vector3
            /** Calculate the points of the frustrum plane facing the viewer at a specific distance.
            The points array will be filled with the calculated points in the following order: left bottom, left top, right top and right bottom.
            * @param $clipToWorld Clip space to world space matrix.
            * @param $viewPosition View position in world space.
            * @param $distance Distance from the view position of the plane.
            * @param $points Calculated points.  (A minimum size of 4 elements is required).
            */
            public static GetFrustumPlaneAt ($clipToWorld: UnityEngine.Matrix4x4, $viewPosition: UnityEngine.Vector3, $distance: number, $points: System.Array$1<UnityEngine.Vector3>) : void
        }
        /** Tells an Editor class which run-time type it's an editor for.
        */
        class CustomEditor extends System.Attribute implements System.Runtime.InteropServices._Attribute
        {
            protected [__keep_incompatibility]: never;
            /** If true, match this editor only if all non-fallback editors do not match. Defaults to false.
            */
            public get isFallback(): boolean;
            public set isFallback(value: boolean);
            public constructor ($inspectedType: System.Type)
            public constructor ($inspectedType: System.Type, $editorForChildClasses: boolean)
        }
        /** Adds an extra preview in the Inspector for the specified type.
        */
        class CustomPreviewAttribute extends System.Attribute implements System.Runtime.InteropServices._Attribute
        {
            protected [__keep_incompatibility]: never;
            public constructor ($type: System.Type)
        }
        /** Base Class to derive from when creating Custom Previews.
        */
        class ObjectPreview extends System.Object implements UnityEditor.IPreviewable
        {
            protected [__keep_incompatibility]: never;
            /** The object currently being previewed.
            */
            public get target(): UnityEngine.Object;
            /** Use this function to release resources allocated by the ObjectPreview implementation.
            */
            public Cleanup () : void
            /** Called when the Preview gets created with the objects being previewed.
            * @param $targets The objects being previewed.
            */
            public Initialize ($targets: System.Array$1<UnityEngine.Object>) : void
            /** Called to iterate through the targets, this will be used when previewing more than one target.
            * @returns True if there is another target available. 
            */
            public MoveNextTarget () : boolean
            /** Called to Reset the target before iterating through them.
            */
            public ResetTarget () : void
            /** Can this component be Previewed in its current state?
            * @returns True if this component can be Previewed in its current state. 
            */
            public HasPreviewGUI () : boolean
            /** See Editor.CreatePreview.
            */
            public CreatePreview ($inspectorPreviewWindow: UnityEngine.UIElements.VisualElement) : UnityEngine.UIElements.VisualElement
            /** Override this method if you want to change the label of the Preview area.
            */
            public GetPreviewTitle () : UnityEngine.GUIContent
            /** Implement to create your own custom preview for the preview area of the inspector, primary editor headers and the object selector.
            * @param $r Rectangle in which to draw the preview.
            * @param $background Background image.
            */
            public OnPreviewGUI ($r: UnityEngine.Rect, $background: UnityEngine.GUIStyle) : void
            /** Implement to create your own interactive custom preview. Interactive custom previews are used in the preview area of the inspector and the object selector.
            * @param $r Rectangle in which to draw the preview.
            * @param $background Background image.
            */
            public OnInteractivePreviewGUI ($r: UnityEngine.Rect, $background: UnityEngine.GUIStyle) : void
            /** Override this method if you want to show custom controls in the preview header.
            */
            public OnPreviewSettings () : void
            /** Implement this method to show object information on top of the object preview.
            */
            public GetInfoString () : string
            /** This is the first entry point for Preview Drawing.
            * @param $previewArea The available area to draw the preview.
            */
            public DrawPreview ($previewArea: UnityEngine.Rect) : void
            public ReloadPreviewInstances () : void
            public constructor ()
        }
        /** Tells an Editor class which run-time type it's an editor for when the given RenderPipeline is activated.
        */
        class CustomEditorForRenderPipelineAttribute extends UnityEditor.CustomEditor implements System.Runtime.InteropServices._Attribute
        {
            protected [__keep_incompatibility]: never;
            public constructor ($inspectedType: System.Type, $renderPipeline: System.Type)
            public constructor ($inspectedType: System.Type, $renderPipeline: System.Type, $editorForChildClasses: boolean)
            public constructor ($inspectedType: System.Type)
            public constructor ($inspectedType: System.Type, $editorForChildClasses: boolean)
        }
        /** Attribute used to make a custom editor support multi-object editing.
        */
        class CanEditMultipleObjects extends System.Attribute implements System.Runtime.InteropServices._Attribute
        {
            protected [__keep_incompatibility]: never;
            public constructor ()
        }
        /** The class used to render the Light Editor when a Light is selected in the Unity Editor.
        */
        class LightEditor extends UnityEditor.Editor implements UnityEditor.IToolModeOwner, UnityEditor.IPreviewable
        {
            protected [__keep_incompatibility]: never;
            public constructor ()
        }
        /** The Unity Material Editor.
        */
        class MaterialEditor extends UnityEditor.Editor implements UnityEditor.IToolModeOwner, UnityEditor.IPreviewable
        {
            protected [__keep_incompatibility]: never;
            /** Useful for indenting shader properties that need the same indent as mini texture field.
            */
            public static kMiniTextureFieldLabelIndentLevel : number
            /** Is the current material expanded.
            */
            public get isVisible(): boolean;
            /** Returns the custom ShaderGUI implemented by the shader.
            */
            public get customShaderGUI(): UnityEditor.ShaderGUI;
            /** Set the shader of the material.
            * @param $shader Shader to set.
            * @param $registerUndo Should undo be registered.
            */
            public SetShader ($shader: UnityEngine.Shader) : void
            /** Set the shader of the material.
            * @param $shader Shader to set.
            * @param $registerUndo Should undo be registered.
            */
            public SetShader ($newShader: UnityEngine.Shader, $registerUndo: boolean) : void
            /** Called when the Editor is woken up.
            */
            public Awake () : void
            /** Whenever a material property is changed call this function. This will rebuild the inspector and validate the properties.
            */
            public PropertiesChanged () : void
            /** Creates a wrapper enabling the Unity Editor to display GUI controls for the property.
            * @param $rect The box which encloses the GUI control. May include a label.
            * @param $property The property this GUI control modifies.
            */
            public static BeginProperty ($property: UnityEditor.SerializedProperty) : void
            /** Creates a wrapper enabling the Unity Editor to display GUI controls for the property.
            * @param $rect The box which encloses the GUI control. May include a label.
            * @param $property The property this GUI control modifies.
            */
            public static BeginProperty ($rect: UnityEngine.Rect, $property: UnityEditor.SerializedProperty) : void
            /** Creates a wrapper enabling the Unity Editor to display GUI controls for the property.
            * @param $rect The box which encloses the GUI control. May include a label.
            * @param $property The property this GUI control modifies.
            */
            public static BeginProperty ($property: UnityEditor.MaterialProperty) : void
            /** Creates a wrapper enabling the Unity Editor to display GUI controls for the property.
            * @param $rect The box which encloses the GUI control. May include a label.
            * @param $property The property this GUI control modifies.
            */
            public static BeginProperty ($rect: UnityEngine.Rect, $property: UnityEditor.MaterialProperty) : void
            /** Closes a property wrapper that begins with MaterialEditor.BeginProperty.
            */
            public static EndProperty () : void
            /** Draw a range slider for a range shader property.
            * @param $label Label for the property.
            * @param $prop The property to edit.
            * @param $position Position and size of the range slider control.
            */
            public RangeProperty ($prop: UnityEditor.MaterialProperty, $label: string) : number
            /** Draw a range slider for a range shader property.
            * @param $label Label for the property.
            * @param $prop The property to edit.
            * @param $position Position and size of the range slider control.
            */
            public RangeProperty ($position: UnityEngine.Rect, $prop: UnityEditor.MaterialProperty, $label: string) : number
            /** Draw a property field for an integer shader property.
            * @param $label Label for the property.
            */
            public IntegerProperty ($prop: UnityEditor.MaterialProperty, $label: string) : number
            /** Draw a property field for an integer shader property.
            * @param $label Label for the property.
            */
            public IntegerProperty ($position: UnityEngine.Rect, $prop: UnityEditor.MaterialProperty, $label: string) : number
            /** Draw a property field for a float shader property.
            * @param $label Label for the property.
            */
            public FloatProperty ($prop: UnityEditor.MaterialProperty, $label: string) : number
            /** Draw a property field for a float shader property.
            * @param $label Label for the property.
            */
            public FloatProperty ($position: UnityEngine.Rect, $prop: UnityEditor.MaterialProperty, $label: string) : number
            /** Draw a property field for a color shader property.
            * @param $label Label for the property.
            */
            public ColorProperty ($prop: UnityEditor.MaterialProperty, $label: string) : UnityEngine.Color
            /** Draw a property field for a color shader property.
            * @param $label Label for the property.
            */
            public ColorProperty ($position: UnityEngine.Rect, $prop: UnityEditor.MaterialProperty, $label: string) : UnityEngine.Color
            /** Draw a property field for a vector shader property.
            * @param $label Label for the field.
            */
            public VectorProperty ($prop: UnityEditor.MaterialProperty, $label: string) : UnityEngine.Vector4
            /** Draw a property field for a vector shader property.
            * @param $label Label for the field.
            */
            public VectorProperty ($prop: UnityEditor.MaterialProperty, $label: UnityEngine.GUIContent) : UnityEngine.Vector4
            /** Draw a property field for a vector shader property.
            * @param $label Label for the field.
            */
            public VectorProperty ($position: UnityEngine.Rect, $prop: UnityEditor.MaterialProperty, $label: string) : UnityEngine.Vector4
            /** Draw a property field for a vector shader property.
            * @param $label Label for the field.
            */
            public VectorProperty ($position: UnityEngine.Rect, $prop: UnityEditor.MaterialProperty, $label: UnityEngine.GUIContent) : UnityEngine.Vector4
            public TextureScaleOffsetProperty ($property: UnityEditor.MaterialProperty) : void
            /** Draws tiling and offset properties for a texture.
            * @param $position Rect to draw this control in.
            * @param $property Property to draw.
            * @param $partOfTexturePropertyControl If this control should be rendered under large texture property control use 'true'. If this control should be shown seperately use 'false'.
            */
            public TextureScaleOffsetProperty ($position: UnityEngine.Rect, $property: UnityEditor.MaterialProperty) : number
            /** Draws tiling and offset properties for a texture.
            * @param $position Rect to draw this control in.
            * @param $property Property to draw.
            * @param $partOfTexturePropertyControl If this control should be rendered under large texture property control use 'true'. If this control should be shown seperately use 'false'.
            */
            public TextureScaleOffsetProperty ($position: UnityEngine.Rect, $property: UnityEditor.MaterialProperty, $partOfTexturePropertyControl: boolean) : number
            /** Draw a property field for a texture shader property.
            * @param $label Label for the field.
            * @param $tooltip Tooltip for the field.
            * @param $scaleOffset Draw scale / offset.
            */
            public TextureProperty ($prop: UnityEditor.MaterialProperty, $label: string) : UnityEngine.Texture
            /** Draw a property field for a texture shader property.
            * @param $label Label for the field.
            * @param $tooltip Tooltip for the field.
            * @param $scaleOffset Draw scale / offset.
            */
            public TextureProperty ($prop: UnityEditor.MaterialProperty, $label: string, $scaleOffset: boolean) : UnityEngine.Texture
            /** Make a help box with a message and button. Returns true, if button was pressed.
            * @param $messageContent The message text.
            * @param $buttonContent The button text.
            * @returns Returns true, if button was pressed. 
            */
            public HelpBoxWithButton ($messageContent: UnityEngine.GUIContent, $buttonContent: UnityEngine.GUIContent) : boolean
            /** Checks if particular property has incorrect type of texture specified by the material, displays appropriate warning and suggests the user to automatically fix the problem.
            * @param $prop The texture property to check and display warning for, if necessary.
            */
            public TextureCompatibilityWarning ($prop: UnityEditor.MaterialProperty) : void
            /** Draw a property field for a texture shader property that only takes up a single line height.
            * @param $position Rect that this control should be rendered in.
            * @param $label Label for the field.
            * @returns Returns total height used by this control. 
            */
            public TexturePropertyMiniThumbnail ($position: UnityEngine.Rect, $prop: UnityEditor.MaterialProperty, $label: string, $tooltip: string) : UnityEngine.Texture
            /** Returns the free rect below the label and before the large thumb object field. Is used for e.g. tiling and offset properties.
            * @param $position The total rect of the texture property.
            */
            public GetTexturePropertyCustomArea ($position: UnityEngine.Rect) : UnityEngine.Rect
            /** Draw a property field for a texture shader property.
            * @param $label Label for the field.
            * @param $tooltip Tooltip for the field.
            * @param $scaleOffset Draw scale / offset.
            */
            public TextureProperty ($position: UnityEngine.Rect, $prop: UnityEditor.MaterialProperty, $label: string) : UnityEngine.Texture
            /** Draw a property field for a texture shader property.
            * @param $label Label for the field.
            * @param $tooltip Tooltip for the field.
            * @param $scaleOffset Draw scale / offset.
            */
            public TextureProperty ($position: UnityEngine.Rect, $prop: UnityEditor.MaterialProperty, $label: UnityEngine.GUIContent) : UnityEngine.Texture
            /** Draw a property field for a texture shader property.
            * @param $label Label for the field.
            * @param $tooltip Tooltip for the field.
            * @param $scaleOffset Draw scale / offset.
            */
            public TextureProperty ($position: UnityEngine.Rect, $prop: UnityEditor.MaterialProperty, $label: string, $scaleOffset: boolean) : UnityEngine.Texture
            /** Draw a property field for a texture shader property.
            * @param $label Label for the field.
            * @param $tooltip Tooltip for the field.
            * @param $scaleOffset Draw scale / offset.
            */
            public TextureProperty ($position: UnityEngine.Rect, $prop: UnityEditor.MaterialProperty, $label: string, $tooltip: string, $scaleOffset: boolean) : UnityEngine.Texture
            /** Draw a property field for a texture shader property.
            * @param $label Label for the field.
            * @param $tooltip Tooltip for the field.
            * @param $scaleOffset Draw scale / offset.
            */
            public TextureProperty ($position: UnityEngine.Rect, $prop: UnityEditor.MaterialProperty, $label: UnityEngine.GUIContent, $scaleOffset: boolean) : UnityEngine.Texture
            /** TODO.
            */
            public static TextureScaleOffsetProperty ($position: UnityEngine.Rect, $scaleOffset: UnityEngine.Vector4) : UnityEngine.Vector4
            /** TODO.
            */
            public static TextureScaleOffsetProperty ($position: UnityEngine.Rect, $scaleOffset: UnityEngine.Vector4, $partOfTexturePropertyControl: boolean) : UnityEngine.Vector4
            /** Calculate height needed for the property.
            */
            public GetPropertyHeight ($prop: UnityEditor.MaterialProperty) : number
            /** Calculate height needed for the property.
            */
            public GetPropertyHeight ($prop: UnityEditor.MaterialProperty, $label: string) : number
            /** Calculate height needed for the property, ignoring custom drawers.
            */
            public static GetDefaultPropertyHeight ($prop: UnityEditor.MaterialProperty) : number
            /** Creates a Property wrapper, useful for making regular GUI controls work with MaterialProperty.
            * @param $totalPosition Rectangle on the screen to use for the control, including label if applicable.
            * @param $prop The MaterialProperty to use for the control.
            */
            public BeginAnimatedCheck ($totalPosition: UnityEngine.Rect, $prop: UnityEditor.MaterialProperty) : void
            /** Creates a Property wrapper, useful for making regular GUI controls work with MaterialProperty.
            * @param $totalPosition Rectangle on the screen to use for the control, including label if applicable.
            * @param $prop The MaterialProperty to use for the control.
            */
            public BeginAnimatedCheck ($prop: UnityEditor.MaterialProperty) : void
            /** Ends a Property wrapper started with BeginAnimatedCheck.
            */
            public EndAnimatedCheck () : void
            /** Handes UI for one shader property.
            */
            public ShaderProperty ($prop: UnityEditor.MaterialProperty, $label: string) : void
            public ShaderProperty ($prop: UnityEditor.MaterialProperty, $label: UnityEngine.GUIContent) : void
            public ShaderProperty ($prop: UnityEditor.MaterialProperty, $label: string, $labelIndent: number) : void
            public ShaderProperty ($prop: UnityEditor.MaterialProperty, $label: UnityEngine.GUIContent, $labelIndent: number) : void
            /** Handes UI for one shader property.
            */
            public ShaderProperty ($position: UnityEngine.Rect, $prop: UnityEditor.MaterialProperty, $label: string) : void
            public ShaderProperty ($position: UnityEngine.Rect, $prop: UnityEditor.MaterialProperty, $label: UnityEngine.GUIContent) : void
            public ShaderProperty ($position: UnityEngine.Rect, $prop: UnityEditor.MaterialProperty, $label: string, $labelIndent: number) : void
            public ShaderProperty ($position: UnityEngine.Rect, $prop: UnityEditor.MaterialProperty, $label: UnityEngine.GUIContent, $labelIndent: number) : void
            /** This function will draw the UI for the lightmap emission property. (None, Realtime, baked)
            Additional resources: MaterialLightmapFlags.
            */
            public LightmapEmissionProperty () : void
            public LightmapEmissionProperty ($labelIndent: number) : void
            public LightmapEmissionProperty ($position: UnityEngine.Rect, $labelIndent: number) : void
            /** This function will draw the UI for controlling whether emission is enabled or not on a material.
            * @returns Returns true if enabled, or false if disabled or mixed due to multi-editing. 
            */
            public EmissionEnabledProperty () : boolean
            /** Properly sets up the globalIllumination flag on the given Material depending on the current flag's state and the material's emission property.
            * @param $mat The material to be fixed up.
            */
            public static FixupEmissiveFlag ($mat: UnityEngine.Material) : void
            /** Returns a properly set global illlumination flag based on the passed in flag and the given color.
            * @param $col Emission color.
            * @param $flags Current global illumination flag.
            * @returns The fixed up flag. 
            */
            public static FixupEmissiveFlag ($col: UnityEngine.Color, $flags: UnityEngine.MaterialGlobalIlluminationFlags) : UnityEngine.MaterialGlobalIlluminationFlags
            /** Draws the UI for setting the global illumination flag of a material.
            * @param $indent Level of indentation for the property.
            * @param $enabled True if emission is enabled for the material, false otherwise.
            * @param $ignoreEmissionColor True if property should always be displayed.
            */
            public LightmapEmissionFlagsProperty ($indent: number, $enabled: boolean) : void
            /** Draws the UI for setting the global illumination flag of a material.
            * @param $indent Level of indentation for the property.
            * @param $enabled True if emission is enabled for the material, false otherwise.
            * @param $ignoreEmissionColor True if property should always be displayed.
            */
            public LightmapEmissionFlagsProperty ($indent: number, $enabled: boolean, $ignoreEmissionColor: boolean) : void
            /** Handles UI for one shader property ignoring any custom drawers.
            */
            public DefaultShaderProperty ($prop: UnityEditor.MaterialProperty, $label: string) : void
            /** Handles UI for one shader property ignoring any custom drawers.
            */
            public DefaultShaderProperty ($position: UnityEngine.Rect, $prop: UnityEditor.MaterialProperty, $label: string) : void
            /** Get shader property information of the materials you pass in.
            * @param $mats The selected materials.
            * @returns Returns the material properties. 
            */
            public static GetMaterialProperties ($mats: System.Array$1<UnityEngine.Object>) : System.Array$1<UnityEditor.MaterialProperty>
            /** Gets the shader property names of the materials you pass in.
            * @param $mats The selected materials.
            * @returns Returns the material property names. 
            */
            public static GetMaterialPropertyNames ($mats: System.Array$1<UnityEngine.Object>) : System.Array$1<string>
            /** Get information about a single shader property.
            * @param $mats The selected materials.
            * @param $name Property name.
            * @param $propertyIndex Property index.
            * @returns Returns the property at the specified index. 
            */
            public static GetMaterialProperty ($mats: System.Array$1<UnityEngine.Object>, $name: string) : UnityEditor.MaterialProperty
            /** Get information about a single shader property.
            * @param $mats The selected materials.
            * @param $name Property name.
            * @param $propertyIndex Property index.
            * @returns Returns the property at the specified index. 
            */
            public static GetMaterialProperty ($mats: System.Array$1<UnityEngine.Object>, $propertyIndex: number) : UnityEditor.MaterialProperty
            public static PrepareMaterialPropertiesForAnimationMode ($properties: System.Array$1<UnityEditor.MaterialProperty>, $isMaterialEditable: boolean) : UnityEngine.Renderer
            /** Set EditorGUIUtility.fieldWidth and labelWidth to the default values that PropertiesGUI uses.
            */
            public SetDefaultGUIWidths () : void
            /** Render the standard material properties. This method will either render properties using a ShaderGUI instance if found otherwise it uses PropertiesDefaultGUI.
            * @returns Returns true if any value was changed. 
            */
            public PropertiesGUI () : boolean
            /** Default rendering of shader properties.
            * @param $props Array of material properties.
            */
            public PropertiesDefaultGUI ($props: System.Array$1<UnityEditor.MaterialProperty>) : void
            /** Apply initial MaterialPropertyDrawer values.
            */
            public static ApplyMaterialPropertyDrawers ($material: UnityEngine.Material) : void
            /** Apply initial MaterialPropertyDrawer values.
            */
            public static ApplyMaterialPropertyDrawers ($targets: System.Array$1<UnityEngine.Object>) : void
            /** Call this when you change a material property. It will add an undo for the action.
            * @param $label Undo Label.
            */
            public RegisterPropertyChangeUndo ($label: string) : void
            /** Default toolbar for material preview area.
            */
            public DefaultPreviewSettingsGUI () : void
            /** Default handling of preview area for materials.
            */
            public DefaultPreviewGUI ($r: UnityEngine.Rect, $background: UnityEngine.GUIStyle) : void
            /** Called when the editor is enabled, if overridden please call the base OnEnable() to ensure that the material inspector is set up properly.
            */
            public OnEnable () : void
            public UndoRedoPerformed ($info: $Ref<UnityEditor.UndoRedoInfo>) : void
            /** Called when the editor is disabled, if overridden please call the base OnDisable() to ensure that the material inspector is set up properly.
            */
            public OnDisable () : void
            /** Display UI for editing material's render queue setting.
            */
            public RenderQueueField () : void
            /** Display UI for editing material's render queue setting.
            */
            public RenderQueueField ($r: UnityEngine.Rect) : void
            /** Display UI for editing material's render queue setting.
            */
            public EnableInstancingField () : boolean
            /** Display UI for editing material's render queue setting within the specified rect.
            */
            public EnableInstancingField ($r: UnityEngine.Rect) : void
            /** Determines whether the Enable Instancing checkbox is checked.
            * @returns Returns true if Enable Instancing checkbox is checked. 
            */
            public IsInstancingEnabled () : boolean
            /** Display UI for editing a material's Double Sided Global Illumination setting.
            Returns true if the UI is indeed displayed i.e. the material supports the Double Sided Global Illumination setting.
            +Additional resources: Material.doubleSidedGI.
            * @returns True if the UI is displayed, false otherwise. 
            */
            public DoubleSidedGIField () : boolean
            /** Method for showing a texture property control with additional inlined properites.
            * @param $label The label used for the texture property.
            * @param $textureProp The texture property.
            * @param $extraProperty1 First optional property inlined after the texture property.
            * @param $extraProperty2 Second optional property inlined after the extraProperty1.
            * @returns Returns the Rect used. 
            */
            public TexturePropertySingleLine ($label: UnityEngine.GUIContent, $textureProp: UnityEditor.MaterialProperty) : UnityEngine.Rect
            /** Method for showing a texture property control with additional inlined properites.
            * @param $label The label used for the texture property.
            * @param $textureProp The texture property.
            * @param $extraProperty1 First optional property inlined after the texture property.
            * @param $extraProperty2 Second optional property inlined after the extraProperty1.
            * @returns Returns the Rect used. 
            */
            public TexturePropertySingleLine ($label: UnityEngine.GUIContent, $textureProp: UnityEditor.MaterialProperty, $extraProperty1: UnityEditor.MaterialProperty) : UnityEngine.Rect
            /** Method for showing a texture property control with additional inlined properites.
            * @param $label The label used for the texture property.
            * @param $textureProp The texture property.
            * @param $extraProperty1 First optional property inlined after the texture property.
            * @param $extraProperty2 Second optional property inlined after the extraProperty1.
            * @returns Returns the Rect used. 
            */
            public TexturePropertySingleLine ($label: UnityEngine.GUIContent, $textureProp: UnityEditor.MaterialProperty, $extraProperty1: UnityEditor.MaterialProperty, $extraProperty2: UnityEditor.MaterialProperty) : UnityEngine.Rect
            /** Method for showing a texture property control with a HDR color field and its color brightness float field.
            * @param $label The label used for the texture property.
            * @param $textureProp The texture property.
            * @param $colorProperty The color property (will be treated as a HDR color).
            * @param $showAlpha If false then the alpha channel information will be hidden in the GUI.
            * @returns Return the Rect used. 
            */
            public TexturePropertyWithHDRColor ($label: UnityEngine.GUIContent, $textureProp: UnityEditor.MaterialProperty, $colorProperty: UnityEditor.MaterialProperty, $showAlpha: boolean) : UnityEngine.Rect
            /** Method for showing a compact layout of properties.
            * @param $label The label used for the texture property.
            * @param $textureProp The texture property.
            * @param $extraProperty1 First extra property inlined after the texture property.
            * @param $label2 Label for the second extra property (on a new line and indented).
            * @param $extraProperty2 Second property on a new line below the texture.
            * @returns Returns the Rect used. 
            */
            public TexturePropertyTwoLines ($label: UnityEngine.GUIContent, $textureProp: UnityEditor.MaterialProperty, $extraProperty1: UnityEditor.MaterialProperty, $label2: UnityEngine.GUIContent, $extraProperty2: UnityEditor.MaterialProperty) : UnityEngine.Rect
            /** Utility method for GUI layouting ShaderGUI.
            * @param $r Field Rect.
            * @returns A sub rect of the input Rect. 
            */
            public static GetRightAlignedFieldRect ($r: UnityEngine.Rect) : UnityEngine.Rect
            /** Utility method for GUI layouting ShaderGUI.
            * @param $r Field Rect.
            * @returns A sub rect of the input Rect. 
            */
            public static GetLeftAlignedFieldRect ($r: UnityEngine.Rect) : UnityEngine.Rect
            /** Utility method for GUI layouting ShaderGUI.
            * @param $r Field Rect.
            * @returns A sub rect of the input Rect. 
            */
            public static GetFlexibleRectBetweenLabelAndField ($r: UnityEngine.Rect) : UnityEngine.Rect
            /** Utility method for GUI layouting ShaderGUI. Used e.g for the rect after a left aligned Color field.
            * @param $r Field Rect.
            * @returns A sub rect of the input Rect. 
            */
            public static GetFlexibleRectBetweenFieldAndRightEdge ($r: UnityEngine.Rect) : UnityEngine.Rect
            /** Utility method for GUI layouting ShaderGUI. This is the rect after the label which can be used for multiple properties. The input rect can be fetched by calling: EditorGUILayout.GetControlRect.
            * @param $r Line Rect.
            * @returns A sub rect of the input Rect. 
            */
            public static GetRectAfterLabelWidth ($r: UnityEngine.Rect) : UnityEngine.Rect
            public constructor ()
        }
        /** Abstract class to derive from for defining custom GUI for shader properties and for extending the material preview.
        */
        class ShaderGUI extends System.Object
        {
            protected [__keep_incompatibility]: never;
            /** To define a custom shader GUI use the methods of materialEditor to render controls for the properties array.
            * @param $materialEditor The MaterialEditor that are calling this OnGUI (the 'owner').
            * @param $properties Material properties of the current selected shader.
            */
            public OnGUI ($materialEditor: UnityEditor.MaterialEditor, $properties: System.Array$1<UnityEditor.MaterialProperty>) : void
            /** Override for extending the rendering of the Preview area or completly replace the preview (by not calling base.OnMaterialPreviewGUI).
            * @param $materialEditor The MaterialEditor that are calling this method (the 'owner').
            * @param $r Preview rect.
            * @param $background Style for the background.
            */
            public OnMaterialPreviewGUI ($materialEditor: UnityEditor.MaterialEditor, $r: UnityEngine.Rect, $background: UnityEngine.GUIStyle) : void
            public OnMaterialInteractivePreviewGUI ($materialEditor: UnityEditor.MaterialEditor, $r: UnityEngine.Rect, $background: UnityEngine.GUIStyle) : void
            /** Override for extending the functionality of the toolbar of the preview area or completly replace the toolbar by not calling base.OnMaterialPreviewSettingsGUI.
            * @param $materialEditor The MaterialEditor that are calling this method (the 'owner').
            */
            public OnMaterialPreviewSettingsGUI ($materialEditor: UnityEditor.MaterialEditor) : void
            /** This method is called when the ShaderGUI is being closed.
            */
            public OnClosed ($material: UnityEngine.Material) : void
            /** This method is called when a new shader has been selected for a Material.
            * @param $material The material the newShader should be assigned to.
            * @param $oldShader Previous shader.
            * @param $newShader New shader to assign to the material.
            */
            public AssignNewShaderToMaterial ($material: UnityEngine.Material, $oldShader: UnityEngine.Shader, $newShader: UnityEngine.Shader) : void
            /** When the user loads a Material using this ShaderGUI into memory or changes a value in the Inspector, the Editor calls this method.
            * @param $material The material to validate.
            */
            public ValidateMaterial ($material: UnityEngine.Material) : void
        }
        /** Describes information and value of a single shader property.
        */
        class MaterialProperty extends System.Object
        {
            protected [__keep_incompatibility]: never;
            /** Material objects being edited by this property (Read Only).
            */
            public get targets(): System.Array$1<UnityEngine.Object>;
            /** Type of the property (Read Only).
            */
            public get type(): UnityEditor.MaterialProperty.PropType;
            /** Name of the property (Read Only).
            */
            public get name(): string;
            /** Display name of the property (Read Only).
            */
            public get displayName(): string;
            /** Flags that control how property is displayed (Read Only).
            */
            public get flags(): UnityEditor.MaterialProperty.PropFlags;
            /** Texture dimension (2D, Cubemap etc.) of the property (Read Only).
            */
            public get textureDimension(): UnityEngine.Rendering.TextureDimension;
            /** Min/max limits of a ranged float property (Read Only).
            */
            public get rangeLimits(): UnityEngine.Vector2;
            /** Does this property have multiple different values? (Read Only)
            */
            public get hasMixedValue(): boolean;
            public get applyPropertyCallback(): UnityEditor.MaterialProperty.ApplyPropertyCallback;
            public set applyPropertyCallback(value: UnityEditor.MaterialProperty.ApplyPropertyCallback);
            /** Color value of the property.
            */
            public get colorValue(): UnityEngine.Color;
            public set colorValue(value: UnityEngine.Color);
            /** Vector value of the property.
            */
            public get vectorValue(): UnityEngine.Vector4;
            public set vectorValue(value: UnityEngine.Vector4);
            /** Float value of the property.
            */
            public get floatValue(): number;
            public set floatValue(value: number);
            /** Int value of the property.
            */
            public get intValue(): number;
            public set intValue(value: number);
            /** Texture value of the property.
            */
            public get textureValue(): UnityEngine.Texture;
            public set textureValue(value: UnityEngine.Texture);
            public get textureScaleAndOffset(): UnityEngine.Vector4;
            public set textureScaleAndOffset(value: UnityEngine.Vector4);
            public ReadFromMaterialPropertyBlock ($block: UnityEngine.MaterialPropertyBlock) : void
            public WriteToMaterialPropertyBlock ($materialblock: UnityEngine.MaterialPropertyBlock, $changedPropertyMask: number) : void
            public constructor ()
        }
        /** Additional resources: Undo.undoRedoEvent.
        */
        class UndoRedoInfo extends System.ValueType
        {
            protected [__keep_incompatibility]: never;
            /** The name of the undo or redo event that has been performed.
            */
            public undoName : string
            /** The undo group that the undo or redo event came from.
            */
            public undoGroup : number
            /** Indicates whether the UndoRedoEvent is an undo or redo event. isRedo is true if the event is a Redo event.
            */
            public get isRedo(): boolean;
            public set isRedo(value: boolean);
        }
        /** Base class to derive custom material property drawers from.
        */
        class MaterialPropertyDrawer extends System.Object
        {
            protected [__keep_incompatibility]: never;
            public OnGUI ($position: UnityEngine.Rect, $prop: UnityEditor.MaterialProperty, $label: UnityEngine.GUIContent, $editor: UnityEditor.MaterialEditor) : void
            /** Override this method to make your own GUI for the property.
            * @param $position Rectangle on the screen to use for the property GUI.
            * @param $prop The MaterialProperty to make the custom GUI for.
            * @param $label The label of this property.
            * @param $editor Current material editor.
            */
            public OnGUI ($position: UnityEngine.Rect, $prop: UnityEditor.MaterialProperty, $label: string, $editor: UnityEditor.MaterialEditor) : void
            /** Override this method to specify how tall the GUI for this property is in pixels.
            * @param $prop The MaterialProperty to make the custom GUI for.
            * @param $label The label of this property.
            * @param $editor Current material editor.
            */
            public GetPropertyHeight ($prop: UnityEditor.MaterialProperty, $label: string, $editor: UnityEditor.MaterialEditor) : number
            /** Apply extra initial values to the material.
            * @param $prop The MaterialProperty to apply values for.
            */
            public Apply ($prop: UnityEditor.MaterialProperty) : void
        }
        /** Use this class to render an interactive preview of a mesh.
        */
        class MeshPreview extends System.Object implements System.IDisposable
        {
            protected [__keep_incompatibility]: never;
            /** The Mesh to display in the preview space.
            */
            public get mesh(): UnityEngine.Mesh;
            public set mesh(value: UnityEngine.Mesh);
            /** Releases allocated resources associated with this object.
            */
            public Dispose () : void
            /** Creates a texture preview to override Editor.RenderStaticPreview. The current mesh will be drawn.
            * @param $width The width to render the texture.
            * @param $height The height to render the texture.
            * @returns Returns a rendered texture of the current mesh with default settings. 
            */
            public RenderStaticPreview ($width: number, $height: number) : UnityEngine.Texture2D
            /** Call this from an Editor.OnPreviewGUI or ObjectPreview.OnPreviewGUI to draw a mesh preview.
            * @param $rect Rectangle in which to draw the preview.
            * @param $background The background style.
            */
            public OnPreviewGUI ($rect: UnityEngine.Rect, $background: UnityEngine.GUIStyle) : void
            /** Call this from Editor.OnPreviewSettings or ObjectPreview.OnPreviewSettings to draw additional settings related to the mesh preview.
            */
            public OnPreviewSettings () : void
            /** Returns a short summary of the Mesh attributes (ex, does this mesh contain positions, normals, tangents, etc...).
            * @param $mesh The Mesh to build a summary phrase for.
            * @returns A short summary of the mesh attributes. 
            */
            public static GetInfoString ($mesh: UnityEngine.Mesh) : string
            public constructor ($target: UnityEngine.Mesh)
        }
        class PreviewRenderUtility extends System.Object
        {
            protected [__keep_incompatibility]: never;
            public get camera(): UnityEngine.Camera;
            public get cameraFieldOfView(): number;
            public set cameraFieldOfView(value: number);
            public get ambientColor(): UnityEngine.Color;
            public set ambientColor(value: UnityEngine.Color);
            public get lights(): System.Array$1<UnityEngine.Light>;
            public Cleanup () : void
            public BeginPreview ($r: UnityEngine.Rect, $previewBackground: UnityEngine.GUIStyle) : void
            public BeginStaticPreview ($r: UnityEngine.Rect) : void
            public GetScaleFactor ($width: number, $height: number) : number
            public EndPreview () : UnityEngine.Texture
            public EndAndDrawPreview ($r: UnityEngine.Rect) : void
            public EndStaticPreview () : UnityEngine.Texture2D
            public AddSingleGO ($go: UnityEngine.GameObject) : void
            public InstantiatePrefabInScene ($prefab: UnityEngine.GameObject) : UnityEngine.GameObject
            public DrawMesh ($mesh: UnityEngine.Mesh, $matrix: UnityEngine.Matrix4x4, $mat: UnityEngine.Material, $subMeshIndex: number) : void
            public DrawMesh ($mesh: UnityEngine.Mesh, $matrix: UnityEngine.Matrix4x4, $mat: UnityEngine.Material, $subMeshIndex: number, $customProperties: UnityEngine.MaterialPropertyBlock) : void
            public DrawMesh ($mesh: UnityEngine.Mesh, $m: UnityEngine.Matrix4x4, $mat: UnityEngine.Material, $subMeshIndex: number, $customProperties: UnityEngine.MaterialPropertyBlock, $probeAnchor: UnityEngine.Transform, $useLightProbe: boolean) : void
            public DrawMesh ($mesh: UnityEngine.Mesh, $pos: UnityEngine.Vector3, $rot: UnityEngine.Quaternion, $mat: UnityEngine.Material, $subMeshIndex: number) : void
            public DrawMesh ($mesh: UnityEngine.Mesh, $pos: UnityEngine.Vector3, $rot: UnityEngine.Quaternion, $mat: UnityEngine.Material, $subMeshIndex: number, $customProperties: UnityEngine.MaterialPropertyBlock) : void
            public DrawMesh ($mesh: UnityEngine.Mesh, $pos: UnityEngine.Vector3, $rot: UnityEngine.Quaternion, $mat: UnityEngine.Material, $subMeshIndex: number, $customProperties: UnityEngine.MaterialPropertyBlock, $probeAnchor: UnityEngine.Transform) : void
            public DrawMesh ($mesh: UnityEngine.Mesh, $pos: UnityEngine.Vector3, $rot: UnityEngine.Quaternion, $mat: UnityEngine.Material, $subMeshIndex: number, $customProperties: UnityEngine.MaterialPropertyBlock, $probeAnchor: UnityEngine.Transform, $useLightProbe: boolean) : void
            public DrawMesh ($mesh: UnityEngine.Mesh, $pos: UnityEngine.Vector3, $scale: UnityEngine.Vector3, $rot: UnityEngine.Quaternion, $mat: UnityEngine.Material, $subMeshIndex: number, $customProperties: UnityEngine.MaterialPropertyBlock, $probeAnchor: UnityEngine.Transform, $useLightProbe: boolean) : void
            public Render ($allowScriptableRenderPipeline?: boolean, $updatefov?: boolean) : void
            public constructor ($renderFullScene: boolean)
            public constructor ($renderFullScene: boolean, $pixelPerfect: boolean)
            public constructor ()
        }
        class RootEditorAttribute extends System.Attribute implements System.Runtime.InteropServices._Attribute
        {
            protected [__keep_incompatibility]: never;
            public supportsAddComponent : boolean
            public constructor ($supportsAddComponent?: boolean)
        }
        /** This attribute is no longer supported.
        */
        class ShaderIncludePathAttribute extends System.Attribute implements System.Runtime.InteropServices._Attribute
        {
            protected [__keep_incompatibility]: never;
            public constructor ()
        }
        /** Editor Transform Utility Class.
        */
        class TransformUtils extends System.Object
        {
            protected [__keep_incompatibility]: never;
            /** Returns the rotation of a transform as it is shown in the Transform Inspector window.
            * @param $t Transform to get the rotation from.
            * @returns Rotation as it is shown in the Transform Inspector window. 
            */
            public static GetInspectorRotation ($t: UnityEngine.Transform) : UnityEngine.Vector3
            /** Sets the rotation of a transform as it would be set by the Transform Inspector window.
            * @param $t Transform to set the rotation on.
            * @param $r Rotation as it would be set by the Transform Inspector window.
            */
            public static SetInspectorRotation ($t: UnityEngine.Transform, $r: UnityEngine.Vector3) : void
            /** Returns Constrain Proportions toggle value as it is shown in the Transform Inspector window.
            * @param $transform Transform to check Constrain Proportions value for.
            * @param $transforms Transforms to check Constrain Proportions value for.
            * @returns Returns true if all passed transforms have Constrain Proportions enabled. 
            */
            public static GetConstrainProportions ($transform: UnityEngine.Transform) : boolean
            /** Returns Constrain Proportions toggle value as it is shown in the Transform Inspector window.
            * @param $transform Transform to check Constrain Proportions value for.
            * @param $transforms Transforms to check Constrain Proportions value for.
            * @returns Returns true if all passed transforms have Constrain Proportions enabled. 
            */
            public static GetConstrainProportions ($transforms: System.Array$1<UnityEngine.Transform>) : boolean
            /** Sets Constrain Proportions as it would be set in the Transform Inspector window.
            * @param $transform Transform to set Constrain Proportions for.
            * @param $transforms Transforms to set Constrain Proportions for.
            * @param $enabled Enable/Disable Constrain Proportions for passed transforms.
            */
            public static SetConstrainProportions ($transform: UnityEngine.Transform, $enabled: boolean) : void
            /** Sets Constrain Proportions as it would be set in the Transform Inspector window.
            * @param $transform Transform to set Constrain Proportions for.
            * @param $transforms Transforms to set Constrain Proportions for.
            * @param $enabled Enable/Disable Constrain Proportions for passed transforms.
            */
            public static SetConstrainProportions ($transforms: System.Array$1<UnityEngine.Transform>, $enabled: boolean) : void
        }
        /** LOD Utility Helpers.
        */
        class LODUtility extends System.Object
        {
            protected [__keep_incompatibility]: never;
            /** Recalculate the bounding region for the given LODGroup.
            */
            public static CalculateLODGroupBoundingBox ($group: UnityEngine.LODGroup) : void
            public constructor ()
        }
        /** Provides methods to manipulate a menu item.
        */
        class Menu extends System.Object
        {
            protected [__keep_incompatibility]: never;
            /** Sets the check status of a menu item.
            */
            public static SetChecked ($menuPath: string, $isChecked: boolean) : void
            /** Gets the check status of a menu item.
            */
            public static GetChecked ($menuPath: string) : boolean
            /** Gets the enabled status of a menu item.
            * @param $menuPath A slash-delimited path to the item's position in the menu. For example, "Scene/Place on Surface".
            * @returns True if the menu item is enabled. False otherwise. 
            */
            public static GetEnabled ($menuPath: string) : boolean
            public constructor ()
        }
        /** The MenuItem attribute allows you to add menu items to the main menu and Inspector window context menus.
        */
        class MenuItem extends System.Attribute implements System.Runtime.InteropServices._Attribute
        {
            protected [__keep_incompatibility]: never;
            public menuItem : string
            public validate : boolean
            public priority : number
            public secondaryPriority : number
            public editorModes : System.Array$1<string>
            public disabledTooltip : string
            public constructor ($itemName: string)
            public constructor ($itemName: string, $isValidateFunction: boolean)
            public constructor ($itemName: string, $isValidateFunction: boolean, $priority: number)
            public constructor ($itemName: string, $isValidateFunction: boolean, $priority: number, $disabledTooltip: string)
        }
        /** Various utilities for mesh manipulation.
        */
        class MeshUtility extends System.Object
        {
            protected [__keep_incompatibility]: never;
            /** Optimizes the Mesh data to improve rendering performance.
            */
            public static Optimize ($mesh: UnityEngine.Mesh) : void
            /** Change the mesh compression setting for a mesh.
            * @param $mesh The mesh to set the compression mode for.
            * @param $compression The compression mode to set.
            */
            public static SetMeshCompression ($mesh: UnityEngine.Mesh, $compression: UnityEditor.ModelImporterMeshCompression) : void
            /** Returns the mesh compression setting for a Mesh.
            * @param $mesh The mesh to get information on.
            */
            public static GetMeshCompression ($mesh: UnityEngine.Mesh) : UnityEditor.ModelImporterMeshCompression
            /** Will insert per-triangle uv2 in mesh and handle vertex splitting etc.
            */
            public static SetPerTriangleUV2 ($src: UnityEngine.Mesh, $triUV: System.Array$1<UnityEngine.Vector2>) : boolean
            /** Gets a snapshot of Mesh data for read-only access in the Unity Editor.
            * @param $mesh The input mesh.
            * @param $meshes The input meshes.
            * @returns Returns a read-only snapshot of Mesh data. See Mesh.MeshDataArray and Mesh.MeshData. 
            */
            public static AcquireReadOnlyMeshData ($mesh: UnityEngine.Mesh) : UnityEngine.Mesh.MeshDataArray
            /** Gets a snapshot of Mesh data for read-only access in the Unity Editor.
            * @param $mesh The input mesh.
            * @param $meshes The input meshes.
            * @returns Returns a read-only snapshot of Mesh data. See Mesh.MeshDataArray and Mesh.MeshData. 
            */
            public static AcquireReadOnlyMeshData ($meshes: System.Array$1<UnityEngine.Mesh>) : UnityEngine.Mesh.MeshDataArray
            public static AcquireReadOnlyMeshData ($meshes: System.Collections.Generic.List$1<UnityEngine.Mesh>) : UnityEngine.Mesh.MeshDataArray
            public constructor ()
        }
        /** Mesh compression options for ModelImporter.
        */
        enum ModelImporterMeshCompression
        { Off = 0, Low = 1, Medium = 2, High = 3 }
        /** Use the DefaultObject to create a new UnityEngine.Object in the editor.
        */
        class ObjectFactory extends System.Object
        {
            protected [__keep_incompatibility]: never;
            public static add_componentWasAdded ($value: System.Action$1<UnityEngine.Component>) : void
            public static remove_componentWasAdded ($value: System.Action$1<UnityEngine.Component>) : void
            /** Create a new instance of the given type.
            * @param $type The type of instance to create.
            */
            public static CreateInstance ($type: System.Type) : UnityEngine.Object
            /** Creates a new component and adds it to the specified GameObject.
            * @param $gameObject The GameObject to add the new component to.
            * @param $type The type of component to create and add to the GameObject.
            * @returns Returns the component that was created and added to the GameObject. 
            */
            public static AddComponent ($gameObject: UnityEngine.GameObject, $type: System.Type) : UnityEngine.Component
            /** Creates a new GameObject.
            * @param $name Name of the GameObject.
            * @param $types The optional types to add to the GameObject when created.
            * @param $scene Scene where the GameObject should be created.
            * @param $hideFlags HideFlags to assign to the GameObject.
            * @returns Returns the GameObject that was created. 
            */
            public static CreateGameObject ($scene: UnityEngine.SceneManagement.Scene, $hideFlags: UnityEngine.HideFlags, $name: string, ...types: System.Type[]) : UnityEngine.GameObject
            /** Creates a new GameObject.
            * @param $name Name of the GameObject.
            * @param $types The optional types to add to the GameObject when created.
            * @param $scene Scene where the GameObject should be created.
            * @param $hideFlags HideFlags to assign to the GameObject.
            * @returns Returns the GameObject that was created. 
            */
            public static CreateGameObject ($name: string, ...types: System.Type[]) : UnityEngine.GameObject
            /** Creates a GameObject primitive with Undo support. The created primitive will have any existing Preset applied to it, see.
            * @param $type The type of primitive to create.
            */
            public static CreatePrimitive ($type: UnityEngine.PrimitiveType) : UnityEngine.GameObject
            /** Place the given GameObject in the Scene View using the same preferences as built-in Unity GameObjects.
            * @param $go The GameObject to be initialized.
            * @param $parent An optional GameObject to be set as the parent.
            */
            public static PlaceGameObject ($go: UnityEngine.GameObject, $parent?: UnityEngine.GameObject) : void
        }
        /** Helper class for constructing displayable names for objects.
        */
        class ObjectNames extends System.Object
        {
            protected [__keep_incompatibility]: never;
            /** Make a displayable name for a variable.
            */
            public static NicifyVariableName ($name: string) : string
            /** Class name of an object.
            */
            public static GetClassName ($obj: UnityEngine.Object) : string
            /** Drag and drop title for an object.
            */
            public static GetDragAndDropTitle ($obj: UnityEngine.Object) : string
            /** Sets the name of an Object.
            */
            public static SetNameSmart ($obj: UnityEngine.Object, $name: string) : void
            /** Make a unique name using the provided name as a base.
            If the target name is in the provided list of existing names, a unique name is generated by appending the next available numerical increment.
            * @param $existingNames A list of pre-existing names.
            * @param $name Desired name to be used as is, or as a base.
            * @returns A name not found in the list of pre-existing names. 
            */
            public static GetUniqueName ($existingNames: System.Array$1<string>, $name: string) : string
            /** Inspector title for an object.
            * @param $obj Object to get a title from.
            * @param $multiObjectEditing Tells if the inspector is running multi-edit.
            * @returns Returns the best title according to objects being inspected. 
            */
            public static GetInspectorTitle ($obj: UnityEngine.Object, $multiObjectEditing: boolean) : string
            /** Inspector title for an object.
            * @param $obj Object to get a title from.
            * @param $multiObjectEditing Tells if the inspector is running multi-edit.
            * @returns Returns the best title according to objects being inspected. 
            */
            public static GetInspectorTitle ($obj: UnityEngine.Object) : string
            public constructor ()
        }
        class PackageInfo extends System.ValueType
        {
            protected [__keep_incompatibility]: never;
            public packagePath : string
            public jsonInfo : string
            public iconURL : string
        }
        /** Icon slot container.
        */
        class PlatformIcon extends System.Object
        {
            protected [__keep_incompatibility]: never;
            /** The number of texture layers the icon slot currently contains.
            */
            public get layerCount(): number;
            public set layerCount(value: number);
            /** The maximum number of texture layers required by the icon slot.
            */
            public get maxLayerCount(): number;
            /** The minimum number of texture layers required by the icon slot.
            */
            public get minLayerCount(): number;
            /** The width of the icon in pixels.
            */
            public get width(): number;
            /** The height of the icon in pixels.
            */
            public get height(): number;
            /** The PlatformIconKind is specific to the target platform.
            */
            public get kind(): UnityEditor.PlatformIconKind;
            /** Retrieve the texture which is currently assigned to the specified layer.
            * @param $layer Cannot be larger than PlatformIcon.maxLayerCount.
            */
            public GetTexture ($layer?: number) : UnityEngine.Texture2D
            /** Retrieve an array of all textures which are currently assigned to the icon slot.
            */
            public GetTextures () : System.Array$1<UnityEngine.Texture2D>
            /** Assign a texture to the specified layer.
            * @param $layer Cannot be larger than PlatformIcon.maxLayerCount.
            */
            public SetTexture ($texture: UnityEngine.Texture2D, $layer?: number) : void
            /** Assign all available icon layers.
            * @param $textures Must be an array of size PlatformIcon.maxLayerCount.
            */
            public SetTextures (...textures: UnityEngine.Texture2D[]) : void
        }
        /** Icon kind wrapper.
        */
        class PlatformIconKind extends System.Object
        {
            protected [__keep_incompatibility]: never;
        }
        /** Player Settings is where you define various parameters for the final game that you will build in Unity. Some of these values are used in the Resolution Dialog that launches when you open a standalone game.
        */
        class PlayerSettings extends UnityEngine.Object
        {
            protected [__keep_incompatibility]: never;
            /** The name of your company.
            */
            public static get companyName(): string;
            public static set companyName(value: string);
            /** The name of your product.
            */
            public static get productName(): string;
            public static set productName(value: string);
            public static get productGUID(): System.Guid;
            /** Set the rendering color space for the current project.
            */
            public static get colorSpace(): UnityEngine.ColorSpace;
            public static set colorSpace(value: UnityEngine.ColorSpace);
            /** Default horizontal dimension of stand-alone player window.
            */
            public static get defaultScreenWidth(): number;
            public static set defaultScreenWidth(value: number);
            /** Default vertical dimension of stand-alone player window.
            */
            public static get defaultScreenHeight(): number;
            public static set defaultScreenHeight(value: number);
            /** Default horizontal dimension of web player window.
            */
            public static get defaultWebScreenWidth(): number;
            public static set defaultWebScreenWidth(value: number);
            /** Default vertical dimension of web player window.
            */
            public static get defaultWebScreenHeight(): number;
            public static set defaultWebScreenHeight(value: number);
            public static get defaultIsNativeResolution(): boolean;
            public static set defaultIsNativeResolution(value: boolean);
            /** Enable Retina support for macOS.
            */
            public static get macRetinaSupport(): boolean;
            public static set macRetinaSupport(value: boolean);
            /** If enabled, your game will continue to run after lost focus.
            */
            public static get runInBackground(): boolean;
            public static set runInBackground(value: boolean);
            /** Defines if fullscreen games should darken secondary displays.
            */
            public static get captureSingleScreen(): boolean;
            public static set captureSingleScreen(value: boolean);
            /** Write a log file with debugging information.
            */
            public static get usePlayerLog(): boolean;
            public static set usePlayerLog(value: boolean);
            /** Use resizable window in standalone player builds.
            */
            public static get resizableWindow(): boolean;
            public static set resizableWindow(value: boolean);
            /** Indicates whether to reset the application's screen resolution when the native window size changes.
            */
            public static get resetResolutionOnWindowResize(): boolean;
            public static set resetResolutionOnWindowResize(value: boolean);
            /** Pre bake collision meshes on player build.
            */
            public static get bakeCollisionMeshes(): boolean;
            public static set bakeCollisionMeshes(value: boolean);
            /** Enable receipt validation for the Mac App Store.
            */
            public static get useMacAppStoreValidation(): boolean;
            public static set useMacAppStoreValidation(value: boolean);
            /** Performs additional optimizations on Dedicated Server builds.
            */
            public static get dedicatedServerOptimizations(): boolean;
            public static set dedicatedServerOptimizations(value: boolean);
            /** Platform agnostic setting to define fullscreen behavior. Not all platforms support all modes.
            */
            public static get fullScreenMode(): UnityEngine.FullScreenMode;
            public static set fullScreenMode(value: UnityEngine.FullScreenMode);
            /** Enable 360 Stereo Capture support on the current build target.
            */
            public static get enable360StereoCapture(): boolean;
            public static set enable360StereoCapture(value: boolean);
            /** Active stereo rendering path
            */
            public static get stereoRenderingPath(): UnityEditor.StereoRenderingPath;
            public static set stereoRenderingPath(value: UnityEditor.StereoRenderingPath);
            /** Enable frame timing statistics.
            */
            public static get enableFrameTimingStats(): boolean;
            public static set enableFrameTimingStats(value: boolean);
            /** Enable ProfilerRecorder usage to record GPU timings when rendering with OpenGL.
            */
            public static get enableOpenGLProfilerGPURecorders(): boolean;
            public static set enableOpenGLProfilerGPURecorders(value: boolean);
            /** Prepare the application to encode images for an HDR display.
            */
            public static get allowHDRDisplaySupport(): boolean;
            public static set allowHDRDisplaySupport(value: boolean);
            /** Switch the main display to HDR mode (if available).
            */
            public static get useHDRDisplay(): boolean;
            public static set useHDRDisplay(value: boolean);
            /** The number of bits in each color channel for swap chain buffers.
            */
            public static get hdrBitDepth(): UnityEngine.HDRDisplayBitDepth;
            public static set hdrBitDepth(value: UnityEngine.HDRDisplayBitDepth);
            /** On Windows, shows the application in the background if the Fullscreen Windowed mode is used.
            */
            public static get visibleInBackground(): boolean;
            public static set visibleInBackground(value: boolean);
            /** If enabled, allows the user to switch between full screen and windowed mode using OS specific keyboard short cuts.
            */
            public static get allowFullscreenSwitch(): boolean;
            public static set allowFullscreenSwitch(value: boolean);
            /** Restrict standalone players to a single concurrent running instance.
            */
            public static get forceSingleInstance(): boolean;
            public static set forceSingleInstance(value: boolean);
            /** Use DXGI flip model swap chain for D3D11.
            */
            public static get useFlipModelSwapchain(): boolean;
            public static set useFlipModelSwapchain(value: boolean);
            /** Specifies whether the application requires OpenGL ES 3.1 support.
            */
            public static get openGLRequireES31(): boolean;
            public static set openGLRequireES31(value: boolean);
            /** Specifies whether the application requires OpenGL ES 3.1 AEP support.
            */
            public static get openGLRequireES31AEP(): boolean;
            public static set openGLRequireES31AEP(value: boolean);
            /** Specifies whether the application requires OpenGL ES 3.2 support.
            */
            public static get openGLRequireES32(): boolean;
            public static set openGLRequireES32(value: boolean);
            /** Specifies the max vertex limit for Sprite batching.
            */
            public static get spriteBatchVertexThreshold(): number;
            public static set spriteBatchVertexThreshold(value: number);
            /** Virtual Reality specific splash screen.
            */
            public static get virtualRealitySplashScreen(): UnityEngine.Texture2D;
            public static set virtualRealitySplashScreen(value: UnityEngine.Texture2D);
            /** Suppresses common C# warnings.
            */
            public static get suppressCommonWarnings(): boolean;
            public static set suppressCommonWarnings(value: boolean);
            /** Allow unsafe C# code to be compiled for predefined assemblies.
            */
            public static get allowUnsafeCode(): boolean;
            public static set allowUnsafeCode(value: boolean);
            /** Allows you to enable or disable incremental mode for garbage collection.
            */
            public static get gcIncremental(): boolean;
            public static set gcIncremental(value: boolean);
            /** Marked for deprecation in the future. Use PlayerSettings.meshDeformation instead.
            */
            public static get gpuSkinning(): boolean;
            public static set gpuSkinning(value: boolean);
            /** Specifies which method Unity uses to process mesh deformations for skinning.
            */
            public static get meshDeformation(): UnityEditor.MeshDeformation;
            public static set meshDeformation(value: UnityEditor.MeshDeformation);
            /** Enable graphics jobs (multi threaded rendering).
            */
            public static get graphicsJobs(): boolean;
            public static set graphicsJobs(value: boolean);
            /** Selects the graphics job mode to use on platforms that support Native, Legacy and Split graphics jobs.
            */
            public static get graphicsJobMode(): UnityEditor.GraphicsJobMode;
            public static set graphicsJobMode(value: UnityEditor.GraphicsJobMode);
            public static get xboxPIXTextureCapture(): boolean;
            public static get xboxEnableAvatar(): boolean;
            public static get xboxOneResolution(): number;
            /** Enables internal profiler.
            */
            public static get enableInternalProfiler(): boolean;
            public static set enableInternalProfiler(value: boolean);
            /** Sets the crash behavior on .NET unhandled exception.
            */
            public static get actionOnDotNetUnhandledException(): UnityEditor.ActionOnDotNetUnhandledException;
            public static set actionOnDotNetUnhandledException(value: UnityEditor.ActionOnDotNetUnhandledException);
            /** Are ObjC uncaught exceptions logged?
            */
            public static get logObjCUncaughtExceptions(): boolean;
            public static set logObjCUncaughtExceptions(value: boolean);
            /** Enables CrashReport API.
            */
            public static get enableCrashReportAPI(): boolean;
            public static set enableCrashReportAPI(value: boolean);
            /** The application identifier for the currently selected build target.
            */
            public static get applicationIdentifier(): string;
            public static set applicationIdentifier(value: string);
            /** Application bundle version shared between iOS & Android platforms.
            */
            public static get bundleVersion(): string;
            public static set bundleVersion(value: string);
            /** Returns if status bar should be hidden. Supported on iOS only; on Android, the status bar is always hidden.
            */
            public static get statusBarHidden(): boolean;
            public static set statusBarHidden(value: boolean);
            /** Remove unused Engine code from your build (IL2CPP-only).
            */
            public static get stripEngineCode(): boolean;
            public static set stripEngineCode(value: boolean);
            /** Default screen orientation for mobiles.
            */
            public static get defaultInterfaceOrientation(): UnityEditor.UIOrientation;
            public static set defaultInterfaceOrientation(value: UnityEditor.UIOrientation);
            /** Is auto-rotation to portrait supported?
            */
            public static get allowedAutorotateToPortrait(): boolean;
            public static set allowedAutorotateToPortrait(value: boolean);
            /** Is auto-rotation to portrait upside-down supported?
            */
            public static get allowedAutorotateToPortraitUpsideDown(): boolean;
            public static set allowedAutorotateToPortraitUpsideDown(value: boolean);
            /** Is auto-rotation to landscape right supported?
            */
            public static get allowedAutorotateToLandscapeRight(): boolean;
            public static set allowedAutorotateToLandscapeRight(value: boolean);
            /** Is auto-rotation to landscape left supported?
            */
            public static get allowedAutorotateToLandscapeLeft(): boolean;
            public static set allowedAutorotateToLandscapeLeft(value: boolean);
            /** Let the OS autorotate the screen as the device orientation changes.
            */
            public static get useAnimatedAutorotation(): boolean;
            public static set useAnimatedAutorotation(value: boolean);
            /** 32-bit Display Buffer is used.
            */
            public static get use32BitDisplayBuffer(): boolean;
            public static set use32BitDisplayBuffer(value: boolean);
            /** When enabled, preserves the alpha value in the framebuffer to support rendering over native UI on Android.
            */
            public static get preserveFramebufferAlpha(): boolean;
            public static set preserveFramebufferAlpha(value: boolean);
            /** Should unused Mesh components be excluded from game build?
            */
            public static get stripUnusedMeshComponents(): boolean;
            public static set stripUnusedMeshComponents(value: boolean);
            /** Enable strict shader variant matching in the player.
            */
            public static get strictShaderVariantMatching(): boolean;
            public static set strictShaderVariantMatching(value: boolean);
            /** Enable mip stripping for all platforms.
            */
            public static get mipStripping(): boolean;
            public static set mipStripping(value: boolean);
            /** Is the advanced version being used?
            */
            public static get advancedLicense(): boolean;
            /** Additional AOT compilation options. Shared by AOT platforms.
            */
            public static get aotOptions(): string;
            public static set aotOptions(value: string);
            /** The default cursor for your application.
            */
            public static get defaultCursor(): UnityEngine.Texture2D;
            public static set defaultCursor(value: UnityEngine.Texture2D);
            /** Default cursor's click position in pixels from the top left corner of the cursor image.
            */
            public static get cursorHotspot(): UnityEngine.Vector2;
            public static set cursorHotspot(value: UnityEngine.Vector2);
            /** Accelerometer update frequency.
            */
            public static get accelerometerFrequency(): number;
            public static set accelerometerFrequency(value: number);
            /** Is multi-threaded rendering enabled?
            */
            public static get MTRendering(): boolean;
            public static set MTRendering(value: boolean);
            /** Stops or allows audio from other applications to play in the background while your Unity application is running.
            */
            public static get muteOtherAudioSources(): boolean;
            public static set muteOtherAudioSources(value: boolean);
            /** Defines whether the BlendShape weight range in SkinnedMeshRenderers is clamped.
            */
            public static get legacyClampBlendShapeWeights(): boolean;
            public static set legacyClampBlendShapeWeights(value: boolean);
            /** Enables Metal API validation in the Editor.
            */
            public static get enableMetalAPIValidation(): boolean;
            public static set enableMetalAPIValidation(value: boolean);
            /** Specifies the desired Windows API to be used for input.
            */
            public static get windowsGamepadBackendHint(): UnityEditor.WindowsGamepadBackendHint;
            public static set windowsGamepadBackendHint(value: UnityEditor.WindowsGamepadBackendHint);
            /** Determines if plain text HTTP connections are allowed.
            */
            public static get insecureHttpOption(): UnityEditor.InsecureHttpOption;
            public static set insecureHttpOption(value: UnityEditor.InsecureHttpOption);
            /** Enables Graphics.SetSRGBWrite() on Vulkan renderer.
            */
            public static get vulkanEnableSetSRGBWrite(): boolean;
            public static set vulkanEnableSetSRGBWrite(value: boolean);
            /** Set number of swapchain buffers to be used with Vulkan renderer
            */
            public static get vulkanNumSwapchainBuffers(): number;
            public static set vulkanNumSwapchainBuffers(value: number);
            /** Delays acquiring the swapchain image until after the frame is rendered.
            */
            public static get vulkanEnableLateAcquireNextImage(): boolean;
            public static set vulkanEnableLateAcquireNextImage(value: boolean);
            /** Applies the display rotation during rendering.
            */
            public static get vulkanEnablePreTransform(): boolean;
            public static set vulkanEnablePreTransform(value: boolean);
            /** Gets the list of available icon slots for the specified build target and  PlatformIconKind|kind.
            * @param $buildTarget The NamedBuildTarget.
            * @param $kind Each platform supports a different set of PlatformIconKind|icon kinds. These can be found in the specific platform namespace (for example iOSPlatformIconKind.
            */
            public static GetPlatformIcons ($buildTarget: UnityEditor.Build.NamedBuildTarget, $kind: UnityEditor.PlatformIconKind) : System.Array$1<UnityEditor.PlatformIcon>
            /** Assign a list of icons for the specified platform and icon kind.
            * @param $platform The full list of platforms that support this API the supported  kinds can be found in PlatformIconKind|icon kinds.
            * @param $icons All available PlatformIcon slots must be retrieved with GetPlatformIcons.
            * @param $buildTarget The NamedBuildTarget.
            */
            public static SetPlatformIcons ($buildTarget: UnityEditor.Build.NamedBuildTarget, $kind: UnityEditor.PlatformIconKind, $icons: System.Array$1<UnityEditor.PlatformIcon>) : void
            /** Retrieves all icon kinds that the specified build target supports
            * @param $buildTarget The NamedBuildTarget.
            */
            public static GetSupportedIconKinds ($buildTarget: UnityEditor.Build.NamedBuildTarget) : System.Array$1<UnityEditor.PlatformIconKind>
            /** Assigns a list of icons for the specified platform.
            * @param $buildTarget The NamedBuildTarget.
            */
            public static SetIcons ($buildTarget: UnityEditor.Build.NamedBuildTarget, $icons: System.Array$1<UnityEngine.Texture2D>, $kind: UnityEditor.IconKind) : void
            /** Returns the list of assigned icons for the specified build target.
            * @param $buildTarget The NamedBuildTarget.
            * @param $kind The IconKind.
            */
            public static GetIcons ($buildTarget: UnityEditor.Build.NamedBuildTarget, $kind: UnityEditor.IconKind) : System.Array$1<UnityEngine.Texture2D>
            /** Returns a list of icon sizes for the specified platform.
            * @param $buildTarget The NamedBuildTarget.
            */
            public static GetIconSizes ($buildTarget: UnityEditor.Build.NamedBuildTarget, $kind: UnityEditor.IconKind) : System.Array$1<number>
            /** Returns the assets that will be loaded at start up in the player and be kept alive until the player terminates.
            * @returns The assets to be preloaded. 
            */
            public static GetPreloadedAssets () : System.Array$1<UnityEngine.Object>
            /** Assigns the assets that will be loaded at start up in the player and be kept alive until the player terminates.
            */
            public static SetPreloadedAssets ($assets: System.Array$1<UnityEngine.Object>) : void
            /** Returns true if static batching is enabled for the given BuildTarget.
            * @param $platform BuildTarget to check if static batching is enabled for.
            * @returns Is static batching enabled for the platform. 
            */
            public static GetStaticBatchingForPlatform ($platform: UnityEditor.BuildTarget) : boolean
            /** Sets static batching for the given BuildTarget.
            * @param $platform BuildTarget to set static batching for.
            * @param $enable Should static batching be enabled.
            */
            public static SetStaticBatchingForPlatform ($platform: UnityEditor.BuildTarget, $enable: boolean) : void
            /** Returns true if dynamic batching is enabled for the given BuildTarget.
            * @param $platform BuildTarget to check if dynamic batching is enabled for.
            * @returns Is dynamic batching enabled for the BuildTarget. 
            */
            public static GetDynamicBatchingForPlatform ($platform: UnityEditor.BuildTarget) : boolean
            /** Sets dynamic batching for the given BuildTarget.
            * @param $platform BuildTarget to set dynamic batching for.
            * @param $enable Should dynamic batching be enabled.
            */
            public static SetDynamicBatchingForPlatform ($platform: UnityEditor.BuildTarget, $enable: boolean) : void
            /** Gets the default size for compressed shader variant chunks for the build target.
            * @param $buildTarget The build target to get the shader chunk size for.
            */
            public static GetShaderChunkSizeInMBForPlatform ($buildTarget: UnityEditor.BuildTarget) : number
            /** Sets the default size for compressed shader variant chunks on the build target.
            * @param $buildTarget The build target to set the shader chunk size for.
            * @param $sizeInMegabytes The chunk size in megabytes.
            */
            public static SetShaderChunkSizeInMBForPlatform ($buildTarget: UnityEditor.BuildTarget, $sizeInMegabytes: number) : void
            /** Gets the default limit on the number of shader variant chunks Unity loads and keeps in memory for the build target.
            * @param $buildTarget The build target to get the shader chunk count for.
            */
            public static GetShaderChunkCountForPlatform ($buildTarget: UnityEditor.BuildTarget) : number
            /** Sets the default limit on the number of shader variant chunks Unity loads and keeps in memory on the build target.
            * @param $buildTarget The build target to set the shader chunk count for.
            * @param $chunkCount The maximum number of chunks to keep in memory for each shader.
            */
            public static SetShaderChunkCountForPlatform ($buildTarget: UnityEditor.BuildTarget, $chunkCount: number) : void
            /** Gets the default size for compressed shader variant chunks.
            */
            public static GetDefaultShaderChunkSizeInMB () : number
            /** Sets the default size for compressed shader variant chunks.
            * @param $sizeInMegabytes The chunk size in megabytes.
            */
            public static SetDefaultShaderChunkSizeInMB ($sizeInMegabytes: number) : void
            /** Gets the default limit on the number of shader variant chunks Unity loads and keeps in memory.
            */
            public static GetDefaultShaderChunkCount () : number
            /** Sets the default limit on the number of shader variant chunks Unity loads and keeps in memory.
            * @param $buildTarget The build target to set the shader chunk count for.
            * @param $chunkCount The maximum number of chunks to keep in memory for each shader.
            */
            public static SetDefaultShaderChunkCount ($chunkCount: number) : void
            /** If the value is true, settings for the buildTarget override the default settings.
            * @param $buildTarget The build target to check the override for.
            */
            public static GetOverrideShaderChunkSettingsForPlatform ($buildTarget: UnityEditor.BuildTarget) : boolean
            /** Enable this to override the default shader variant chunk settings.
            * @param $buildTarget The build target to set the override for.
            * @param $value Set the value to true if you want settings for the buildTarget to override the default settings.
            */
            public static SetOverrideShaderChunkSettingsForPlatform ($buildTarget: UnityEditor.BuildTarget, $value: boolean) : void
            /** Get graphics APIs to be used on a build platform.
            * @param $platform Platform to get APIs for.
            * @returns Array of graphics APIs. 
            */
            public static GetGraphicsAPIs ($platform: UnityEditor.BuildTarget) : System.Array$1<UnityEngine.Rendering.GraphicsDeviceType>
            /** Sets the graphics APIs used on a build platform.
            * @param $platform Platform to set APIs for.
            * @param $apis Array of graphics APIs.
            */
            public static SetGraphicsAPIs ($platform: UnityEditor.BuildTarget, $apis: System.Array$1<UnityEngine.Rendering.GraphicsDeviceType>) : void
            /** Is a build platform using automatic graphics API choice?
            * @param $platform Platform to get the flag for.
            * @returns Should best available graphics API be used. 
            */
            public static GetUseDefaultGraphicsAPIs ($platform: UnityEditor.BuildTarget) : boolean
            /** Should a build platform use automatic graphics API choice.
            * @param $platform Platform to set the flag for.
            * @param $automatic Should best available graphics API be used?
            */
            public static SetUseDefaultGraphicsAPIs ($platform: UnityEditor.BuildTarget, $automatic: boolean) : void
            /** Sets a value of a custom template variable.
            * @param $name Name of the variable.
            * @param $value Value of the custom template variable.
            */
            public static SetTemplateCustomValue ($name: string, $value: string) : void
            /** Returns a value of a custom template variable.
            * @param $name Name of the variable.
            * @returns The current value of the custom template variable. 
            */
            public static GetTemplateCustomValue ($name: string) : string
            /** Gets the user-specified symbols for script compilation for the build target you select.
            * @param $buildTarget The NamedBuildTarget.
            * @returns A string containing the symbols for the given build target name. 
            */
            public static GetScriptingDefineSymbols ($buildTarget: UnityEditor.Build.NamedBuildTarget) : string
            /** Gets the user-specified symbols for script compilation for the build target you select.
            * @param $buildTarget The NamedBuildTarget.
            * @param $defines A string array where Unity stores the symbols for the given build target name.
            */
            public static GetScriptingDefineSymbols ($buildTarget: UnityEditor.Build.NamedBuildTarget, $defines: $Ref<System.Array$1<string>>) : void
            /** Set user-specified symbols for script compilation for the given build target.
            * @param $buildTarget The NamedBuildTarget.
            * @param $defines Symbols for this build target are passed as an array or as a string separated by semicolons.
            */
            public static SetScriptingDefineSymbols ($buildTarget: UnityEditor.Build.NamedBuildTarget, $defines: string) : void
            /** Set user-specified symbols for script compilation for the given build target.
            * @param $buildTarget The NamedBuildTarget.
            * @param $defines Symbols for this build target are passed as an array or as a string separated by semicolons.
            */
            public static SetScriptingDefineSymbols ($buildTarget: UnityEditor.Build.NamedBuildTarget, $defines: System.Array$1<string>) : void
            /** Gets an array of additional compiler arguments set for a specific NamedBuildTarget.
            * @param $buildTarget The NamedBuildTarget to get the compiler arguments for.
            * @returns Returns an array with the compiler arguments associated with a NamedBuildTarget. 
            */
            public static GetAdditionalCompilerArguments ($buildTarget: UnityEditor.Build.NamedBuildTarget) : System.Array$1<string>
            /** Sets additional compiler arguments for a build target.
            * @param $buildTarget The NamedBuildTarget.
            * @param $additionalCompilerArguments An array of the additional compiler arguments.
            */
            public static SetAdditionalCompilerArguments ($buildTarget: UnityEditor.Build.NamedBuildTarget, $additionalCompilerArguments: System.Array$1<string>) : void
            /** Gets the architecture for the given build target.
            * @param $buildTarget The NamedBuildTarget.
            * @returns An integer value associated with the architecture of the build target.  0 - None, 1 - ARM64, 2 - Universal. 
            */
            public static GetArchitecture ($buildTarget: UnityEditor.Build.NamedBuildTarget) : number
            /** Sets the architecture for the given build target.
            * @param $buildTarget The NamedBuildTarget.
            * @param $architecture An integer value associated with the architecture of the build target.  0 - None, 1 - ARM64, 2 - Universal.
            */
            public static SetArchitecture ($buildTarget: UnityEditor.Build.NamedBuildTarget, $architecture: number) : void
            /** Gets the scripting framework for the build target you select.
            * @param $buildTarget The NamedBuildTarget.
            * @returns Returns IL2CPP, Mono or .NET scripting backends. 
            */
            public static GetScriptingBackend ($buildTarget: UnityEditor.Build.NamedBuildTarget) : UnityEditor.ScriptingImplementation
            /** Sets the scripting framework for a given build target.
            * @param $buildTarget The NamedBuildTarget.
            * @param $backend The ScriptingImplementation.
            */
            public static SetScriptingBackend ($buildTarget: UnityEditor.Build.NamedBuildTarget, $backend: UnityEditor.ScriptingImplementation) : void
            /** Returns the default ScriptingImplementation for the build target you select.
            * @param $buildTarget The NamedBuildTarget.
            * @returns A ScriptingImplementation object that describes the default scripting backend for the build target you select. 
            */
            public static GetDefaultScriptingBackend ($buildTarget: UnityEditor.Build.NamedBuildTarget) : UnityEditor.ScriptingImplementation
            /** Returns whether a given build target is configured to capture startuplogs
            * @param $namedBuildTarget Named build target
            * @returns A boolean indicating whether the supplied NamedBuildTarget should capture startup logs 
            */
            public static GetCaptureStartupLogs ($buildTarget: UnityEditor.Build.NamedBuildTarget) : boolean
            /** Set whether a given build target is configured to capture startuplogs
            * @param $namedBuildTarget Named build target
            * @param $enable Value inidiating capture state
            */
            public static SetCaptureStartupLogs ($buildTarget: UnityEditor.Build.NamedBuildTarget, $enable: boolean) : void
            /** Set the application identifier for the specified platform.
            * @param $buildTarget The NamedBuildTarget.
            */
            public static SetApplicationIdentifier ($buildTarget: UnityEditor.Build.NamedBuildTarget, $identifier: string) : void
            /** Get the application identifier for the specified platform.
            * @param $buildTarget The NamedBuildTarget.
            * @returns Returns the application identifier associated with a NamedBuildTarget. 
            */
            public static GetApplicationIdentifier ($buildTarget: UnityEditor.Build.NamedBuildTarget) : string
            /** Gets compiler configuration used when compiling generated C++ code for the build target you specify.
            * @param $buildTarget The NamedBuildTarget.
            * @returns Returns compiler configuration. 
            */
            public static GetIl2CppCompilerConfiguration ($buildTarget: UnityEditor.Build.NamedBuildTarget) : UnityEditor.Il2CppCompilerConfiguration
            /** Sets compiler configuration used when compiling generated C++ code for a particular build target.
            * @param $buildTarget The NamedBuildTarget.
            * @param $targetGroup Build target group.
            * @param $configuration Compiler configuration.
            */
            public static SetIl2CppCompilerConfiguration ($buildTarget: UnityEditor.Build.NamedBuildTarget, $configuration: UnityEditor.Il2CppCompilerConfiguration) : void
            /** Gets stack trace information option for il2cpp builds for the build target you specify.
            * @param $buildTarget The NamedBuildTarget.
            * @returns Returns stack trace information option. 
            */
            public static GetIl2CppStacktraceInformation ($buildTarget: UnityEditor.Build.NamedBuildTarget) : UnityEditor.Il2CppStacktraceInformation
            /** Sets stack trace information option for il2cpp builds for the build target you specify.
            * @param $buildTarget The NamedBuildTarget.
            * @param $option Stack trace information option.
            */
            public static SetIl2CppStacktraceInformation ($buildTarget: UnityEditor.Build.NamedBuildTarget, $option: UnityEditor.Il2CppStacktraceInformation) : void
            /** Sets the managed code stripping level for specified build target.
            * @param $level The desired managed code stripping level.
            * @param $buildTarget The NamedBuildTarget.
            */
            public static SetManagedStrippingLevel ($buildTarget: UnityEditor.Build.NamedBuildTarget, $level: UnityEditor.ManagedStrippingLevel) : void
            /** Gets the managed code stripping level set for the build target you select
            * @param $buildTarget The NamedBuildTarget.
            * @returns Returns the default ManagedStrippingLevel for the build target you select. 
            */
            public static GetManagedStrippingLevel ($buildTarget: UnityEditor.Build.NamedBuildTarget) : UnityEditor.ManagedStrippingLevel
            /** Gets .NET API compatibility level for specified build target.
            * @param $buildTarget The NamedBuildTarget.
            * @returns Returns the ApiCompatibilityLevel associated with a NamedBuildTarget. 
            */
            public static GetApiCompatibilityLevel ($buildTarget: UnityEditor.Build.NamedBuildTarget) : UnityEditor.ApiCompatibilityLevel
            /** Sets .NET API compatibility level for specified build target.
            * @param $buildTarget The NamedBuildTarget.
            */
            public static SetApiCompatibilityLevel ($buildTarget: UnityEditor.Build.NamedBuildTarget, $value: UnityEditor.ApiCompatibilityLevel) : void
            /** Gets .NET API compatibility level for the editor assemblies.
            * @returns Returns the .NET API level for editor assemblies. 
            */
            public static GetEditorAssembliesCompatibilityLevel () : UnityEditor.EditorAssembliesCompatibilityLevel
            /** Sets .NET API compatibility level for Editor Assemblies.
            * @param $value The EditorAssembliesCompatibilityLevel.
            */
            public static SetEditorAssembliesCompatibilityLevel ($value: UnityEditor.EditorAssembliesCompatibilityLevel) : void
            /** Gets the value of code generation option for IL2CPP.
            * @param $buildTarget The NamedBuildTarget.
            * @returns Returns code generation option for the specified build target. 
            */
            public static GetIl2CppCodeGeneration ($buildTarget: UnityEditor.Build.NamedBuildTarget) : UnityEditor.Build.Il2CppCodeGeneration
            /** Sets the code generation option for IL2CPP for the specified build target.
            * @param $buildTarget The NamedBuildTarget.
            * @param $value Code generation option.
            */
            public static SetIl2CppCodeGeneration ($buildTarget: UnityEditor.Build.NamedBuildTarget, $value: UnityEditor.Build.Il2CppCodeGeneration) : void
            /** Enable or disable multithreaded rendering option for mobile platform.
            * @param $targetGroup Mobile platform (Only iOS, tvOS and Android).
            * @param $buildTarget The NamedBuildTarget (Only iOS, tvOS and Android).
            */
            public static SetMobileMTRendering ($buildTarget: UnityEditor.Build.NamedBuildTarget, $enable: boolean) : void
            /** Check if multithreaded rendering option for mobile platform is enabled.
            * @param $buildTarget The NamedBuildTarget. (Only iOS, tvOS and Android).
            * @returns Returns true if multithreaded rendering option for build target is enabled. 
            */
            public static GetMobileMTRendering ($buildTarget: UnityEditor.Build.NamedBuildTarget) : boolean
            /** Gets the NormalMapEncoding for the build target you select.
            * @param $buildTarget The NamedBuildTarget.
            */
            public static GetNormalMapEncoding ($buildTarget: UnityEditor.Build.NamedBuildTarget) : UnityEditor.NormalMapEncoding
            /** Sets the normal map encoding for the given build target.
            * @param $encoding The desired normal map encoding.
            * @param $buildTarget The NamedBuildTarget (only Android, iOS and tvOS).
            * @param $platform The platform build target group whose normal map encoding you want to set.
            */
            public static SetNormalMapEncoding ($buildTarget: UnityEditor.Build.NamedBuildTarget, $encoding: UnityEditor.NormalMapEncoding) : void
            /** Obtain the additional arguments passed to the IL2CPP compiler during the player build process.
            * @returns Additional arguments passed to the IL2CPP compiler during the build process. 
            */
            public static GetAdditionalIl2CppArgs () : string
            /** Set additional arguments passed to the IL2CPP compiler during the build process.
            * @param $additionalArgs The additional arguments passed to the IL2CPP compiler during the build process.
            */
            public static SetAdditionalIl2CppArgs ($additionalArgs: string) : void
            public static GetWsaHolographicRemotingEnabled () : boolean
            public static SetWsaHolographicRemotingEnabled ($enabled: boolean) : void
            /** Gets stack trace logging options.
            */
            public static GetStackTraceLogType ($logType: UnityEngine.LogType) : UnityEngine.StackTraceLogType
            /** Set stack trace logging options.
            Note: calling this function will implicitly call Application.SetStackTraceLogType.
            */
            public static SetStackTraceLogType ($logType: UnityEngine.LogType, $stackTraceType: UnityEngine.StackTraceLogType) : void
            /** Is virtual texturing enabled.
            * @returns True if virtual texturing is enabled, false otherwise. 
            */
            public static GetVirtualTexturingSupportEnabled () : boolean
            /** Enable virtual texturing.
            * @param $enabled True to enable, false to disable.
            */
            public static SetVirtualTexturingSupportEnabled ($enabled: boolean) : void
            /** Gets the active shader precision model.
            */
            public static GetShaderPrecisionModel () : UnityEditor.ShaderPrecisionModel
            /** Sets the shader precision model.
            * @param $model The new precision model to use.
            */
            public static SetShaderPrecisionModel ($model: UnityEditor.ShaderPrecisionModel) : void
        }
        /** Icon kind.
        */
        enum IconKind
        { Any = -1, Application = 0, Settings = 1, Notification = 2, Spotlight = 3, Store = 4 }
        /** The style of builtin splash screen to use.
        */
        enum SplashScreenStyle
        { Light = 0, Dark = 1 }
        /** Resolution dialog setting.
        */
        enum ResolutionDialogSetting
        { Disabled = 0, Enabled = 1, HiddenByDefault = 2 }
        /** Mac fullscreen mode.
        */
        enum MacFullscreenMode
        { CaptureDisplay = 0, FullscreenWindow = 1, FullscreenWindowWithDockAndMenuBar = 2 }
        /** Direct3D 9 fullscreen mode.
        */
        enum D3D9FullscreenMode
        { ExclusiveMode = 0, FullscreenWindow = 1 }
        /** Direct3D 11 fullscreen mode.
        */
        enum D3D11FullscreenMode
        { ExclusiveMode = 0, FullscreenWindow = 1 }
        /** Enum used to specify what stereo rendering path to use.
        */
        enum StereoRenderingPath
        { MultiPass = 0, SinglePass = 1, Instancing = 2 }
        /** Scripting implementation (backend).
        */
        enum ScriptingImplementation
        { Mono2x = 0, IL2CPP = 1, WinRTDotNET = 2, CoreCLR = 3 }
        /** C++ compiler configuration used when compiling IL2CPP generated code.
        */
        enum Il2CppCompilerConfiguration
        { Debug = 0, Release = 1, Master = 2 }
        /** Defines how aggressively Unity strips unused managed (C#) code.
        */
        enum ManagedStrippingLevel
        { Disabled = 0, Low = 1, Medium = 2, High = 3, Minimal = 4 }
        /** .NET API compatibility level.
        */
        enum ApiCompatibilityLevel
        { NET_2_0 = 1, NET_2_0_Subset = 2, NET_4_6 = 3, NET_Web = 4, NET_Micro = 5, NET_Standard_2_0 = 6, NET_Standard = 6, NET_Unity_4_8 = 3 }
        /** Describes the encoding of normal maps.
        */
        enum NormalMapEncoding
        { XYZ = 0, DXT5nm = 1 }
        /** Stack trace information options to choose how much information to include in IL2CPP generated stack traces.
        */
        enum Il2CppStacktraceInformation
        { MethodOnly = 0, MethodFileLineNumber = 1 }
        /** .NET API compatibility level.
        */
        enum EditorAssembliesCompatibilityLevel
        { Default = 1, NET_Unity_4_8 = 2, NET_Standard = 3 }
        /** Specifies which method Unity uses to process mesh deformations for skinning.
        */
        enum MeshDeformation
        { CPU = 0, GPU = 1, GPUBatched = 2 }
        /** Enum used to specify the graphics jobs mode to use.
        */
        enum GraphicsJobMode
        { Native = 0, Legacy = 1, Split = 2 }
        /** The behavior in case of unhandled .NET exception.
        */
        enum ActionOnDotNetUnhandledException
        { SilentExit = 0, Crash = 1 }
        /** Managed code stripping level.
        */
        enum StrippingLevel
        { Disabled = 0, StripAssemblies = 1, StripByteCode = 2, UseMicroMSCorlib = 3 }
        /** Default mobile device orientation.
        */
        enum UIOrientation
        { Portrait = 0, PortraitUpsideDown = 1, LandscapeRight = 2, LandscapeLeft = 3, AutoRotation = 4 }
        /** Specifies the desired Windows API to be used for input.
        */
        enum WindowsGamepadBackendHint
        { WindowsGamepadBackendHintDefault = 0, WindowsGamepadBackendHintXInput = 1, WindowsGamepadBackendHintWindowsGamingInput = 2 }
        /** Options for allowing plain text HTTP connections for Networking.UnityWebRequest.
        */
        enum InsecureHttpOption
        { NotAllowed = 0, DevelopmentOnly = 1, AlwaysAllowed = 2 }
        /** Options for the shader precision model.
        */
        enum ShaderPrecisionModel
        { PlatformDefault = 0, Unified = 1 }
        enum TargetGlesGraphics
        { OpenGLES_1_x = 0, OpenGLES_2_0 = 1, OpenGLES_3_0 = 2, Automatic = -1 }
        enum TargetIOSGraphics
        { OpenGLES_2_0 = 2, OpenGLES_3_0 = 3, Metal = 4, Automatic = -1 }
        enum AspectRatio
        { AspectOthers = 0, Aspect4by3 = 1, Aspect5by4 = 2, Aspect16by10 = 3, Aspect16by9 = 4 }
        /** Target Android device architecture.
        */
        enum AndroidTargetDevice
        { FAT = 0, ARMv7 = 3 }
        /** Options to control the application window orientation when Default orientation is set to Auto rotation.
        */
        enum AndroidAutoRotationBehavior
        { User = 1, Sensor = 2 }
        /** API levels that can be specified in scripts. Note that the lowest API level here strictly corresponds to the lowest supported API level, however these values should not be used to determine the highest supported API level.
        */
        enum AndroidSdkVersions
        { AndroidApiLevelAuto = 0, AndroidApiLevel16 = 16, AndroidApiLevel17 = 17, AndroidApiLevel18 = 18, AndroidApiLevel19 = 19, AndroidApiLevel21 = 21, AndroidApiLevel22 = 22, AndroidApiLevel23 = 23, AndroidApiLevel24 = 24, AndroidApiLevel25 = 25, AndroidApiLevel26 = 26, AndroidApiLevel27 = 27, AndroidApiLevel28 = 28, AndroidApiLevel29 = 29, AndroidApiLevel30 = 30, AndroidApiLevel31 = 31, AndroidApiLevel32 = 32, AndroidApiLevel33 = 33 }
        /** Preferred application install location.
        */
        enum AndroidPreferredInstallLocation
        { Auto = 0, PreferExternal = 1, ForceInternal = 2 }
        /** Android CPU architecture.
        */
        enum AndroidArchitecture
        { None = 0, ARMv7 = 1, ARM64 = 2, X86 = 4, X86_64 = 8, All = 4294967295 }
        /** Defines the types of devices on which an Android application is allowed to run. Used for the PlayerSettings.Android._androidTargetDevices property.
        */
        enum AndroidTargetDevices
        { AllDevices = 0, PhonesTabletsAndTVDevicesOnly = 1, ChromeOSDevicesOnly = 2 }
        /** Android splash screen scale modes.
        */
        enum AndroidSplashScreenScale
        { Center = 0, ScaleToFit = 1, ScaleToFill = 2 }
        /** Application should show ActivityIndicator when loading.
        */
        enum AndroidShowActivityIndicatorOnLoading
        { Large = 0, InversedLarge = 1, Small = 2, InversedSmall = 3, DontShow = -1 }
        /** Describes the method for how content is displayed on the screen.
        */
        enum AndroidBlitType
        { Always = 0, Never = 1, Auto = 2 }
        /** Options for the compressed texture formats that are available on the target build platform.
        */
        enum TextureCompressionFormat
        { Unknown = 0, ETC = 1, ETC2 = 2, ASTC = 3, PVRTC = 4, DXTC = 5, BPTC = 6, DXTC_RGTC = 7 }
        /** Options for which application entries to include when Unity generates a Gradle project.
        */
        enum AndroidApplicationEntry
        { Activity = 1, GameActivity = 2 }
        enum iOSTargetResolution
        { Native = 0, ResolutionAutoPerformance = 3, ResolutionAutoQuality = 4, Resolution320p = 5, Resolution640p = 6, Resolution768p = 7 }
        /** Script call optimization level.
        */
        enum ScriptCallOptimizationLevel
        { SlowAndSafe = 0, FastButNoExceptions = 1 }
        /** Supported iOS SDK versions.
        */
        enum iOSSdkVersion
        { DeviceSDK = 988, SimulatorSDK = 989 }
        /** Supported iOS deployment versions.
        */
        enum iOSTargetOSVersion
        { iOS_4_0 = 10, iOS_4_1 = 12, iOS_4_2 = 14, iOS_4_3 = 16, iOS_5_0 = 18, iOS_5_1 = 20, iOS_6_0 = 22, iOS_7_0 = 24, iOS_7_1 = 26, iOS_8_0 = 28, iOS_8_1 = 30, Unknown = 999 }
        /** Target iOS device.
        */
        enum iOSTargetDevice
        { iPhoneOnly = 0, iPadOnly = 1, iPhoneAndiPad = 2 }
        /** iOS status bar style.
        */
        enum iOSStatusBarStyle
        { Default = 0, LightContent = 1, DarkContent = 2, BlackTranslucent = -1, BlackOpaque = -1 }
        /** Application behavior when entering background.
        */
        enum iOSAppInBackgroundBehavior
        { Custom = -1, Suspend = 0, Exit = 1 }
        /** Background modes supported by the application corresponding to project settings in Xcode.
        */
        enum iOSBackgroundMode
        { None = 0, Audio = 1, Location = 2, VOIP = 4, NewsstandContent = 8, ExternalAccessory = 16, BluetoothCentral = 32, BluetoothPeripheral = 64, Fetch = 128, RemoteNotification = 256, Processing = 512 }
        /** The type of the iOS provisioning profile if manual signing is used.
        */
        enum ProvisioningProfileType
        { Automatic = 0, Development = 1, Distribution = 2 }
        /** Activity Indicator on loading.
        */
        enum iOSShowActivityIndicatorOnLoading
        { WhiteLarge = 0, White = 1, Gray = 2, DontShow = -1 }
        /** iOS launch screen settings.
        */
        enum iOSLaunchScreenImageType
        { iPhonePortraitImage = 0, iPhoneLandscapeImage = 1, iPadImage = 2 }
        /** iOS launch screen settings.
        */
        enum iOSLaunchScreenType
        { Default = 0, ImageAndBackgroundRelative = 1, ImageAndBackgroundConstant = 4, CustomStoryboard = 5, CustomXib = 2, None = 3 }
        /** Supported Bratwurst SDK versions.
        */
        enum BratwurstSdkVersion
        { Device = 0, Simulator = 1 }
        /** Supported tvOS SDK versions.
        */
        enum tvOSSdkVersion
        { Device = 0, Simulator = 1 }
        /** Supported tvOS deployment versions.
        */
        enum tvOSTargetOSVersion
        { Unknown = 0, tvOS_9_0 = 900, tvOS_9_1 = 901 }
        /** Options for Exception support in WebGL.
        */
        enum WebGLExceptionSupport
        { None = 0, ExplicitlyThrownExceptionsOnly = 1, FullWithoutStacktrace = 2, FullWithStacktrace = 3 }
        /** The build format options available when building to WebGL.
        */
        enum WebGLLinkerTarget
        { Asm = 0, Wasm = 1, Both = 2 }
        /** An enum containing different compression types.
        */
        enum WebGLCompressionFormat
        { Brotli = 0, Gzip = 1, Disabled = 2 }
        /** An enum containing different modes for debug symbols.
        */
        enum WebGLDebugSymbolMode
        { Off = 0, External = 1, Embedded = 2 }
        /** An enum containing different trapping modes for WebAssembly code.
        */
        enum WebGLWasmArithmeticExceptions
        { Throw = 0, Ignore = 1 }
        /** An enum containing different memory growth modes.
        */
        enum WebGLMemoryGrowthMode
        { None = 0, Linear = 1, Geometric = 2 }
        /** An enum containing different power preference hints for the WebGL context.
        */
        enum WebGLPowerPreference
        { Default = 0, LowPower = 1, HighPerformance = 2 }
        enum XboxOneLoggingLevel
        { AllLogging = 4, WarningsAndErrors = 2, ErrorsOnly = 1 }
        enum XboxOneEncryptionLevel
        { None = 0, DevkitCompatible = 1, FullEncryption = 2 }
        enum XboxOnePackageUpdateGranularity
        { Chunk = 1, File = 2 }
        /** Represents different C# compilers that can be used to compile C# scripts.
        */
        enum ScriptCompiler
        { Mono = 0, Roslyn = 1 }
        /** Enum used to specify the threading mode to use.
        */
        enum GfxThreadingMode
        { Direct = 0, NonThreaded = 1, Threaded = 2, ClientWorkerJobs = 3, ClientWorkerNativeJobs = 4, DirectNativeJobs = 5, SplitJobs = 6 }
        enum iOSSystemGestureDeferMode
        { None = 0, TopEdge = 1, LeftEdge = 2, BottomEdge = 4, RightEdge = 8, All = 15 }
        /** Gamepad support level for Android TV.
        */
        enum AndroidGamepadSupportLevel
        { SupportsDPad = 0, SupportsGamepad = 1, RequiresGamepad = 2 }
        /** Apple Mobile CPU architecture.
        */
        enum AppleMobileArchitecture
        { ARMv7 = 0, ARM64 = 1, Universal = 2 }
        /** A device requirement description used for configuration of App Slicing.
        */
        class iOSDeviceRequirement extends System.Object
        {
            protected [__keep_incompatibility]: never;
            /** The values of the device requirement description.
            */
            public get values(): System.Collections.Generic.IDictionary$2<string, string>;
            public constructor ()
        }
        /** Class containing methods to interact with the selected Unity PlayModeView (GameView, Simulator).
        */
        class PlayModeWindow extends System.Object
        {
            protected [__keep_incompatibility]: never;
            /** Retrieves the current rendering resolution of the selected PlayModeView.
            * @param $width The width of the rendering resolution.
            * @param $height The height of the rendering resolution.
            */
            public static GetRenderingResolution ($width: $Ref<number>, $height: $Ref<number>) : void
            /** Adds a new Custom resolution entry with the specified baseName. If an entry with the same baseName already exists, this method updates the resolution of this entry with the new values.
            * @param $width The custom resolution width.
            * @param $height The custom resolution height.
            * @param $baseName The basename for the custom resolution entry.
            */
            public static SetCustomRenderingResolution ($width: number, $height: number, $baseName: string) : void
            /** Changes the enter play mode behavior of the selected PlayModeView window.
            * @param $focused If true, sets the view to Focused, otherwise to maximized.
            */
            public static SetPlayModeFocused ($focused: boolean) : void
            /** Returns the enter play mode behavior for the selected PlayModeView.
            * @returns True if the behaviour is normal, and false if it is Maximized or Fullscreen. 
            */
            public static GetPlayModeFocused () : boolean
            /** Gets the type of the selected PlayModeView window.
            * @returns The type of the PlayModeView. 
            */
            public static GetViewType () : UnityEditor.PlayModeWindow.PlayModeViewTypes
            public static SetViewType ($type: UnityEditor.PlayModeWindow.PlayModeViewTypes) : void
        }
        /** Utility class for any Prefab related operations.
        */
        class PrefabUtility extends System.Object
        {
            protected [__keep_incompatibility]: never;
            /** Unity calls this method automatically when Prefab instances in the Scene have been updated.
            */
            public static prefabInstanceUpdated : UnityEditor.PrefabUtility.PrefabInstanceUpdated
            /** Retrieves the PrefabInstance object for the outermost Prefab instance the provided object is part of.
            * @param $instanceComponentOrGameObject An object from the Prefab instance.
            * @returns The Prefab instance handle. 
            */
            public static GetPrefabInstanceHandle ($instanceComponentOrGameObject: UnityEngine.Object) : UnityEngine.Object
            /** Determines whether the object Prefab asset contains any MonoBehaviours with missing SerializeReference types.
            * @param $componentOrGameObject An object which is part of a Prefab asset.
            * @returns Returns true if there are missing SerializeReference types directly within a Prefab asset excluding nested Prefab. 
            */
            public static HasManagedReferencesWithMissingTypes ($assetComponentOrGameObject: UnityEngine.Object) : boolean
            /** Returns all modifications that have been applied to a particular Prefab instance in a Scene or modifications for a Prefab instance in an Asset.
            See PrefabUtility.SetPropertyModifications|SetPropertyModifications for details about the fields of the returned PropertyModification|PropertyModification objects.
            An alternative approach to getting property overrides information for a Prefab instance is to use the PrefabUtility.GetObjectOverrides|GetObjectOverrides API which also has Apply and Revert functionality.
            When using GetPropertyModifications bear in mind that:
            - it will return both default and non-default overrides
            - It can return overrides for all child GameObjects and their Components
            - it can return overrides that are no longer valid.
            * @param $targetPrefab Can be a Prefab instance in the scene or a Prefab instance in an Prefab Asset (e.g a Variant asset).
            */
            public static GetPropertyModifications ($targetPrefab: UnityEngine.Object) : System.Array$1<UnityEditor.PropertyModification>
            /** Assigns a set of PropertyModification|PropertyModification objects to a target Prefab instance relative to its source Prefab Asset.
            * @param $targetPrefab A reference to the Prefab instance to be modified. Although the type and name imply an asset, it is the outermost instance as a GameObject that should be provided.
            * @param $modifications A set of PropertyModification objects that define the changes to the target Prefab instance.
            */
            public static SetPropertyModifications ($targetPrefab: UnityEngine.Object, $modifications: System.Array$1<UnityEditor.PropertyModification>) : void
            /** Returns true if the given Prefab instance has any overrides.
            * @param $instanceRoot The root GameObject of the Prefab instance to check.
            * @param $includeDefaultOverrides Set to true to consider default overrides as overrides too.
            * @returns Returns true if there are any overrides. 
            */
            public static HasPrefabInstanceAnyOverrides ($instanceRoot: UnityEngine.GameObject, $includeDefaultOverrides: boolean) : boolean
            /** Causes modifications made to the Prefab instance to be recorded.
            * @param $targetObject Object to process.
            */
            public static RecordPrefabInstancePropertyModifications ($targetObject: UnityEngine.Object) : void
            /** Loads a Prefab Asset at a given path into a given preview Scene and returns the root GameObject of the Prefab.
            * @param $scene The Scene to load the contents into.
            * @param $prefabPath The path of the Prefab Asset to load the contents of.
            */
            public static LoadPrefabContentsIntoPreviewScene ($prefabPath: string, $scene: UnityEngine.SceneManagement.Scene) : void
            /** Is this component added to a Prefab instance as an override?
            * @param $component The component to check.
            * @returns True if the component is an added component. 
            */
            public static IsAddedComponentOverride ($component: UnityEngine.Object) : boolean
            /** Returns true if the given object is part of any kind of Prefab.
            * @param $componentOrGameObject The object to check. Must be a component or GameObject.
            * @returns True if the object s part of a Prefab. 
            */
            public static IsPartOfAnyPrefab ($componentOrGameObject: UnityEngine.Object) : boolean
            /** Returns true if the given object is part of a Prefab Asset.
            * @param $componentOrGameObject The object to check. Must be a component or GameObject.
            * @returns True is the object is part of a Prefab Asset. 
            */
            public static IsPartOfPrefabAsset ($componentOrGameObject: UnityEngine.Object) : boolean
            /** Returns true if the given object is part of a Prefab instance.
            * @param $componentOrGameObject The object to check. Must be a component or GameObject.
            * @returns True if the object is part of a Prefab instance. 
            */
            public static IsPartOfPrefabInstance ($componentOrGameObject: UnityEngine.Object) : boolean
            /** Returns true if the given object is part of a Prefab instance and not part of an asset.
            * @param $componentOrGameObject The object to check. Must be a component or GameObject.
            * @returns True if the object is part of a Prefab instance that's not inside a Prefab Asset. 
            */
            public static IsPartOfNonAssetPrefabInstance ($componentOrGameObject: UnityEngine.Object) : boolean
            /** Returns true if the given object is part of a regular Prefab instance or Prefab Asset.
            * @param $componentOrGameObject The object to check. Must be a component or GameObject.
            * @returns True if the given object is part of a regular Prefab instance or Prefab Asset. 
            */
            public static IsPartOfRegularPrefab ($componentOrGameObject: UnityEngine.Object) : boolean
            /** Returns true if the given object is part of a Model Prefab Asset or Model Prefab instance.
            * @param $componentOrGameObject The object to check. Must be a component or GameObject.
            * @returns True if the given object is part of a Model Prefab. 
            */
            public static IsPartOfModelPrefab ($componentOrGameObject: UnityEngine.Object) : boolean
            /** Returns true if the given object is part of a Prefab Variant Asset or Prefab Variant instance.
            * @param $componentOrGameObject The object to check. Must be a component or GameObject.
            * @returns True if the given object is part of a Prefab Variant. 
            */
            public static IsPartOfVariantPrefab ($componentOrGameObject: UnityEngine.Object) : boolean
            /** Is this object part of a Prefab that cannot be edited?
            * @param $componentOrGameObject The object to check. Must be a component or GameObject.
            * @returns True if the object is part of a Prefab that cannot be edited. 
            */
            public static IsPartOfImmutablePrefab ($componentOrGameObject: UnityEngine.Object) : boolean
            /** Returns true if the given object is part of a Prefab instance but the source asset is missing.
            * @param $instanceComponentOrGameObject The object to check. Must be a component or GameObject.
            * @returns True if the given object is part of a Prefab instance but the source asset is missing. 
            */
            public static IsPrefabAssetMissing ($instanceComponentOrGameObject: UnityEngine.Object) : boolean
            /** Retrieves the GameObject that is the root of the outermost Prefab instance the object is part of.
            * @param $componentOrGameObject The object to check. Must be a component or GameObject.
            * @returns The outermost Prefab instance root. 
            */
            public static GetOutermostPrefabInstanceRoot ($componentOrGameObject: UnityEngine.Object) : UnityEngine.GameObject
            /** Retrieves the GameObject that is the root of the nearest Prefab instance the object is part of.
            * @param $componentOrGameObject The object to check. Must be a component or GameObject.
            * @returns The nearest Prefab instance root. 
            */
            public static GetNearestPrefabInstanceRoot ($componentOrGameObject: UnityEngine.Object) : UnityEngine.GameObject
            /** Use this method to find the Prefab Asset root where a Prefab instance or Prefab Asset object was added originally.
            * @param $gameObject GameObject from a Prefab instance or from a Prefab Asset.
            * @returns The Prefab Asset root where the input GameObject was added. 
            */
            public static GetOriginalSourceRootWhereGameObjectIsAdded ($gameObject: UnityEngine.GameObject) : UnityEngine.GameObject
            /** Returns true if the given modification is considered a PrefabUtility.IsDefaultOverride|default override.
            * @param $modification The modification for the property in question.
            * @returns True if the property is a default override. 
            */
            public static IsDefaultOverride ($modification: UnityEditor.PropertyModification) : boolean
            /** Retrieves the root GameObjects for all instances of the Prefab asset with root prefabRoot found in all currently loaded scenes. If prefabRoot is not a valid Prefab asset root GameObject, an ArgumentException is thrown.
            * @param $prefabRoot The root GameObject of a Prefab asset.
            * @param $scene The scene to search for Prefab instances. The scene you specify must be valid and loaded.
            * @returns The root GameObjects for all instances of the Prefab asset with root prefabRoot. 
            */
            public static FindAllInstancesOfPrefab ($prefabRoot: UnityEngine.GameObject) : System.Array$1<UnityEngine.GameObject>
            /** Retrieves the root GameObjects for all instances of the Prefab asset with root prefabRoot found in all currently loaded scenes. If prefabRoot is not a valid Prefab asset root GameObject, an ArgumentException is thrown.
            * @param $prefabRoot The root GameObject of a Prefab asset.
            * @param $scene The scene to search for Prefab instances. The scene you specify must be valid and loaded.
            * @returns The root GameObjects for all instances of the Prefab asset with root prefabRoot. 
            */
            public static FindAllInstancesOfPrefab ($prefabRoot: UnityEngine.GameObject, $scene: UnityEngine.SceneManagement.Scene) : System.Array$1<UnityEngine.GameObject>
            /** Forces a Prefab instance to merge with changes from the Prefab Asset.
            * @param $instanceRoot Root of Prefab instance to update.
            */
            public static MergePrefabInstance ($instanceRoot: UnityEngine.GameObject) : void
            /** Reverts all overrides on a Prefab instance.
            * @param $instanceRoot The root of the Prefab instance.
            * @param $action The interaction mode for this action.
            */
            public static RevertPrefabInstance ($instanceRoot: UnityEngine.GameObject, $action: UnityEditor.InteractionMode) : void
            /** Applies all overrides on a Prefab instance to its Prefab Asset.
            * @param $instanceRoot The root of the given Prefab instance.
            * @param $action The interaction mode for this action.
            */
            public static ApplyPrefabInstance ($instanceRoot: UnityEngine.GameObject, $action: UnityEditor.InteractionMode) : void
            /** Applies all overrides from a list of Prefab instances to their Prefab Assets.
            * @param $instanceRoots The roots of the given Prefab instances.
            * @param $action The interaction mode for this action.
            */
            public static ApplyPrefabInstances ($instanceRoots: System.Array$1<UnityEngine.GameObject>, $action: UnityEditor.InteractionMode) : void
            /** This method identifies and removes all unused overrides from a list of Prefab Instance roots. See the manual https:docs.unity3d.com2023.1DocumentationManualUnusedOverrides.html|Unused Overides for more detail.
            * @param $prefabInstances List of Prefab instances to remove unused overrides from.
            * @param $action UserAction will record undo and write result to Editor log file.
            */
            public static RemoveUnusedOverrides ($prefabInstances: System.Array$1<UnityEngine.GameObject>, $action: UnityEditor.InteractionMode) : void
            /** Applies a single overridden property on a Prefab instance to the Prefab Asset at the given asset path.
            * @param $instanceProperty The SerializedProperty representing the property to apply.
            * @param $assetPath The path of the Prefab Asset to apply to.
            * @param $action The interaction mode for this action.
            */
            public static ApplyPropertyOverride ($instanceProperty: UnityEditor.SerializedProperty, $assetPath: string, $action: UnityEditor.InteractionMode) : void
            /** Revert a single property override on a Prefab instance.
            * @param $action The interaction mode for this action.
            * @param $instanceProperty The SerializedProperty representing the property to revert.
            */
            public static RevertPropertyOverride ($instanceProperty: UnityEditor.SerializedProperty, $action: UnityEditor.InteractionMode) : void
            /** Applies all overridden properties on a Prefab instance component or GameObject to the Prefab Asset at the given asset path.
            * @param $instanceComponentOrGameObject The object on the Prefab instance to apply.
            * @param $assetPath The path of the Prefab Asset to apply to.
            * @param $action The interaction mode for this action.
            */
            public static ApplyObjectOverride ($instanceComponentOrGameObject: UnityEngine.Object, $assetPath: string, $action: UnityEditor.InteractionMode) : void
            /** Reverts all overridden properties on a Prefab instance component or GameObject.
            * @param $action The interaction mode for this action.
            * @param $instanceComponentOrGameObject The object on the Prefab instance to revert.
            */
            public static RevertObjectOverride ($instanceComponentOrGameObject: UnityEngine.Object, $action: UnityEditor.InteractionMode) : void
            /** Applies the added component to the Prefab Asset at the given asset path.
            * @param $action The interaction mode for this action.
            * @param $assetPath The path of the Prefab Asset to apply to.
            * @param $component The added component on the Prefab instance to apply.
            */
            public static ApplyAddedComponent ($component: UnityEngine.Component, $assetPath: string, $action: UnityEditor.InteractionMode) : void
            /** Removes this added component on a Prefab instance.
            * @param $component The added component on the Prefab instance to revert.
            * @param $action The interaction mode for this action.
            */
            public static RevertAddedComponent ($component: UnityEngine.Component, $action: UnityEditor.InteractionMode) : void
            /** Removes the component from the Prefab Asset which has the component on it.
            * @param $instanceGameObject The GameObject on the Prefab instance which the component has been removed from.
            * @param $assetComponent The component on the Prefab Asset corresponding to the removed component on the instance.
            * @param $action The interaction mode for this action.
            */
            public static ApplyRemovedComponent ($instanceGameObject: UnityEngine.GameObject, $assetComponent: UnityEngine.Component, $action: UnityEditor.InteractionMode) : void
            /** Adds this removed component back on the Prefab instance.
            * @param $assetComponent The removed component on the Prefab instance to revert.
            * @param $action The interaction mode for this action.
            * @param $instanceGameObject The GameObject on the Prefab instance which the component has been removed from.
            */
            public static RevertRemovedComponent ($instanceGameObject: UnityEngine.GameObject, $assetComponent: UnityEngine.Component, $action: UnityEditor.InteractionMode) : void
            /** Removes the GameObject from the source Prefab Asset.
            * @param $gameObjectInInstance A GameObject in the Prefab instance containing the removed GameObject.
            * @param $assetGameObject The GameObject in the Prefab Asset corresponding to the removed GameObject on the instance.
            * @param $action The interaction mode for this action.
            */
            public static ApplyRemovedGameObject ($gameObjectInInstance: UnityEngine.GameObject, $assetGameObject: UnityEngine.GameObject, $action: UnityEditor.InteractionMode) : void
            /** Applies the added GameObject to the Prefab Asset at the given asset path.
            * @param $gameObject The added GameObject on the Prefab instance to apply.
            * @param $assetPath The path of the Prefab Asset to apply to.
            * @param $action The interaction mode for this action.
            */
            public static ApplyAddedGameObject ($gameObject: UnityEngine.GameObject, $assetPath: string, $action: UnityEditor.InteractionMode) : void
            /** Applies the added GameObjects to the Prefab Asset at the given asset path.
            * @param $gameObjects The added GameObjects on the Prefab instance to apply.
            * @param $assetPath The path of the Prefab Asset to apply to.
            * @param $action The interaction mode for this action.
            */
            public static ApplyAddedGameObjects ($gameObjects: System.Array$1<UnityEngine.GameObject>, $assetPath: string, $action: UnityEditor.InteractionMode) : void
            /** Adds this removed GameObject back on the Prefab instance.
            * @param $gameObjectInInstance A GameObject in the Prefab instance containing the removed GameObject.
            * @param $assetGameObject The GameObject on the Prefab Asset corresponding to the removed GameObject on the instance.
            * @param $action The interaction mode for this action.
            */
            public static RevertRemovedGameObject ($gameObjectInInstance: UnityEngine.GameObject, $assetGameObject: UnityEngine.GameObject, $action: UnityEditor.InteractionMode) : void
            /** Removes this added GameObject from a Prefab instance.
            * @param $action The interaction mode for this action.
            * @param $gameObject The added GameObject on the Prefab instance to revert.
            */
            public static RevertAddedGameObject ($gameObject: UnityEngine.GameObject, $action: UnityEditor.InteractionMode) : void
            /** Retrieves a list of objects with information about object overrides on the Prefab instance.
            * @param $prefabInstance The Prefab instance to get information about.
            * @param $includeDefaultOverrides If true, components will also be included even if they only contain overrides that are PrefabUtility.IsDefaultOverride|default overrides. False by default.
            * @returns List of objects with information about object overrides. 
            */
            public static GetObjectOverrides ($prefabInstance: UnityEngine.GameObject, $includeDefaultOverrides?: boolean) : System.Collections.Generic.List$1<UnityEditor.SceneManagement.ObjectOverride>
            /** Retrieves a list of PrefabUtility.AddedComponent objects which contain information about added component overrides on the Prefab instance.
            * @param $prefabInstance The Prefab instance to get information about.
            * @returns List of objects with information about added components. 
            */
            public static GetAddedComponents ($prefabInstance: UnityEngine.GameObject) : System.Collections.Generic.List$1<UnityEditor.SceneManagement.AddedComponent>
            /** Returns a list of objects with information about removed component overrides on the Prefab instance.
            * @param $prefabInstance The Prefab instance to get information about.
            * @returns List of objects with information about removed components. 
            */
            public static GetRemovedComponents ($prefabInstance: UnityEngine.GameObject) : System.Collections.Generic.List$1<UnityEditor.SceneManagement.RemovedComponent>
            /** Retrieves a list of PrefabUtility.AddedGameObject objects which contain information about added GameObjects on the Prefab instance.
            * @param $prefabInstance The Prefab instance to get information about.
            * @returns List of objects with information about added GameObjects. 
            */
            public static GetAddedGameObjects ($prefabInstance: UnityEngine.GameObject) : System.Collections.Generic.List$1<UnityEditor.SceneManagement.AddedGameObject>
            /** Returns a list of objects with information about removed GameObject overrides on the Prefab instance.
            * @param $prefabInstance The Prefab instance to get information about.
            * @returns List of objects with information about removed GameObjects. 
            */
            public static GetRemovedGameObjects ($prefabInstance: UnityEngine.GameObject) : System.Collections.Generic.List$1<UnityEditor.SceneManagement.RemovedGameObject>
            /** Is the GameObject the root of any Prefab instance?
            * @param $gameObject The GameObject to check.
            * @returns True if the GameObject is the root GameObject of any Prefab instance. 
            */
            public static IsAnyPrefabInstanceRoot ($gameObject: UnityEngine.GameObject) : boolean
            /** Is the GameObject the root of a Prefab instance, excluding nested Prefabs?
            * @param $gameObject The GameObject to check.
            * @returns True if the GameObject is an outermost Prefab instance root. 
            */
            public static IsOutermostPrefabInstanceRoot ($gameObject: UnityEngine.GameObject) : boolean
            /** Retrieves the asset path of the nearest Prefab instance root the specified object is part of.
            * @param $instanceComponentOrGameObject An object in the Prefab instance to get the asset path of.
            * @returns The asset path. 
            */
            public static GetPrefabAssetPathOfNearestInstanceRoot ($instanceComponentOrGameObject: UnityEngine.Object) : string
            /** Retrieves the icon for the given GameObject.
            * @param $gameObject The GameObject to get an icon for.
            * @returns The icon for the GameObject. 
            */
            public static GetIconForGameObject ($gameObject: UnityEngine.GameObject) : UnityEngine.Texture2D
            /** Use this function to save the version of an existing Prefab Asset that exists in memory back to disk.
            * @param $asset Any GameObject that is part of the Prefab Asset to save.
            * @param $savedSuccessfully The result of the save action, either successful or unsuccessful. Use this together with the console log to get more insight into the save process.
            * @returns The root GameObject of the saved Prefab Asset. 
            */
            public static SavePrefabAsset ($asset: UnityEngine.GameObject) : UnityEngine.GameObject
            /** Use this function to save the version of an existing Prefab Asset that exists in memory back to disk.
            * @param $asset Any GameObject that is part of the Prefab Asset to save.
            * @param $savedSuccessfully The result of the save action, either successful or unsuccessful. Use this together with the console log to get more insight into the save process.
            * @returns The root GameObject of the saved Prefab Asset. 
            */
            public static SavePrefabAsset ($asset: UnityEngine.GameObject, $savedSuccessfully: $Ref<boolean>) : UnityEngine.GameObject
            /** Use this function to create a Prefab Asset at the given path from the given GameObject, including any childen in the Scene without modifying the input objects.
            * @param $instanceRoot The GameObject to save as a Prefab Asset.
            * @param $assetPath The path to save the Prefab at.
            * @param $success The result of the save action, either successful or unsuccessful. Use this together with the console log to get more insight into the save process.
            * @returns The root GameObject of the saved Prefab Asset, if available. 
            */
            public static SaveAsPrefabAsset ($instanceRoot: UnityEngine.GameObject, $assetPath: string, $success: $Ref<boolean>) : UnityEngine.GameObject
            /** Use this function to create a Prefab Asset at the given path from the given GameObject, including any childen in the Scene without modifying the input objects.
            * @param $instanceRoot The GameObject to save as a Prefab Asset.
            * @param $assetPath The path to save the Prefab at.
            * @param $success The result of the save action, either successful or unsuccessful. Use this together with the console log to get more insight into the save process.
            * @returns The root GameObject of the saved Prefab Asset, if available. 
            */
            public static SaveAsPrefabAsset ($instanceRoot: UnityEngine.GameObject, $assetPath: string) : UnityEngine.GameObject
            /** Use this function to create a Prefab Asset at the given path from the given GameObject, including any children in the Scene and at the same time make the given GameObject into an instance of the new Prefab.
            * @param $instanceRoot The GameObject to save as a Prefab and make into a Prefab instance.
            * @param $assetPath The path to save the Prefab at.
            * @param $action The interaction mode to use for this action.
            * @param $success The result of the save action, either successful or unsuccessful. Use this together with the console log to get more insight into the save process.
            * @returns The root GameObject of the saved Prefab Asset, if available. 
            */
            public static SaveAsPrefabAssetAndConnect ($instanceRoot: UnityEngine.GameObject, $assetPath: string, $action: UnityEditor.InteractionMode) : UnityEngine.GameObject
            /** Use this function to create a Prefab Asset at the given path from the given GameObject, including any children in the Scene and at the same time make the given GameObject into an instance of the new Prefab.
            * @param $instanceRoot The GameObject to save as a Prefab and make into a Prefab instance.
            * @param $assetPath The path to save the Prefab at.
            * @param $action The interaction mode to use for this action.
            * @param $success The result of the save action, either successful or unsuccessful. Use this together with the console log to get more insight into the save process.
            * @returns The root GameObject of the saved Prefab Asset, if available. 
            */
            public static SaveAsPrefabAssetAndConnect ($instanceRoot: UnityEngine.GameObject, $assetPath: string, $action: UnityEditor.InteractionMode, $success: $Ref<boolean>) : UnityEngine.GameObject
            /** Instantiates the given Prefab in a given Scene.
            * @param $assetComponentOrGameObject Prefab Asset to instantiate.
            * @param $destinationScene Scene to instantiate the Prefab in.
            * @returns The GameObject at the root of the Prefab. 
            */
            public static InstantiatePrefab ($assetComponentOrGameObject: UnityEngine.Object) : UnityEngine.Object
            /** Instantiates the given Prefab in a given Scene.
            * @param $assetComponentOrGameObject Prefab Asset to instantiate.
            * @param $destinationScene Scene to instantiate the Prefab in.
            * @returns The GameObject at the root of the Prefab. 
            */
            public static InstantiatePrefab ($assetComponentOrGameObject: UnityEngine.Object, $destinationScene: UnityEngine.SceneManagement.Scene) : UnityEngine.Object
            public static InstantiatePrefab ($assetComponentOrGameObject: UnityEngine.Object, $parent: UnityEngine.Transform) : UnityEngine.Object
            /** Replace the Prefab Asset for an array of Prefab instances that exists in Scenes or for nested Prefab instances inside another Prefab.
            * @param $prefabInstanceRoots The Prefab instance roots that will have their Prefab Asset replaced.
            * @param $prefabAssetRoot The new Prefab Asset used for the Prefab instances.
            * @param $mode The interaction mode used.
            * @param $settings The settings used to control the details of the replacements.
            */
            public static ReplacePrefabAssetOfPrefabInstances ($prefabInstanceRoots: System.Array$1<UnityEngine.GameObject>, $prefabAssetRoot: UnityEngine.GameObject, $mode: UnityEditor.InteractionMode) : void
            /** Replace the Prefab Asset for an array of Prefab instances that exists in Scenes or for nested Prefab instances inside another Prefab.
            * @param $prefabInstanceRoots The Prefab instance roots that will have their Prefab Asset replaced.
            * @param $prefabAssetRoot The new Prefab Asset used for the Prefab instances.
            * @param $mode The interaction mode used.
            * @param $settings The settings used to control the details of the replacements.
            */
            public static ReplacePrefabAssetOfPrefabInstances ($prefabInstanceRoots: System.Array$1<UnityEngine.GameObject>, $prefabAssetRoot: UnityEngine.GameObject, $settings: UnityEditor.PrefabReplacingSettings, $mode: UnityEditor.InteractionMode) : void
            /** Replace the Prefab Asset for a Prefab instance that exists in a Scene or for a nested Prefab instance inside another Prefab.
            * @param $prefabInstanceRoot The Prefab instance root that will have its Prefab Asset replaced.
            * @param $prefabAssetRoot The new Prefab Asset used for the Prefab instance.
            * @param $mode The interaction mode used.
            * @param $settings The settings used to control the details of the replacement.
            */
            public static ReplacePrefabAssetOfPrefabInstance ($prefabInstanceRoot: UnityEngine.GameObject, $prefabAssetRoot: UnityEngine.GameObject, $mode: UnityEditor.InteractionMode) : void
            /** Replace the Prefab Asset for a Prefab instance that exists in a Scene or for a nested Prefab instance inside another Prefab.
            * @param $prefabInstanceRoot The Prefab instance root that will have its Prefab Asset replaced.
            * @param $prefabAssetRoot The new Prefab Asset used for the Prefab instance.
            * @param $mode The interaction mode used.
            * @param $settings The settings used to control the details of the replacement.
            */
            public static ReplacePrefabAssetOfPrefabInstance ($prefabInstanceRoot: UnityEngine.GameObject, $prefabAssetRoot: UnityEngine.GameObject, $settings: UnityEditor.PrefabReplacingSettings, $mode: UnityEditor.InteractionMode) : void
            /** Convert the plain GameObject to a Prefab instance using the provided Prefab Asset root object.
            * @param $plainGameObject The GameObject that will be converted to a Prefab instance.
            * @param $prefabAssetRoot The Prefab Asset used to create the Prefab instance from.
            * @param $settings Settings to control the conversion.
            * @param $mode Using UserAction will record undo and show dialogs if needed.
            */
            public static ConvertToPrefabInstance ($plainGameObject: UnityEngine.GameObject, $prefabAssetRoot: UnityEngine.GameObject, $settings: UnityEditor.ConvertToPrefabInstanceSettings, $mode: UnityEditor.InteractionMode) : void
            /** Convert an array of GameObjects to Prefab instances of the given Prefab Asset.
            * @param $plainGameObjects The array of GameObjects that will be converted to Prefab instances.
            * @param $prefabAssetRoot The Prefab Asset used to create the Prefab instances from.
            * @param $settings Settings to control the conversion.
            * @param $mode Using UserAction will record undo and show dialogs if needed.
            */
            public static ConvertToPrefabInstances ($plainGameObjects: System.Array$1<UnityEngine.GameObject>, $prefabAssetRoot: UnityEngine.GameObject, $settings: UnityEditor.ConvertToPrefabInstanceSettings, $mode: UnityEditor.InteractionMode) : void
            public static GetCorrespondingObjectFromSource ($componentOrGameObject: UnityEngine.Object) : UnityEngine.Object
            public static GetCorrespondingObjectFromOriginalSource ($componentOrGameObject: UnityEngine.Object) : UnityEngine.Object
            public static GetCorrespondingObjectFromSourceAtPath ($componentOrGameObject: UnityEngine.Object, $assetPath: string) : UnityEngine.Object
            /** Is this GameObject added as a child to a Prefab instance as an override?
            * @param $gameObject The GameObject to check.
            * @returns True if the GameObject is an added GameObject. 
            */
            public static IsAddedGameObjectOverride ($gameObject: UnityEngine.GameObject) : boolean
            public static add_prefabInstanceReverting ($value: System.Action$1<UnityEngine.GameObject>) : void
            public static remove_prefabInstanceReverting ($value: System.Action$1<UnityEngine.GameObject>) : void
            public static add_prefabInstanceReverted ($value: System.Action$1<UnityEngine.GameObject>) : void
            public static remove_prefabInstanceReverted ($value: System.Action$1<UnityEngine.GameObject>) : void
            public static add_prefabInstanceUnpacking ($value: System.Action$2<UnityEngine.GameObject, UnityEditor.PrefabUnpackMode>) : void
            public static remove_prefabInstanceUnpacking ($value: System.Action$2<UnityEngine.GameObject, UnityEditor.PrefabUnpackMode>) : void
            public static add_prefabInstanceUnpacked ($value: System.Action$2<UnityEngine.GameObject, UnityEditor.PrefabUnpackMode>) : void
            public static remove_prefabInstanceUnpacked ($value: System.Action$2<UnityEngine.GameObject, UnityEditor.PrefabUnpackMode>) : void
            /** Unpacks a given Prefab instance so that it is replaced with the contents of the Prefab Asset while retaining all override values.
            * @param $instanceRoot The root of the Prefab instance to unpack.
            * @param $unpackMode Whether to unpack the outermost root or unpack completely.
            * @param $action The interaction mode to use for this action.
            */
            public static UnpackPrefabInstance ($instanceRoot: UnityEngine.GameObject, $unpackMode: UnityEditor.PrefabUnpackMode, $action: UnityEditor.InteractionMode) : void
            /** This function will unpack the given Prefab instance using the behaviour specified by unpackMode.
            * @param $instanceRoot Root GameObject of the Prefab instance.
            * @param $unpackMode The unpack mode to use.
            * @returns Array of GameObjects representing roots of unpacked Prefab instances. 
            */
            public static UnpackPrefabInstanceAndReturnNewOutermostRoots ($instanceRoot: UnityEngine.GameObject, $unpackMode: UnityEditor.PrefabUnpackMode) : System.Array$1<UnityEngine.GameObject>
            /** Unpacks all instances of a given Prefab Asset root GameObject in all open scenes so that all instances are replaced with the contents of the Prefab Asset while retaining all override values.
            * @param $prefabRoot The root GameObject of a Prefab Asset used to find all Prefab instances in open scenes that should be unpacked.
            * @param $unpackMode Whether to unpack the outermost root or unpack completely.
            * @param $action The interaction mode to use for this action.
            */
            public static UnpackAllInstancesOfPrefab ($prefabRoot: UnityEngine.GameObject, $unpackMode: UnityEditor.PrefabUnpackMode, $action: UnityEditor.InteractionMode) : void
            /** Is this object part of a Prefab that cannot be applied to?
            * @param $gameObjectOrComponent The object to check. Must be a component or GameObject.
            * @returns True if the object is part of a Prefab that cannot be applied to. 
            */
            public static IsPartOfPrefabThatCanBeAppliedTo ($gameObjectOrComponent: UnityEngine.Object) : boolean
            /** Determines whether a Prefab instance is properly connected to its asset.
            * @param $componentOrGameObject An object that is part of a Prefab instance.
            * @returns The status of the Prefab instance. 
            */
            public static GetPrefabInstanceStatus ($componentOrGameObject: UnityEngine.Object) : UnityEditor.PrefabInstanceStatus
            /** Retrieves an enum value indicating the type of Prefab Asset, such as Regular Prefab, Model Prefab and Prefab Variant.
            * @param $componentOrGameObject An object that is part of a Prefab Asset or Prefab instance.
            * @returns The type of Prefab. 
            */
            public static GetPrefabAssetType ($componentOrGameObject: UnityEngine.Object) : UnityEditor.PrefabAssetType
            /** Loads a Prefab Asset at a given path into an isolated Scene and returns the root GameObject of the Prefab.
            * @param $assetPath The path of the Prefab Asset to load the contents of.
            * @returns The root of the loaded contents. 
            */
            public static LoadPrefabContents ($assetPath: string) : UnityEngine.GameObject
            /** Releases the content from a Prefab previously loaded with LoadPrefabContents from memory.
            * @param $contentsRoot The root of the loaded Prefab contents.
            */
            public static UnloadPrefabContents ($contentsRoot: UnityEngine.GameObject) : void
            public constructor ()
        }
        /** Settings controlling the behavior of PrefabUtility.ReplacePrefabAssetOfPrefabInstance.
        */
        class PrefabReplacingSettings extends System.Object
        {
            protected [__keep_incompatibility]: never;
            /** Use this property to control if GameObjects and Components should be matched up when replacing the Prefab Asset of an Prefab instance.
            */
            public get objectMatchMode(): UnityEditor.ObjectMatchMode;
            public set objectMatchMode(value: UnityEditor.ObjectMatchMode);
            /** This property controls which type of overrides are attemped to be kept when replacing the Prefab Asset of an Prefab instance.
            */
            public get prefabOverridesOptions(): UnityEditor.PrefabOverridesOptions;
            public set prefabOverridesOptions(value: UnityEditor.PrefabOverridesOptions);
            /** Change the name of the root GameObject to match the name of the Prefab Asset used when replacing the Prefab Asset of a Prefab instance.
            */
            public get changeRootNameToAssetName(): boolean;
            public set changeRootNameToAssetName(value: boolean);
            /** Setting this to true will log details about the replacement to the Console.
            */
            public get logInfo(): boolean;
            public set logInfo(value: boolean);
            public constructor ()
        }
        /** Settings controlling the behavior of PrefabUtility.ConvertToPrefabInstance.
        */
        class ConvertToPrefabInstanceSettings extends System.Object
        {
            protected [__keep_incompatibility]: never;
            /** Use this property to control how GameObjects and Components are matched up or not when converting a plain GameObject to a Prefab instance.
            */
            public get objectMatchMode(): UnityEditor.ObjectMatchMode;
            public set objectMatchMode(value: UnityEditor.ObjectMatchMode);
            /** If a Component is not matched up then it can become an added Component on the new Prefab instance. This property is only used when used together with ObjectMatchMode.ByHierarchy.
            */
            public get componentsNotMatchedBecomesOverride(): boolean;
            public set componentsNotMatchedBecomesOverride(value: boolean);
            /** If a GameObject is not matched up then it can become an added GameObject on the new Prefab instance. This property is only used when used together with ObjectMatchMode.ByHierarchy.
            */
            public get gameObjectsNotMatchedBecomesOverride(): boolean;
            public set gameObjectsNotMatchedBecomesOverride(value: boolean);
            /** When a Component or GameObject is matched with objects in the Prefab Asset then existing values can be recorded as overrides on the new Prefab instance if this property is set to true.
            */
            public get recordPropertyOverridesOfMatches(): boolean;
            public set recordPropertyOverridesOfMatches(value: boolean);
            /** Change the name of the root GameObject to match the name of the Prefab Asset used when converting.
            */
            public get changeRootNameToAssetName(): boolean;
            public set changeRootNameToAssetName(value: boolean);
            /** Enables logging to the console with information about which objects were matched when converting a plain GameObject to a Prefab instance.
            */
            public get logInfo(): boolean;
            public set logInfo(value: boolean);
            public constructor ()
        }
        /** Enum used to determine how a Prefab should be unpacked.
        */
        enum PrefabUnpackMode
        { OutermostRoot = 0, Completely = 1 }
        /** Enum with status about whether a Prefab instance is properly connected to its asset.
        */
        enum PrefabInstanceStatus
        { NotAPrefab = 0, Connected = 1, Disconnected = 2, MissingAsset = 3 }
        /** Enum indicating the type of Prefab Asset, such as Regular, Model and Variant.
        */
        enum PrefabAssetType
        { NotAPrefab = 0, Regular = 1, Model = 2, Variant = 3, MissingAsset = 4 }
        /** Enum for controlling how e.g. GameObjects and Components are matched.
        */
        enum ObjectMatchMode
        { NoMatchingPerformed = 0, ByName = 1, ByHierarchy = 2 }
        /** Flags that can be used to control which overrides shoud be kept or cleared when using ReplacePrefabAssetOfPrefabInstance.
        */
        enum PrefabOverridesOptions
        { KeepAllPossibleOverrides = 0, ClearNonDefaultPropertyOverrides = 1, ClearAddedComponents = 2, ClearRemovedComponents = 4, ClearAddedGameObjects = 8, ClearRemovedGameObjects = 16, ClearAllOverridesExceptPropertyOverrides = 30, ClearAllNonDefaultOverrides = 31 }
        /** (Obsolete: use the SettingsProvider class instead) The PreferenceItem attribute allows you to add preferences sections to the Preferences window.
        */
        class PreferenceItem extends System.Attribute implements System.Runtime.InteropServices._Attribute
        {
            protected [__keep_incompatibility]: never;
            public name : string
            public constructor ($name: string)
        }
        enum SaveType
        { Binary = 0, Text = 1 }
        /** The Progress utility class reports the progress of asynchronous tasks to Unity.
        */
        class Progress extends System.Object
        {
            protected [__keep_incompatibility]: never;
            /** Returns true if there is at least one running progress indicator, false otherwise.
            */
            public static get running(): boolean;
            /** Returns the global average progression of all running tasks.
            */
            public static get globalProgress(): number;
            /** Returns the maximum time remaining for all running progress indicators.
            */
            public static get globalRemainingTime(): System.TimeSpan;
            public static Start ($name: string, $description?: string, $options?: UnityEditor.Progress.Options, $parentId?: number) : number
            public static Finish ($id: number, $status?: UnityEditor.Progress.Status) : void
            /** Finishes and removes an active progress indicator.
            * @param $id The progress indicator's unique ID.
            * @param $forceSynchronous When you set this parameter to true it forces this method to remove the progress indicator synchronously.
            * @returns -1 if the progress indicator is removed. Otherwise, returns the progress indicator's ID. 
            */
            public static Remove ($id: number) : number
            /** Finishes and removes an active progress indicator.
            * @param $id The progress indicator's unique ID.
            * @param $forceSynchronous When you set this parameter to true it forces this method to remove the progress indicator synchronously.
            * @returns -1 if the progress indicator is removed. Otherwise, returns the progress indicator's ID. 
            */
            public static Remove ($id: number, $forceSynchronous: boolean) : number
            /** Reports a running progress indicator's current status.
            * @param $id The progress indicator's unique ID.
            * @param $progress A new progress value between 0 and 1.
            * @param $description An updated description of the progress indicator. If the the progress status has not changed, or you do not set a description, this is null. To clear the current progress description, pass an empty string such as "".
            * @param $currentStep An updated current step.
            * @param $totalSteps An updated total number of steps, from start to finish.
            */
            public static Report ($id: number, $progress: number) : void
            /** Reports a running progress indicator's current status.
            * @param $id The progress indicator's unique ID.
            * @param $progress A new progress value between 0 and 1.
            * @param $description An updated description of the progress indicator. If the the progress status has not changed, or you do not set a description, this is null. To clear the current progress description, pass an empty string such as "".
            * @param $currentStep An updated current step.
            * @param $totalSteps An updated total number of steps, from start to finish.
            */
            public static Report ($id: number, $currentStep: number, $totalSteps: number) : void
            /** Reports a running progress indicator's current status.
            * @param $id The progress indicator's unique ID.
            * @param $progress A new progress value between 0 and 1.
            * @param $description An updated description of the progress indicator. If the the progress status has not changed, or you do not set a description, this is null. To clear the current progress description, pass an empty string such as "".
            * @param $currentStep An updated current step.
            * @param $totalSteps An updated total number of steps, from start to finish.
            */
            public static Report ($id: number, $progress: number, $description: string) : void
            /** Reports a running progress indicator's current status.
            * @param $id The progress indicator's unique ID.
            * @param $progress A new progress value between 0 and 1.
            * @param $description An updated description of the progress indicator. If the the progress status has not changed, or you do not set a description, this is null. To clear the current progress description, pass an empty string such as "".
            * @param $currentStep An updated current step.
            * @param $totalSteps An updated total number of steps, from start to finish.
            */
            public static Report ($id: number, $currentStep: number, $totalSteps: number, $description: string) : void
            /** Cancels a runnning progress indicator, and invokes the cancel callback for the associated task.
            * @param $id The progress indicator's unique ID.
            * @returns True if the associated task is cancelled, false if it cannot be cancelled. 
            */
            public static Cancel ($id: number) : boolean
            public static RegisterCancelCallback ($id: number, $callback: System.Func$1<boolean>) : void
            /** Unregisters a previously registered progress cancellation callback.
            * @param $id The progress indicator's unique ID.
            */
            public static UnregisterCancelCallback ($id: number) : void
            /** Pauses a runnning progress indicator, and invokes the pause callback for its task.
            * @param $id The progress indicator's unique ID.
            * @returns True if the task is paused, false if it cannot be paused. 
            */
            public static Pause ($id: number) : boolean
            /** Resumes a paused progress indicator, and invokes the pause callback for the associated task.
            * @param $id The progress indicator's unique ID.
            * @returns True if the task resumes, false if it cannot resume. 
            */
            public static Resume ($id: number) : boolean
            public static RegisterPauseCallback ($id: number, $callback: System.Func$2<boolean, boolean>) : void
            /** Unregisters a previously registered progress pause callback.
            * @param $id The progress indicator's unique ID.
            */
            public static UnregisterPauseCallback ($id: number) : void
            /** Gets the number of available progress indicators.
            * @returns The number of available progress indicators. 
            */
            public static GetCount () : number
            /** For each available status, gets the number of progress indicators with that status.
            * @returns An array that contains the count of progress indicators per status. Each index maps a single status from the Progress.Status enum. 
            */
            public static GetCountPerStatus () : System.Array$1<number>
            /** Gets a progress indicator's progress.
            * @param $id The progress indicator's unique ID.
            * @returns The current progress. 
            */
            public static GetProgress ($id: number) : number
            /** Gets the current step for a progress indicator.
            * @param $id The progress indicator's unique ID.
            * @returns The current step. 
            */
            public static GetCurrentStep ($id: number) : number
            /** Gets the total number of steps, from start to finish, for a progress indicator.
            * @param $id The progress indicator's unique ID.
            * @returns The number of steps. 
            */
            public static GetTotalSteps ($id: number) : number
            /** Gets a progress indicator's name.
            * @param $id The progress indicator's unique ID.
            * @returns The matching progress indicator's name. 
            */
            public static GetName ($id: number) : string
            /** Gets a progress indicator's description.
            * @param $id The progress indicator's unique ID.
            * @returns The description, if one exists. 
            */
            public static GetDescription ($id: number) : string
            /** Sets the progress indicator's description. To clear the description pass null.
            * @param $id The progress indicator's unique ID.
            * @param $description The progress indicator's new description.
            */
            public static SetDescription ($id: number, $description: string) : void
            /** Gets the timestamp of when the progress indicator started.
            * @param $id The progress indicator's unique ID.
            * @returns The progress indicator's start timestamp. 
            */
            public static GetStartDateTime ($id: number) : bigint
            /** Gets the timestamp of when the progress indicator ended.
            * @param $id The progress indicator's unique ID.
            * @returns The progress indicator's end timestamp. 
            */
            public static GetEndDateTime ($id: number) : bigint
            /** Gets the time that the progress indicator last changed, or finished.
            * @param $id The progress indicator's unique ID.
            * @returns The timestamp of the progress indicator's last update. 
            */
            public static GetUpdateDateTime ($id: number) : bigint
            /** Gets the unique ID of the progress indicator's parent, if any.
            * @param $id The progress indicator's unique ID.
            * @returns The unique ID of the progress indicator's parent. If the progress indicator is not a child of any other progress indicators, returns -1. 
            */
            public static GetParentId ($id: number) : number
            /** Finds a progress indicator's unique ID using its index in the set of all available progress indicators.
            * @param $index The valid index for a progress indicator.
            * @returns The progress indicator's unique ID, or -1 if the unique ID is not available. 
            */
            public static GetId ($index: number) : number
            /** Indicates whether you can cancel the progress indicator's associated task.
            * @param $id The progress indicator's unique ID.
            * @returns True if you can cancel the task, false otherwise. 
            */
            public static IsCancellable ($id: number) : boolean
            /** Indicates whether you can pause the progress indicator's task.
            * @param $id The progress indicator's unique ID.
            * @returns True if you can pause the task, false otherwise. 
            */
            public static IsPausable ($id: number) : boolean
            /** Gets the progress indicator's status.
            * @param $id The progress indicator's unique ID.
            * @returns The progress indicator's current status. 
            */
            public static GetStatus ($id: number) : UnityEditor.Progress.Status
            /** Gets the options that you specified when you started the progress indicator.
            * @param $id The progress indicator's unique ID.
            * @returns The progress indicator's option flags. 
            */
            public static GetOptions ($id: number) : UnityEditor.Progress.Options
            public static SetTimeDisplayMode ($id: number, $displayMode: UnityEditor.Progress.TimeDisplayMode) : void
            /** Sets the progress indicator's remaining time, in seconds.
            * @param $id The progress indicator's unique ID.
            * @param $seconds The progress indicator's remaining time, in seconds.
            */
            public static SetRemainingTime ($id: number, $seconds: bigint) : void
            /** Sets a progress indicator's priority.
            * @param $id The progress indicator's unique ID.
            * @param $priority The priority.
            */
            public static SetPriority ($id: number, $priority: number) : void
            public static SetPriority ($id: number, $priority: UnityEditor.Progress.Priority) : void
            /** Get a progress indicator's time display mode.
            * @param $id The progress indicator's unique ID.
            * @returns The progress indicator's time display mode. 
            */
            public static GetTimeDisplayMode ($id: number) : UnityEditor.Progress.TimeDisplayMode
            /** Checks whether a progress indicator with the specified ID exists.
            * @param $id The unique ID to search for.
            * @returns True if the progress indicator exists, false otherwise. 
            */
            public static Exists ($id: number) : boolean
            /** Gets a progress indicator's remaining time, in seconds.
            * @param $id The progress indicator's unique ID.
            * @returns The number of seconds remaining. 
            */
            public static GetRemainingTime ($id: number) : bigint
            /** Gets a progress indicator's priority.
            * @param $id The progress indicator's unique ID.
            * @returns The priority. 
            */
            public static GetPriority ($id: number) : number
            /** Resets the computation of a progress indicator's remaining time.
            * @param $id The progress indicator's unique ID.
            */
            public static ClearRemainingTime ($id: number) : void
            /** Sets the label that displays a progress indicator's steps.
            * @param $id The progress indicator's unique ID.
            * @param $label The steps label.
            */
            public static SetStepLabel ($id: number, $label: string) : void
            /** Gets the label that displays a progress indicator's steps.
            * @param $id The progress indicator's unique ID.
            * @returns The step label. 
            */
            public static GetStepLabel ($id: number) : string
            /** Opens the progress window for background tasks.
            * @param $shouldReposition To place the window in the bottom right corner of the main Editor window, pass True. To restore the last window position, pass False.
            */
            public static ShowDetails ($shouldReposition?: boolean) : void
            public static add_added ($value: System.Action$1<System.Array$1<UnityEditor.Progress.Item>>) : void
            public static remove_added ($value: System.Action$1<System.Array$1<UnityEditor.Progress.Item>>) : void
            public static add_updated ($value: System.Action$1<System.Array$1<UnityEditor.Progress.Item>>) : void
            public static remove_updated ($value: System.Action$1<System.Array$1<UnityEditor.Progress.Item>>) : void
            public static add_removed ($value: System.Action$1<System.Array$1<UnityEditor.Progress.Item>>) : void
            public static remove_removed ($value: System.Action$1<System.Array$1<UnityEditor.Progress.Item>>) : void
            /** Returns an enumerator to loop over all progress indicators.
            * @returns The enumerable progress indicators. 
            */
            public static EnumerateItems () : System.Collections.Generic.IEnumerable$1<UnityEditor.Progress.Item>
            /** Gets information about a progress indicator.
            * @param $id The progress indicator's unique ID.
            * @returns The progress indicator's data structure. 
            */
            public static GetProgressById ($id: number) : UnityEditor.Progress.Item
            /** Gets the number of active or running progress indicators.
            * @returns The number of active and running progress indicators. 
            */
            public static GetRunningProgressCount () : number
        }
        class ProjectWindowUtil extends System.Object
        {
            protected [__keep_incompatibility]: never;
            public static CreateNewGUISkin () : void
            public static CreateAsset ($asset: UnityEngine.Object, $pathName: string) : void
            public static CreateFolder () : void
            public static CreateScene () : void
            public static CreateAssetWithContent ($filename: string, $content: string, $icon?: UnityEngine.Texture2D) : void
            public static CreateScriptAssetFromTemplateFile ($templatePath: string, $defaultNewFileName: string) : void
            public static ShowCreatedAsset ($o: UnityEngine.Object) : void
            public static StartNameEditingIfProjectWindowExists ($instanceID: number, $endAction: UnityEditor.ProjectWindowCallback.EndNameEditAction, $pathName: string, $icon: UnityEngine.Texture2D, $resourceFile: string) : void
            public static StartNameEditingIfProjectWindowExists ($instanceID: number, $endAction: UnityEditor.ProjectWindowCallback.EndNameEditAction, $pathName: string, $icon: UnityEngine.Texture2D, $resourceFile: string, $selectAssetBeingCreated: boolean) : void
            public static GetAncestors ($instanceID: number) : System.Array$1<number>
            public static IsFolder ($instanceID: number) : boolean
            public static GetContainingFolder ($path: string) : string
            public static GetBaseFolders ($folders: System.Array$1<string>) : System.Array$1<string>
            public constructor ()
        }
        class SaveAssetsProcessor extends UnityEditor.AssetModificationProcessor
        {
            protected [__keep_incompatibility]: never;
            public constructor ()
        }
        /** Default definition for the Lighting Explorer. Can be overridden completely or partially.
        */
        class DefaultLightingExplorerExtension extends System.Object implements UnityEditor.ILightingExplorerExtension
        {
            protected [__keep_incompatibility]: never;
            /** This returns all the default tabs for the Lighting Explorer.
            * @returns Default tabs for the Lighting Explorer. 
            */
            public GetContentTabs () : System.Array$1<UnityEditor.LightingExplorerTab>
            public OnEnable () : void
            public OnDisable () : void
            public constructor ()
        }
        interface ILightingExplorerExtension
        {
            /** Returns the tabs that you have selected to display in the Lighting Explorer.
            * @returns Tabs for the Lighting Explorer. 
            */
            GetContentTabs () : System.Array$1<UnityEditor.LightingExplorerTab>
            /** This is called when the Lighting Explorer OnEnable is called, or when you switch to another extension.
            */
            OnEnable () : void
            /** This is called when the Lighting Explorer OnDisable is called, or when you switch to another extension.
            */
            OnDisable () : void
        }
        /** Create custom tabs for the Lighting Explorer.
        */
        class LightingExplorerTab extends System.Object
        {
            protected [__keep_incompatibility]: never;
            public constructor ($title: string, $objects: System.Func$1<System.Array$1<UnityEngine.Object>>, $columns: System.Func$1<System.Array$1<UnityEditor.LightingExplorerTableColumn>>)
            public constructor ($title: string, $objects: System.Func$1<System.Array$1<UnityEngine.Object>>, $columns: System.Func$1<System.Array$1<UnityEditor.LightingExplorerTableColumn>>, $showFilterGUI: boolean)
        }
        /** An attribute to mark an extension class for the Lighting Explorer. Supports one extension per render pipeline.
        */
        class LightingExplorerExtensionAttribute extends UnityEditor.Rendering.ScriptableRenderPipelineExtensionAttribute implements System.Runtime.InteropServices._Attribute
        {
            protected [__keep_incompatibility]: never;
            public constructor ($renderPipeline: System.Type)
            public constructor ($rpAssetType: System.Type)
        }
        /** This is used when defining how a column should look and behave in the Lighting Explorer.
        */
        class LightingExplorerTableColumn extends System.Object
        {
            protected [__keep_incompatibility]: never;
            public constructor ($type: UnityEditor.LightingExplorerTableColumn.DataType, $headerContent: UnityEngine.GUIContent, $propertyName?: string, $width?: number, $onGUIDelegate?: UnityEditor.LightingExplorerTableColumn.OnGUIDelegate, $compareDelegate?: UnityEditor.LightingExplorerTableColumn.ComparePropertiesDelegate, $copyDelegate?: UnityEditor.LightingExplorerTableColumn.CopyPropertiesDelegate, $dependencyIndices?: System.Array$1<number>)
        }
        /** Base class for the Inspector that overrides the Environment section of the Lighting window.
        */
        class LightingWindowEnvironmentSection extends System.Object
        {
            protected [__keep_incompatibility]: never;
            /** OnEnable is called when this Inspector override is used.
            */
            public OnEnable () : void
            /** OnDisable is called when this Inspector override is not used anymore.
            */
            public OnDisable () : void
            /** A callback that is called when drawing the Environment section in the Lighting window.
            */
            public OnInspectorGUI () : void
        }
        /** Base class to add custom tabs to the Lighting window.
        */
        class LightingWindowTab extends System.Object implements UnityEditor.LightingWindow.WindowTab
        {
            protected [__keep_incompatibility]: never;
            /** The title of the tab.
            */
            public get titleContent(): UnityEngine.GUIContent;
            public set titleContent(value: UnityEngine.GUIContent);
            /** The priority of the tab in the header toolbar.
            */
            public get priority(): number;
            public set priority(value: number);
            /** OnEnable is called when this Inspector override is used.
            */
            public OnEnable () : void
            /** OnDisable is called when this Inspector override is not used anymore.
            */
            public OnDisable () : void
            /** A callback that is called when drawing the main section of the tab.
            */
            public OnGUI () : void
            /** A callback that is called when drawing the header icons in the top right of the tab.
            */
            public OnHeaderSettingsGUI () : void
            /** OnBakeButtonGUI is called to draw a button at the bottom of the tab.
            */
            public OnBakeButtonGUI () : void
            /** Called when the selection changes.
            */
            public OnSelectionChange () : void
            /** Returns true if window has a doc button in the header.
            * @returns Returns true if window has a doc button in the header. 
            */
            public HasHelpGUI () : boolean
            /** A callback that is called when drawing the bottom section of the tab.
            */
            public OnSummaryGUI () : void
            /** FocusTab will open the lighting window with this tab selected.
            */
            public FocusTab () : void
        }
        class SceneModeUtility extends System.Object
        {
            protected [__keep_incompatibility]: never;
            public static SearchForType ($type: System.Type) : void
            public static SearchBar (...types: System.Type[]) : System.Type
            public static StaticFlagField ($label: string, $property: UnityEditor.SerializedProperty, $flag: number) : boolean
            public static SetStaticFlags ($targetObjects: System.Array$1<UnityEngine.Object>, $changedFlags: number, $flagValue: boolean) : boolean
            public static GetObjects ($gameObjects: System.Array$1<UnityEngine.Object>, $includeChildren: boolean) : System.Array$1<UnityEngine.GameObject>
        }
        interface ICameraLensData
        {
            /** Maps to Camera.nearClipPlane.
            */
            NearClipPlane : number
            /** Maps to Camera.farClipPlane.
            */
            FarClipPlane : number
            /** Maps to Camera.fieldOfView.
            */
            FieldOfView : number
            /** Maps to Camera.usePhysicalProperties.
            */
            UsePhysicalProperties : boolean
            /** Maps to Camera.focalLength.
            */
            FocalLength : number
            /** Maps to Camera.sensorSize.
            */
            SensorSize : UnityEngine.Vector2
            /** Maps to Camera.lensShift.
            */
            LensShift : UnityEngine.Vector2
            /** Maps to Camera.gateFit.
            */
            GateFit : UnityEngine.Camera.GateFitMode
            /** Maps to Camera.orthographic.
            */
            Orthographic : boolean
            /** Maps to Camera.orthographicSize.
            */
            OrthographicSize : number
        }
        class Viewpoint$1<T> extends System.Object implements UnityEditor.IViewpoint
        {
            protected [__keep_incompatibility]: never;
            public get TargetObject(): UnityEngine.Object;
            public set TargetObject(value: UnityEngine.Object);
            public get Position(): UnityEngine.Vector3;
            public set Position(value: UnityEngine.Vector3);
            public get Rotation(): UnityEngine.Quaternion;
            public set Rotation(value: UnityEngine.Quaternion);
            public CreateVisualElement () : UnityEngine.UIElements.VisualElement
        }
        interface IViewpoint
        {
        }
        class ScriptableSingleton$1<T> extends UnityEngine.ScriptableObject
        {
            protected [__keep_incompatibility]: never;
            public static get instance(): any;
        }
        /** Manages Scene Visibility in the editor.
        */
        class SceneVisibilityManager extends UnityEditor.ScriptableSingleton$1<UnityEditor.SceneVisibilityManager>
        {
            protected [__keep_incompatibility]: never;
            public static add_visibilityChanged ($value: System.Action) : void
            public static remove_visibilityChanged ($value: System.Action) : void
            public static add_pickingChanged ($value: System.Action) : void
            public static remove_pickingChanged ($value: System.Action) : void
            /** Hides all GameObjects.
            */
            public HideAll () : void
            /** Disables picking on all GameObjects.
            */
            public DisableAllPicking () : void
            /** Shows a GameObject, or an array of GameObjects, and its descendants.
            * @param $gameObject GameObject to show.
            * @param $gameObjects Array of GameObjects to show.
            * @param $includeDescendants Whether to include descendants.
            */
            public Show ($gameObject: UnityEngine.GameObject, $includeDescendants: boolean) : void
            /** Hides a GameObject, or an Array of GameObjects,  and their descendants.
            * @param $gameObject GameObject to hide.
            * @param $gameObjects Array of GameObjects to hide.
            * @param $includeDescendants Whether to also hide descendants.
            */
            public Hide ($gameObject: UnityEngine.GameObject, $includeDescendants: boolean) : void
            /** Disables picking on a GameObject, or an Array of GameObjects, and their descendants.
            * @param $gameObject GameObject on which to disable picking.
            * @param $includeDescendants Whether to include descendants.
            * @param $gameObjects Array of GameObjects on which to disable picking.
            */
            public DisablePicking ($gameObject: UnityEngine.GameObject, $includeDescendants: boolean) : void
            /** Enables picking on a GameObject, or an array of GameObjects, and its descendants.
            * @param $includeDescendants Whether to include descendants.
            * @param $gameObject GameObject on which to enable picking.
            * @param $gameObjects Array of GameObjects on which to enable picking.
            */
            public EnablePicking ($gameObject: UnityEngine.GameObject, $includeDescendants: boolean) : void
            /** Shows all GameObjects.
            */
            public ShowAll () : void
            /** Enables picking on all GameObjects.
            */
            public EnableAllPicking () : void
            /** Shows all GameObjects in scene.
            * @param $scene Scene containing GameObjects to show.
            */
            public Show ($scene: UnityEngine.SceneManagement.Scene) : void
            /** Enables picking on all GameObjects in a Scene.
            * @param $scene Scene containing GameObjects on which to enable picking.
            */
            public EnablePicking ($scene: UnityEngine.SceneManagement.Scene) : void
            /** Hides all GameObjects in a scene.
            * @param $scene Scene containing GameObjects to hide.
            */
            public Hide ($scene: UnityEngine.SceneManagement.Scene) : void
            /** Disables picking on all GameObjects in a Scene.
            * @param $scene Scene containing GameObjects on which to disable picking.
            */
            public DisablePicking ($scene: UnityEngine.SceneManagement.Scene) : void
            /** Checks the hidden state of a GameObject and, optionally, its descendants.
            * @param $gameObject GameObject to check.
            * @param $includeDescendants Specify true to check the GameObject and all its descendants. Set to false to check the GameObject.
            * @returns When includeDescendants is true, this method returns true when the GameObject and all its descendants are hidden. When includeDescendants is false, this method returns true when the GameObject is hidden. 
            */
            public IsHidden ($gameObject: UnityEngine.GameObject, $includeDescendants?: boolean) : boolean
            public IsHidden ($scene: UnityEngine.SceneManagement.Scene) : boolean
            /** Checks the picking state of a GameObject and, optionally, its descendants.
            * @param $gameObject GameObject to check.
            * @param $includeDescendants Specify true to check the GameObject and all its descendants. Set to false to check the GameObject.
            * @returns When includeDescendants is true, this method returns true when the GameObject and all its descendants have picking disabled. When includeDescendants is false, this method returns true when the GameObject has picking disabled. 
            */
            public IsPickingDisabled ($gameObject: UnityEngine.GameObject, $includeDescendants?: boolean) : boolean
            public IsPickingDisabled ($scene: UnityEngine.SceneManagement.Scene) : boolean
            /** Checks whether root GameObjects, and all their descendants, are hidden in a Scene.
            * @param $scene Scene to check.
            * @returns Returns true if all root GameObjects of the Scene and all their descendants are hidden. 
            */
            public AreAllDescendantsHidden ($scene: UnityEngine.SceneManagement.Scene) : boolean
            /** Checks whether all the descendants of a GameObject have picking disabled.
            * @param $scene Scene to check.
            * @returns Returns true if all descendants have picking disabled. 
            */
            public IsPickingDisabledOnAllDescendants ($scene: UnityEngine.SceneManagement.Scene) : boolean
            /** Checks whether any descendants are hidden.
            * @param $scene Scene to check.
            * @returns Returns true when at least one hidden descendant is found. 
            */
            public AreAnyDescendantsHidden ($scene: UnityEngine.SceneManagement.Scene) : boolean
            /** Checks whether any descendants have picking disabled.
            * @param $scene Scene to check.
            * @returns Returns true when at least one descendant with picking disabled is found. 
            */
            public IsPickingDisabledOnAnyDescendant ($scene: UnityEngine.SceneManagement.Scene) : boolean
            /** Shows a GameObject, or an array of GameObjects, and its descendants.
            * @param $gameObject GameObject to show.
            * @param $gameObjects Array of GameObjects to show.
            * @param $includeDescendants Whether to include descendants.
            */
            public Show ($gameObjects: System.Array$1<UnityEngine.GameObject>, $includeDescendants: boolean) : void
            /** Hides a GameObject, or an Array of GameObjects,  and their descendants.
            * @param $gameObject GameObject to hide.
            * @param $gameObjects Array of GameObjects to hide.
            * @param $includeDescendants Whether to also hide descendants.
            */
            public Hide ($gameObjects: System.Array$1<UnityEngine.GameObject>, $includeDescendants: boolean) : void
            /** Disables picking on a GameObject, or an Array of GameObjects, and their descendants.
            * @param $gameObject GameObject on which to disable picking.
            * @param $includeDescendants Whether to include descendants.
            * @param $gameObjects Array of GameObjects on which to disable picking.
            */
            public DisablePicking ($gameObjects: System.Array$1<UnityEngine.GameObject>, $includeDescendants: boolean) : void
            /** Enables picking on a GameObject, or an array of GameObjects, and its descendants.
            * @param $includeDescendants Whether to include descendants.
            * @param $gameObject GameObject on which to enable picking.
            * @param $gameObjects Array of GameObjects on which to enable picking.
            */
            public EnablePicking ($gameObjects: System.Array$1<UnityEngine.GameObject>, $includeDescendants: boolean) : void
            /** Isolates a GameObject and its descendants.
            * @param $gameObject GameObject to isolate.
            * @param $includeDescendants Whether to include descendants.
            */
            public Isolate ($gameObject: UnityEngine.GameObject, $includeDescendants: boolean) : void
            /** Isolates an Array of GameObjects and their descendants.
            * @param $gameObjects Array of GameObjects to isolate.
            * @param $includeDescendants Whether to include descendants.
            */
            public Isolate ($gameObjects: System.Array$1<UnityEngine.GameObject>, $includeDescendants: boolean) : void
            /** Toggles the visible state of a GameObject.
            * @param $gameObject GameObject on which to toggle visibility.
            * @param $includeDescendants Whether to include descendants.
            */
            public ToggleVisibility ($gameObject: UnityEngine.GameObject, $includeDescendants: boolean) : void
            /** Toggles the picking ability of a GameObject.
            * @param $gameObject GameObject on which to toggle picking ability.
            * @param $includeDescendants Whether to include descendants.
            */
            public TogglePicking ($gameObject: UnityEngine.GameObject, $includeDescendants: boolean) : void
            /** Checks whether all the descendants of a GameObject are hidden.
            * @param $gameObject GameObject to check.
            * @returns Returns true if all descendants are hidden. 
            */
            public AreAllDescendantsHidden ($gameObject: UnityEngine.GameObject) : boolean
            /** Checks whether all the descendants are visible.
            * @param $gameObject GameObject to check.
            * @returns Returns true if all descendants of the GameObject are visible. 
            */
            public AreAllDescendantsVisible ($gameObject: UnityEngine.GameObject) : boolean
            /** Checks whether root GameObjects, and all their descendants, have picking disabled in a scene.
            * @param $gameObject GameObject to check.
            * @returns Returns true if all root GameObjects of the Scene and all their descendants have picking disabled. 
            */
            public IsPickingDisabledOnAllDescendants ($gameObject: UnityEngine.GameObject) : boolean
            /** Checks whether all the descendants are pickable.
            * @param $gameObject GameObject on which to do the check.
            * @returns Returns true if all descendants of the GameObject are pickable. 
            */
            public IsPickingEnabledOnAllDescendants ($gameObject: UnityEngine.GameObject) : boolean
            /** Checks whether the current stage is in Isolation mode.
            * @returns Returns true if current stage is in Isolation mode. Otherwise, returns false. 
            */
            public IsCurrentStageIsolated () : boolean
            /** Exits Isolation Mode.
            */
            public ExitIsolation () : void
            public constructor ()
        }
        /** An attribute that specifies a file location relative to the Project folder or Unity's preferences folder. Additional resources: FilePathAttribute.Location.
        */
        class FilePathAttribute extends System.Attribute implements System.Runtime.InteropServices._Attribute
        {
            protected [__keep_incompatibility]: never;
            public constructor ($relativePath: string, $location: UnityEditor.FilePathAttribute.Location)
        }
        /** Derive from this class to create an editor wizard.
        */
        class ScriptableWizard extends UnityEditor.EditorWindow
        {
            protected [__keep_incompatibility]: never;
            /** Allows you to set the help text of the wizard.
            */
            public get helpString(): string;
            public set helpString(value: string);
            /** Allows you to set the error text of the wizard.
            */
            public get errorString(): string;
            public set errorString(value: string);
            /** Allows you to set the text shown on the create button of the wizard.
            */
            public get createButtonName(): string;
            public set createButtonName(value: string);
            /** Allows you to set the text shown on the optional other button of the wizard. Leave this parameter out to leave the button out.
            */
            public get otherButtonName(): string;
            public set otherButtonName(value: string);
            /** Allows you to enable and disable the wizard create button, so that the user can not click it.
            */
            public get isValid(): boolean;
            public set isValid(value: boolean);
            public static DisplayWizard ($title: string, $klass: System.Type, $createButtonName: string) : UnityEditor.ScriptableWizard
            public static DisplayWizard ($title: string, $klass: System.Type) : UnityEditor.ScriptableWizard
            /** Creates a wizard.
            * @param $title The title shown at the top of the wizard window.
            * @param $klass The class implementing the wizard. It has to derive from ScriptableWizard.
            * @param $createButtonName The text shown on the create button.
            * @param $otherButtonName The text shown on the optional other button. Leave this parameter out to leave the button out.
            * @returns The wizard. 
            */
            public static DisplayWizard ($title: string, $klass: System.Type, $createButtonName: string, $otherButtonName: string) : UnityEditor.ScriptableWizard
            public constructor ()
        }
        /** Tells a custom PropertyDrawer or DecoratorDrawer which run-time Serializable class or PropertyAttribute it's a drawer for.
        */
        class CustomPropertyDrawer extends System.Attribute implements System.Runtime.InteropServices._Attribute
        {
            protected [__keep_incompatibility]: never;
            public constructor ($type: System.Type)
            public constructor ($type: System.Type, $useForChildren: boolean)
        }
        /** Base class to derive custom decorator drawers from.
        */
        class DecoratorDrawer extends UnityEditor.GUIDrawer
        {
            protected [__keep_incompatibility]: never;
            /** The PropertyAttribute for the decorator. (Read Only)
            */
            public get attribute(): UnityEngine.PropertyAttribute;
            /** Override this method to make your own GUI for the decorator.
            See DecoratorDrawer for an example of how to use this.
            * @param $position Rectangle on the screen to use for the decorator GUI.
            */
            public OnGUI ($position: UnityEngine.Rect) : void
            /** Override this method to make your own GUI for the property based on UIElements.
            */
            public CreatePropertyGUI () : UnityEngine.UIElements.VisualElement
            /** Override this method to specify how tall the GUI for this decorator is in pixels.
            */
            public GetHeight () : number
        }
        /** SelectionMode can be used to tweak the selection returned by Selection.GetTransforms.
        */
        enum SelectionMode
        { Unfiltered = 0, TopLevel = 1, Deep = 2, ExcludePrefab = 4, Editable = 8, Assets = 16, DeepAssets = 32, OnlyUserModifiable = 8 }
        /** Access to the selection in the editor.
        */
        class Selection extends System.Object
        {
            protected [__keep_incompatibility]: never;
            /** Delegate callback triggered when currently active/selected item has changed.
            */
            public static selectionChanged : System.Action
            /** Returns the top level selection, excluding Prefabs.
            */
            public static get transforms(): System.Array$1<UnityEngine.Transform>;
            /** Returns the active transform. (The one shown in the inspector).
            */
            public static get activeTransform(): UnityEngine.Transform;
            public static set activeTransform(value: UnityEngine.Transform);
            /** Returns the actual game object selection. Includes Prefabs, non-modifiable objects.
            */
            public static get gameObjects(): System.Array$1<UnityEngine.GameObject>;
            /** Returns the active game object. (The one shown in the inspector).
            */
            public static get activeGameObject(): UnityEngine.GameObject;
            public static set activeGameObject(value: UnityEngine.GameObject);
            /** Returns the actual object selection. Includes Prefabs, non-modifiable objects.
            */
            public static get activeObject(): UnityEngine.Object;
            public static set activeObject(value: UnityEngine.Object);
            /** Returns the current context object, as was set via SetActiveObjectWithContext.
            */
            public static get activeContext(): UnityEngine.Object;
            /** Returns the instanceID of the actual object selection. Includes Prefabs, non-modifiable objects.
            */
            public static get activeInstanceID(): number;
            public static set activeInstanceID(value: number);
            /** The actual unfiltered selection from the Scene.
            */
            public static get objects(): System.Array$1<UnityEngine.Object>;
            public static set objects(value: System.Array$1<UnityEngine.Object>);
            /** The actual unfiltered selection from the Scene returned as instance ids instead of objects.
            */
            public static get instanceIDs(): System.Array$1<number>;
            public static set instanceIDs(value: System.Array$1<number>);
            /** Returns the guids of the selected assets.
            */
            public static get assetGUIDs(): System.Array$1<string>;
            /** Returns the number of objects in the Selection.
            */
            public static get count(): number;
            /** Returns whether an object is contained in the current selection.
            */
            public static Contains ($instanceID: number) : boolean
            /** Selects an object with a context.
            * @param $obj Object being selected (will be equal activeObject).
            * @param $context Context object.
            */
            public static SetActiveObjectWithContext ($obj: UnityEngine.Object, $context: UnityEngine.Object) : void
            /** Allows for fine grained control of the selection type using the SelectionMode bitmask.
            * @param $mode Options for refining the selection.
            */
            public static GetTransforms ($mode: UnityEditor.SelectionMode) : System.Array$1<UnityEngine.Transform>
            /** Returns whether an object is contained in the current selection.
            */
            public static Contains ($obj: UnityEngine.Object) : boolean
            /** Returns the current selection filtered by type and mode.
            * @param $type Only objects of this type will be retrieved.
            * @param $mode Further options to refine the selection.
            */
            public static GetFiltered ($type: System.Type, $mode: UnityEditor.SelectionMode) : System.Array$1<UnityEngine.Object>
            public constructor ()
        }
        /** Returns the precise type for Integer or Floating point properties.
        */
        enum SerializedPropertyNumericType
        { Unknown = 0, Int8 = 1, UInt8 = 2, Int16 = 3, UInt16 = 4, Int32 = 5, UInt32 = 6, Int64 = 7, UInt64 = 8, Float = 100, Double = 101 }
        /** SettingsProvider is the configuration class that specifies how a Project setting or a preference should appear in the Settings or Preferences window.
        */
        class SettingsProvider extends System.Object
        {
            protected [__keep_incompatibility]: never;
            /** Gets or sets the display name of the SettingsProvider as it appears in the Settings window. If not set, the Settings window uses last token of SettingsProvider.settingsPath instead.
            */
            public get label(): string;
            public set label(value: string);
            /** Gets Path used to place the SettingsProvider in the tree view of the Settings window. The path should be unique among all other settings paths and should use "/" as its separator.
            */
            public get settingsPath(): string;
            /** Gets the Scope of the SettingsProvider. The Scope determines whether the SettingsProvider appears in the Preferences window (SettingsScope.User) or the Settings window (SettingsScope.Project).
            */
            public get scope(): UnityEditor.SettingsScope;
            /** Gets or sets the list of keywords to compare against what the user is searching for. When the user enters values in the search box on the Settings window, SettingsProvider.HasSearchInterest tries to match those keywords to this list.
            */
            public get keywords(): System.Collections.Generic.IEnumerable$1<string>;
            public set keywords(value: System.Collections.Generic.IEnumerable$1<string>);
            /** Overrides SettingsProvider.OnGUI.
            */
            public get guiHandler(): System.Action$1<string>;
            public set guiHandler(value: System.Action$1<string>);
            /** Overrides SettingsProvider.OnTitleBarGUI.
            */
            public get titleBarGuiHandler(): System.Action;
            public set titleBarGuiHandler(value: System.Action);
            /** Overrides SettingsProvider.OnFooterBarGUI.
            */
            public get footerBarGuiHandler(): System.Action;
            public set footerBarGuiHandler(value: System.Action);
            /** Overrides SettingsProvider.OnActivate.
            */
            public get activateHandler(): System.Action$2<string, UnityEngine.UIElements.VisualElement>;
            public set activateHandler(value: System.Action$2<string, UnityEngine.UIElements.VisualElement>);
            /** Overrides SettingsProvider.OnDeactivate.
            */
            public get deactivateHandler(): System.Action;
            public set deactivateHandler(value: System.Action);
            /** Overrides SettingsProvider.HasSearchInterest.
            */
            public get hasSearchInterestHandler(): System.Func$2<string, boolean>;
            public set hasSearchInterestHandler(value: System.Func$2<string, boolean>);
            /** Overrides SettingsProvider.OnInspectorUpdate.
            */
            public get inspectorUpdateHandler(): System.Action;
            public set inspectorUpdateHandler(value: System.Action);
            /** Use this function to implement a handler for when the user clicks on the Settings in the Settings window. You can fetch a settings Asset or set up UIElements UI from this function.
            * @param $searchContext Search context in the search box on the Settings window.
            * @param $rootElement Root of the UIElements tree. If you add to this root, the SettingsProvider uses UIElements instead of calling SettingsProvider.OnGUI to build the UI. If you do not add to this VisualElement, then you must use the IMGUI to build the UI.
            */
            public OnActivate ($searchContext: string, $rootElement: UnityEngine.UIElements.VisualElement) : void
            /** Use this function to implement a handler for when the user clicks on another setting or when the Settings window closes.
            */
            public OnDeactivate () : void
            /** Checks whether the SettingsProvider should appear when the user types something in the Settings window search box. SettingsProvider tries to match the search terms (even partially) to any of the SettingsProvider.keywords. The search is case insensitive.
            * @param $searchContext Search terms that the user entered in the search box on the Settings window.
            * @returns True if the SettingsProvider matched the search term and if it should appear. 
            */
            public HasSearchInterest ($searchContext: string) : boolean
            /** Use this function to draw the UI based on IMGUI. This assumes you haven't added any children to the rootElement passed to the OnActivate function.
            * @param $searchContext Search context for the Settings window. Used to show or hide relevant properties.
            */
            public OnGUI ($searchContext: string) : void
            /** Use this function to override drawing the title for the SettingsProvider using IMGUI. This allows you to add custom UI (such as a toolbar button) next to the title. AssetSettingsProvider uses this mecanism to display the "add to preset" and the "help" buttons.
            */
            public OnTitleBarGUI () : void
            /** Use this function to override drawing the footer for the SettingsProvider using IMGUI.
            */
            public OnFooterBarGUI () : void
            /** OnInspectorUpdate is called at 10 frames per second to give the inspector a chance to update. See EditorWindow.OnInspectorUpdate for more details.
            */
            public OnInspectorUpdate () : void
            /** Request the SettingsWindow for a repaint.
            */
            public Repaint () : void
            /** Extract search keywords from from the serialized properties of a SerializedObject.
            * @param $serializedObject Object to extract properties from.
            * @returns Returns the list of keywords. 
            */
            public static GetSearchKeywordsFromSerializedObject ($serializedObject: UnityEditor.SerializedObject) : System.Collections.Generic.IEnumerable$1<string>
            /** Extract search keywords from the serialized properties of an Asset at a specific path.
            * @param $path Path of the Asset on disk.
            * @returns Returns the list of keywords. 
            */
            public static GetSearchKeywordsFromPath ($path: string) : System.Collections.Generic.IEnumerable$1<string>
            public constructor ($path: string, $scopes: UnityEditor.SettingsScope, $keywords?: System.Collections.Generic.IEnumerable$1<string>)
        }
        /** AssetSettingsProvider is a specialization of the SettingsProvider class that converts legacy settings to Unified Settings. Legacy settings include any settings that used the Inspector to modify themselves, such as the *.asset files under the ProjectSettings folder. Under the hood, AssetSettingsProvider creates an Editor for specific Assets and builds the UI for the Settings window by wrapping the Editor.OnInspectorGUI function.
        Internally we use this class to wrap our existing settings.
        */
        class AssetSettingsProvider extends UnityEditor.SettingsProvider
        {
            protected [__keep_incompatibility]: never;
            /** Editor providing UI to modify the settings.
            */
            public get settingsEditor(): UnityEditor.Editor;
            public static CreateProviderFromAssetPath ($settingsWindowPath: string, $assetPath: string, $keywords?: System.Collections.Generic.IEnumerable$1<string>) : UnityEditor.AssetSettingsProvider
            public static CreateProviderFromObject ($settingsWindowPath: string, $settingsObj: UnityEngine.Object, $keywords?: System.Collections.Generic.IEnumerable$1<string>) : UnityEditor.AssetSettingsProvider
            public static CreateProviderFromResourcePath ($settingsWindowPath: string, $resourcePath: string, $keywords?: System.Collections.Generic.IEnumerable$1<string>) : UnityEditor.AssetSettingsProvider
            public constructor ($settingsWindowPath: string, $editorCreator: System.Func$1<UnityEditor.Editor>, $keywords?: System.Collections.Generic.IEnumerable$1<string>)
            public constructor ($settingsWindowPath: string, $settingsGetter: System.Func$1<UnityEngine.Object>)
            public constructor ($path: string, $scopes: UnityEditor.SettingsScope, $keywords?: System.Collections.Generic.IEnumerable$1<string>)
        }
        /** Sets the scope of a SettingsProvider. The Scope determines where it appears in the UI. For example, whether it appears with the Project settings in the Settings window, or in the Preferences window, or in both windows.
        */
        enum SettingsScope
        { User = 0, Project = 1 }
        /** Attribute used to register a new SettingsProvider. Use this attribute to decorate a function that returns an instance of a SettingsProvider. If the function returns null, no SettingsProvider appears in the Settings window.
        */
        class SettingsProviderAttribute extends System.Attribute implements System.Runtime.InteropServices._Attribute
        {
            protected [__keep_incompatibility]: never;
            public constructor ()
        }
        /** Attribute used to register multiple SettingsProvider items. Use this attribute to decorate a function that returns an array of SettingsProvider instances. If the function returns null, no SettingsProvider appears in the Settings window.
        */
        class SettingsProviderGroupAttribute extends System.Attribute implements System.Runtime.InteropServices._Attribute
        {
            protected [__keep_incompatibility]: never;
            public constructor ()
        }
        /** This class provides global APIs to interact with the Settings window.
        */
        class SettingsService extends System.Object
        {
            protected [__keep_incompatibility]: never;
            /** Open the Project Settings window with the specified settings item already selected.
            * @param $settingsPath Settings paths of the item to select (for example, 'ProjectPlayer' or 'ProjectQuality').
            * @returns Returns an instance to the Settings window. 
            */
            public static OpenProjectSettings ($settingsPath?: string) : UnityEditor.EditorWindow
            /** Open the Preferences window with the specified settings item already selected.
            * @param $settingsPath Settings path of the item to select (for example, 'PreferencesKeys' or 'Preferences2D').
            * @returns Returns an instance to the Settings window. 
            */
            public static OpenUserPreferences ($settingsPath?: string) : UnityEditor.EditorWindow
            /** Use this function to notify the SettingsService that a SettingsProvider changed.
            */
            public static NotifySettingsProviderChanged () : void
            /** Notifies the SettingsService that all open Settings windows must be repainted.
            */
            public static RepaintAllSettingsWindow () : void
            /** Verify the existence of a settings path.
            * @param $settingsPath Settings path of the item to verify the existence of (for example, 'ProjectPlayer' or 'PreferencesSearch').
            * @returns Returns true if the settings path exists. 
            */
            public static Exists ($settingsPath: string) : boolean
        }
        /** Contains the following information about a shader:
        -If the shader has compilation errors or warnings.
        -If the shader is supported on the currently selected platform.
        -The name of the shader.
        */
        class ShaderInfo extends System.ValueType
        {
            protected [__keep_incompatibility]: never;
            /** The name of the shader (Read Only).
            */
            public get name(): string;
            /** Indicates whether the current platform supports the shader (Read Only).
            */
            public get supported(): boolean;
            /** Indicates whether the shader has compilation errors (Read Only).
            */
            public get hasErrors(): boolean;
            /** Indicates whether the shader has compilation warnings (Read Only).
            */
            public get hasWarnings(): boolean;
        }
        /** Contains information about messages generated by Unity's Shader Compiler.
        */
        class ShaderMessage extends System.ValueType implements System.IEquatable$1<UnityEditor.ShaderMessage>
        {
            protected [__keep_incompatibility]: never;
            /** The message returned by the Unity Shader Compiler.
            */
            public get message(): string;
            /** An (optional) detailed message returned from the Unity Shader Compiler.
            */
            public get messageDetails(): string;
            /** The source file where the shader message was found.
            */
            public get file(): string;
            /** The line of code where the shader message was found.
            */
            public get line(): number;
            /** The specific platform where the Unity Shader Compiler discovered the message.
            */
            public get platform(): UnityEditor.Rendering.ShaderCompilerPlatform;
            /** Indicates the severity of the message returned from the Unity Shader Compiler.
            */
            public get severity(): UnityEditor.Rendering.ShaderCompilerMessageSeverity;
            /** Compares two ShaderMessage on an element-by-element basis.
            * @returns True if all fields of the message are equal, otherwise false. 
            */
            public Equals ($other: UnityEditor.ShaderMessage) : boolean
            /** Compares two ShaderMessage on an element-by-element basis.
            * @returns True if all fields of the message are equal, otherwise false. 
            */
            public Equals ($obj: any) : boolean
            public static op_Equality ($left: UnityEditor.ShaderMessage, $right: UnityEditor.ShaderMessage) : boolean
            public static op_Inequality ($left: UnityEditor.ShaderMessage, $right: UnityEditor.ShaderMessage) : boolean
            public constructor ($msg: string, $sev?: UnityEditor.Rendering.ShaderCompilerMessageSeverity)
        }
        /** Utility functions to assist with working with shaders from the editor.
        */
        class ShaderUtil extends System.Object
        {
            protected [__keep_incompatibility]: never;
            /** Does the current hardware support render textues.
            */
            public static get hardwareSupportsRectRenderTexture(): boolean;
            /** Disables shader optimization in the Editor.
            */
            public static get disableShaderOptimization(): boolean;
            public static set disableShaderOptimization(value: boolean);
            /** When true, the Editor is compiling some Shaders asynchronously at the point of query.
            */
            public static get anythingCompiling(): boolean;
            /** When true, asynchronous Shader compilation is allowed at the current call site.
            */
            public static get allowAsyncCompilation(): boolean;
            public static set allowAsyncCompilation(value: boolean);
            /** Determines whether the specified Shader contains a valid Procedural Instancing variant.
            * @param $s The Shader to check.
            * @returns Returns true if the Shader has a valid Procedural Instancing variant. Returns false otherwise. 
            */
            public static HasProceduralInstancing ($s: UnityEngine.Shader) : boolean
            /** Returns the number of errors and warnings generated by the Unity Shader Compiler for the given Shader.
            * @param $s The Shader instance to check for messages.
            * @returns The number of errors and warnings generated by the Unity Shader Compiler. 
            */
            public static GetShaderMessageCount ($s: UnityEngine.Shader) : number
            /** Returns each error and warning generated by the Unity Shader Compiler for the given Shader.
            * @param $s The Shader instance to check for messages.
            * @param $platform The ShaderCompilerPlatform to check for messages.
            * @returns An array of ShaderMessage structs containing the generated messages. 
            */
            public static GetShaderMessages ($s: UnityEngine.Shader) : System.Array$1<UnityEditor.ShaderMessage>
            /** Returns each error and warning generated by the Unity Shader Compiler for the given Shader.
            * @param $s The Shader instance to check for messages.
            * @param $platform The ShaderCompilerPlatform to check for messages.
            * @returns An array of ShaderMessage structs containing the generated messages. 
            */
            public static GetShaderMessages ($s: UnityEngine.Shader, $platform: UnityEditor.Rendering.ShaderCompilerPlatform) : System.Array$1<UnityEditor.ShaderMessage>
            /** Clear compile time messages for the given shader.
            */
            public static ClearShaderMessages ($s: UnityEngine.Shader) : void
            /** Returns the number of errors and warnings generated by the Unity Shader Compiler for the given ComputeShader.
            * @param $s The ComputeShader instance to check for messages.
            * @returns The number of errors and warnings generated by the Unity Shader Compiler. 
            */
            public static GetComputeShaderMessageCount ($s: UnityEngine.ComputeShader) : number
            /** Returns each error and warning generated by the Unity Shader Compiler for the given ComputeShader.
            * @param $s The ComputeShader instance to check for messages.
            * @returns An array of ShaderMessage structs containing the generated messages. 
            */
            public static GetComputeShaderMessages ($s: UnityEngine.ComputeShader) : System.Array$1<UnityEditor.ShaderMessage>
            /** Returns the number of errors and warnings generated by the Shader Compiler for the given RayTracingShader.
            * @param $s The RayTracingShader instance to check for messages.
            * @returns The number of errors and warnings generated by the Shader Compiler. 
            */
            public static GetRayTracingShaderMessageCount ($s: UnityEngine.Rendering.RayTracingShader) : number
            /** Returns each error and warning generated by the Shader Compiler for the given RayTracingShader.
            * @param $s The RayTracingShader instance to check for messages.
            * @returns An array of ShaderMessage structs containing the generated messages. 
            */
            public static GetRayTracingShaderMessages ($s: UnityEngine.Rendering.RayTracingShader) : System.Array$1<UnityEditor.ShaderMessage>
            /** Returns the number of ray generation Shaders defined whitin a given RayTracingShader.
            * @param $s The RayTracingShader instance.
            * @returns The number of ray generation Shaders defined in the RayTracingShader instance passed as argument. 
            */
            public static GetRayGenerationShaderCount ($s: UnityEngine.Rendering.RayTracingShader) : number
            /** Returns the name of a user-defined ray generation Shader from within a RayTracingShader.
            * @param $s The RayTracingShader instance.
            * @param $shaderIndex The ray generation Shader index for which to retrieve the name. The ray generation Shaders defined in a RayTracingShader are sorted alphabetically by the Shader compiler.
            * @returns The name of the ray generation Shader at the index passed using the "shaderIndex" argument. 
            */
            public static GetRayGenerationShaderName ($s: UnityEngine.Rendering.RayTracingShader, $shaderIndex: number) : string
            /** Returns the number of miss Shaders defined whitin a given RayTracingShader.
            * @param $s The RayTracingShader instance.
            * @returns The number of miss Shaders defined in the RayTracingShader instance passed as argument. 
            */
            public static GetMissShaderCount ($s: UnityEngine.Rendering.RayTracingShader) : number
            /** Returns the name of a user-defined miss Shader from within a RayTracingShader.
            * @param $s The RayTracingShader instance.
            * @param $shaderIndex The miss Shader index for which to retrieve the name. The miss Shaders defined in a RayTracingShader are sorted alphabetically by the Shader compiler.
            * @returns The name of the miss Shader at the index passed using the "shaderIndex" argument. 
            */
            public static GetMissShaderName ($s: UnityEngine.Rendering.RayTracingShader, $shaderIndex: number) : string
            /** Returns the ray payload size of a user-defined miss Shader from within a RayTracingShader.
            * @param $s The RayTracingShader instance.
            * @param $shaderIndex The miss Shader index for which to retrieve the ray payload size.
            * @returns The ray payload size in bytes. 
            */
            public static GetMissShaderRayPayloadSize ($s: UnityEngine.Rendering.RayTracingShader, $shaderIndex: number) : number
            /** Returns the number of callable Shaders defined whitin a given RayTracingShader.
            * @param $s The RayTracingShader instance.
            * @returns The number of callable Shaders defined in the RayTracingShader instance passed as argument. 
            */
            public static GetCallableShaderCount ($s: UnityEngine.Rendering.RayTracingShader) : number
            /** Returns the name of a user-defined callable Shader from within a RayTracingShader.
            * @param $s The RayTracingShader instance.
            * @param $shaderIndex The callable Shader index for which to retrieve the name. The callable Shaders defined in a RayTracingShader are sorted alphabetically by the Shader compiler.
            * @returns The name of the callable Shader at the index passed using the "shaderIndex" argument. 
            */
            public static GetCallableShaderName ($s: UnityEngine.Rendering.RayTracingShader, $shaderIndex: number) : string
            /** Returns the parameter size of a user-defined callable Shader from within a RayTracingShader.
            * @param $s The RayTracingShader instance.
            * @param $shaderIndex The callable Shader index for which to retrieve the parameter size.
            * @returns The parameter size in bytes. 
            */
            public static GetCallableShaderParamSize ($s: UnityEngine.Rendering.RayTracingShader, $shaderIndex: number) : number
            /** Clears all internally-cached data that was generated for the given shader, such as errors and compilation info.
            */
            public static ClearCachedData ($s: UnityEngine.Shader) : void
            /** Creates a new Shader object from the provided source code string. You can use this method alongside the ScriptedImporter to create custom shader generation tools in the Editor.
            * @param $context A context object that the asset system needs to register shader dependencies properly.
            * @param $source A string that contains a shader written in code.
            * @param $compileInitialShaderVariants Set to true to compile the code contained in the source string; otherwise false.
            */
            public static CreateShaderAsset ($context: UnityEditor.AssetImporters.AssetImportContext, $source: string, $compileInitialShaderVariants: boolean) : UnityEngine.Shader
            /** Creates a new Shader object from the provided source code string. You can use this method alongside the ScriptedImporter to create custom shader generation tools in the Editor.
            * @param $context A context object that the asset system needs to register shader dependencies properly.
            * @param $source A string that contains a shader written in code.
            * @param $compileInitialShaderVariants Set to true to compile the code contained in the source string; otherwise false.
            */
            public static CreateShaderAsset ($source: string) : UnityEngine.Shader
            /** Creates a new Shader object from the provided source code string. You can use this method alongside the ScriptedImporter to create custom shader generation tools in the Editor.
            * @param $context A context object that the asset system needs to register shader dependencies properly.
            * @param $source A string that contains a shader written in code.
            * @param $compileInitialShaderVariants Set to true to compile the code contained in the source string; otherwise false.
            */
            public static CreateShaderAsset ($source: string, $compileInitialShaderVariants: boolean) : UnityEngine.Shader
            /** Replaces the existing source code in the specified shader with the source code in the supplied string.
            * @param $context A context object that the asset system needs to register shader dependencies properly.
            * @param $source A string that contains a shader written in code.
            * @param $compileInitialShaderVariants Set to true to compile the code contained in the source string; otherwise false.
            * @param $shader The Shader to update.
            */
            public static UpdateShaderAsset ($context: UnityEditor.AssetImporters.AssetImportContext, $shader: UnityEngine.Shader, $source: string, $compileInitialShaderVariants: boolean) : void
            /** Replaces the existing source code in the specified shader with the source code in the supplied string.
            * @param $context A context object that the asset system needs to register shader dependencies properly.
            * @param $source A string that contains a shader written in code.
            * @param $compileInitialShaderVariants Set to true to compile the code contained in the source string; otherwise false.
            * @param $shader The Shader to update.
            */
            public static UpdateShaderAsset ($shader: UnityEngine.Shader, $source: string) : void
            /** Replaces the existing source code in the specified shader with the source code in the supplied string.
            * @param $context A context object that the asset system needs to register shader dependencies properly.
            * @param $source A string that contains a shader written in code.
            * @param $compileInitialShaderVariants Set to true to compile the code contained in the source string; otherwise false.
            * @param $shader The Shader to update.
            */
            public static UpdateShaderAsset ($shader: UnityEngine.Shader, $source: string, $compileInitialShaderVariants: boolean) : void
            /** Creates a new ComputeShader object from the provided source code string. You can use this method alongside the ScriptedImporter to create custom compute shader generation tools in the Editor.
            * @param $context The context object the asset system uses to register shader dependencies.
            * @param $source The string that contains a shader written in HLSL code.
            */
            public static CreateComputeShaderAsset ($context: UnityEditor.AssetImporters.AssetImportContext, $source: string) : UnityEngine.ComputeShader
            /** Register a user created shader.
            */
            public static RegisterShader ($shader: UnityEngine.Shader) : void
            /** Returns an array of ShaderInfo of all available shaders. That includes built-in shaders.
            * @returns ShaderInfo array of all available shaders. 
            */
            public static GetAllShaderInfo () : System.Array$1<UnityEditor.ShaderInfo>
            /** Gets ShaderInfo for the given shader.
            * @param $shader The shader to get information about.
            * @returns Returns an instance of ShaderInfo for the given shader. 
            */
            public static GetShaderInfo ($shader: UnityEngine.Shader) : UnityEditor.ShaderInfo
            /** Adds shader compilation mode command in the CommandBuffer.
            * @param $cmd Target CommandBuffer.
            * @param $allow Is async Shader compilation allowed or not.
            */
            public static SetAsyncCompilation ($cmd: UnityEngine.Rendering.CommandBuffer, $allow: boolean) : void
            /** Restores the previous Shader compilation mode in this CommandBuffer scope.
            * @param $cmd Target CommandBuffer.
            */
            public static RestoreAsyncCompilation ($cmd: UnityEngine.Rendering.CommandBuffer) : void
            /** Checks if the Shader variant for the given pass in the Material has already been compiled.
            * @param $material The Material to check against.
            * @param $pass The index of the Shader pass to check.
            */
            public static IsPassCompiled ($material: UnityEngine.Material, $pass: number) : boolean
            /** Request the Editor to compile the Shader Variant needed for the specific pass of the given Material.
            * @param $material Target Material.
            * @param $pass Index of the target Shader pass.
            * @param $forceSync Forces the script execution to wait until the compilation has finished. Optional.
            */
            public static CompilePass ($material: UnityEngine.Material, $pass: number, $forceSync?: boolean) : void
            /** Gets the shader's custom editor class name for a specific render pipeline asset type.
            * @param $renderPipelineType The render pipeline asset type.
            * @param $shader The shader to check against.
            * @returns Returns the full class name of the custom editor. 
            */
            public static GetCustomEditorForRenderPipeline ($shader: UnityEngine.Shader, $renderPipelineType: string) : string
            /** Gets the shader's custom editor class name for a specific render pipeline asset type.
            * @param $renderPipelineType The render pipeline asset type.
            * @param $shader The shader to check against.
            * @returns Returns the full class name of the custom editor. 
            */
            public static GetCustomEditorForRenderPipeline ($shader: UnityEngine.Shader, $renderPipelineType: System.Type) : string
            /** Gets the current custom editor for the shader you pass in.
            Depending on the render pipeline asset assigned in your Graphics Settings, the custom editor can change if the shader has a different custom editor for one or multiple render pipeline assets.
            * @param $shader The shader to obtain the custom editor.
            * @returns The current custom editor full class name. 
            */
            public static GetCurrentCustomEditor ($shader: UnityEngine.Shader) : string
            /** Gets the platform keywords for a shader, given a shader compiler platform, build target, and optional graphics tier. These platform keywords are necessary to properly compile a shader for a given target.
            * @param $shaderCompilerPlatform The shader compiler platform.
            * @param $buildTarget The build target.
            * @param $tier An optional graphics tier.
            * @returns Returns an array of built-in shader defines needed to compile a shader for the given target. 
            */
            public static GetShaderPlatformKeywordsForBuildTarget ($shaderCompilerPlatform: UnityEditor.Rendering.ShaderCompilerPlatform, $buildTarget: UnityEditor.BuildTarget, $tier: UnityEngine.Rendering.GraphicsTier) : System.Array$1<UnityEngine.Rendering.BuiltinShaderDefine>
            /** Gets the platform keywords for a shader, given a shader compiler platform, build target, and optional graphics tier. These platform keywords are necessary to properly compile a shader for a given target.
            * @param $shaderCompilerPlatform The shader compiler platform.
            * @param $buildTarget The build target.
            * @param $tier An optional graphics tier.
            * @returns Returns an array of built-in shader defines needed to compile a shader for the given target. 
            */
            public static GetShaderPlatformKeywordsForBuildTarget ($shaderCompilerPlatform: UnityEditor.Rendering.ShaderCompilerPlatform, $buildTarget: UnityEditor.BuildTarget) : System.Array$1<UnityEngine.Rendering.BuiltinShaderDefine>
            public static GetPassKeywords ($s: UnityEngine.Shader, $passIdentifier: $Ref<UnityEngine.Rendering.PassIdentifier>) : System.Array$1<UnityEngine.Rendering.LocalKeyword>
            public static GetPassKeywords ($s: UnityEngine.Shader, $passIdentifier: $Ref<UnityEngine.Rendering.PassIdentifier>, $shaderType: UnityEditor.Rendering.ShaderType) : System.Array$1<UnityEngine.Rendering.LocalKeyword>
            public static GetPassKeywords ($s: UnityEngine.Shader, $passIdentifier: $Ref<UnityEngine.Rendering.PassIdentifier>, $shaderType: UnityEditor.Rendering.ShaderType, $shaderCompilerPlatform: UnityEditor.Rendering.ShaderCompilerPlatform) : System.Array$1<UnityEngine.Rendering.LocalKeyword>
            public static PassHasKeyword ($s: UnityEngine.Shader, $passIdentifier: $Ref<UnityEngine.Rendering.PassIdentifier>, $keyword: $Ref<UnityEngine.Rendering.LocalKeyword>) : boolean
            public static PassHasKeyword ($s: UnityEngine.Shader, $passIdentifier: $Ref<UnityEngine.Rendering.PassIdentifier>, $keyword: $Ref<UnityEngine.Rendering.LocalKeyword>, $shaderType: UnityEditor.Rendering.ShaderType) : boolean
            public static PassHasKeyword ($s: UnityEngine.Shader, $passIdentifier: $Ref<UnityEngine.Rendering.PassIdentifier>, $keyword: $Ref<UnityEngine.Rendering.LocalKeyword>, $shaderType: UnityEditor.Rendering.ShaderType, $shaderCompilerPlatform: UnityEditor.Rendering.ShaderCompilerPlatform) : boolean
            /** Get the number of properties in Shader s.
            * @param $s The shader to check against.
            */
            public static GetPropertyCount ($s: UnityEngine.Shader) : number
            /** Get the name of the shader propery at index propertyIdx of Shader s.
            * @param $s The shader to check against.
            * @param $propertyIdx The property index to use.
            */
            public static GetPropertyName ($s: UnityEngine.Shader, $propertyIdx: number) : string
            /** Get the ShaderProperyType of the shader propery at index propertyIdx of Shader s.
            * @param $s The shader to check against.
            * @param $propertyIdx The property index to use.
            */
            public static GetPropertyType ($s: UnityEngine.Shader, $propertyIdx: number) : UnityEditor.ShaderUtil.ShaderPropertyType
            /** Get the description of the shader propery at index propertyIdx of Shader s.
            * @param $s The shader to check against.
            * @param $propertyIdx The property index to use.
            * @returns Returns the description of the given shader property. 
            */
            public static GetPropertyDescription ($s: UnityEngine.Shader, $propertyIdx: number) : string
            /** Get Limits for a range property at index propertyIdx of Shader s.
            * @param $defminmax Which value to get: 0 = default, 1 = min, 2 = max.
            * @param $s The shader to check against.
            * @param $propertyIdx The property index to use.
            */
            public static GetRangeLimits ($s: UnityEngine.Shader, $propertyIdx: number, $defminmax: number) : number
            /** Gets texture dimension of a shader property.
            * @param $s The shader to get the property from.
            * @param $propertyIdx The property index to use.
            * @returns Texture dimension. 
            */
            public static GetTexDim ($s: UnityEngine.Shader, $propertyIdx: number) : UnityEngine.Rendering.TextureDimension
            /** Returns true if the shader propery at index propertyIdx is hidden with the [HideInInspector] attribute in the shader code.
            * @param $s The shader to check against.
            * @param $propertyIdx The property index to use.
            */
            public static IsShaderPropertyHidden ($s: UnityEngine.Shader, $propertyIdx: number) : boolean
            /** Is the shader propery at index propertyIdx of Shader s a NonModifiableTextureProperty?
            * @param $s The shader to check against.
            * @param $propertyIdx The property index to use.
            */
            public static IsShaderPropertyNonModifiableTexureProperty ($s: UnityEngine.Shader, $propertyIdx: number) : boolean
            /** Get the shader data for a specific shader.
            * @param $shader The shader to get data from.
            * @returns The shader data for the provided shader. 
            */
            public static GetShaderData ($shader: UnityEngine.Shader) : UnityEditor.ShaderData
            /** Checks if a shader has any compilation errors. Ignores warnings.
            * @param $shader The shader to check for compilation errors.
            * @returns Returns true if the shader has any compilation errors. Otherwise, returns false. 
            */
            public static ShaderHasError ($shader: UnityEngine.Shader) : boolean
            /** Checks if a shader has any compilation warnings. Ignores errors.
            * @param $shader The shader to check for compilation warnings.
            * @returns Returns true if the shader has any compilation warnings. Otherwise, returns false. 
            */
            public static ShaderHasWarnings ($shader: UnityEngine.Shader) : boolean
            public constructor ()
        }
        /** This class describes a shader.
        */
        class ShaderData extends System.Object
        {
            protected [__keep_incompatibility]: never;
            /** Returns the index of the active subshader or -1 if none is currently active.
            */
            public get ActiveSubshaderIndex(): number;
            /** The number of runtime subshaders used by this shader.
            */
            public get SubshaderCount(): number;
            /** The number of serialized subshaders used by this shader.
            */
            public get SerializedSubshaderCount(): number;
            /** The shader attached to this data set.
            */
            public get SourceShader(): UnityEngine.Shader;
            /** Returns the active subshader or null if none is currently active.
            */
            public get ActiveSubshader(): UnityEditor.ShaderData.Subshader;
            /** Obtains the runtime subshader at the given index.
            * @param $index The index of the subshader.
            * @returns The associated runtime subshader or null if none exists. 
            */
            public GetSubshader ($index: number) : UnityEditor.ShaderData.Subshader
            /** Obtains the serialized subshader at the given index.
            * @param $index The index of the serialized subshader.
            * @returns The associated serialized subshader or null if none exists. 
            */
            public GetSerializedSubshader ($index: number) : UnityEditor.ShaderData.Subshader
        }
        /** StaticOcclusionCulling lets you perform static occlusion culling operations.
        */
        class StaticOcclusionCulling extends System.Object
        {
            protected [__keep_incompatibility]: never;
            /** Used to check if asynchronous generation of static occlusion culling data is still running.
            */
            public static get isRunning(): boolean;
            public static get smallestOccluder(): number;
            public static set smallestOccluder(value: number);
            public static get smallestHole(): number;
            public static set smallestHole(value: number);
            public static get backfaceThreshold(): number;
            public static set backfaceThreshold(value: number);
            /** Does the Scene contain any occlusion portals that were added manually rather than automatically?
            */
            public static get doesSceneHaveManualPortals(): boolean;
            /** Returns the size in bytes that the PVS data is currently taking up in this Scene on disk.
            */
            public static get umbraDataSize(): number;
            /** Used to generate static occlusion culling data.
            */
            public static Compute () : boolean
            /** Used to compute static occlusion culling data asynchronously.
            */
            public static GenerateInBackground () : boolean
            /** Removes temporary folder used when baking occlusion.
            */
            public static RemoveCacheFolder () : void
            /** Used to cancel asynchronous generation of static occlusion culling data.
            */
            public static Cancel () : void
            /** Clears the PVS of the opened Scene.
            */
            public static Clear () : void
            public static SetDefaultOcclusionBakeSettings () : void
        }
        /** Used to visualize static occlusion culling at development time in Scene view.
        */
        class StaticOcclusionCullingVisualization extends System.Object
        {
            protected [__keep_incompatibility]: never;
            /** If set to true, visualization of target volumes is enabled.
            */
            public static get showOcclusionCulling(): boolean;
            public static set showOcclusionCulling(value: boolean);
            /** If set to true, the visualization lines of the PVS volumes will show all cells rather than cells after culling.
            */
            public static get showPreVisualization(): boolean;
            public static set showPreVisualization(value: boolean);
            /** If set to true, visualization of view volumes is enabled.
            */
            public static get showViewVolumes(): boolean;
            public static set showViewVolumes(value: boolean);
            public static get showDynamicObjectBounds(): boolean;
            public static set showDynamicObjectBounds(value: boolean);
            /** If set to true, visualization of portals is enabled.
            */
            public static get showPortals(): boolean;
            public static set showPortals(value: boolean);
            /** If set to true, visualization of portals is enabled.
            */
            public static get showVisibilityLines(): boolean;
            public static set showVisibilityLines(value: boolean);
            /** If set to true, culling of geometry is enabled.
            */
            public static get showGeometryCulling(): boolean;
            public static set showGeometryCulling(value: boolean);
            public static get isPreviewOcclusionCullingCameraInPVS(): boolean;
            public static get previewOcclusionCamera(): UnityEngine.Camera;
            public static get previewOcclucionCamera(): UnityEngine.Camera;
        }
        /** Use this class to highlight elements in the editor for use in in-editor tutorials and similar.
        */
        class Highlighter extends System.Object
        {
            protected [__keep_incompatibility]: never;
            /** The text of the current active highlight.
            */
            public static get activeText(): string;
            /** The rect in screenspace of the current active highlight.
            */
            public static get activeRect(): UnityEngine.Rect;
            /** Is the current active highlight visible yet?
            */
            public static get activeVisible(): boolean;
            /** Is there currently an active highlight?
            */
            public static get active(): boolean;
            /** Stops the active highlight.
            */
            public static Stop () : void
            /** Highlights an element in the editor.
            * @param $windowTitle The title of the window the element is inside.
            * @param $text The text to identify the element with.
            * @param $mode Optional mode to specify how to search for the element.
            * @returns true if the requested element was found; otherwise false. 
            */
            public static Highlight ($windowTitle: string, $text: string) : boolean
            /** Highlights an element in the editor.
            * @param $windowTitle The title of the window the element is inside.
            * @param $text The text to identify the element with.
            * @param $mode Optional mode to specify how to search for the element.
            * @returns true if the requested element was found; otherwise false. 
            */
            public static Highlight ($windowTitle: string, $text: string, $mode: UnityEditor.HighlightSearchMode) : boolean
            /** Call this method to create an identifiable rect that the Highlighter can find.
            * @param $position The position to make highlightable.
            * @param $identifier The identifier text of the rect.
            */
            public static HighlightIdentifier ($position: UnityEngine.Rect, $identifier: string) : void
            public constructor ()
        }
        /** Used to specify how to find a given element in the editor to highlight.
        */
        enum HighlightSearchMode
        { None = 0, Auto = 1, Identifier = 2, PrefixLabel = 3, Content = 4 }
        /** Provides methods for fast type extraction from assemblies loaded into the Unity Domain.
        */
        class TypeCache extends System.Object
        {
            protected [__keep_incompatibility]: never;
            /** Retrieves an unordered collection of types derived from the T type.
            * @param $parentType Type of a class or interface.
            * @param $assemblyName Optional assembly name.
            * @returns Returns an unordered collection of derived types. If assemblyName is specified, returns only types defined in this assembly. 
            */
            public static GetTypesDerivedFrom ($parentType: System.Type) : UnityEditor.TypeCache.TypeCollection
            /** Retrieves an unordered collection of types marked with the T attribute.
            * @param $attrType Attribute type.
            * @param $assemblyName Optional assembly name.
            * @returns Returns an unordered collection of types. If assemblyName is specified, returns only types defined in this assembly. 
            */
            public static GetTypesWithAttribute ($attrType: System.Type) : UnityEditor.TypeCache.TypeCollection
            /** Retrieves an unordered collection of methods marked with the T attribute.
            * @param $attrType Attribute type.
            * @param $assemblyName Optional assembly name.
            * @returns Returns an unordered MethodInfo collection of methods marked with the T attribute. If assemblyName is specified, returns only methods defined in this assembly. 
            */
            public static GetMethodsWithAttribute ($attrType: System.Type) : UnityEditor.TypeCache.MethodCollection
            /** Retrieves an unordered collection of fields marked with the T attribute.
            * @param $attrType Attribute type.
            * @param $assemblyName Optional assembly name.
            * @returns Returns an unordered FieldInfo collection of fields marked with the T attribute. If assemblyName is specified, returns only fields defined in this assembly. 
            */
            public static GetFieldsWithAttribute ($attrType: System.Type) : UnityEditor.TypeCache.FieldInfoCollection
            /** Retrieves an unordered collection of types derived from the T type.
            * @param $parentType Type of a class or interface.
            * @param $assemblyName Optional assembly name.
            * @returns Returns an unordered collection of derived types. If assemblyName is specified, returns only types defined in this assembly. 
            */
            public static GetTypesDerivedFrom ($parentType: System.Type, $assemblyName: string) : UnityEditor.TypeCache.TypeCollection
            /** Retrieves an unordered collection of types marked with the T attribute.
            * @param $attrType Attribute type.
            * @param $assemblyName Optional assembly name.
            * @returns Returns an unordered collection of types. If assemblyName is specified, returns only types defined in this assembly. 
            */
            public static GetTypesWithAttribute ($attrType: System.Type, $assemblyName: string) : UnityEditor.TypeCache.TypeCollection
            /** Retrieves an unordered collection of methods marked with the T attribute.
            * @param $attrType Attribute type.
            * @param $assemblyName Optional assembly name.
            * @returns Returns an unordered MethodInfo collection of methods marked with the T attribute. If assemblyName is specified, returns only methods defined in this assembly. 
            */
            public static GetMethodsWithAttribute ($attrType: System.Type, $assemblyName: string) : UnityEditor.TypeCache.MethodCollection
            /** Retrieves an unordered collection of fields marked with the T attribute.
            * @param $attrType Attribute type.
            * @param $assemblyName Optional assembly name.
            * @returns Returns an unordered FieldInfo collection of fields marked with the T attribute. If assemblyName is specified, returns only fields defined in this assembly. 
            */
            public static GetFieldsWithAttribute ($attrType: System.Type, $assemblyName: string) : UnityEditor.TypeCache.FieldInfoCollection
        }
        /** Lets you register undo operations on specific objects you are about to perform changes on.
        */
        class Undo extends System.Object
        {
            protected [__keep_incompatibility]: never;
            /** Callback that is triggered after an undo or a redo was executed.
            */
            public static undoRedoPerformed : UnityEditor.Undo.UndoRedoCallback
            /** Callback that is triggered after any undo or redo event.
            */
            public static undoRedoEvent : UnityEditor.Undo.UndoRedoEventCallback
            /** Invoked before the Undo system performs a flush.
            */
            public static willFlushUndoRecord : UnityEditor.Undo.WillFlushUndoRecord
            /** Callback that is triggered whenever a new set of property modifications is created.
            */
            public static postprocessModifications : UnityEditor.Undo.PostprocessModifications
            /** Returns true if the editor is currently processing undo or redo operations, false otherwise.
            */
            public static get isProcessing(): boolean;
            /** Stores a copy of the object states on the undo stack.
            * @param $objectToUndo The object whose state changes need to be undone.
            * @param $name The name of the undo operation.
            */
            public static RegisterCompleteObjectUndo ($objectToUndo: UnityEngine.Object, $name: string) : void
            /** This is equivalent to calling the first overload mutiple times, save for the fact that only one undo operation will be generated for this one.
            * @param $objectsToUndo An array of objects whose state changes need to be undone.
            * @param $name The name of the undo operation.
            */
            public static RegisterCompleteObjectUndo ($objectsToUndo: System.Array$1<UnityEngine.Object>, $name: string) : void
            /** Sets the parent of transform to the new parent and records an undo operation.
            * @param $transform The Transform component whose parent is to be changed.
            * @param $newParent The parent Transform to be assigned.
            * @param $name The name of this action, to be stored in the Undo history buffer.
            */
            public static SetTransformParent ($transform: UnityEngine.Transform, $newParent: UnityEngine.Transform, $name: string) : void
            public static SetTransformParent ($transform: UnityEngine.Transform, $newParent: UnityEngine.Transform, $worldPositionStays: boolean, $name: string) : void
            /** Move a GameObject from its current Scene to a new Scene.
            It is required that the GameObject is at the root of its current Scene.
            * @param $go GameObject to move.
            * @param $scene Scene to move the GameObject into.
            * @param $name Name of the undo action.
            */
            public static MoveGameObjectToScene ($go: UnityEngine.GameObject, $scene: UnityEngine.SceneManagement.Scene, $name: string) : void
            /** Sets the sibling index of transform and records an undo operation.
            * @param $transform Transform that will have its sibling index changed.
            * @param $siblingIndex New sibling index.
            * @param $name Undo operation name.
            */
            public static SetSiblingIndex ($transform: UnityEngine.Transform, $siblingIndex: number, $name: string) : void
            /** Registers an undo operation to undo the creation of an object.
            * @param $objectToUndo The newly created object. This object is destroyed when the undo operation is performed. When the value is a GameObject, Unity registers the GameObject and its child GameObjects, but not sibling or parent GameObjects.
            * @param $name The name of the action to undo. Use this string to provide a short description of the action to be undone. For Undo or Redo items in the Edit menu, Unity adds "Undo" or "Redo" to the string that you provide. For example, if you provide the string "Create GameObject", the Unity Editor displays the menu item Edit > Undo Create GameObject.
            */
            public static RegisterCreatedObjectUndo ($objectToUndo: UnityEngine.Object, $name: string) : void
            /** Destroys the object and records an undo operation so that it can be recreated.
            * @param $objectToUndo The object that will be destroyed.
            */
            public static DestroyObjectImmediate ($objectToUndo: UnityEngine.Object) : void
            /** Adds a component to the game object and registers an undo operation for this action.
            * @param $gameObject The game object you want to add the component to.
            * @param $type The type of component you want to add.
            * @returns The newly added component. 
            */
            public static AddComponent ($gameObject: UnityEngine.GameObject, $type: System.Type) : UnityEngine.Component
            /** Copies the state of the importer for the given asset path.
            * @param $path Path of the asset importer to register for Undo.
            * @param $name The name of the undo operation.
            */
            public static RegisterImporterUndo ($path: string, $name: string) : void
            /** Stores a copy of the order of the object's children on the undo stack.
            * @param $objectToUndo The object whose child order should be recorded on the undo stack.
            * @param $name The name of the undo operation.
            */
            public static RegisterChildrenOrderUndo ($objectToUndo: UnityEngine.Object, $name: string) : void
            /** Copy the states of a hierarchy of objects onto the undo stack.
            * @param $objectToUndo The object used to determine a hierarchy of objects whose state changes need to be undone.
            * @param $name The name of the undo operation.
            */
            public static RegisterFullObjectHierarchyUndo ($objectToUndo: UnityEngine.Object, $name: string) : void
            /** Records any changes done on the object after the RecordObject function.
            * @param $objectToUndo The reference to the object that you will be modifying.
            * @param $name The title of the action to appear in the undo history (i.e. visible in the undo menu).
            */
            public static RecordObject ($objectToUndo: UnityEngine.Object, $name: string) : void
            /** Records multiple undoable objects in a single call. This is the same as calling Undo.RecordObject multiple times.
            */
            public static RecordObjects ($objectsToUndo: System.Array$1<UnityEngine.Object>, $name: string) : void
            /** Removes all Undo operation for the identifier object registered using Undo.RegisterCompleteObjectUndo from the undo stack.
            */
            public static ClearUndo ($identifier: UnityEngine.Object) : void
            /** Perform an Undo operation.
            */
            public static PerformUndo () : void
            /** Perform an Redo operation.
            */
            public static PerformRedo () : void
            /** Unity automatically groups undo operations by the current group index.
            */
            public static IncrementCurrentGroup () : void
            /** Unity automatically groups undo operations by the current group index.
            * @returns The index of the current undo group. 
            */
            public static GetCurrentGroup () : number
            /** Get the name that will be shown in the UI for the current undo group.
            * @returns Name of the current group or an empty string if the current group is empty. 
            */
            public static GetCurrentGroupName () : string
            /** Set the name of the current undo group.
            * @param $name New name of the current undo group.
            */
            public static SetCurrentGroupName ($name: string) : void
            /** Performs the last undo operation but does not record a redo operation.
            */
            public static RevertAllInCurrentGroup () : void
            /** Performs all undo operations up to the group index without storing a redo operation in the process.
            */
            public static RevertAllDownToGroup ($group: number) : void
            /** Collapses all undo operation up to group index together into one step.
            * @param $groupIndex The group index to collapse undo operations to.
            */
            public static CollapseUndoOperations ($groupIndex: number) : void
            /** Removes all undo and redo operations from  respectively the undo and redo stacks.
            */
            public static ClearAll () : void
            /** Ensure objects recorded using RecordObject or RecordObjects are registered as an undoable action. In most cases there is no reason to invoke FlushUndoRecordObjects since it's automatically done right after mouse-up and certain other events that conventionally marks the end of an action.
            */
            public static FlushUndoRecordObjects () : void
            public constructor ()
        }
        /** Additional resources: Undo.postprocessModifications.
        */
        class UndoPropertyModification extends System.ValueType
        {
            protected [__keep_incompatibility]: never;
            /** 
            The previous value of the modified property.
            Additional resources: PropertyModification .
            */
            public previousValue : UnityEditor.PropertyModification
            /** 
            The current value of the modified property.
            Additional resources: PropertyModification.
            */
            public currentValue : UnityEditor.PropertyModification
            /** Indicates whether to retain modifications when the targeted object is an instance of a Prefab.
            */
            public get keepPrefabOverride(): boolean;
            public set keepPrefabOverride(value: boolean);
        }
        /** This enumeration describes the different kind of changes that can be tracked in an ObjectChangeEventStream. Each event has a corresponding type in ObjectChangeEvents.
        */
        enum ObjectChangeKind
        { None = 0, ChangeScene = 1, CreateGameObjectHierarchy = 2, ChangeGameObjectStructureHierarchy = 3, ChangeGameObjectStructure = 4, ChangeGameObjectParent = 5, ChangeGameObjectOrComponentProperties = 6, DestroyGameObjectHierarchy = 7, CreateAssetObject = 8, DestroyAssetObject = 9, ChangeAssetObjectProperties = 10, UpdatePrefabInstances = 11, ChangeChildrenOrder = 12 }
        /** Exposes events that allow you to track undoable changes to objects in the editor.
        */
        class ObjectChangeEvents extends System.Object
        {
            protected [__keep_incompatibility]: never;
            public static add_changesPublished ($value: UnityEditor.ObjectChangeEvents.ObjectChangeEventsHandler) : void
            public static remove_changesPublished ($value: UnityEditor.ObjectChangeEvents.ObjectChangeEventsHandler) : void
        }
        /** Represents a stream of events that describes the changes applied to objects in memory over the course of a frame.
        */
        class ObjectChangeEventStream extends System.ValueType implements System.IDisposable
        {
            protected [__keep_incompatibility]: never;
            /** The number of events in the stream.
            */
            public get length(): number;
            /** Indicates whether the ObjectChangeEventStream has an allocated memory buffer.
            */
            public get isCreated(): boolean;
            /** Returns the type of the event at the specified index.
            * @param $eventIdx The index of the event whose type should be returned.
            * @returns The type of the event at the specified index. 
            */
            public GetEventType ($eventIdx: number) : UnityEditor.ObjectChangeKind
            /** Retrieves the event data at the given index as a ChangeSceneEventArgs. Throws an exception if the event type requested does not match the event stored in the stream.
            * @param $eventIdx The index of the event to get the data for.
            */
            public GetChangeSceneEvent ($eventIdx: number, $data: $Ref<UnityEditor.ChangeSceneEventArgs>) : void
            /** Retrieves the event data at the given index as a CreateGameObjectHierarchyEventArgs. Throws an exception if the event type requested does not match the event stored in the stream.
            * @param $eventIdx The index of the event to get the data for.
            * @param $data The data associated with the event.
            */
            public GetCreateGameObjectHierarchyEvent ($eventIdx: number, $data: $Ref<UnityEditor.CreateGameObjectHierarchyEventArgs>) : void
            /** Retrieves the event data at the given index as a DestroyGameObjectHierarchyEventArgs. Throws an exception if the event type requested does not match the event stored in the stream.
            * @param $eventIdx The index of the event to get the data for.
            * @param $data The data associated with the event.
            */
            public GetDestroyGameObjectHierarchyEvent ($eventIdx: number, $data: $Ref<UnityEditor.DestroyGameObjectHierarchyEventArgs>) : void
            /** Retrieves the event data at the given index as a ChangeGameObjectStructureHierarchyEventArgs. Throws an exception if the event type requested does not match the event stored in the stream.
            * @param $eventIdx The index of the event to get the data for.
            * @param $data The data associated with the event.
            */
            public GetChangeGameObjectStructureHierarchyEvent ($eventIdx: number, $data: $Ref<UnityEditor.ChangeGameObjectStructureHierarchyEventArgs>) : void
            /** Retrieves the event data at the given index as a ChangeGameObjectStructureEventArgs. Throws an exception if the event type requested does not match the event stored in the stream.
            * @param $eventIdx The index of the event to get the data for.
            * @param $data The data associated with the event.
            */
            public GetChangeGameObjectStructureEvent ($eventIdx: number, $data: $Ref<UnityEditor.ChangeGameObjectStructureEventArgs>) : void
            /** Retrieves the event data at the given index as a ChangeGameObjectParentEventArgs. Throws an exception if the event type requested does not match the event stored in the stream.
            * @param $eventIdx The index of the event to get the data for.
            * @param $data The data associated with the event.
            */
            public GetChangeGameObjectParentEvent ($eventIdx: number, $data: $Ref<UnityEditor.ChangeGameObjectParentEventArgs>) : void
            /** Retrieves the event data at the given index as a ChangeChildrenOrderEventArgs. Throws an exception if the event type requested does not match the event stored in the stream.
            * @param $eventIdx The index of the event to get the data for.
            * @param $data The data associated with the event.
            */
            public GetChangeChildrenOrderEvent ($eventIdx: number, $data: $Ref<UnityEditor.ChangeChildrenOrderEventArgs>) : void
            /** Retrieves the event data at the given index as a ChangeAssetObjectPropertiesEventArgs. Throws an exception if the event type requested does not match the event stored in the stream.
            * @param $eventIdx The index of the event to get the data for.
            * @param $data The data associated with the event.
            */
            public GetChangeGameObjectOrComponentPropertiesEvent ($eventIdx: number, $data: $Ref<UnityEditor.ChangeGameObjectOrComponentPropertiesEventArgs>) : void
            /** Retrieves the event data at the given index as a CreateAssetObjectEventArgs. Throws an exception if the event type requested does not match the event stored in the stream.
            * @param $eventIdx The index of the event to get the data for.
            * @param $data The data associated with the event.
            */
            public GetCreateAssetObjectEvent ($eventIdx: number, $data: $Ref<UnityEditor.CreateAssetObjectEventArgs>) : void
            /** Retrieves the event data at the given index as a DestroyAssetObjectEventArgs. Throws an exception if the event type requested does not match the event stored in the stream.
            * @param $eventIdx The index of the event to get the data for.
            * @param $data The data associated with the event.
            */
            public GetDestroyAssetObjectEvent ($eventIdx: number, $data: $Ref<UnityEditor.DestroyAssetObjectEventArgs>) : void
            /** Retrieves the event data at the given index as a ChangeAssetObjectPropertiesEventArgs. Throws an exception if the event type requested does not match the event stored in the stream.
            * @param $eventIdx The index of the event to get the data for.
            * @param $data The data associated with the event.
            */
            public GetChangeAssetObjectPropertiesEvent ($eventIdx: number, $data: $Ref<UnityEditor.ChangeAssetObjectPropertiesEventArgs>) : void
            /** Retrieves the event data at the given index as a UpdatePrefabInstancesEventArgs. Throws an exception if the event type requested does not match the event stored in the stream.
            * @param $eventIdx The index of the event to get the data for.
            * @param $data The data associated with the event.
            */
            public GetUpdatePrefabInstancesEvent ($eventIdx: number, $data: $Ref<UnityEditor.UpdatePrefabInstancesEventArgs>) : void
            /** Creates a copy of this stream with the specified allocator.
            * @param $allocator The allocator to use to allocate the memory for the copy.
            * @returns A copy of the stream that contains the same events, but in a separate memory lcoation. 
            */
            public Clone ($allocator: Unity.Collections.Allocator) : UnityEditor.ObjectChangeEventStream
            /** Releases the memory associated with this stream.
            */
            public Dispose () : void
        }
        /** A change of this type indicates that the parent of a GameObject has changed. This happens when Undo.SetTransformParent or SceneManager.MoveGameObjectToScene is used.
        */
        class ChangeGameObjectParentEventArgs extends System.ValueType
        {
            protected [__keep_incompatibility]: never;
            /** The instance ID of the GameObject whose parent changed. Note that this is not the instance ID of the Transform component.
            */
            public get instanceId(): number;
            /** The instance ID of the GameObject that was the previous parent of the target. Note that this is not the instance ID of its Transform.
            */
            public get previousParentInstanceId(): number;
            /** The instance ID of the GameObject that is the new parent of the target. Note that this is not the instance ID of its Transform.
            */
            public get newParentInstanceId(): number;
            /** The scene containing the previous parent. This is useful to detect whether a GameObject was moved to another scene.
            */
            public get previousScene(): UnityEngine.SceneManagement.Scene;
            /** The Scene containing the new parent. This is useful to detect whether a GameObject was moved to another scene or moved to the root of a scene.
            */
            public get newScene(): UnityEngine.SceneManagement.Scene;
            public constructor ($instanceId: number, $previousScene: UnityEngine.SceneManagement.Scene, $previousParentInstanceId: number, $newScene: UnityEngine.SceneManagement.Scene, $newParentInstanceId: number)
        }
        /** A change of this type indicates that a GameObject's children have been reordered. This happens when Undo.RegisterChildrenOrderUndo is called or when reordering a child in the hierarchy under the same parent.
        */
        class ChangeChildrenOrderEventArgs extends System.ValueType
        {
            protected [__keep_incompatibility]: never;
            /** The instance ID of the parent GameObject whose children have been reordered. Note that this is not the instance ID of the Transform component.
            */
            public get instanceId(): number;
            /** The Scene containing the GameObject whose children were reordered.
            */
            public get scene(): UnityEngine.SceneManagement.Scene;
            public constructor ($instanceId: number, $scene: UnityEngine.SceneManagement.Scene)
        }
        /** A change of this type indicates that an open scene has been changed ("dirtied") without any more specific information available. This happens for example when EditorSceneManager.MarkSceneDirty is used.
        */
        class ChangeSceneEventArgs extends System.ValueType
        {
            protected [__keep_incompatibility]: never;
            /** The Scene that was changed.
            */
            public get scene(): UnityEngine.SceneManagement.Scene;
            public constructor ($scene: UnityEngine.SceneManagement.Scene)
        }
        /** A change of this type indicates that a GameObject has been created, possibly with additional objects below it in the hierarchy. This happens for example when Undo.RegisterCreatedObjectUndo is used with a GameObject.
        */
        class CreateGameObjectHierarchyEventArgs extends System.ValueType
        {
            protected [__keep_incompatibility]: never;
            /** The instance ID of the GameObject that has been created.
            */
            public get instanceId(): number;
            /** The scene containing the GameObject that has been created.
            */
            public get scene(): UnityEngine.SceneManagement.Scene;
            public constructor ($instanceId: number, $scene: UnityEngine.SceneManagement.Scene)
        }
        /** A change of this type indicates that the structure of a GameObject has changed and any GameObject in the hierarchy below it might have changed. This happens for example when Undo.RegisterFullObjectHierarchyUndo is used.
        */
        class ChangeGameObjectStructureHierarchyEventArgs extends System.ValueType
        {
            protected [__keep_incompatibility]: never;
            /** The instance ID of the GameObject that has been changed.
            */
            public get instanceId(): number;
            /** The scene containing the GameObject that has been changed.
            */
            public get scene(): UnityEngine.SceneManagement.Scene;
            public constructor ($instanceId: number, $scene: UnityEngine.SceneManagement.Scene)
        }
        /** A change of this type indicates that the structure of a GameObject has changed. This happens when a component is added to or removed from the GameObject using Undo.AddComponent or Undo.DestroyObjectImmediate.
        */
        class ChangeGameObjectStructureEventArgs extends System.ValueType
        {
            protected [__keep_incompatibility]: never;
            /** The instance ID of the GameObject that has been changed.
            */
            public get instanceId(): number;
            /** The Scene containing the GameObject that has been changed.
            */
            public get scene(): UnityEngine.SceneManagement.Scene;
            public constructor ($instanceId: number, $scene: UnityEngine.SceneManagement.Scene)
        }
        /** A change of this type indicates that a property of a GameObject or Component has changed. This happens for example when Undo.RecordObject is used with an instance of a Component.
        */
        class ChangeGameObjectOrComponentPropertiesEventArgs extends System.ValueType
        {
            protected [__keep_incompatibility]: never;
            /** The instance ID of the modified GameObject or Component.
            */
            public get instanceId(): number;
            /** The Scene that contains the GameObject associated with the change. If a Component is changed, this is the GameObject to which the component belongs.
            */
            public get scene(): UnityEngine.SceneManagement.Scene;
            public constructor ($instanceId: number, $scene: UnityEngine.SceneManagement.Scene)
        }
        /** A change of this type indicates that a GameObject and the entire hierarchy below it has been destroyed. This happens for example when Undo.DestroyObjectImmediate is used with an GameObject.
        */
        class DestroyGameObjectHierarchyEventArgs extends System.ValueType
        {
            protected [__keep_incompatibility]: never;
            /** The instance ID of the GameObject that has been destroyed.
            */
            public get instanceId(): number;
            /** The instance ID for the parent GameObject of the GameObject that has been destroyed.
            */
            public get parentInstanceId(): number;
            /** The scene containing the GameObject that has been destroyed.
            */
            public get scene(): UnityEngine.SceneManagement.Scene;
            public constructor ($instanceId: number, $scene: UnityEngine.SceneManagement.Scene)
            public constructor ($instanceId: number, $parentInstanceId: number, $scene: UnityEngine.SceneManagement.Scene)
        }
        /** A change of this type indicates that an asset object has been created. This happens for example when Undo.RegisterCreatedObjectUndo is used with an instance of an asset (e.g. Texture). Note that this only covers creation of asset objects in memory and not creation of new assets in the project on disk.
        */
        class CreateAssetObjectEventArgs extends System.ValueType
        {
            protected [__keep_incompatibility]: never;
            /** The GUID of the new asset.
            */
            public get guid(): UnityEditor.GUID;
            /** The instance ID of the modified asset.
            */
            public get instanceId(): number;
            /** The Scene that contains the new asset. This is usually an invalid scene unless the asset is explicitly associated in a scene (e.g. RenderSettings).
            */
            public get scene(): UnityEngine.SceneManagement.Scene;
            public constructor ($guid: UnityEditor.GUID, $instanceId: number, $scene: UnityEngine.SceneManagement.Scene)
        }
        /** A change of this type indicates that an asset object has been destroyed. This happens for example when Undo.DestroyObjectImmediate is used with an instance of an asset (e.g. Texture). Note that this only covers destruction of asset objects in memory and not deletion of assets in the project on disk.
        */
        class DestroyAssetObjectEventArgs extends System.ValueType
        {
            protected [__keep_incompatibility]: never;
            /** The GUID of the removed asset.
            */
            public get guid(): UnityEditor.GUID;
            /** The instance ID of the modified asset.
            */
            public get instanceId(): number;
            /** The scene that contained the asset. This is usually an invalid scene unless the asset is explicitly associated in a scene (e.g. RenderSettings).
            */
            public get scene(): UnityEngine.SceneManagement.Scene;
            public constructor ($guid: UnityEditor.GUID, $instanceId: number, $scene: UnityEngine.SceneManagement.Scene)
        }
        /** A change of this type indicates that a property of an asset object in memory has changed. This happens for example when Undo.RecordObject is used with an instance of an asset (e.g. Texture). Note that this only covers changes to asset objects in memory and not changes to assets in the project on disk.
        */
        class ChangeAssetObjectPropertiesEventArgs extends System.ValueType
        {
            protected [__keep_incompatibility]: never;
            /** The GUID of the changed asset.
            */
            public get guid(): UnityEditor.GUID;
            /** The instance ID of the modified asset.
            */
            public get instanceId(): number;
            /** The Scene that contains the modified asset. This is usually an invalid scene unless the asset is explicitly associated in a scene (e.g. RenderSettings).
            */
            public get scene(): UnityEngine.SceneManagement.Scene;
            public constructor ($guid: UnityEditor.GUID, $instanceId: number, $scene: UnityEngine.SceneManagement.Scene)
        }
        /** A change of this type indicates that prefab instances in an open scene have been updated due to a change to the source prefab.
        */
        class UpdatePrefabInstancesEventArgs extends System.ValueType
        {
            protected [__keep_incompatibility]: never;
            /** The scene containing all of the prefab instances that have been updated.
            */
            public get scene(): UnityEngine.SceneManagement.Scene;
            /** The instance ID for each root GameObject of the prefab instances that have been updated.
            */
            public get instanceIds(): Unity.Collections.NativeArray$1.ReadOnly<number>;
            public constructor ($scene: UnityEngine.SceneManagement.Scene, $instanceIds: Unity.Collections.NativeArray$1.ReadOnly<number>)
        }
        class UndoSnapshot extends System.Object
        {
            protected [__keep_incompatibility]: never;
            public Restore () : void
            public Dispose () : void
            public constructor ($objectsToUndo: System.Array$1<UnityEngine.Object>)
        }
        /** Use this class to retrieve information about the currently selected project and the current Unity ID that is logged in.
        */
        class CloudProjectSettings extends System.Object
        {
            protected [__keep_incompatibility]: never;
            /** The user ID is derived from the user name without the domain (removing all characters starting with '@'), formatted in lowercase with no symbols.
            */
            public static get userId(): string;
            /** The user name is the email used for the user's Unity account.
            */
            public static get userName(): string;
            public static get accessToken(): string;
            /** The Project ID, or GUID.
            */
            public static get projectId(): string;
            /** The name of the project.
            */
            public static get projectName(): string;
            /** The Organization ID, formatted in lowercase with no symbols.
            */
            public static get organizationId(): string;
            /** The name of the Organization.
            */
            public static get organizationName(): string;
            /** The Organization key used to access the dashboard.
            */
            public static get organizationKey(): string;
            /** The current COPPA compliance state.
            */
            public static get coppaCompliance(): UnityEditor.CoppaCompliance;
            /** Returns true if the project has been bound.
            */
            public static get projectBound(): boolean;
            public static RefreshAccessToken ($refresh: System.Action$1<boolean>) : void
            /** This method shows the Unity login popup.
            */
            public static ShowLogin () : void
            public constructor ()
        }
        /** The enumerated states of the project's Coppa compliance setting.
        */
        enum CoppaCompliance
        { CoppaUndefined = 0, CoppaCompliant = 1, CoppaNotCompliant = 2 }
        /** Manages the events related to the project state.
        */
        class CloudProjectSettingsEventManager extends System.Object
        {
            protected [__keep_incompatibility]: never;
            /** The instance of the Cloud Project Settings event manager.
            */
            public static get instance(): UnityEditor.CloudProjectSettingsEventManager;
            public add_projectStateChanged ($value: System.Action) : void
            public remove_projectStateChanged ($value: System.Action) : void
            public add_projectRefreshed ($value: System.Action) : void
            public remove_projectRefreshed ($value: System.Action) : void
        }
        class UnityStats extends System.Object
        {
            protected [__keep_incompatibility]: never;
            public static get batches(): number;
            public static get drawCalls(): number;
            public static get dynamicBatchedDrawCalls(): number;
            public static get staticBatchedDrawCalls(): number;
            public static get instancedBatchedDrawCalls(): number;
            public static get dynamicBatches(): number;
            public static get staticBatches(): number;
            public static get instancedBatches(): number;
            public static get setPassCalls(): number;
            public static get triangles(): number;
            public static get vertices(): number;
            public static get shadowCasters(): number;
            public static get renderTextureChanges(): number;
            public static get frameTime(): number;
            public static get renderTime(): number;
            public static get audioLevel(): number;
            public static get audioClippingAmount(): number;
            public static get audioDSPLoad(): number;
            public static get audioStreamLoad(): number;
            public static get renderTextureCount(): number;
            public static get renderTextureBytes(): number;
            public static get usedTextureMemorySize(): number;
            public static get usedTextureCount(): number;
            public static get screenRes(): string;
            public static get screenBytes(): number;
            public static get vboTotal(): number;
            public static get vboTotalBytes(): number;
            public static get vboUploads(): number;
            public static get vboUploadBytes(): number;
            public static get ibUploads(): number;
            public static get ibUploadBytes(): number;
            public static get visibleSkinnedMeshes(): number;
            public static get animationComponentsPlaying(): number;
            public static get animatorComponentsPlaying(): number;
            public constructor ()
        }
        class Unsupported extends System.Object
        {
            protected [__keep_incompatibility]: never;
            public static get useScriptableRenderPipeline(): boolean;
            public static set useScriptableRenderPipeline(value: boolean);
            public static get IsRegistryValidationDisabled(): boolean;
            public static set IsRegistryValidationDisabled(value: boolean);
            public static CaptureScreenshotImmediate ($filePath: string, $x: number, $y: number, $width: number, $height: number) : void
            public static GetSubmenusCommands ($menuPath: string) : System.Array$1<string>
            public static GetTypeFromFullName ($fullName: string) : System.Type
            public static GetSubmenus ($menuPath: string) : System.Array$1<string>
            public static GetSubmenusIncludingSeparators ($menuPath: string) : System.Array$1<string>
            public static PrepareObjectContextMenu ($c: UnityEngine.Object, $contextUserData: number) : void
            public static IsDeveloperBuild () : boolean
            public static IsDeveloperMode () : boolean
            public static IsSourceBuild () : boolean
            public static IsSourceBuild ($checkHumanControllingUs: boolean) : boolean
            public static IsBleedingEdgeBuild () : boolean
            public static IsDestroyScriptableObject ($target: UnityEngine.ScriptableObject) : boolean
            public static IsNativeCodeBuiltInReleaseMode () : boolean
            public static GetBaseUnityDeveloperFolder () : string
            public static StopPlayingImmediately () : void
            public static SceneTrackerFlushDirty () : void
            public static SetAllowCursorHide ($allow: boolean) : void
            public static SetOverrideLightingSettings ($scene: UnityEngine.SceneManagement.Scene) : boolean
            public static RestoreOverrideLightingSettings () : void
            public static SetRenderSettingsUseFogNoDirty ($fog: boolean) : void
            public static SetQualitySettingsShadowDistanceTemporarily ($distance: number) : void
            public static DeleteGameObjectSelection () : void
            public static CopyGameObjectsToPasteboard () : void
            public static PasteGameObjectsFromPasteboard () : void
            public static GetSerializedAssetInterfaceSingleton ($className: string) : UnityEngine.Object
            public static DuplicateGameObjectsUsingPasteboard () : void
            public static CopyComponentToPasteboard ($component: UnityEngine.Component) : boolean
            public static PasteComponentFromPasteboard ($go: UnityEngine.GameObject) : boolean
            public static PasteComponentValuesFromPasteboard ($component: UnityEngine.Component) : boolean
            public static HasStateMachineTransitionDataInPasteboard () : boolean
            public static AreAllParametersInDestination ($transition: UnityEngine.Object, $controller: UnityEditor.Animations.AnimatorController, $missingParameters: System.Collections.Generic.List$1<string>) : boolean
            public static DestinationHasCompatibleParameterTypes ($transition: UnityEngine.Object, $controller: UnityEditor.Animations.AnimatorController, $mismatchedParameters: System.Collections.Generic.List$1<string>) : boolean
            public static CanPasteParametersToTransition ($transition: UnityEngine.Object, $controller: UnityEditor.Animations.AnimatorController) : boolean
            public static CopyStateMachineTransitionParametersToPasteboard ($transition: UnityEngine.Object, $controller: UnityEditor.Animations.AnimatorController) : void
            public static PasteToStateMachineTransitionParametersFromPasteboard ($transition: UnityEngine.Object, $controller: UnityEditor.Animations.AnimatorController, $conditions: boolean, $parameters: boolean) : void
            public static CopyStateMachineDataToPasteboard ($stateMachineObject: UnityEngine.Object, $controller: UnityEditor.Animations.AnimatorController, $layerIndex: number) : void
            public static PasteToStateMachineFromPasteboard ($sm: UnityEditor.Animations.AnimatorStateMachine, $controller: UnityEditor.Animations.AnimatorController, $layerIndex: number, $position: UnityEngine.Vector3) : void
            public static HasStateMachineDataInPasteboard () : boolean
            public static SmartReset ($obj: UnityEngine.Object) : void
            public static ResolveSymlinks ($path: string) : string
            public static ResolveRedirectedPath ($path: string) : string
            public static GetLocalIdentifierInFileForPersistentObject ($obj: UnityEngine.Object) : bigint
            public static IsHiddenFile ($path: string) : boolean
            public static ClearSkinCache () : void
            public static SetUsingAuthoringScenes ($enabled: boolean) : void
            public static GetRenderSettings () : UnityEngine.Object
        }
        /** Unwrapping settings.
        */
        class UnwrapParam extends System.ValueType
        {
            protected [__keep_incompatibility]: never;
            /** Maximum allowed angle distortion (0..1).
            */
            public angleError : number
            /** Maximum allowed area distortion (0..1).
            */
            public areaError : number
            /** This angle (in degrees) or greater between triangles will cause seam to be created.
            */
            public hardAngle : number
            /** How much uv-islands will be padded.
            */
            public packMargin : number
            /** Will set default values for params.
            */
            public static SetDefaults ($param: $Ref<UnityEditor.UnwrapParam>) : void
        }
        /** Utility class for computing mesh UVs.
        */
        class Unwrapping extends System.Object
        {
            protected [__keep_incompatibility]: never;
            /** Will generate per-triangle uv (3 UVs for each triangle) with default settings.
            * @param $src The source mesh to generate UVs for.
            * @returns The list of UVs generated. 
            */
            public static GeneratePerTriangleUV ($src: UnityEngine.Mesh) : System.Array$1<UnityEngine.Vector2>
            /** Will generate per-triangle uv (3 UVs for each triangle) with provided settings.
            * @param $src The source mesh to generate UVs for.
            * @param $settings Allows you to specify custom parameters to control the unwrapping.
            * @returns The list of UVs generated. 
            */
            public static GeneratePerTriangleUV ($src: UnityEngine.Mesh, $settings: UnityEditor.UnwrapParam) : System.Array$1<UnityEngine.Vector2>
            /** Compute a unique UV layout for a Mesh, and store it in Mesh.uv2.
            * @param $src The Mesh to update.
            * @param $settings Settings that configure the calculation.
            * @returns Returns true if the calculation succeeded. Otherwise, returns false. 
            */
            public static GenerateSecondaryUVSet ($src: UnityEngine.Mesh) : boolean
            /** Compute a unique UV layout for a Mesh, and store it in Mesh.uv2.
            * @param $src The Mesh to update.
            * @param $settings Settings that configure the calculation.
            * @returns Returns true if the calculation succeeded. Otherwise, returns false. 
            */
            public static GenerateSecondaryUVSet ($src: UnityEngine.Mesh, $settings: UnityEditor.UnwrapParam) : boolean
        }
        class MathUtils extends System.Object
        {
            protected [__keep_incompatibility]: never;
            public static GetQuatLength ($q: UnityEngine.Quaternion) : number
            public static GetQuatConjugate ($q: UnityEngine.Quaternion) : UnityEngine.Quaternion
            public static OrthogonalizeMatrix ($m: UnityEngine.Matrix4x4) : UnityEngine.Matrix4x4
            public static QuaternionNormalize ($q: $Ref<UnityEngine.Quaternion>) : void
            public static QuaternionFromMatrix ($m: UnityEngine.Matrix4x4) : UnityEngine.Quaternion
            public static GetQuatLog ($q: UnityEngine.Quaternion) : UnityEngine.Quaternion
            public static GetQuatExp ($q: UnityEngine.Quaternion) : UnityEngine.Quaternion
            public static GetQuatSquad ($t: number, $q0: UnityEngine.Quaternion, $q1: UnityEngine.Quaternion, $a0: UnityEngine.Quaternion, $a1: UnityEngine.Quaternion) : UnityEngine.Quaternion
            public static GetSquadIntermediate ($q0: UnityEngine.Quaternion, $q1: UnityEngine.Quaternion, $q2: UnityEngine.Quaternion) : UnityEngine.Quaternion
            public static Ease ($t: number, $k1: number, $k2: number) : number
            public static Slerp ($p: UnityEngine.Quaternion, $q: UnityEngine.Quaternion, $t: number) : UnityEngine.Quaternion
            public static IntersectRayTriangle ($ray: UnityEngine.Ray, $v0: UnityEngine.Vector3, $v1: UnityEngine.Vector3, $v2: UnityEngine.Vector3, $bidirectional: boolean) : any
            public static ClosestPtSegmentRay ($p1: UnityEngine.Vector3, $q1: UnityEngine.Vector3, $ray: UnityEngine.Ray, $squaredDist: $Ref<number>, $s: $Ref<number>, $closestRay: $Ref<UnityEngine.Vector3>) : UnityEngine.Vector3
            public static IntersectRaySphere ($ray: UnityEngine.Ray, $sphereOrigin: UnityEngine.Vector3, $sphereRadius: number, $t: $Ref<number>, $q: $Ref<UnityEngine.Vector3>) : boolean
            public static ClosestPtRaySphere ($ray: UnityEngine.Ray, $sphereOrigin: UnityEngine.Vector3, $sphereRadius: number, $t: $Ref<number>, $q: $Ref<UnityEngine.Vector3>) : boolean
            public constructor ()
        }
        class ExternalVersionControl extends System.ValueType
        {
            protected [__keep_incompatibility]: never;
            public static Disabled : string
            public static AutoDetect : string
            public static Generic : string
            public static op_Implicit ($d: UnityEditor.ExternalVersionControl) : string
            public static op_Implicit ($d: string) : UnityEditor.ExternalVersionControl
            public constructor ($value: string)
        }
        class VersionControlSettings extends UnityEngine.Object
        {
            protected [__keep_incompatibility]: never;
            public static get mode(): string;
            public static set mode(value: string);
            public static get trackPackagesOutsideProject(): boolean;
            public static set trackPackagesOutsideProject(value: boolean);
        }
        /** Use these enum flags to specify which elements of a vertex to compress.
        */
        enum VertexChannelCompressionFlags
        { None = 0, Position = 1, Normal = 2, Tangent = 4, Color = 8, TexCoord0 = 16, TexCoord1 = 32, TexCoord2 = 64, TexCoord3 = 128, kPosition = 1, kNormal = 2, kColor = 4, kUV0 = 8, kUV1 = 16, kUV2 = 32, kUV3 = 64, kTangent = 128 }
        /** This class provides an interface for performing operations on a cache server.
        */
        class CacheServer extends System.Object
        {
            protected [__keep_incompatibility]: never;
            public static UploadArtifacts ($guids?: System.Array$1<UnityEditor.GUID>, $uploadAllRevisions?: boolean) : void
            /** Uploads the contents of the Shader Cache directly to the Accelerator. 
            */
            public static UploadShaderCache () : void
        }
        /** Allows you to decorate static variables in AssetPostprocessor and ScriptedImporter classes that should be ignored by the static variable warning system in the Import Activity window.
        This attribute is introduced to decorate static variables in PostProcessors and ScripttedImporters  to prevent warnings about the usage of static variables. Though static variables in these classes can lead to subtle bugs when running on different Asset Import Workers as each worker has its own Mono Domain separate from the Main Editor, this attribute has been added to reduce the noise which could be generated in some difficult to fix situations involving static variables in said clasess.
        */
        class AssetPostprocessorStaticVariableIgnoreAttribute extends System.Attribute implements System.Runtime.InteropServices._Attribute
        {
            protected [__keep_incompatibility]: never;
            public constructor ()
        }
        /** Represents an Android asset pack directory in a project.
        */
        class AndroidAssetPackImporter extends UnityEditor.AssetImporter
        {
            protected [__keep_incompatibility]: never;
            /** Gets all Android asset pack importers.
            * @returns Returns an array with all Android asset pack importers. 
            */
            public static GetAllImporters () : System.Array$1<UnityEditor.AndroidAssetPackImporter>
            public constructor ()
        }
        enum AudioImporterFormat
        { Native = -1, Compressed = 0 }
        enum AudioImporterLoadType
        { DecompressOnLoad = -1, CompressedInMemory = -1, StreamFromDisc = -1 }
        enum AudioImporterChannels
        { Automatic = 0, Mono = 1, Stereo = 2 }
        /** The sample rate setting used within the AudioImporter. This defines the sample rate conversion of audio on import.
        */
        enum AudioSampleRateSetting
        { PreserveSampleRate = 0, OptimizeSampleRate = 1, OverrideSampleRate = 2 }
        /** This structure contains a collection of settings used to define how an AudioClip should be imported.
        This  structure is used with the AudioImporter to define how the AudioClip should be imported and treated during loading within the Scene.
        */
        class AudioImporterSampleSettings extends System.ValueType
        {
            protected [__keep_incompatibility]: never;
            /** LoadType defines how the imported AudioClip data should be loaded.
            */
            public loadType : UnityEngine.AudioClipLoadType
            /** Defines how the sample rate is modified (if at all) of the importer audio file.
            */
            public sampleRateSetting : UnityEditor.AudioSampleRateSetting
            /** Target sample rate to convert to when samplerateSetting is set to OverrideSampleRate.
            */
            public sampleRateOverride : number
            /** CompressionFormat defines the compression type that the audio file is encoded to. Different compression types have different performance and audio artifact characteristics.
            */
            public compressionFormat : UnityEngine.AudioCompressionFormat
            /** Audio compression quality (0-1)
            Amount of compression. The value roughly corresponds to the ratio between the resulting and the source file sizes.
            */
            public quality : number
            public conversionMode : number
            /** Preloads audio data of the clip when the clip asset is loaded. When this flag is off, scripts have to call AudioClip.LoadAudioData() to load the data before the clip can be played. Properties like length, channels and format are available before the audio data has been loaded.
            */
            public preloadAudioData : boolean
        }
        /** Audio importer lets you modify AudioClip import settings from editor scripts.
        */
        class AudioImporter extends UnityEditor.AssetImporter
        {
            protected [__keep_incompatibility]: never;
            /** The default sample settings for the AudioClip importer.
            */
            public get defaultSampleSettings(): UnityEditor.AudioImporterSampleSettings;
            public set defaultSampleSettings(value: UnityEditor.AudioImporterSampleSettings);
            /** Force audioclips to mono?
            */
            public get forceToMono(): boolean;
            public set forceToMono(value: boolean);
            /** When this flag is set, the audio clip will be treated as being ambisonic.
            */
            public get ambisonic(): boolean;
            public set ambisonic(value: boolean);
            /** Corresponding to the "Load In Background" flag in the AudioClip inspector, when this flag is set, the loading of the clip will happen delayed without blocking the main thread.
            */
            public get loadInBackground(): boolean;
            public set loadInBackground(value: boolean);
            /** Returns whether a given build target has its sample settings currently overridden.
            * @param $platform The platform to query if this AudioImporter has an override for.
            * @returns Returns true if the platform is currently overriden in this AudioImporter. 
            */
            public ContainsSampleSettingsOverride ($platform: string) : boolean
            public ContainsSampleSettingsOverride ($platformGroup: UnityEditor.BuildTargetGroup) : boolean
            /** Return the current override settings for the given platform.
            * @param $platform The platform to get the override settings for.
            * @returns The override sample settings for the given platform. 
            */
            public GetOverrideSampleSettings ($platform: string) : UnityEditor.AudioImporterSampleSettings
            public GetOverrideSampleSettings ($platformGroup: UnityEditor.BuildTargetGroup) : UnityEditor.AudioImporterSampleSettings
            /** Sets the override sample settings for the given platform.
            * @param $platform The platform which will have the sample settings overridden.
            * @param $settings The override settings for the given platform.
            * @returns Returns true if the settings were successfully overriden. Some setting overrides are not possible for the given platform, in which case false is returned and the settings are not registered. 
            */
            public SetOverrideSampleSettings ($platform: string, $settings: UnityEditor.AudioImporterSampleSettings) : boolean
            public SetOverrideSampleSettings ($platformGroup: UnityEditor.BuildTargetGroup, $settings: UnityEditor.AudioImporterSampleSettings) : boolean
            /** Clears the sample settings override for the given platform.
            * @param $platform The platform to clear the overrides for.
            * @returns Returns true if any overrides were actually cleared. 
            */
            public ClearSampleSettingOverride ($platform: string) : boolean
            public ClearSampleSettingOverride ($platformGroup: UnityEditor.BuildTargetGroup) : boolean
            public constructor ()
        }
        /** Options to control the optimization of mesh data during asset import.
        */
        enum MeshOptimizationFlags
        { PolygonOrder = 1, VertexOrder = 2, Everything = -1 }
        /** AnimationClip mask options for ModelImporterClipAnimation.
        */
        enum ClipAnimationMaskType
        { CreateFromThisModel = 0, CopyFromOther = 1, None = 3 }
        /** Stores a curve and its name that will be used to create additional curves during the import process.
        */
        class ClipAnimationInfoCurve extends System.ValueType
        {
            protected [__keep_incompatibility]: never;
            /** The name of the animation curve.
            */
            public name : string
            /** The animation curve.
            */
            public curve : UnityEngine.AnimationCurve
        }
        /** Animation clips to split animation into.
        */
        class ModelImporterClipAnimation extends System.Object
        {
            protected [__keep_incompatibility]: never;
            /** Take name.
            */
            public get takeName(): string;
            public set takeName(value: string);
            /** Clip name.
            */
            public get name(): string;
            public set name(value: string);
            /** First frame of the clip.
            */
            public get firstFrame(): number;
            public set firstFrame(value: number);
            /** Last frame of the clip.
            */
            public get lastFrame(): number;
            public set lastFrame(value: number);
            /** The wrap mode of the animation.
            */
            public get wrapMode(): UnityEngine.WrapMode;
            public set wrapMode(value: UnityEngine.WrapMode);
            /** Is the clip a looping animation?
            */
            public get loop(): boolean;
            public set loop(value: boolean);
            /** Offset in degrees to the root rotation.
            */
            public get rotationOffset(): number;
            public set rotationOffset(value: number);
            /** Offset to the vertical root position.
            */
            public get heightOffset(): number;
            public set heightOffset(value: number);
            /** Offset to the cycle of a looping animation, if a different time in it is desired to be the start.
            */
            public get cycleOffset(): number;
            public set cycleOffset(value: number);
            /** Enable to make the clip loop.
            */
            public get loopTime(): boolean;
            public set loopTime(value: boolean);
            /** Enable to make the motion loop seamlessly.
            */
            public get loopPose(): boolean;
            public set loopPose(value: boolean);
            /** Enable to make root rotation be baked into the movement of the bones. Disable to make root rotation be stored as root motion.
            */
            public get lockRootRotation(): boolean;
            public set lockRootRotation(value: boolean);
            /** Enable to make vertical root motion be baked into the movement of the bones. Disable to make vertical root motion be stored as root motion.
            */
            public get lockRootHeightY(): boolean;
            public set lockRootHeightY(value: boolean);
            /** Enable to make horizontal root motion be baked into the movement of the bones. Disable to make horizontal root motion be stored as root motion.
            */
            public get lockRootPositionXZ(): boolean;
            public set lockRootPositionXZ(value: boolean);
            /** Keeps the vertical position as it is authored in the source file.
            */
            public get keepOriginalOrientation(): boolean;
            public set keepOriginalOrientation(value: boolean);
            /** Keeps the vertical position as it is authored in the source file.
            */
            public get keepOriginalPositionY(): boolean;
            public set keepOriginalPositionY(value: boolean);
            /** Keeps the vertical position as it is authored in the source file.
            */
            public get keepOriginalPositionXZ(): boolean;
            public set keepOriginalPositionXZ(value: boolean);
            /** Keeps the feet aligned with the root transform position.
            */
            public get heightFromFeet(): boolean;
            public set heightFromFeet(value: boolean);
            /** Mirror left and right in this clip.
            */
            public get mirror(): boolean;
            public set mirror(value: boolean);
            /** Define mask type.
            */
            public get maskType(): UnityEditor.ClipAnimationMaskType;
            public set maskType(value: UnityEditor.ClipAnimationMaskType);
            /** The AvatarMask used to mask transforms during the import process.
            */
            public get maskSource(): UnityEngine.AvatarMask;
            public set maskSource(value: UnityEngine.AvatarMask);
            /** AnimationEvents that will be added during the import process.
            */
            public get events(): System.Array$1<UnityEngine.AnimationEvent>;
            public set events(value: System.Array$1<UnityEngine.AnimationEvent>);
            /** Additionnal curves that will be that will be added during the import process.
            */
            public get curves(): System.Array$1<UnityEditor.ClipAnimationInfoCurve>;
            public set curves(value: System.Array$1<UnityEditor.ClipAnimationInfoCurve>);
            /** Returns true when the source AvatarMask has changed. This only happens when  ModelImporterClipAnimation.maskType is set to ClipAnimationMaskType.CopyFromOther
            To force a reload of the mask, simply set  ModelImporterClipAnimation.maskSource to the desired AvatarMask.
            */
            public get maskNeedsUpdating(): boolean;
            /** The additive reference pose frame.
            */
            public get additiveReferencePoseFrame(): number;
            public set additiveReferencePoseFrame(value: number);
            /** Enable to defines an additive reference pose.
            */
            public get hasAdditiveReferencePose(): boolean;
            public set hasAdditiveReferencePose(value: boolean);
            /** Copy the current masking settings from the clip to an AvatarMask.
            * @param $mask AvatarMask to which the masking values will be saved.
            */
            public ConfigureMaskFromClip ($mask: $Ref<UnityEngine.AvatarMask>) : void
            /** Copy the mask settings from an AvatarMask to the clip configuration.
            * @param $mask AvatarMask from which the mask settings will be imported.
            */
            public ConfigureClipFromMask ($mask: UnityEngine.AvatarMask) : void
            public constructor ()
        }
        /** Material generation options for ModelImporter.
        */
        enum ModelImporterGenerateMaterials
        { None = 0, PerTexture = 1, PerSourceMaterial = 2 }
        /** Material naming options for ModelImporter.
        */
        enum ModelImporterMaterialName
        { BasedOnTextureName = 0, BasedOnMaterialName = 1, BasedOnModelNameAndMaterialName = 2, BasedOnTextureName_Or_ModelNameAndMaterialName = 3 }
        /** Material search options for ModelImporter.
        */
        enum ModelImporterMaterialSearch
        { Local = 0, RecursiveUp = 1, Everywhere = 2 }
        /** Material import options for ModelImporter.
        */
        enum ModelImporterMaterialLocation
        { External = 0, InPrefab = 1 }
        /** Material import options for ModelImporter.
        */
        enum ModelImporterMaterialImportMode
        { None = 0, ImportStandard = 1, ImportViaMaterialDescription = 2, LegacyImport = 1, Import = 2 }
        /** Tangent space generation options for ModelImporter.
        */
        enum ModelImporterTangentSpaceMode
        { Import = 0, Calculate = 1, None = 2 }
        /** Normal generation options for ModelImporter.
        */
        enum ModelImporterNormals
        { Import = 0, Calculate = 1, None = 2 }
        /** Normal generation options for ModelImporter.
        */
        enum ModelImporterNormalCalculationMode
        { Unweighted_Legacy = 0, Unweighted = 1, AreaWeighted = 2, AngleWeighted = 3, AreaAndAngleWeighted = 4 }
        /** Source of smoothing information for calculation of normals in ModelImporter.
        */
        enum ModelImporterNormalSmoothingSource
        { PreferSmoothingGroups = 0, FromSmoothingGroups = 1, FromAngle = 2, None = 3 }
        /** Vertex tangent generation options for ModelImporter.
        */
        enum ModelImporterTangents
        { Import = 0, CalculateLegacy = 1, CalculateLegacyWithSplitTangents = 4, CalculateMikk = 3, None = 2 }
        /** Format of the imported mesh index buffer data.
        */
        enum ModelImporterIndexFormat
        { Auto = 0, UInt16 = 1, UInt32 = 2 }
        /** Animation compression options for ModelImporter.
        */
        enum ModelImporterAnimationCompression
        { Off = 0, KeyframeReduction = 1, KeyframeReductionAndCompression = 2, Optimal = 3 }
        /** Animation generation options for ModelImporter. These options relate to the legacy Animation system, they should only be used when ModelImporter.animationType==ModelImporterAnimationType.Legacy.
        */
        enum ModelImporterGenerateAnimations
        { None = 0, GenerateAnimations = 4, InRoot = 3, InOriginalRoots = 1, InNodes = 2 }
        /** Humanoid Oversampling available multipliers.
        */
        enum ModelImporterHumanoidOversampling
        { X1 = 1, X2 = 2, X4 = 4, X8 = 8 }
        /** Methods for handling margins during lightmap UV generation in ModelImporter.
        */
        enum ModelImporterSecondaryUVMarginMethod
        { Manual = 0, Calculate = 1 }
        /** Set the Avatar generation mode for ModelImporter.
        */
        enum ModelImporterAvatarSetup
        { NoAvatar = 0, CreateFromThisModel = 1, CopyFromOther = 2 }
        /** Skin weights options for ModelImporter.
        */
        enum ModelImporterSkinWeights
        { Standard = 0, Custom = 1 }
        class HumanTemplate extends UnityEngine.Object
        {
            protected [__keep_incompatibility]: never;
            public Insert ($name: string, $templateName: string) : void
            public Find ($name: string) : string
            public ClearTemplate () : void
            public constructor ()
        }
        /** A Takeinfo object contains all the information needed to describe a take.
        */
        class TakeInfo extends System.ValueType
        {
            protected [__keep_incompatibility]: never;
            /** Take name as define from imported file.
            */
            public name : string
            /** This is the default clip name for the clip generated for this take.
            */
            public defaultClipName : string
            /** Start time in second.
            */
            public startTime : number
            /** Stop time in second.
            */
            public stopTime : number
            /** Start time in second.
            */
            public bakeStartTime : number
            /** Stop time in second.
            */
            public bakeStopTime : number
            /** Sample rate of the take.
            */
            public sampleRate : number
        }
        /** Model importer lets you modify import settings from editor scripts.
        */
        class ModelImporter extends UnityEditor.AssetImporter
        {
            protected [__keep_incompatibility]: never;
            /** Material naming setting.
            */
            public get materialName(): UnityEditor.ModelImporterMaterialName;
            public set materialName(value: UnityEditor.ModelImporterMaterialName);
            /** Existing material search setting.
            */
            public get materialSearch(): UnityEditor.ModelImporterMaterialSearch;
            public set materialSearch(value: UnityEditor.ModelImporterMaterialSearch);
            /** Material import location options.
            */
            public get materialLocation(): UnityEditor.ModelImporterMaterialLocation;
            public set materialLocation(value: UnityEditor.ModelImporterMaterialLocation);
            /** Global scale factor for importing.
            */
            public get globalScale(): number;
            public set globalScale(value: number);
            /** Is useFileUnits supported for this asset.
            */
            public get isUseFileUnitsSupported(): boolean;
            /** Use visibility properties to enable or disable MeshRenderer components.
            */
            public get importVisibility(): boolean;
            public set importVisibility(value: boolean);
            /** Detect file units and import as 1FileUnit=1UnityUnit, otherwise it will import as 1cm=1UnityUnit.
            */
            public get useFileUnits(): boolean;
            public set useFileUnits(value: boolean);
            /** Scaling factor used when useFileScale is set to true (Read-only).
            */
            public get fileScale(): number;
            /** Use FileScale when importing.
            */
            public get useFileScale(): boolean;
            public set useFileScale(value: boolean);
            /** Controls import of BlendShapes.
            */
            public get importBlendShapes(): boolean;
            public set importBlendShapes(value: boolean);
            /** Import BlendShapes deform percent.
            */
            public get importBlendShapeDeformPercent(): boolean;
            public set importBlendShapeDeformPercent(value: boolean);
            /** Controls import of cameras. Basic properties like field of view, near plane distance and far plane distance can be animated.
            */
            public get importCameras(): boolean;
            public set importCameras(value: boolean);
            /** Controls import of lights. Note that because light are defined differently in DCC tools, some light types or properties may not be exported. Basic properties like color and intensity can be animated.
            */
            public get importLights(): boolean;
            public set importLights(value: boolean);
            /** Add to imported meshes.
            */
            public get addCollider(): boolean;
            public set addCollider(value: boolean);
            /** Smoothing angle (in degrees) for calculating normals.
            */
            public get normalSmoothingAngle(): number;
            public set normalSmoothingAngle(value: number);
            /** Swap primary and secondary UV channels when importing.
            */
            public get swapUVChannels(): boolean;
            public set swapUVChannels(value: boolean);
            /** Combine vertices that share the same position in space.
            */
            public get weldVertices(): boolean;
            public set weldVertices(value: boolean);
            /** Computes the axis conversion on geometry and animation for Models defined in an axis system that differs from Unity's (left handed, Z forward, Y-up).
            When enabled, Unity transforms the geometry and animation data in order to convert the axis.
            When disabled, Unity transforms the root GameObject of the hierarchy in order to convert the axis.
            */
            public get bakeAxisConversion(): boolean;
            public set bakeAxisConversion(value: boolean);
            /** Only import bones where they are connected to vertices.
            */
            public get optimizeBones(): boolean;
            public set optimizeBones(value: boolean);
            /** If this is true, any quad faces that exist in the mesh data before it is imported are kept as quads instead of being split into two triangles, for the purposes of tessellation. Set this to false to disable this behavior.
            */
            public get keepQuads(): boolean;
            public set keepQuads(value: boolean);
            /** Format of the imported mesh index buffer data.
            */
            public get indexFormat(): UnityEditor.ModelImporterIndexFormat;
            public set indexFormat(value: UnityEditor.ModelImporterIndexFormat);
            /** If true, always create an explicit Prefab root. Otherwise, if the model has a single root, it is reused as the Prefab root.
            */
            public get preserveHierarchy(): boolean;
            public set preserveHierarchy(value: boolean);
            /** Generate secondary UV set for lightmapping.
            */
            public get generateSecondaryUV(): boolean;
            public set generateSecondaryUV(value: boolean);
            /** Threshold for angle distortion (in degrees) when generating secondary UV.
            */
            public get secondaryUVAngleDistortion(): number;
            public set secondaryUVAngleDistortion(value: number);
            /** Threshold for area distortion when generating secondary UV.
            */
            public get secondaryUVAreaDistortion(): number;
            public set secondaryUVAreaDistortion(value: number);
            /** Hard angle (in degrees) for generating secondary UV.
            */
            public get secondaryUVHardAngle(): number;
            public set secondaryUVHardAngle(value: number);
            /** Method to use for handling margins when generating secondary UV.
            */
            public get secondaryUVMarginMethod(): UnityEditor.ModelImporterSecondaryUVMarginMethod;
            public set secondaryUVMarginMethod(value: UnityEditor.ModelImporterSecondaryUVMarginMethod);
            /** Margin to be left between charts when packing secondary UV.
            */
            public get secondaryUVPackMargin(): number;
            public set secondaryUVPackMargin(value: number);
            /** The minimum lightmap resolution in texels per unit that the associated model is expected to have.
            */
            public get secondaryUVMinLightmapResolution(): number;
            public set secondaryUVMinLightmapResolution(value: number);
            /** The minimum object scale that the associated model is expected to have.
            */
            public get secondaryUVMinObjectScale(): number;
            public set secondaryUVMinObjectScale(value: number);
            /** Animation generation options.
            */
            public get generateAnimations(): UnityEditor.ModelImporterGenerateAnimations;
            public set generateAnimations(value: UnityEditor.ModelImporterGenerateAnimations);
            /** Generates the list of all imported take.
            */
            public get importedTakeInfos(): System.Array$1<UnityEditor.TakeInfo>;
            /** Generates the list of all imported Transforms.
            */
            public get transformPaths(): System.Array$1<string>;
            /** Generates the list of all imported Animations.
            */
            public get referencedClips(): System.Array$1<string>;
            /** Are mesh vertices and indices accessible from script?
            */
            public get isReadable(): boolean;
            public set isReadable(value: boolean);
            /** Options to control the optimization of mesh data during asset import.
            */
            public get meshOptimizationFlags(): UnityEditor.MeshOptimizationFlags;
            public set meshOptimizationFlags(value: UnityEditor.MeshOptimizationFlags);
            /** Optimize the order of polygons in the mesh to make better use of the GPUs internal caches to improve rendering performance.
            */
            public get optimizeMeshPolygons(): boolean;
            public set optimizeMeshPolygons(value: boolean);
            /** Optimize the order of vertices in the mesh to make better use of the GPUs internal caches to improve rendering performance.
            */
            public get optimizeMeshVertices(): boolean;
            public set optimizeMeshVertices(value: boolean);
            /** Skin weights import options.
            */
            public get skinWeights(): UnityEditor.ModelImporterSkinWeights;
            public set skinWeights(value: UnityEditor.ModelImporterSkinWeights);
            /** The maximum number of bones per vertex stored in this mesh data.
            */
            public get maxBonesPerVertex(): number;
            public set maxBonesPerVertex(value: number);
            /** Minimum bone weight to keep.
            */
            public get minBoneWeight(): number;
            public set minBoneWeight(value: number);
            /** Vertex normal import options.
            */
            public get importNormals(): UnityEditor.ModelImporterNormals;
            public set importNormals(value: UnityEditor.ModelImporterNormals);
            /** Source of smoothing information for calculation of normals.
            */
            public get normalSmoothingSource(): UnityEditor.ModelImporterNormalSmoothingSource;
            public set normalSmoothingSource(value: UnityEditor.ModelImporterNormalSmoothingSource);
            /** Blend shape normal import options.
            */
            public get importBlendShapeNormals(): UnityEditor.ModelImporterNormals;
            public set importBlendShapeNormals(value: UnityEditor.ModelImporterNormals);
            /** Normal generation options for ModelImporter.
            */
            public get normalCalculationMode(): UnityEditor.ModelImporterNormalCalculationMode;
            public set normalCalculationMode(value: UnityEditor.ModelImporterNormalCalculationMode);
            /** Vertex tangent import options.
            */
            public get importTangents(): UnityEditor.ModelImporterTangents;
            public set importTangents(value: UnityEditor.ModelImporterTangents);
            /** Bake Inverse Kinematics (IK) when importing.
            */
            public get bakeIK(): boolean;
            public set bakeIK(value: boolean);
            /** Is Bake Inverse Kinematics (IK) supported by this importer.
            */
            public get isBakeIKSupported(): boolean;
            /** If set to false, the importer will not resample curves when possible.
            Read more about.
            Notes:
            - Some unsupported FBX features (such as PreRotation or PostRotation on transforms) will override this setting. In these situations, animation curves will still be resampled even if the setting is disabled. For best results, avoid using PreRotation, PostRotation and GetRotationPivot.
            - This option was introduced in Version 5.3. Prior to this version, Unity's import behaviour was as if this option was always enabled. Therefore enabling the option gives the same behaviour as pre-5.3 animation import.
            */
            public get resampleCurves(): boolean;
            public set resampleCurves(value: boolean);
            /** Is import of tangents supported by this importer.
            */
            public get isTangentImportSupported(): boolean;
            /** Removes constant animation curves with values identical to the object initial scale value.
            */
            public get removeConstantScaleCurves(): boolean;
            public set removeConstantScaleCurves(value: boolean);
            /** Enables strict checks on imported vertex data.
            */
            public get strictVertexDataChecks(): boolean;
            public set strictVertexDataChecks(value: boolean);
            /** Mesh compression setting.
            */
            public get meshCompression(): UnityEditor.ModelImporterMeshCompression;
            public set meshCompression(value: UnityEditor.ModelImporterMeshCompression);
            /** Import animation from file.
            */
            public get importAnimation(): boolean;
            public set importAnimation(value: boolean);
            /** Animation optimization setting.
            */
            public get optimizeGameObjects(): boolean;
            public set optimizeGameObjects(value: boolean);
            /** Animation optimization setting.
            */
            public get extraExposedTransformPaths(): System.Array$1<string>;
            public set extraExposedTransformPaths(value: System.Array$1<string>);
            /** A list of default FBX properties to treat as user properties during OnPostprocessGameObjectWithUserProperties.
            */
            public get extraUserProperties(): System.Array$1<string>;
            public set extraUserProperties(value: System.Array$1<string>);
            /** Animation compression setting.
            */
            public get animationCompression(): UnityEditor.ModelImporterAnimationCompression;
            public set animationCompression(value: UnityEditor.ModelImporterAnimationCompression);
            /** Import animated custom properties from file.
            */
            public get importAnimatedCustomProperties(): boolean;
            public set importAnimatedCustomProperties(value: boolean);
            /** Import animation constraints.
            */
            public get importConstraints(): boolean;
            public set importConstraints(value: boolean);
            /** Allowed error of animation rotation compression.
            */
            public get animationRotationError(): number;
            public set animationRotationError(value: number);
            /** Allowed error of animation position compression.
            */
            public get animationPositionError(): number;
            public set animationPositionError(value: number);
            /** Allowed error of animation scale compression.
            */
            public get animationScaleError(): number;
            public set animationScaleError(value: number);
            /** The default wrap mode for the generated animation clips.
            */
            public get animationWrapMode(): UnityEngine.WrapMode;
            public set animationWrapMode(value: UnityEngine.WrapMode);
            /** Animator generation mode.
            */
            public get animationType(): UnityEditor.ModelImporterAnimationType;
            public set animationType(value: UnityEditor.ModelImporterAnimationType);
            /** Controls how much oversampling is used when importing humanoid animations for retargeting.
            */
            public get humanoidOversampling(): UnityEditor.ModelImporterHumanoidOversampling;
            public set humanoidOversampling(value: UnityEditor.ModelImporterHumanoidOversampling);
            /** The path of the transform used to generation the motion of the animation.
            */
            public get motionNodeName(): string;
            public set motionNodeName(value: string);
            /** The Avatar generation of the imported model.
            */
            public get avatarSetup(): UnityEditor.ModelImporterAvatarSetup;
            public set avatarSetup(value: UnityEditor.ModelImporterAvatarSetup);
            /** Imports the HumanDescription from the given Avatar.
            */
            public get sourceAvatar(): UnityEngine.Avatar;
            public set sourceAvatar(value: UnityEngine.Avatar);
            /** The human description that is used to generate an Avatar during the import process.
            */
            public get humanDescription(): UnityEngine.HumanDescription;
            public set humanDescription(value: UnityEngine.HumanDescription);
            /** Animation clips to split animation into. Additional resources: ModelImporterClipAnimation.
            */
            public get clipAnimations(): System.Array$1<UnityEditor.ModelImporterClipAnimation>;
            public set clipAnimations(value: System.Array$1<UnityEditor.ModelImporterClipAnimation>);
            /** Generate a list of all default animation clip based on TakeInfo.
            */
            public get defaultClipAnimations(): System.Array$1<UnityEditor.ModelImporterClipAnimation>;
            /** When disabled, imported material albedo colors are converted to gamma space. This property should be disabled when using linear color space in Player rendering settings.
            The default value is true.
            */
            public get useSRGBMaterialColor(): boolean;
            public set useSRGBMaterialColor(value: boolean);
            /** Sorts the gameObject hierarchy by name.
            */
            public get sortHierarchyByName(): boolean;
            public set sortHierarchyByName(value: boolean);
            /** Material creation options.
            */
            public get materialImportMode(): UnityEditor.ModelImporterMaterialImportMode;
            public set materialImportMode(value: UnityEditor.ModelImporterMaterialImportMode);
            /** Generate auto mapping if no avatarSetup is provided when importing humanoid animation.
            */
            public get autoGenerateAvatarMappingIfUnspecified(): boolean;
            public set autoGenerateAvatarMappingIfUnspecified(value: boolean);
            /** Creates a mask that matches the model hierarchy, and applies it to the provided ModelImporterClipAnimation.
            * @param $clip Clip to which the mask will be applied.
            */
            public CreateDefaultMaskForClip ($clip: UnityEditor.ModelImporterClipAnimation) : void
            /** Extracts the embedded textures from a model file (such as FBX or SketchUp).
            * @param $folderPath The directory where the textures will be extracted.
            * @returns Returns true if the textures are extracted successfully, otherwise false. 
            */
            public ExtractTextures ($folderPath: string) : boolean
            /** Search the project for matching materials and use them instead of the internal materials.
            * @param $nameOption The name matching option.
            * @param $searchOption The search type option.
            * @returns Returns false if the source file is empty or invalid. Returns true otherwise. 
            */
            public SearchAndRemapMaterials ($nameOption: UnityEditor.ModelImporterMaterialName, $searchOption: UnityEditor.ModelImporterMaterialSearch) : boolean
            public constructor ()
        }
        /** Represents a C# script in the project.
        */
        class MonoImporter extends UnityEditor.AssetImporter
        {
            protected [__keep_incompatibility]: never;
            /** Sets default references for this MonoScript.
            * @param $name An array of names of public fields in the imported MonoScript. The type of each field must be derived from UnityEngine.Object.
            * @param $target An array of objects to use as default values. The size of the array must match the size of the names array. The array can include null values.
            */
            public SetDefaultReferences ($name: System.Array$1<string>, $target: System.Array$1<UnityEngine.Object>) : void
            /** Gets an array of scripts that will be available at runtime.
            * @returns Returns an array of scripts. 
            */
            public static GetAllRuntimeMonoScripts () : System.Array$1<UnityEditor.MonoScript>
            /** Sets the execution order for a MonoScript. This method forces Unity to reimport the MonoImporter for the target script.
            * @param $script The script to set the execution order for.
            * @param $order The execution order for the given MonoScript.
            */
            public static SetExecutionOrder ($script: UnityEditor.MonoScript, $order: number) : void
            /** Gets the execution order for a MonoScript.
            * @param $script The script to retrieve the execution order for.
            * @returns Returns the execution order for the given MonoScript. 
            */
            public static GetExecutionOrder ($script: UnityEditor.MonoScript) : number
            /** Gets the imported MonoScript. If the imported C# file contains multiple classes, the first is returned.
            * @returns Returns the imported script. 
            */
            public GetScript () : UnityEditor.MonoScript
            /** Gets the default value for a reference field in the imported MonoScript.
            * @param $name The name of a public field in the imported MonoScript.
            * @returns The Unity object to use as a default value for the given reference field. 
            */
            public GetDefaultReference ($name: string) : UnityEngine.Object
            /** Sets a custom icon to associate with the imported MonoScript.
            * @param $icon The custom icon to associate with the imported MonoScript. When the value is null, Unity restores the default icon.
            */
            public SetIcon ($icon: UnityEngine.Texture2D) : void
            /** Gets the icon to associate with the imported MonoScript.
            * @returns Returns the custom icon that will be associated with the imported MonoScript. If no custom icon will be associated with the imported MonoScript, returns null. 
            */
            public GetIcon () : UnityEngine.Texture2D
            public constructor ()
        }
        class MovieImporter extends System.Object
        {
            protected [__keep_incompatibility]: never;
            public get quality(): number;
            public set quality(value: number);
            public get linearTexture(): boolean;
            public set linearTexture(value: boolean);
            public get duration(): number;
            public constructor ()
        }
        /** Represents a plugin importer.
        */
        class PluginImporter extends UnityEditor.AssetImporter
        {
            protected [__keep_incompatibility]: never;
            /** Allows you to specify a list of #define directives which controls whether your plug-in should be included.
            */
            public get DefineConstraints(): System.Array$1<string>;
            public set DefineConstraints(value: System.Array$1<string>);
            /** Is a native plugin loaded during startup or on demand?
            */
            public get isPreloaded(): boolean;
            public set isPreloaded(value: boolean);
            /** Is plugin native or managed? Note: C++ libraries with CLR support are treated as native plugins, because Unity cannot load such libraries. You can still access them via P/Invoke.
            */
            public get isNativePlugin(): boolean;
            /** Returns all plugin importers for specfied platform.
            * @param $platform Target platform.
            * @param $platformName Name of the target platform.
            */
            public static GetImporters ($platformName: string) : System.Array$1<UnityEditor.PluginImporter>
            /** Returns all plugin importers for specfied platform.
            * @param $platform Target platform.
            * @param $platformName Name of the target platform.
            */
            public static GetImporters ($platform: UnityEditor.BuildTarget) : System.Array$1<UnityEditor.PluginImporter>
            public static GetImporters ($buildTargetGroup: string, $buildTarget: string) : System.Array$1<UnityEditor.PluginImporter>
            public static GetImporters ($buildTargetGroup: UnityEditor.BuildTargetGroup, $buildTarget: UnityEditor.BuildTarget) : System.Array$1<UnityEditor.PluginImporter>
            /** Clear all plugin settings and set the compatability with Any Platform to true.
            */
            public ClearSettings () : void
            /** Sets compatibility with Any Platform.
            * @param $enable Determines whether the plugin is compatible with Any Platform.
            */
            public SetCompatibleWithAnyPlatform ($enable: boolean) : void
            /** Checks whether a plugin is flagged as being compatible with Any Platform.
            * @returns True if the plugin is flagged as being compatible with Any Platform, otherwise returns false. 
            */
            public GetCompatibleWithAnyPlatform () : boolean
            /** Exclude platform from compatible platforms when Any Platform is set to true.
            * @param $platformName Target platform.
            */
            public SetExcludeFromAnyPlatform ($platformName: string, $excludedFromAny: boolean) : void
            /** Is platform excluded when Any Platform set to true.
            * @param $platform Target platform.
            */
            public GetExcludeFromAnyPlatform ($platformName: string) : boolean
            public SetIncludeInBuildDelegate ($includeInBuildDelegate: UnityEditor.PluginImporter.IncludeInBuildDelegate) : void
            /** Exclude platform from compatible platforms when Any Platform is set to true.
            * @param $platformName Target platform.
            */
            public SetExcludeFromAnyPlatform ($platform: UnityEditor.BuildTarget, $excludedFromAny: boolean) : void
            /** Is platform excluded when Any Platform set to true.
            * @param $platform Target platform.
            */
            public GetExcludeFromAnyPlatform ($platform: UnityEditor.BuildTarget) : boolean
            /** Exclude Editor from compatible platforms when Any Platform is set to true.
            */
            public SetExcludeEditorFromAnyPlatform ($excludedFromAny: boolean) : void
            /** Is Editor excluded when Any Platform is set to true.
            */
            public GetExcludeEditorFromAnyPlatform () : boolean
            /** Sets compatibility with any editor.
            * @param $enable Is plugin compatible with editor.
            */
            public SetCompatibleWithEditor ($enable: boolean) : void
            /** Is plugin compatible with editor.
            */
            public GetCompatibleWithEditor () : boolean
            public GetCompatibleWithEditor ($buildTargetGroup: string, $buildTarget: string) : boolean
            /** Identifies whether or not this plugin will be overridden if a plugin of the same name is placed in your project folder.
            */
            public GetIsOverridable () : boolean
            /** Identifies whether or not this plugin should be included in the current build target.
            */
            public ShouldIncludeInBuild () : boolean
            /** Sets compatibility with the specified platform.
            * @param $platform Target platform.
            * @param $enable Is plugin compatible with specified platform.
            * @param $platformName Target platform.
            */
            public SetCompatibleWithPlatform ($platform: UnityEditor.BuildTarget, $enable: boolean) : void
            /** Is plugin compatible with specified platform.
            * @param $platform Target platform.
            */
            public GetCompatibleWithPlatform ($platform: UnityEditor.BuildTarget) : boolean
            /** Sets compatibility with the specified platform.
            * @param $platform Target platform.
            * @param $enable Is plugin compatible with specified platform.
            * @param $platformName Target platform.
            */
            public SetCompatibleWithPlatform ($platformName: string, $enable: boolean) : void
            /** Is plugin compatible with specified platform.
            * @param $platform Target platform.
            */
            public GetCompatibleWithPlatform ($platformName: string) : boolean
            /** Sets platform specific data.
            * @param $platform Target platform.
            * @param $key Key value for data.
            * @param $value Data.
            */
            public SetPlatformData ($platform: UnityEditor.BuildTarget, $key: string, $value: string) : void
            /** Get platform specific data.
            * @param $platform Target platform.
            * @param $key Key value for data.
            */
            public GetPlatformData ($platform: UnityEditor.BuildTarget, $key: string) : string
            /** Sets platform specific data.
            * @param $platform Target platform.
            * @param $key Key value for data.
            * @param $value Data.
            */
            public SetPlatformData ($platformName: string, $key: string, $value: string) : void
            /** Get platform specific data.
            * @param $platform Target platform.
            * @param $key Key value for data.
            */
            public GetPlatformData ($platformName: string, $key: string) : string
            /** Sets editor specific data.
            * @param $key Key value for data.
            * @param $value Data.
            */
            public SetEditorData ($key: string, $value: string) : void
            /** Returns editor specific data for specified key.
            * @param $key Key value for data.
            */
            public GetEditorData ($key: string) : string
            /** Returns all plugin importers for all platforms.
            */
            public static GetAllImporters () : System.Array$1<UnityEditor.PluginImporter>
            /** Sets the custom icon to associate with a MonoScript imported by a managed plugin.
            * @param $className The fully qualified class name of a MonoScript imported by this managed plugin.
            * @param $icon The custom icon to associate with the imported MonoScript. When the value is null, Unity restores the default icon.
            */
            public SetIcon ($className: string, $icon: UnityEngine.Texture2D) : void
            /** Gets the custom icon to associate with a MonoScript at import time.
            * @param $className The fully qualified class name of a MonoScript imported by this plugin.
            * @returns Returns the custom icon that will be associated with the imported MonoScript. If no custom icon will be associated with the imported MonoScript, returns null. 
            */
            public GetIcon ($className: string) : UnityEngine.Texture2D
            public constructor ()
        }
        /** Video codec to use when importing video clips.
        */
        enum VideoCodec
        { Auto = 0, H264 = 1, H265 = 3, VP8 = 2 }
        /** Bit rate after the clip is transcoded.
        */
        enum VideoBitrateMode
        { Low = 0, Medium = 1, High = 2 }
        /** Options for the encoder profile.
        */
        enum VideoEncodingProfile
        { H264Baseline = 0, H264Main = 1, H264High = 2 }
        /** Describes how the fields in the image, if any, should be interpreted.
        */
        enum VideoDeinterlaceMode
        { Off = 0, Even = 1, Odd = 2 }
        /** How the video clip's images will be resized during transcoding.
        */
        enum VideoResizeMode
        { OriginalSize = 0, ThreeQuarterRes = 1, HalfRes = 2, QuarterRes = 3, Square1024 = 4, Square512 = 5, Square256 = 6, CustomSize = 7 }
        /** Controls the imported clip's internal resize to save space at the cost of blurrier images.
        */
        enum VideoSpatialQuality
        { LowSpatialQuality = 0, MediumSpatialQuality = 1, HighSpatialQuality = 2 }
        /** Methods to compensate for aspect ratio discrepancies between the source resolution and the wanted encoding size.
        */
        enum VideoEncodeAspectRatio
        { NoScaling = 0, Stretch = 5 }
        /** Importer settings that can have platform-specific values.
        */
        class VideoImporterTargetSettings extends System.Object
        {
            protected [__keep_incompatibility]: never;
            /** Controls whether the movie file will be transcoded during import. When transcoding is not enabled, the file will be imported in its original format.
            */
            public enableTranscoding : boolean
            /** Codec that the resulting VideoClip will use.
            */
            public codec : UnityEditor.VideoCodec
            /** How to resize the images when going into the imported clip.
            */
            public resizeMode : UnityEditor.VideoResizeMode
            /** How the aspect ratio discrepancies, if any, will be handled if the chosen import resolution has a different ratio than the source.
            */
            public aspectRatio : UnityEditor.VideoEncodeAspectRatio
            /** Width of the transcoded clip when the resizeMode is set to custom.
            */
            public customWidth : number
            /** Height of the transcoded clip when the resizeMode is set to custom.
            */
            public customHeight : number
            /** Bit rate type for the transcoded clip.
            */
            public bitrateMode : UnityEditor.VideoBitrateMode
            /** Controls an internal image resize, resulting in blurrier images but smaller image dimensions and file size.
            */
            public spatialQuality : UnityEditor.VideoSpatialQuality
            public constructor ()
        }
        /** VideoClipImporter lets you modify Video.VideoClip import settings from Editor scripts.
        */
        class VideoClipImporter extends UnityEditor.AssetImporter
        {
            protected [__keep_incompatibility]: never;
            /** Size in bytes of the file before importing.
            */
            public get sourceFileSize(): bigint;
            /** Size in bytes of the file once imported.
            */
            public get outputFileSize(): bigint;
            /** Number of frames in the clip.
            */
            public get frameCount(): number;
            /** Frame rate of the clip.
            */
            public get frameRate(): number;
            /** Whether to keep the alpha from the source into the transcoded clip.
            */
            public get keepAlpha(): boolean;
            public set keepAlpha(value: boolean);
            /** True if the source file has a channel for per-pixel transparency.
            */
            public get sourceHasAlpha(): boolean;
            /** Images are deinterlaced during transcode.  This tells the importer how to interpret fields in the source, if any.
            */
            public get deinterlaceMode(): UnityEditor.VideoDeinterlaceMode;
            public set deinterlaceMode(value: UnityEditor.VideoDeinterlaceMode);
            /** Apply a vertical flip during import.
            */
            public get flipVertical(): boolean;
            public set flipVertical(value: boolean);
            /** Apply a horizontal flip during import.
            */
            public get flipHorizontal(): boolean;
            public set flipHorizontal(value: boolean);
            /** Import audio tracks from source file.
            */
            public get importAudio(): boolean;
            public set importAudio(value: boolean);
            /** Whether the imported clip contains sRGB color data.
            */
            public get sRGBClip(): boolean;
            public set sRGBClip(value: boolean);
            /** Default values for the platform-specific import settings.
            */
            public get defaultTargetSettings(): UnityEditor.VideoImporterTargetSettings;
            public set defaultTargetSettings(value: UnityEditor.VideoImporterTargetSettings);
            /** Whether the preview is currently playing.
            */
            public get isPlayingPreview(): boolean;
            /** Number of audio tracks in the source file.
            */
            public get sourceAudioTrackCount(): number;
            /** Numerator of the pixel aspect ratio (num:den).
            */
            public get pixelAspectRatioNumerator(): number;
            /** Denominator of the pixel aspect ratio (num:den).
            */
            public get pixelAspectRatioDenominator(): number;
            /** Returns true if transcoding was skipped during import, false otherwise. (Read Only)
            When VideoImporterTargetSettings.enableTranscoding is set to true, the resulting transcoding operation done at import time may be quite long, up to many hours depending on source resolution and content duration. An option to skip this process is offered in the asset import progress bar. When skipped, the transcoding instead provides a non-transcoded verision of the asset. However, the importer settings stay intact so this property can be inspected to detect the incoherence with the generated artifact.
            Re-importing without stopping the transcode process, or with transcode turned off, causes this property to become false.
            */
            public get transcodeSkipped(): boolean;
            /** Returns the platform-specific import settings for the specified platform.
            * @param $platform Platform name.
            * @returns The platform-specific import settings. Throws an exception if the platform is unknown. 
            */
            public GetTargetSettings ($platform: string) : UnityEditor.VideoImporterTargetSettings
            /** Sets the platform-specific import settings for the specified platform.
            * @param $platform Platform name.
            * @param $settings The new platform-specific import settings. Throws an exception if the platform is unknown.
            */
            public SetTargetSettings ($platform: string, $settings: UnityEditor.VideoImporterTargetSettings) : void
            /** Clear the platform-specific import settings for the specified platform, causing them to go back to the default settings.
            * @param $platform Platform name.
            */
            public ClearTargetSettings ($platform: string) : void
            /** Starts preview playback.
            */
            public PlayPreview () : void
            /** Stops preview playback.
            */
            public StopPreview () : void
            /** Returns a texture with the transcoded clip's current frame.
            Returns frame 0 when not playing, and frame at current time when playing.
            * @returns Texture containing the current frame. 
            */
            public GetPreviewTexture () : UnityEngine.Texture
            /** Get the full name of the resize operation for the specified resize mode.
            * @param $mode Mode for which the width is queried.
            * @returns Name for the specified resize mode. 
            */
            public GetResizeModeName ($mode: UnityEditor.VideoResizeMode) : string
            /** Get the resulting width of the resize operation for the specified resize mode.
            * @param $mode Mode for which the width is queried.
            * @returns Width for the specified resize mode. 
            */
            public GetResizeWidth ($mode: UnityEditor.VideoResizeMode) : number
            /** Get the resulting height of the resize operation for the specified resize mode.
            * @param $mode Mode for which the height is queried.
            * @returns Height for the specified resize mode. 
            */
            public GetResizeHeight ($mode: UnityEditor.VideoResizeMode) : number
            /** Number of audio channels in the specified source track.
            * @param $audioTrackIdx Index of the audio track to query.
            * @returns Number of channels. 
            */
            public GetSourceAudioChannelCount ($audioTrackIdx: number) : number
            /** Sample rate of the specified audio track.
            * @param $audioTrackIdx Index of the audio track to query.
            * @returns Sample rate in Hertz. 
            */
            public GetSourceAudioSampleRate ($audioTrackIdx: number) : number
            /** Performs a value comparison with another VideoClipImporter.
            * @param $rhs The importer to compare with.
            * @returns Returns true if the settings for both VideoClipImporters match. Returns false otherwise. 
            */
            public Equals ($rhs: UnityEditor.VideoClipImporter) : boolean
            public constructor ()
        }
        /** Utility functions for working with JSON data and engine objects.
        */
        class EditorJsonUtility extends System.Object
        {
            protected [__keep_incompatibility]: never;
            /** Generate a JSON representation of an object.
            * @param $obj The object to convert to JSON form.
            * @param $prettyPrint If true, format the output for readability. If false, format the output for minimum size. Default is false.
            * @returns The object's data in JSON format. 
            */
            public static ToJson ($obj: any) : string
            /** Generate a JSON representation of an object.
            * @param $obj The object to convert to JSON form.
            * @param $prettyPrint If true, format the output for readability. If false, format the output for minimum size. Default is false.
            * @returns The object's data in JSON format. 
            */
            public static ToJson ($obj: any, $prettyPrint: boolean) : string
            /** Overwrite data in an object by reading from its JSON representation.
            * @param $json The JSON representation of the object.
            * @param $objectToOverwrite The object to overwrite.
            */
            public static FromJsonOverwrite ($json: string, $objectToOverwrite: any) : void
        }
        /** An attribute to the assembly for Localization.
        */
        class LocalizationAttribute extends System.Attribute implements System.Runtime.InteropServices._Attribute
        {
            protected [__keep_incompatibility]: never;
            public constructor ($locGroupName?: string)
        }
        /** Class for text localization.
        */
        class L10n extends System.Object
        {
            protected [__keep_incompatibility]: never;
            /** This function referes a po file like ja.po as an asset. Asmdef and [assembly: UnityEditor.Localization] is needed.
            * @param $str Original text, basically English.
            * @returns Localized text. 
            */
            public static Tr ($str: string) : string
            public static Tr ($str_list: System.Array$1<string>) : System.Array$1<string>
            public static Tr ($str: string, $groupName: string) : string
            public static TrPath ($path: string) : string
            public static TextContent ($text: string, $tooltip?: string, $icon?: UnityEngine.Texture) : UnityEngine.GUIContent
            public static TextContent ($text: string, $tooltip: string, $iconName: string) : UnityEngine.GUIContent
            public static TextContent ($text: string, $icon: UnityEngine.Texture) : UnityEngine.GUIContent
            public static TextContentWithIcon ($text: string, $icon: UnityEngine.Texture) : UnityEngine.GUIContent
            public static TextContentWithIcon ($text: string, $iconName: string) : UnityEngine.GUIContent
            public static TextContentWithIcon ($text: string, $tooltip: string, $iconName: string) : UnityEngine.GUIContent
            public static TextContentWithIcon ($text: string, $tooltip: string, $icon: UnityEngine.Texture) : UnityEngine.GUIContent
            public static TextContentWithIcon ($text: string, $tooltip: string, $messageType: UnityEditor.MessageType) : UnityEngine.GUIContent
            public static TextContentWithIcon ($text: string, $messageType: UnityEditor.MessageType) : UnityEngine.GUIContent
            public static IconContent ($iconName: string, $tooltip?: string) : UnityEngine.GUIContent
            public static IconContent ($icon: UnityEngine.Texture, $tooltip?: string) : UnityEngine.GUIContent
            public static TempContent ($t: string) : UnityEngine.GUIContent
            public static TempContent ($texts: System.Array$1<string>) : System.Array$1<UnityEngine.GUIContent>
            public static TempContent ($texts: System.Array$1<string>, $tooltips: System.Array$1<string>) : System.Array$1<UnityEngine.GUIContent>
        }
        /** This provides an auto dispose Localization system. This can be called recursively.
        */
        class LocalizationGroup extends System.Object implements System.IDisposable
        {
            protected [__keep_incompatibility]: never;
            /** A current group name for the localization.
            */
            public get locGroupName(): string;
            /** Dispose current state.
            */
            public Dispose () : void
            public constructor ()
            public constructor ($behaviour: UnityEngine.Behaviour)
            public constructor ($type: System.Type)
            public constructor ($obj: any)
        }
        /** Use the ProfilerWindow class for interactions with the Modules.
        */
        class ProfilerWindow extends UnityEditor.EditorWindow implements UnityEditor.IHasCustomMenu, UnityEditor.Profiling.ProfilerModulesDropdownWindow.IResponder, Unity.Profiling.Editor.UI.BottlenecksChartViewController.IResponder, UnityEditorInternal.IProfilerWindowController
        {
            protected [__keep_incompatibility]: never;
            /** The identifier of the.
            */
            public static cpuModuleIdentifier : string
            /** The identifier of the.
            */
            public static gpuModuleIdentifier : string
            /** The identifier of the that is currently selected in the Profiler Window, or null if no Module is currently selected.
            */
            public get selectedModuleIdentifier(): string;
            /** The zero-based index of the frame currently selected in the Profiler Window.
            */
            public get selectedFrameIndex(): bigint;
            public set selectedFrameIndex(value: bigint);
            /** The index of the first frame available in the Profiler Window, or -1 if no frames are available.
            */
            public get firstAvailableFrameIndex(): bigint;
            /** The index of the last frame available in the Profiler Window, or -1 if no frames are available.
            */
            public get lastAvailableFrameIndex(): bigint;
            public add_SelectedFrameIndexChanged ($value: System.Action$1<bigint>) : void
            public remove_SelectedFrameIndexChanged ($value: System.Action$1<bigint>) : void
            /** Retrieves an IProfilerFrameTimeViewSampleSelectionController object that you can use to control the selection in.
            * @param $moduleIdentifier The identifier of the Profiler module whose selection controller you want to retrieve. Only ProfilerWindow.cpuModuleIdentifier and ProfilerWindow.gpuModuleIdentifier are currently valid, other options will throw and ArgumentException.
            * @returns An IProfilerFrameTimeViewSampleSelectionController object with which you can use to control the selection of the specified Profiler module. 
            */
            public GetFrameTimeViewSampleSelectionController ($moduleIdentifier: string) : UnityEditor.Profiling.IProfilerFrameTimeViewSampleSelectionController
            /** Selects the newest frame that was profiled and if newer frames are profiled or loaded into the profiler window, the Profiler Window will keep showing the newest frame of these.
            */
            public SelectAndStayOnLatestFrame () : void
            /** Adds your custom menu items to an Editor Window.
            */
            public AddItemsToMenu ($menu: UnityEditor.GenericMenu) : void
        }
        class DebuggerEventListHandler extends System.Object
        {
            protected [__keep_incompatibility]: never;
            public items : System.Collections.Generic.List$1<string>
            public csharp_items : System.Array$1<UnityEngine.Analytics.Analytic>
            public static add_analyticSent ($value: System.Action$1<UnityEngine.Analytics.Analytic>) : void
            public static remove_analyticSent ($value: System.Action$1<UnityEngine.Analytics.Analytic>) : void
            public static AddCSharpAnalytic ($analytic: UnityEngine.Analytics.Analytic) : void
            public static AddAnalytic ($analytic: string) : void
            public static ClearEventList () : void
            public static fetchEventList () : System.Collections.Generic.List$1<string>
            public static fetchEventList ($processEventListItems: System.Action$1<string>) : void
            public constructor ()
        }
        /** Editor API for the EditorAnalytics feature.
        */
        class EditorAnalytics extends System.Object
        {
            protected [__keep_incompatibility]: never;
            /** Returns true when EditorAnalytics is enabled.
            */
            public static get enabled(): boolean;
            public static set enabled(value: boolean);
            public static get recordEventsEnabled(): boolean;
            public static set recordEventsEnabled(value: boolean);
            public static get SendAnalyticsEventsImmediately(): boolean;
            public static set SendAnalyticsEventsImmediately(value: boolean);
            public static SendAnalytic ($analytic: UnityEngine.Analytics.IAnalytic) : UnityEngine.Analytics.AnalyticsResult
            public static SendAnalytic ($analytic: UnityEngine.Analytics.Analytic, $assembly: System.Reflection.Assembly) : UnityEngine.Analytics.AnalyticsResult
        }
        /** Provides access to Editor Analytics session information.
        */
        class EditorAnalyticsSessionInfo extends System.Object
        {
            protected [__keep_incompatibility]: never;
            /** A random, unique GUID identifying the current Editor session.
            */
            public static get id(): bigint;
            /** The number of Editor sessions that have occurred since the current instance of the Unity Editor was installed.
            */
            public static get sessionCount(): bigint;
            /** The length of the current session, in milliseconds.
            */
            public static get elapsedTime(): bigint;
            /** The total time, in milliseconds, that the Editor has been in focus during the current session.
            */
            public static get focusedElapsedTime(): bigint;
            /** The total time, in milliseconds, that the Editor has been in playmode during the current session.
            */
            public static get playbackElapsedTime(): bigint;
            /** The total time, in milliseconds, that the user interacted with the Editor since the beginning of the current session.
            */
            public static get activeElapsedTime(): bigint;
            /** A random GUID uniquely identifying an Editor installation.
            */
            public static get userId(): string;
        }
    }
    namespace UnityEditorInternal {
        class AssemblyDefinitionImporter extends UnityEditor.AssetImporter
        {
            protected [__keep_incompatibility]: never;
            public constructor ()
        }
        class AssemblyDefinitionAsset extends UnityEngine.TextAsset
        {
            protected [__keep_incompatibility]: never;
        }
        class AssemblyDefinitionReferenceImporter extends UnityEditor.AssetImporter
        {
            protected [__keep_incompatibility]: never;
            public constructor ()
        }
        class AssemblyDefinitionReferenceAsset extends UnityEngine.TextAsset
        {
            protected [__keep_incompatibility]: never;
        }
        class AssetStore extends System.Object
        {
            protected [__keep_incompatibility]: never;
            public static Open ($assetStoreURL: string) : void
            public constructor ()
        }
        class AssetStoreToolUtils extends System.Object
        {
            protected [__keep_incompatibility]: never;
            public constructor ()
        }
        class BlendTreePreviewUtility extends System.Object
        {
            protected [__keep_incompatibility]: never;
            public static GetRootBlendTreeChildWeights ($animator: UnityEngine.Animator, $layerIndex: number, $stateHash: number, $weightArray: System.Array$1<number>) : void
            public static CalculateRootBlendTreeChildWeights ($animator: UnityEngine.Animator, $layerIndex: number, $stateHash: number, $weightArray: System.Array$1<number>, $blendX: number, $blendY: number) : void
            public static CalculateBlendTexture ($animator: UnityEngine.Animator, $layerIndex: number, $stateHash: number, $blendTexture: UnityEngine.Texture2D, $weightTextures: System.Array$1<UnityEngine.Texture2D>, $rect: UnityEngine.Rect) : void
            public constructor ()
        }
        class ComponentUtility extends System.Object
        {
            protected [__keep_incompatibility]: never;
            public static MoveComponentUp ($component: UnityEngine.Component) : boolean
            public static MoveComponentDown ($component: UnityEngine.Component) : boolean
            public static CopyComponent ($component: UnityEngine.Component) : boolean
            public static PasteComponentValues ($component: UnityEngine.Component) : boolean
            public static PasteComponentAsNew ($go: UnityEngine.GameObject) : boolean
            public static DestroyComponentsMatching ($dst: UnityEngine.GameObject, $componentFilter: UnityEditorInternal.ComponentUtility.IsDesiredComponent) : void
            public static ReplaceComponentsIfDifferent ($src: UnityEngine.GameObject, $dst: UnityEngine.GameObject, $componentFilter: UnityEditorInternal.ComponentUtility.IsDesiredComponent) : void
            public constructor ()
        }
        class GenerateIconsWithMipLevels extends System.Object
        {
            protected [__keep_incompatibility]: never;
            public static GenerateAllIconsWithMipLevels () : void
            public static VerifyIconPath ($assetPath: string, $logError: boolean) : boolean
            public static GenerateSelectedIconsWithMips () : void
            public static GenerateIconWithMipLevels ($assetPath: string, $mipTextures: System.Collections.Generic.Dictionary$2<number, UnityEngine.Texture2D>, $fileInfo: System.IO.FileInfo) : void
            public static MipLevelForAssetPath ($assetPath: string, $separator: string) : number
            public constructor ()
        }
        class ReorderableList extends System.Object
        {
            protected [__keep_incompatibility]: never;
            public drawHeaderCallback : UnityEditorInternal.ReorderableList.HeaderCallbackDelegate
            public drawFooterCallback : UnityEditorInternal.ReorderableList.FooterCallbackDelegate
            public drawElementCallback : UnityEditorInternal.ReorderableList.ElementCallbackDelegate
            public drawElementBackgroundCallback : UnityEditorInternal.ReorderableList.ElementCallbackDelegate
            public drawNoneElementCallback : UnityEditorInternal.ReorderableList.DrawNoneElementCallback
            public elementHeightCallback : UnityEditorInternal.ReorderableList.ElementHeightCallbackDelegate
            public onReorderCallbackWithDetails : UnityEditorInternal.ReorderableList.ReorderCallbackDelegateWithDetails
            public onReorderCallback : UnityEditorInternal.ReorderableList.ReorderCallbackDelegate
            public onSelectCallback : UnityEditorInternal.ReorderableList.SelectCallbackDelegate
            public onAddCallback : UnityEditorInternal.ReorderableList.AddCallbackDelegate
            public onAddDropdownCallback : UnityEditorInternal.ReorderableList.AddDropdownCallbackDelegate
            public onRemoveCallback : UnityEditorInternal.ReorderableList.RemoveCallbackDelegate
            public onMouseDragCallback : UnityEditorInternal.ReorderableList.DragCallbackDelegate
            public onMouseUpCallback : UnityEditorInternal.ReorderableList.SelectCallbackDelegate
            public onCanRemoveCallback : UnityEditorInternal.ReorderableList.CanRemoveCallbackDelegate
            public onCanAddCallback : UnityEditorInternal.ReorderableList.CanAddCallbackDelegate
            public onChangedCallback : UnityEditorInternal.ReorderableList.ChangedCallbackDelegate
            public displayAdd : boolean
            public displayRemove : boolean
            public elementHeight : number
            public headerHeight : number
            public footerHeight : number
            public showDefaultBackground : boolean
            public static get defaultBehaviours(): UnityEditorInternal.ReorderableList.Defaults;
            public get serializedProperty(): UnityEditor.SerializedProperty;
            public set serializedProperty(value: UnityEditor.SerializedProperty);
            public get list(): System.Collections.IList;
            public set list(value: System.Collections.IList);
            public get index(): number;
            public set index(value: number);
            public get selectedIndices(): System.Collections.ObjectModel.ReadOnlyCollection$1<number>;
            public get multiSelect(): boolean;
            public set multiSelect(value: boolean);
            public get draggable(): boolean;
            public set draggable(value: boolean);
            public get count(): number;
            public static GetReorderableListFromSerializedProperty ($prop: UnityEditor.SerializedProperty) : UnityEditorInternal.ReorderableList
            public ClearSelection () : void
            public Select ($index: number, $append?: boolean) : void
            public SelectRange ($indexFrom: number, $indexTo: number) : void
            public IsSelected ($index: number) : boolean
            public Deselect ($index: number) : void
            public DoLayoutList () : void
            public DoList ($rect: UnityEngine.Rect) : void
            public DoList ($rect: UnityEngine.Rect, $visibleRect: UnityEngine.Rect) : void
            public GetHeight () : number
            public GrabKeyboardFocus () : void
            public ReleaseKeyboardFocus () : void
            public HasKeyboardControl () : boolean
            public constructor ($elements: System.Collections.IList, $elementType: System.Type)
            public constructor ($elements: System.Collections.IList, $elementType: System.Type, $draggable: boolean, $displayHeader: boolean, $displayAddButton: boolean, $displayRemoveButton: boolean)
            public constructor ($serializedObject: UnityEditor.SerializedObject, $elements: UnityEditor.SerializedProperty)
            public constructor ($serializedObject: UnityEditor.SerializedObject, $elements: UnityEditor.SerializedProperty, $draggable: boolean, $displayHeader: boolean, $displayAddButton: boolean, $displayRemoveButton: boolean)
        }
        class EditMode extends System.Object
        {
            protected [__keep_incompatibility]: never;
            public static onEditModeEndDelegate : UnityEditorInternal.EditMode.OnEditModeStopFunc
            public static onEditModeStartDelegate : UnityEditorInternal.EditMode.OnEditModeStartFunc
            public static get editMode(): UnityEditorInternal.EditMode.SceneViewEditMode;
            public static IsOwner ($editor: UnityEditor.Editor) : boolean
            public static OnSelectionChange () : void
            public static QuitEditMode () : void
            public static DoEditModeInspectorModeButton ($mode: UnityEditorInternal.EditMode.SceneViewEditMode, $label: string, $icon: UnityEngine.GUIContent, $getBoundsOfTargets: System.Func$1<UnityEngine.Bounds>, $caller: UnityEditor.Editor) : void
            public static DoInspectorToolbar ($modes: System.Array$1<UnityEditorInternal.EditMode.SceneViewEditMode>, $guiContents: System.Array$1<UnityEngine.GUIContent>, $getBoundsOfTargets: System.Func$1<UnityEngine.Bounds>, $caller: UnityEditor.Editor) : void
            public static ChangeEditMode ($mode: UnityEditorInternal.EditMode.SceneViewEditMode, $bounds: UnityEngine.Bounds, $caller: UnityEditor.Editor) : void
            public constructor ()
        }
        class MinMaxCurvePropertyDrawer extends UnityEditor.PropertyDrawer
        {
            protected [__keep_incompatibility]: never;
            public constructor ()
        }
        class MinMaxGradientPropertyDrawer extends UnityEditor.PropertyDrawer
        {
            protected [__keep_incompatibility]: never;
            public constructor ()
        }
        class UnityEventDrawer extends UnityEditor.PropertyDrawer
        {
            protected [__keep_incompatibility]: never;
            public OnGUI ($position: UnityEngine.Rect, $property: UnityEditor.SerializedProperty, $label: UnityEngine.GUIContent) : void
            public OnGUI ($position: UnityEngine.Rect) : void
            public static IsPersistantListenerValid ($dummyEvent: UnityEngine.Events.UnityEventBase, $methodName: string, $uObject: UnityEngine.Object, $modeEnum: UnityEngine.Events.PersistentListenerMode, $argumentType: System.Type) : boolean
            public constructor ()
        }
        class MonoScripts extends System.Object
        {
            protected [__keep_incompatibility]: never;
            public static CreateMonoScript ($scriptContents: string, $className: string, $nameSpace: string, $assemblyName: string, $isEditorScript: boolean) : UnityEditor.MonoScript
        }
        enum CanAppendBuild
        { Unsupported = 0, Yes = 1, No = 2 }
        enum DllType
        { Unknown = 0, Native = 1, UnknownManaged = 2, ManagedNET35 = 3, ManagedNET40 = 4, WinMDNative = 5, WinMDNET40 = 6 }
        class LoadFileAndForgetOperation extends UnityEngine.AsyncOperation
        {
            protected [__keep_incompatibility]: never;
            public get Result(): UnityEngine.Object;
            public constructor ()
        }
        class InternalEditorUtility extends System.Object
        {
            protected [__keep_incompatibility]: never;
            public static get isHumanControllingUs(): boolean;
            public static get isApplicationActive(): boolean;
            public static get inBatchMode(): boolean;
            public static get expandedProjectWindowItems(): System.Array$1<number>;
            public static set expandedProjectWindowItems(value: System.Array$1<number>);
            public static get tags(): System.Array$1<string>;
            public static get layers(): System.Array$1<string>;
            public static get unityPreferencesFolder(): string;
            public static get defaultScreenWidth(): number;
            public static get defaultScreenHeight(): number;
            public static get defaultWebScreenWidth(): number;
            public static get defaultWebScreenHeight(): number;
            public static get remoteScreenWidth(): number;
            public static get remoteScreenHeight(): number;
            public static BumpMapSettingsFixingWindowReportResult ($result: number) : void
            public static PerformUnmarkedBumpMapTexturesFixing () : boolean
            public static BumpMapTextureNeedsFixingInternal ($material: UnityEngine.Material, $propName: string, $flaggedAsNormal: boolean) : boolean
            public static FixNormalmapTextureInternal ($material: UnityEngine.Material, $propName: string) : void
            public static GetEditorAssemblyPath () : string
            public static GetEngineAssemblyPath () : string
            public static GetEngineCoreModuleAssemblyPath () : string
            public static CalculateHashForObjectsAndDependencies ($objects: System.Array$1<UnityEngine.Object>) : string
            public static ExecuteCommandOnKeyWindow ($commandName: string) : void
            public static InstantiateMaterialsInEditMode ($renderer: UnityEngine.Renderer) : System.Array$1<UnityEngine.Material>
            public static SwitchSkinAndRepaintAllViews () : void
            public static RepaintAllViews () : void
            public static GetIsInspectorExpanded ($obj: UnityEngine.Object) : boolean
            public static SetIsInspectorExpanded ($obj: UnityEngine.Object, $isExpanded: boolean) : void
            public static LoadAssemblyWrapper ($dllName: string, $dllLocation: string) : System.Reflection.Assembly
            public static SaveToSerializedFileAndForget ($obj: System.Array$1<UnityEngine.Object>, $path: string, $allowTextSerialization: boolean) : void
            public static LoadSerializedFileAndForget ($path: string) : System.Array$1<UnityEngine.Object>
            public static LoadSerializedFileAndForgetAsync ($path: string, $localIdentifierInFile: bigint, $offsetInFile?: bigint, $fileSize?: bigint, $destScene?: UnityEngine.SceneManagement.Scene) : UnityEditorInternal.LoadFileAndForgetOperation
            public static ProjectWindowDrag ($property: UnityEditor.HierarchyProperty, $perform: boolean) : UnityEditor.DragAndDropVisualMode
            public static HierarchyWindowDrag ($property: UnityEditor.HierarchyProperty, $dropMode: UnityEditor.HierarchyDropFlags, $parentForDraggedObjects: UnityEngine.Transform, $perform: boolean) : UnityEditor.DragAndDropVisualMode
            public static HierarchyWindowDragByID ($dropTargetInstanceID: number, $dropMode: UnityEditor.HierarchyDropFlags, $parentForDraggedObjects: UnityEngine.Transform, $perform: boolean) : UnityEditor.DragAndDropVisualMode
            public static SceneViewDrag ($dropUpon: UnityEngine.Object, $worldPosition: UnityEngine.Vector3, $viewportPosition: UnityEngine.Vector2, $parentForDraggedObjects: UnityEngine.Transform, $perform: boolean) : UnityEditor.DragAndDropVisualMode
            public static SetRectTransformTemporaryRect ($rectTransform: UnityEngine.RectTransform, $rect: UnityEngine.Rect) : void
            public static HasPro () : boolean
            public static HasFreeLicense () : boolean
            public static HasEduLicense () : boolean
            public static HasAdvancedLicenseOnBuildTarget ($target: UnityEditor.BuildTarget) : boolean
            public static IsMobilePlatform ($target: UnityEditor.BuildTarget) : boolean
            public static GetBoundsOfDesktopAtPoint ($pos: UnityEngine.Vector2) : UnityEngine.Rect
            public static RemoveTag ($tag: string) : void
            public static AddTag ($tag: string) : void
            public static ConcatenatedLayersMaskToLayerMask ($concatenatedLayersMask: number) : UnityEngine.LayerMask
            public static TryOpenErrorFileFromConsole ($path: string, $line: number, $column: number) : boolean
            public static TryOpenErrorFileFromConsole ($path: string, $line: number) : boolean
            public static LayerMaskToConcatenatedLayersMask ($mask: UnityEngine.LayerMask) : number
            public static GetSpriteOuterUV ($sprite: UnityEngine.Sprite, $getAtlasData: boolean) : UnityEngine.Vector4
            public static GetObjectFromInstanceID ($instanceID: number) : UnityEngine.Object
            public static GetTypeWithoutLoadingObject ($instanceID: number) : System.Type
            public static GetLoadedObjectFromInstanceID ($instanceID: number) : UnityEngine.Object
            public static GetLayerName ($layer: number) : string
            public static GetAssetsFolder () : string
            public static GetEditorFolder () : string
            public static IsInEditorFolder ($path: string) : boolean
            public static ReloadWindowLayoutMenu () : void
            public static RevertFactoryLayoutSettings ($quitOnCancel: boolean) : void
            public static LoadDefaultLayout () : void
            public static GetFullUnityVersion () : string
            public static GetUnityVersion () : System.Version
            public static GetUnityVersionDigits () : string
            public static GetUnityBuildBranch () : string
            public static GetUnityBuildHash () : string
            public static GetUnityDisplayVersion () : string
            public static GetUnityDisplayVersionVerbose () : string
            public static GetUnityVersionDate () : number
            public static GetUnityRevision () : number
            public static IsUnityBeta () : boolean
            public static GetUnityCopyright () : string
            public static GetLicenseInfo () : string
            public static GetAuthToken () : string
            public static OpenEditorConsole () : void
            public static GetGameObjectInstanceIDFromComponent ($instanceID: number) : number
            public static ReadScreenPixel ($pixelPos: UnityEngine.Vector2, $sizex: number, $sizey: number) : System.Array$1<UnityEngine.Color>
            public static ReadScreenPixelUnderCursor ($cursorPosHint: UnityEngine.Vector2, $sizex: number, $sizey: number) : System.Array$1<UnityEngine.Color>
            public static SetGpuDeviceAndRecreateGraphics ($index: number, $name: string) : void
            public static IsGpuDeviceSelectionSupported () : boolean
            public static GetGpuDevices () : System.Array$1<string>
            public static OpenPlayerConsole () : void
            public static TextifyEvent ($evt: UnityEngine.Event) : string
            public static GetAvailableDiffTools () : System.Array$1<string>
            public static GetNoDiffToolsDetectedMessage () : string
            public static TransformBounds ($b: UnityEngine.Bounds, $t: UnityEngine.Transform) : UnityEngine.Bounds
            public static SetCustomLightingInternal ($lights: System.Array$1<UnityEngine.Light>, $ambient: UnityEngine.Color) : void
            public static SetCustomLighting ($lights: System.Array$1<UnityEngine.Light>, $ambient: UnityEngine.Color) : void
            public static RemoveCustomLighting () : void
            public static HasFullscreenCamera () : boolean
            public static CalculateSelectionBounds ($usePivotOnlyForParticles: boolean, $onlyUseActiveSelection: boolean) : UnityEngine.Bounds
            public static CalculateSelectionBounds ($usePivotOnlyForParticles: boolean, $onlyUseActiveSelection: boolean, $ignoreEditableField: boolean) : UnityEngine.Bounds
            public static OnGameViewFocus ($focus: boolean) : void
            public static OpenFileAtLineExternal ($filename: string, $line: number, $column: number) : boolean
            public static OpenFileAtLineExternal ($filename: string, $line: number) : boolean
            public static CanConnectToCacheServer () : boolean
            public static DetectDotNetDll ($path: string) : UnityEditorInternal.DllType
            public static IsDotNet4Dll ($path: string) : boolean
            public static CurrentThreadIsMainThread () : boolean
            public static GetCrashReportFolder () : string
            public static GetCrashHandlerProcessID () : number
            public static ResetCursor () : void
            public static VerifyCacheServerIntegrity () : bigint
            public static FixCacheServerIntegrityErrors () : bigint
            public static DetermineDepthOrder ($lhs: UnityEngine.Transform, $rhs: UnityEngine.Transform) : number
            public static PassAndReturnVector2 ($v: UnityEngine.Vector2) : UnityEngine.Vector2
            public static PassAndReturnColor32 ($c: UnityEngine.Color32) : UnityEngine.Color32
            public static SaveCursorToFile ($path: string, $image: UnityEngine.Texture2D, $hotSpot: UnityEngine.Vector2) : boolean
            public static CountToString ($count: bigint) : string
            public static FindIconForFile ($fileName: string) : UnityEngine.Texture2D
            public static GetIconForFile ($fileName: string) : UnityEngine.Texture2D
            public static GetEditorSettingsList ($prefix: string, $count: number) : System.Array$1<string>
            public static SaveEditorSettingsList ($prefix: string, $aList: System.Array$1<string>, $count: number) : void
            public static TextAreaForDocBrowser ($position: UnityEngine.Rect, $text: string, $style: UnityEngine.GUIStyle) : string
            public static GetSceneViewCameras () : System.Array$1<UnityEngine.Camera>
            public static ShowGameView () : void
            public static GetNewSelection ($clickedInstanceID: number, $allInstanceIDs: System.Collections.Generic.List$1<number>, $selectedInstanceIDs: System.Collections.Generic.List$1<number>, $lastClickedInstanceID: number, $keepMultiSelection: boolean, $useShiftAsActionKey: boolean, $allowMultiSelection: boolean) : System.Collections.Generic.List$1<number>
            public static IsValidFileName ($filename: string) : boolean
            public static RemoveInvalidCharsFromFileName ($filename: string, $logIfInvalidChars: boolean) : string
            public static GetDisplayStringOfInvalidCharsOfFileName ($filename: string) : string
            public static SetShowGizmos ($value: boolean) : void
            public static CaptureSceneView ($sv: UnityEditor.SceneView, $rt: UnityEngine.RenderTexture) : boolean
            public constructor ()
        }
        enum RegistryView
        { Default = 0, _32 = 1, _64 = 2 }
        class RegistryUtil extends System.Object
        {
            protected [__keep_incompatibility]: never;
            public static GetRegistryUInt32Value ($subKey: string, $valueName: string, $defaultValue: number, $view: UnityEditorInternal.RegistryView) : number
            public static GetRegistryStringValue ($subKey: string, $valueName: string, $defaultValue: string, $view: UnityEditorInternal.RegistryView) : string
            public constructor ()
        }
        class RenderDoc extends System.Object
        {
            protected [__keep_incompatibility]: never;
            public static IsInstalled () : boolean
            public static IsLoaded () : boolean
            public static IsSupported () : boolean
            public static Load () : void
            public static BeginCaptureRenderDoc ($window: UnityEditor.EditorWindow) : void
            public static EndCaptureRenderDoc ($window: UnityEditor.EditorWindow) : void
        }
        class ScriptEditorUtility extends System.Object
        {
            protected [__keep_incompatibility]: never;
            public static GetExternalScriptEditor () : string
            public constructor ()
        }
        class InternalSpriteUtility extends System.Object
        {
            protected [__keep_incompatibility]: never;
            public static GenerateAutomaticSpriteRectangles ($texture: UnityEngine.Texture2D, $minRectSize: number, $extrudeSize: number) : System.Array$1<UnityEngine.Rect>
            public static GenerateGridSpriteRectangles ($texture: UnityEngine.Texture2D, $offset: UnityEngine.Vector2, $size: UnityEngine.Vector2, $padding: UnityEngine.Vector2, $keepEmptyRects: boolean) : System.Array$1<UnityEngine.Rect>
            public static GenerateGridSpriteRectangles ($texture: UnityEngine.Texture2D, $offset: UnityEngine.Vector2, $size: UnityEngine.Vector2, $padding: UnityEngine.Vector2) : System.Array$1<UnityEngine.Rect>
            public constructor ()
        }
        class SpriteMaskUtility extends System.Object
        {
            protected [__keep_incompatibility]: never;
            public static EnableDebugMode ($enable: boolean) : void
        }
        class PackageManifestImporter extends UnityEditor.AssetImporter
        {
            protected [__keep_incompatibility]: never;
            public constructor ()
        }
        class PackageManifest extends UnityEngine.TextAsset
        {
            protected [__keep_incompatibility]: never;
        }
        class ProfilerFrameDataMultiColumnHeader extends UnityEditor.IMGUI.Controls.MultiColumnHeader
        {
            protected [__keep_incompatibility]: never;
            public get columns(): System.Array$1<UnityEditorInternal.ProfilerFrameDataMultiColumnHeader.Column>;
            public get sortedProfilerColumn(): number;
            public get sortedProfilerColumnAscending(): boolean;
            public GetMultiColumnHeaderIndex ($profilerColumn: number) : number
            public static GetMultiColumnHeaderIndex ($columns: System.Array$1<UnityEditorInternal.ProfilerFrameDataMultiColumnHeader.Column>, $profilerColumn: number) : number
            public GetProfilerColumn ($multiColumnHeaderIndex: number) : number
            public constructor ($state: UnityEditor.IMGUI.Controls.MultiColumnHeaderState, $columns: System.Array$1<UnityEditorInternal.ProfilerFrameDataMultiColumnHeader.Column>)
            public constructor ($state: UnityEditor.IMGUI.Controls.MultiColumnHeaderState)
        }
        class ObjectMemoryInfo extends System.Object
        {
            protected [__keep_incompatibility]: never;
            public instanceId : number
            public memorySize : bigint
            public count : number
            public reason : number
            public name : string
            public className : string
            public constructor ()
        }
        class ObjectMemoryStackInfo extends System.Object
        {
            protected [__keep_incompatibility]: never;
            public expanded : boolean
            public sorted : boolean
            public allocated : number
            public ownedAllocated : number
            public callerSites : System.Array$1<UnityEditorInternal.ObjectMemoryStackInfo>
            public name : string
            public constructor ()
        }
        class ProfilerColorDescriptor extends System.ValueType
        {
            protected [__keep_incompatibility]: never;
            public color : UnityEngine.Color
            public isBright : boolean
            public constructor ($color: UnityEngine.Color)
        }
        class NativeProfilerTimeline_InitializeArgs extends System.ValueType
        {
            protected [__keep_incompatibility]: never;
            public ghostAlpha : number
            public nonSelectedAlpha : number
            public lineHeight : number
            public textFadeOutWidth : number
            public textFadeStartWidth : number
            public guiStyle : System.IntPtr
            public profilerColorDescriptors : System.Array$1<UnityEditorInternal.ProfilerColorDescriptor>
            public showFullScriptingMethodNames : number
            public Reset () : void
        }
        class NativeProfilerTimeline_DrawArgs extends System.ValueType
        {
            protected [__keep_incompatibility]: never;
            public frameIndex : number
            public threadIndex : number
            public timeOffset : number
            public threadRect : UnityEngine.Rect
            public shownAreaRect : UnityEngine.Rect
            public selectedEntryIndex : number
            public mousedOverEntryIndex : number
            public Reset () : void
        }
        class NativeProfilerTimeline_GetEntryAtPositionArgs extends System.ValueType
        {
            protected [__keep_incompatibility]: never;
            public frameIndex : number
            public threadIndex : number
            public timeOffset : number
            public threadRect : UnityEngine.Rect
            public shownAreaRect : UnityEngine.Rect
            public position : UnityEngine.Vector2
            public out_EntryIndex : number
            public out_EntryYMaxPos : number
            public out_EntryName : string
            public Reset () : void
        }
        class NativeProfilerTimeline_GetEntryInstanceInfoArgs extends System.ValueType
        {
            protected [__keep_incompatibility]: never;
            public frameIndex : number
            public threadIndex : number
            public entryIndex : number
            public out_Id : number
            public out_Path : string
            public out_PathMarkerIds : System.Array$1<number>
            public out_CallstackInfo : string
            public out_MetaData : string
            public Reset () : void
        }
        class NativeProfilerTimeline_GetEntryTimingInfoArgs extends System.ValueType
        {
            protected [__keep_incompatibility]: never;
            public frameIndex : number
            public threadIndex : number
            public entryIndex : number
            public calculateFrameData : boolean
            public out_LocalStartTime : number
            public out_Duration : number
            public out_TotalDurationForFrame : number
            public out_InstanceCountForFrame : number
            public Reset () : void
        }
        class NativeProfilerTimeline_GetEntryPositionInfoArgs extends System.ValueType
        {
            protected [__keep_incompatibility]: never;
            public frameIndex : number
            public threadIndex : number
            public sampleIndex : number
            public timeOffset : number
            public threadRect : UnityEngine.Rect
            public shownAreaRect : UnityEngine.Rect
            public out_Position : UnityEngine.Vector2
            public out_Size : UnityEngine.Vector2
            public out_Depth : number
            public Reset () : void
        }
        class NativeProfilerTimeline extends System.Object
        {
            protected [__keep_incompatibility]: never;
            public static Initialize ($args: $Ref<UnityEditorInternal.NativeProfilerTimeline_InitializeArgs>) : void
            public static Draw ($args: $Ref<UnityEditorInternal.NativeProfilerTimeline_DrawArgs>) : void
            public static GetEntryAtPosition ($args: $Ref<UnityEditorInternal.NativeProfilerTimeline_GetEntryAtPositionArgs>) : boolean
            public static GetEntryInstanceInfo ($args: $Ref<UnityEditorInternal.NativeProfilerTimeline_GetEntryInstanceInfoArgs>) : boolean
            public static GetEntryTimingInfo ($args: $Ref<UnityEditorInternal.NativeProfilerTimeline_GetEntryTimingInfoArgs>) : boolean
            public static GetEntryPositionInfo ($args: $Ref<UnityEditorInternal.NativeProfilerTimeline_GetEntryPositionInfoArgs>) : boolean
            public constructor ()
        }
        enum MemoryInfoGCReason
        { SceneObject = 0, BuiltinResource = 1, MarkedDontSave = 2, AssetMarkedDirtyInEditor = 3, SceneAssetReferencedByNativeCodeOnly = 5, SceneAssetReferenced = 6, AssetReferencedByNativeCodeOnly = 8, AssetReferenced = 9, NotApplicable = 10 }
        enum ProfilerMemoryRecordMode
        { None = 0, GCAlloc = 1, UnsafeUtilityMalloc = 2, JobHandleComplete = 4, NativeAlloc = 8 }
        enum InstrumentedAssemblyTypes
        { None = 0, System = 1, Unity = 2, Plugins = 4, Script = 8, All = 2147483647 }
        enum ProfilerMemoryView
        { Simple = 0, Detailed = 1 }
        enum ProfilerAudioView
        { Stats = 0, Channels = 1, Groups = 2, ChannelsAndGroups = 3, DSPGraph = 4, Clips = 5 }
        enum ProfilerCaptureFlags
        { None = 0, Channels = 1, DSPNodes = 2, Clips = 4, All = 7 }
        enum GpuProfilingStatisticsAvailabilityStates
        { Gathered = 1, Enabled = 2, Supported = 4, NotSupportedWithEditorProfiling = 8, NotSupportedWithLegacyGfxJobs = 16, NotSupportedWithNativeGfxJobs = 32, NotSupportedByDevice = 64, NotSupportedByGraphicsAPI = 128, NotSupportedDueToFrameTimingStatsAndDisjointTimerQuery = 256, NotSupportedWithVulkan = 512, NotSupportedWithMetal = 1024, NotSupportedWithOpenGLGPURecorders = 2048 }
        class EventMarker extends System.ValueType
        {
            protected [__keep_incompatibility]: never;
            public objectInstanceId : number
            public nameOffset : number
            public frame : number
        }
        class ProfilerDriver extends System.Object
        {
            protected [__keep_incompatibility]: never;
            public static directConnectionPort : string
            public static get firstFrameIndex(): number;
            public static get lastFrameIndex(): number;
            public static get selectedPropertyPath(): string;
            public static set selectedPropertyPath(value: string);
            public static get enabled(): boolean;
            public static set enabled(value: boolean);
            public static get profileGPU(): boolean;
            public static set profileGPU(value: boolean);
            public static get profileEditor(): boolean;
            public static set profileEditor(value: boolean);
            public static get deepProfiling(): boolean;
            public static set deepProfiling(value: boolean);
            public static get memoryRecordMode(): UnityEditorInternal.ProfilerMemoryRecordMode;
            public static set memoryRecordMode(value: UnityEditorInternal.ProfilerMemoryRecordMode);
            public static get directConnectionUrl(): string;
            public static get connectedProfiler(): number;
            public static set connectedProfiler(value: number);
            public static get miniMemoryOverview(): string;
            public static get usedHeapSize(): number;
            public static get objectCount(): number;
            public static ClearAllFrames () : void
            public static GetNextFrameIndex ($frame: number) : number
            public static GetPreviousFrameIndex ($frame: number) : number
            public static SetAreaEnabled ($area: UnityEngine.Profiling.ProfilerArea, $enabled: boolean) : void
            public static IsAreaEnabled ($area: UnityEngine.Profiling.ProfilerArea) : boolean
            public static SetMarkerFiltering ($name: string) : void
            public static GetUISystemEventMarkersCount ($firstFrame: number, $frameCount: number) : number
            public static GetUISystemEventMarkersBatch ($firstFrame: number, $frameCount: number, $buffer: System.Array$1<UnityEditorInternal.EventMarker>, $names: System.Array$1<string>) : void
            public static GetFormattedCounterValue ($frame: number, $area: UnityEngine.Profiling.ProfilerArea, $name: string) : string
            public static GetFormattedCounterValue ($frame: number, $category: string, $name: string) : string
            public static GetCounterValuesBatch ($area: UnityEngine.Profiling.ProfilerArea, $name: string, $firstFrame: number, $scale: number, $buffer: System.Array$1<number>, $maxValue: $Ref<number>) : void
            public static GetCounterValuesBatch ($category: string, $name: string, $firstFrame: number, $scale: number, $buffer: System.Array$1<number>, $maxValue: $Ref<number>) : void
            public static GetGpuStatisticsAvailabilityStates ($firstFrame: number, $buffer: System.Array$1<UnityEditorInternal.GpuProfilingStatisticsAvailabilityStates>) : void
            public static GetGpuStatisticsAvailabilityState ($frame: number) : UnityEditorInternal.GpuProfilingStatisticsAvailabilityStates
            public static GetHierarchyFrameDataView ($frameIndex: number, $threadIndex: number, $viewMode: UnityEditor.Profiling.HierarchyFrameDataView.ViewModes, $sortColumn: number, $sortAscending: boolean) : UnityEditor.Profiling.HierarchyFrameDataView
            public static GetRawFrameDataView ($frameIndex: number, $threadIndex: number) : UnityEditor.Profiling.RawFrameDataView
            public static add_NewProfilerFrameRecorded ($value: System.Action$2<number, number>) : void
            public static remove_NewProfilerFrameRecorded ($value: System.Action$2<number, number>) : void
            public static add_profileLoaded ($value: System.Action) : void
            public static remove_profileLoaded ($value: System.Action) : void
            public static add_profileCleared ($value: System.Action) : void
            public static remove_profileCleared ($value: System.Action) : void
            public static SaveProfile ($filename: string) : void
            public static LoadProfile ($filename: string, $keepExistingData: boolean) : boolean
            public static GetAllStatisticsProperties () : System.Array$1<string>
            public static GetGraphStatisticsPropertiesForArea ($area: UnityEngine.Profiling.ProfilerArea) : System.Array$1<string>
            public static GetStatisticsAvailable ($profilerArea: UnityEngine.Profiling.ProfilerArea, $firstFrame: number, $buffer: System.Array$1<number>) : void
            public static GetStatisticsIdentifierForArea ($profilerArea: UnityEngine.Profiling.ProfilerArea, $propertyName: string) : number
            public static GetConnectionIdentifier ($guid: number) : string
            public static IsIdentifierConnectable ($guid: number) : boolean
            public static DirectIPConnect ($IP: string) : void
            public static DirectURLConnect ($IP: string) : void
            public static GetAvailableProfilers () : System.Array$1<number>
            public static GetOverviewText ($profilerArea: UnityEngine.Profiling.ProfilerArea, $frame: number) : string
            public static RequestObjectMemoryInfo ($gatherObjectReferences: boolean) : void
            public static QueryInstrumentableFunctions () : void
            public static QueryFunctionCallees ($fullname: string) : void
            public static SetAudioCaptureFlags ($flags: number) : void
        }
        class ProfilerFrameDataIterator extends System.Object implements System.IDisposable
        {
            protected [__keep_incompatibility]: never;
            public get group(): number;
            public get depth(): number;
            public get maxDepth(): number;
            public get path(): string;
            public get name(): string;
            public get sampleId(): number;
            public get instanceId(): number;
            public get frameTimeMS(): number;
            public get frameGpuTimeMS(): number;
            public get startTimeMS(): number;
            public get durationMS(): number;
            public get extraTooltipInfo(): string;
            public Dispose () : void
            public Next ($enterChildren: boolean) : boolean
            public GetThreadCount ($frame: number) : number
            public GetFrameStartS ($frame: number) : number
            public GetGroupCount ($frame: number) : number
            public GetGroupName () : string
            public GetThreadName () : string
            public SetRoot ($frame: number, $threadIdx: number) : void
            public constructor ()
        }
        class AudioProfilerGroupInfo extends System.ValueType
        {
            protected [__keep_incompatibility]: never;
            public assetInstanceId : number
            public objectInstanceId : number
            public assetNameOffset : number
            public objectNameOffset : number
            public parentId : number
            public uniqueId : number
            public flags : number
            public playCount : number
            public distanceToListener : number
            public volume : number
            public audibility : number
            public minDist : number
            public maxDist : number
            public time : number
            public maxRMSLevelOrDuration : number
            public frequency : number
        }
        class AudioProfilerDSPInfo extends System.ValueType
        {
            protected [__keep_incompatibility]: never;
            public id : number
            public target : number
            public targetPort : number
            public numChannels : number
            public nameOffset : number
            public weight : number
            public cpuLoad : number
            public level1 : number
            public level2 : number
            public numLevels : number
            public flags : number
            public audibilityVisitOrder : number
            public relativeAudibility : number
            public absoluteAudibility : number
        }
        class AudioProfilerClipInfo extends System.ValueType
        {
            protected [__keep_incompatibility]: never;
            public assetInstanceId : number
            public assetNameOffset : number
            public loadState : number
            public internalLoadState : number
            public age : number
            public disposed : number
            public numChannelInstances : number
            public numClones : number
            public refCount : number
            public instancePtr : bigint
        }
        enum BatchBreakingReason
        { NoBreaking = 0, NotCoplanarWithCanvas = 1, CanvasInjectionIndex = 2, DifferentMaterialInstance = 4, DifferentRectClipping = 8, DifferentTexture = 16, DifferentA8TextureUsage = 32, DifferentClipRect = 64, Unknown = 128 }
        class UISystemProfilerInfo extends System.ValueType
        {
            protected [__keep_incompatibility]: never;
            public objectInstanceId : number
            public objectNameOffset : number
            public parentId : number
            public batchCount : number
            public totalBatchCount : number
            public vertexCount : number
            public totalVertexCount : number
            public isBatch : boolean
            public batchBreakingReason : UnityEditorInternal.BatchBreakingReason
            public instanceIDsIndex : number
            public instanceIDsCount : number
            public renderDataIndex : number
            public renderDataCount : number
        }
        class ProfilerProperty extends System.Object implements System.IDisposable
        {
            protected [__keep_incompatibility]: never;
            public get propertyName(): string;
            public get HasChildren(): boolean;
            public get onlyShowGPUSamples(): boolean;
            public set onlyShowGPUSamples(value: boolean);
            public get instanceIDs(): System.Array$1<number>;
            public get depth(): number;
            public get propertyPath(): string;
            public get frameFPS(): string;
            public get frameTime(): string;
            public get frameGpuTime(): string;
            public get frameDataReady(): boolean;
            public Cleanup () : void
            public Next ($enterChildren: boolean) : boolean
            public SetRoot ($frame: number, $profilerSortColumn: number, $viewType: number) : void
            public ResetToRoot () : void
            public InitializeDetailProperty ($source: UnityEditorInternal.ProfilerProperty) : void
            public GetTooltip ($column: number) : string
            public GetColumn ($column: number) : string
            public GetColumnAsSingle ($colum: number) : number
            public GetAudioProfilerGroupInfo () : System.Array$1<UnityEditorInternal.AudioProfilerGroupInfo>
            public GetAudioProfilerDSPInfo () : System.Array$1<UnityEditorInternal.AudioProfilerDSPInfo>
            public GetAudioProfilerClipInfo () : System.Array$1<UnityEditorInternal.AudioProfilerClipInfo>
            public GetAudioProfilerNameByOffset ($offset: number) : string
            public GetUISystemProfilerInfo () : System.Array$1<UnityEditorInternal.UISystemProfilerInfo>
            public GetUISystemProfilerNameByOffset ($offset: number) : string
            public GetUISystemEventMarkers () : System.Array$1<UnityEditorInternal.EventMarker>
            public GetUISystemEventMarkerNameByOffset ($offset: number) : string
            public GetUISystemBatchInstanceIDs () : System.Array$1<number>
            public static ReleaseUISystemProfilerRender ($t: UnityEngine.Texture2D) : void
            public static UISystemProfilerRender ($frameIndex: number, $renderDataIndex: number, $renderDataCount: number, $renderOverdraw: boolean) : UnityEngine.Texture2D
            public Dispose () : void
            public constructor ()
        }
        interface IProfilerWindowController
        {
        }
    }
    namespace UnityEditorInternal.ComponentUtility {
        interface IsDesiredComponent
        { 
        (c: UnityEngine.Component) : boolean; 
        Invoke?: (c: UnityEngine.Component) => boolean;
        }
        var IsDesiredComponent: { new (func: (c: UnityEngine.Component) => boolean): IsDesiredComponent; }
    }
    namespace UnityEditorInternal.ReorderableList {
        interface HeaderCallbackDelegate
        { 
        (rect: UnityEngine.Rect) : void; 
        Invoke?: (rect: UnityEngine.Rect) => void;
        }
        var HeaderCallbackDelegate: { new (func: (rect: UnityEngine.Rect) => void): HeaderCallbackDelegate; }
        interface FooterCallbackDelegate
        { 
        (rect: UnityEngine.Rect) : void; 
        Invoke?: (rect: UnityEngine.Rect) => void;
        }
        var FooterCallbackDelegate: { new (func: (rect: UnityEngine.Rect) => void): FooterCallbackDelegate; }
        interface ElementCallbackDelegate
        { 
        (rect: UnityEngine.Rect, index: number, isActive: boolean, isFocused: boolean) : void; 
        Invoke?: (rect: UnityEngine.Rect, index: number, isActive: boolean, isFocused: boolean) => void;
        }
        var ElementCallbackDelegate: { new (func: (rect: UnityEngine.Rect, index: number, isActive: boolean, isFocused: boolean) => void): ElementCallbackDelegate; }
        interface DrawNoneElementCallback
        { 
        (rect: UnityEngine.Rect) : void; 
        Invoke?: (rect: UnityEngine.Rect) => void;
        }
        var DrawNoneElementCallback: { new (func: (rect: UnityEngine.Rect) => void): DrawNoneElementCallback; }
        interface ElementHeightCallbackDelegate
        { 
        (index: number) : number; 
        Invoke?: (index: number) => number;
        }
        var ElementHeightCallbackDelegate: { new (func: (index: number) => number): ElementHeightCallbackDelegate; }
        interface ReorderCallbackDelegateWithDetails
        { 
        (list: UnityEditorInternal.ReorderableList, oldIndex: number, newIndex: number) : void; 
        Invoke?: (list: UnityEditorInternal.ReorderableList, oldIndex: number, newIndex: number) => void;
        }
        var ReorderCallbackDelegateWithDetails: { new (func: (list: UnityEditorInternal.ReorderableList, oldIndex: number, newIndex: number) => void): ReorderCallbackDelegateWithDetails; }
        interface ReorderCallbackDelegate
        { 
        (list: UnityEditorInternal.ReorderableList) : void; 
        Invoke?: (list: UnityEditorInternal.ReorderableList) => void;
        }
        var ReorderCallbackDelegate: { new (func: (list: UnityEditorInternal.ReorderableList) => void): ReorderCallbackDelegate; }
        interface SelectCallbackDelegate
        { 
        (list: UnityEditorInternal.ReorderableList) : void; 
        Invoke?: (list: UnityEditorInternal.ReorderableList) => void;
        }
        var SelectCallbackDelegate: { new (func: (list: UnityEditorInternal.ReorderableList) => void): SelectCallbackDelegate; }
        interface AddCallbackDelegate
        { 
        (list: UnityEditorInternal.ReorderableList) : void; 
        Invoke?: (list: UnityEditorInternal.ReorderableList) => void;
        }
        var AddCallbackDelegate: { new (func: (list: UnityEditorInternal.ReorderableList) => void): AddCallbackDelegate; }
        interface AddDropdownCallbackDelegate
        { 
        (buttonRect: UnityEngine.Rect, list: UnityEditorInternal.ReorderableList) : void; 
        Invoke?: (buttonRect: UnityEngine.Rect, list: UnityEditorInternal.ReorderableList) => void;
        }
        var AddDropdownCallbackDelegate: { new (func: (buttonRect: UnityEngine.Rect, list: UnityEditorInternal.ReorderableList) => void): AddDropdownCallbackDelegate; }
        interface RemoveCallbackDelegate
        { 
        (list: UnityEditorInternal.ReorderableList) : void; 
        Invoke?: (list: UnityEditorInternal.ReorderableList) => void;
        }
        var RemoveCallbackDelegate: { new (func: (list: UnityEditorInternal.ReorderableList) => void): RemoveCallbackDelegate; }
        interface DragCallbackDelegate
        { 
        (list: UnityEditorInternal.ReorderableList) : void; 
        Invoke?: (list: UnityEditorInternal.ReorderableList) => void;
        }
        var DragCallbackDelegate: { new (func: (list: UnityEditorInternal.ReorderableList) => void): DragCallbackDelegate; }
        interface CanRemoveCallbackDelegate
        { 
        (list: UnityEditorInternal.ReorderableList) : boolean; 
        Invoke?: (list: UnityEditorInternal.ReorderableList) => boolean;
        }
        var CanRemoveCallbackDelegate: { new (func: (list: UnityEditorInternal.ReorderableList) => boolean): CanRemoveCallbackDelegate; }
        interface CanAddCallbackDelegate
        { 
        (list: UnityEditorInternal.ReorderableList) : boolean; 
        Invoke?: (list: UnityEditorInternal.ReorderableList) => boolean;
        }
        var CanAddCallbackDelegate: { new (func: (list: UnityEditorInternal.ReorderableList) => boolean): CanAddCallbackDelegate; }
        interface ChangedCallbackDelegate
        { 
        (list: UnityEditorInternal.ReorderableList) : void; 
        Invoke?: (list: UnityEditorInternal.ReorderableList) => void;
        }
        var ChangedCallbackDelegate: { new (func: (list: UnityEditorInternal.ReorderableList) => void): ChangedCallbackDelegate; }
        class Defaults extends System.Object
        {
            protected [__keep_incompatibility]: never;
            public iconToolbarPlus : UnityEngine.GUIContent
            public iconToolbarPlusMore : UnityEngine.GUIContent
            public iconToolbarMinus : UnityEngine.GUIContent
            public draggingHandle : UnityEngine.GUIStyle
            public headerBackground : UnityEngine.GUIStyle
            public emptyHeaderBackground : UnityEngine.GUIStyle
            public footerBackground : UnityEngine.GUIStyle
            public boxBackground : UnityEngine.GUIStyle
            public preButton : UnityEngine.GUIStyle
            public elementBackground : UnityEngine.GUIStyle
            public static padding : number
            public static dragHandleWidth : number
            public DrawFooter ($rect: UnityEngine.Rect, $list: UnityEditorInternal.ReorderableList) : void
            public DoAddButton ($list: UnityEditorInternal.ReorderableList) : void
            public DoRemoveButton ($list: UnityEditorInternal.ReorderableList) : void
            public DrawHeaderBackground ($headerRect: UnityEngine.Rect) : void
            public DrawHeader ($headerRect: UnityEngine.Rect, $serializedObject: UnityEditor.SerializedObject, $element: UnityEditor.SerializedProperty, $elementList: System.Collections.IList) : void
            public DrawElementBackground ($rect: UnityEngine.Rect, $index: number, $selected: boolean, $focused: boolean, $draggable: boolean) : void
            public DrawElementDraggingHandle ($rect: UnityEngine.Rect, $index: number, $selected: boolean, $focused: boolean, $draggable: boolean) : void
            public DrawElement ($rect: UnityEngine.Rect, $element: UnityEditor.SerializedProperty, $listItem: any, $selected: boolean, $focused: boolean, $draggable: boolean) : void
            public DrawElement ($rect: UnityEngine.Rect, $element: UnityEditor.SerializedProperty, $listItem: any, $selected: boolean, $focused: boolean, $draggable: boolean, $editable: boolean) : void
            public DrawNoneElement ($rect: UnityEngine.Rect, $draggable: boolean) : void
            public DrawOverMaxMultiEditElement ($rect: UnityEngine.Rect, $maxMultiEditElementCount: number, $draggable: boolean) : void
            public constructor ()
        }
    }
    namespace UnityEditorInternal.EditMode {
        interface OnEditModeStopFunc
        { 
        (editor: UnityEditor.Editor) : void; 
        Invoke?: (editor: UnityEditor.Editor) => void;
        }
        var OnEditModeStopFunc: { new (func: (editor: UnityEditor.Editor) => void): OnEditModeStopFunc; }
        interface OnEditModeStartFunc
        { 
        (editor: UnityEditor.Editor, mode: UnityEditorInternal.EditMode.SceneViewEditMode) : void; 
        Invoke?: (editor: UnityEditor.Editor, mode: UnityEditorInternal.EditMode.SceneViewEditMode) => void;
        }
        var OnEditModeStartFunc: { new (func: (editor: UnityEditor.Editor, mode: UnityEditorInternal.EditMode.SceneViewEditMode) => void): OnEditModeStartFunc; }
        enum SceneViewEditMode
        { None = 0, Collider = 1, ClothConstraints = 2, ClothSelfAndInterCollisionParticles = 3, ReflectionProbeBox = 4, ReflectionProbeOrigin = 5, LightProbeProxyVolumeBox = 6, LightProbeProxyVolumeOrigin = 7, LightProbeGroup = 8, JointAngularLimits = 9, GridPainting = 10, GridPicking = 11, GridEraser = 12, GridFloodFill = 13, GridBox = 14, GridSelect = 15, GridMove = 16, LineRendererEdit = 17, LineRendererCreate = 18 }
    }
    namespace UnityEditor.Overlays {
        interface ISupportsOverlays
        {
        }
        /** OverlayCanvas is a container for collections of Overlays.
        */
        class OverlayCanvas extends System.Object implements UnityEngine.ISerializationCallbackReceiver
        {
            protected [__keep_incompatibility]: never;
            /** Invoked before OverlayCanvas will be serialized. This is used to store Overlay layout data.
            */
            public OnBeforeSerialize () : void
            /** Invoked after OverlayCanvas is deserialized.
            */
            public OnAfterDeserialize () : void
            public Add ($overlay: UnityEditor.Overlays.Overlay) : void
            /** Remove an Overlay from this canvas. Removed Overlays are disassociated from OverlayCanvas and the related EditorWindow, but not destroyed. This means you are able to move a single Overlay between multiple windows.
            * @param $overlay The Overlay to remove.
            * @returns Returns true if Overlay was found and removed, false if Overlay was not present in OverlayCanvas. 
            */
            public Remove ($overlay: UnityEditor.Overlays.Overlay) : boolean
        }
        /** Overlays are persistent and customizable panels and toolbars that are available within Editor Windows. Use Overlays to expose actions and tool options in a convenient and user-controllable way.
        */
        class Overlay extends System.Object
        {
            protected [__keep_incompatibility]: never;
            /** USS class name of elements of this type.
            */
            public static ussClassName : string
            /** EditorWindow the overlay is contained within.
            */
            public get containerWindow(): UnityEditor.EditorWindow;
            /** Overlay unique ID.
            */
            public get id(): string;
            public set collapsedIcon(value: UnityEngine.Texture2D);
            /** The preferred layout for the Overlay.
            */
            public get layout(): UnityEditor.Overlays.Layout;
            /** Defines whether the overlay is in collapsed form.
            */
            public get collapsed(): boolean;
            public set collapsed(value: boolean);
            /** Name of overlay used as title.
            */
            public get displayName(): string;
            public set displayName(value: string);
            /** Shows or hides the overlay.
            */
            public get displayed(): boolean;
            public set displayed(value: boolean);
            /** Returns true if overlay is docked in a toolbar.
            */
            public get isInToolbar(): boolean;
            /** Size of the Overlay.
            */
            public get size(): UnityEngine.Vector2;
            public set size(value: UnityEngine.Vector2);
            /** Minimum size of the Overlay.
            */
            public get minSize(): UnityEngine.Vector2;
            public set minSize(value: UnityEngine.Vector2);
            /** Maximum size of the Overlay.
            */
            public get maxSize(): UnityEngine.Vector2;
            public set maxSize(value: UnityEngine.Vector2);
            /** Set defaultSize to define the size of an Overlay when it hasn't been resized by the user.
            */
            public get defaultSize(): UnityEngine.Vector2;
            public set defaultSize(value: UnityEngine.Vector2);
            /** Local position of closest overlay corner to closest dockposition when floating.
            */
            public get floatingPosition(): UnityEngine.Vector2;
            public set floatingPosition(value: UnityEngine.Vector2);
            /** Returns true if overlay is floating, returns false if overlay is docked in a corner or in a toolbar.
            */
            public get floating(): boolean;
            public add_layoutChanged ($value: System.Action$1<UnityEditor.Overlays.Layout>) : void
            public remove_layoutChanged ($value: System.Action$1<UnityEditor.Overlays.Layout>) : void
            public add_collapsedChanged ($value: System.Action$1<boolean>) : void
            public remove_collapsedChanged ($value: System.Action$1<boolean>) : void
            public add_displayedChanged ($value: System.Action$1<boolean>) : void
            public remove_displayedChanged ($value: System.Action$1<boolean>) : void
            public add_floatingChanged ($value: System.Action$1<boolean>) : void
            public remove_floatingChanged ($value: System.Action$1<boolean>) : void
            public add_floatingPositionChanged ($value: System.Action$1<UnityEngine.Vector3>) : void
            public remove_floatingPositionChanged ($value: System.Action$1<UnityEngine.Vector3>) : void
            /** Creates a new VisualElement containing the contents of this Overlay.
            * @param $requestedLayout The layout that contents should be styled to match.
            * @returns A new Visual Element containing the contents of the Overlay. 
            */
            public CreateContent ($requestedLayout: UnityEditor.Overlays.Layout) : UnityEngine.UIElements.VisualElement
            /** Implement this method to return your visual element content.
            * @returns Visual element containing the content of your overlay. 
            */
            public CreatePanelContent () : UnityEngine.UIElements.VisualElement
            /** OnCreated is invoked when an Overlay is instantiated in an Overlay Canvas.
            */
            public OnCreated () : void
            /** Called when an Overlay is about to be destroyed.
            */
            public OnWillBeDestroyed () : void
            /** Remove the Overlay from its OverlayCanvas.
            */
            public Close () : void
            /** If this Overlay is currently in a toolbar, it will be removed and return to a floating state.
            */
            public Undock () : void
        }
        interface ICreateHorizontalToolbar
        {
            /** Implement this to return your visual element representing the horizontal toolbar layout of your overlay.
            * @returns The content of your overlay in horizontal toolbar layout form. 
            */
            CreateHorizontalToolbarContent () : UnityEditor.Overlays.OverlayToolbar
        }
        /** Base class for toolbar elements intended to be drawn in an Overlay.
        */
        class OverlayToolbar extends UnityEngine.UIElements.VisualElement implements UnityEngine.UIElements.IStylePropertyAnimations, UnityEngine.UIElements.IVisualElementScheduler, UnityEngine.UIElements.Experimental.ITransitionAnimations, UnityEngine.UIElements.IResolvedStyle, UnityEngine.UIElements.IExperimentalFeatures, UnityEngine.UIElements.ITransform, UnityEngine.UIElements.IEventHandler
        {
            protected [__keep_incompatibility]: never;
            /** Use this method to apply button strip styling to the contents of this VisualElement.
            */
            public SetupChildrenAsButtonStrip () : void
            public constructor ()
        }
        interface ICreateVerticalToolbar
        {
            /** Implement this to return your visual element representing the vertical toolbar layout of your overlay.
            * @returns The content of your overlay in vertical toolbar layout form. 
            */
            CreateVerticalToolbarContent () : UnityEditor.Overlays.OverlayToolbar
        }
        interface ICreateToolbar
        {
            /** List of toolbarElements IDs to show when the Overlay is in a toolbar layout.
            */
            toolbarElements : System.Collections.Generic.IEnumerable$1<string>
        }
        interface ITransientOverlay
        {
            /** Use visible to enable or disable the rendering of this Overlay.
            */
            visible : boolean
        }
        /** IMGUIOverlay is an implementation of Overlay that provides a UIElements.IMGUIContainer.
        */
        class IMGUIOverlay extends UnityEditor.Overlays.Overlay
        {
            protected [__keep_incompatibility]: never;
            /** Implement IMGUI controls and logic in this method.
            */
            public OnGUI () : void
        }
        /** Possible layouts for an overlay.
        */
        enum Layout
        { HorizontalToolbar = 1, VerticalToolbar = 2, Panel = 4, All = 7 }
        /** Attribute used to register a class as an overlay.
        */
        class OverlayAttribute extends System.Attribute implements System.Runtime.InteropServices._Attribute
        {
            protected [__keep_incompatibility]: never;
            /** Defines which EditorWindow type the overlay is used in.
            */
            public get editorWindowType(): System.Type;
            public set editorWindowType(value: System.Type);
            /** Defines the unique identifier used to identify the overlay.
            */
            public get id(): string;
            public set id(value: string);
            /** Defines what the display name of the overlay will be.
            */
            public get displayName(): string;
            public set displayName(value: string);
            /** Name of the overlay's root visual element.
            */
            public get ussName(): string;
            public set ussName(value: string);
            /** Set this value to true to ensure that the target Overlay will be shown when a new instance of the EditorWindow type is instantiated.
            */
            public get defaultDisplay(): boolean;
            public set defaultDisplay(value: boolean);
            /** Use defaultDockZone to set the default location for an Overlay when it is made visible for the first time in a new EditorWindow.
            */
            public get defaultDockZone(): UnityEditor.Overlays.DockZone;
            public set defaultDockZone(value: UnityEditor.Overlays.DockZone);
            /** Set defaultDockPosition to define the default alignment for a newly instantiated Overlay.
            */
            public get defaultDockPosition(): UnityEditor.Overlays.DockPosition;
            public set defaultDockPosition(value: UnityEditor.Overlays.DockPosition);
            /** Set the defaultDockIndex to define where in a DockZone an Overlay is placed.
            */
            public get defaultDockIndex(): number;
            public set defaultDockIndex(value: number);
            /** Set defaultLayout to define the Layout for an Overlay when it is created for the first time.
            */
            public get defaultLayout(): UnityEditor.Overlays.Layout;
            public set defaultLayout(value: UnityEditor.Overlays.Layout);
            /** Set defaultWidth to define the width of an Overlay when it hasn't been resized by the user.
            */
            public get defaultWidth(): number;
            public set defaultWidth(value: number);
            /** Set defaultHeight to define the height of an Overlay when it hasn't been resized by the user.
            */
            public get defaultHeight(): number;
            public set defaultHeight(value: number);
            /** Set maxWidth to define the minimum width of an Overlay.
            */
            public get minWidth(): number;
            public set minWidth(value: number);
            /** Set minHeight to define the minimum height of an Overlay.
            */
            public get minHeight(): number;
            public set minHeight(value: number);
            /** Set maxWidth to define the maximum width of an Overlay.
            */
            public get maxWidth(): number;
            public set maxWidth(value: number);
            /** Set maxHeight to define the maximum height of an Overlay.
            */
            public get maxHeight(): number;
            public set maxHeight(value: number);
            public constructor ()
            public constructor ($editorWindowType: System.Type, $id: string, $displayName: string, $ussName: string, $defaultDisplay?: boolean)
            public constructor ($editorWindowType: System.Type, $id: string, $displayName: string, $defaultDisplay?: boolean)
            public constructor ($editorWindowType: System.Type, $displayName: string, $defaultDisplay?: boolean)
        }
        /** DockZone describes the area of the screen that an Overlay is displayed in.
        */
        enum DockZone
        { LeftToolbar = 0, RightToolbar = 1, TopToolbar = 2, BottomToolbar = 3, LeftColumn = 4, RightColumn = 5, Floating = 6 }
        /** DockPosition describes the alignment of an Overlay within a DockZone.
        */
        enum DockPosition
        { Top = 0, Bottom = 1 }
        /** ToolbarOverlay is an implementation of Overlay that provides a base for Overlays that can be placed in horizontal or vertical toolbars.
        */
        class ToolbarOverlay extends UnityEditor.Overlays.Overlay implements UnityEditor.Overlays.ICreateToolbar
        {
            protected [__keep_incompatibility]: never;
            /** Use toolbarElements to specify the contents of this Overlay.
            */
            public get toolbarElements(): System.Collections.Generic.IEnumerable$1<string>;
        }
    }
    namespace UnityEditorInternal.ScriptEditorUtility {
        class Installation extends System.ValueType
        {
            protected [__keep_incompatibility]: never;
            public Name : string
            public Path : string
        }
        enum ScriptEditor
        { SystemDefault = 0, MonoDevelop = 1, VisualStudio = 2, VisualStudioExpress = 3, Other = 32 }
    }
    namespace UnityEditor.IMGUI.Controls {
        /** The MultiColumnHeader is a general purpose class that e.g can be used with the TreeView to create multi-column tree views and list views.
        */
        class MultiColumnHeader extends System.Object
        {
            protected [__keep_incompatibility]: never;
            /** Customizable height of the multi column header.
            */
            public get height(): number;
            public set height(value: number);
            /** Use this property to control whether sorting is enabled for all the columns.
            */
            public get canSort(): boolean;
            public set canSort(value: boolean);
            /** The index of the column that is set to be the primary sorting column. This is the column that shows the sorting arrow above the header text.
            */
            public get sortedColumnIndex(): number;
            public set sortedColumnIndex(value: number);
            /** This is the state of the MultiColumnHeader.
            */
            public get state(): UnityEditor.IMGUI.Controls.MultiColumnHeaderState;
            public set state(value: UnityEditor.IMGUI.Controls.MultiColumnHeaderState);
            public add_sortingChanged ($value: UnityEditor.IMGUI.Controls.MultiColumnHeader.HeaderCallback) : void
            public remove_sortingChanged ($value: UnityEditor.IMGUI.Controls.MultiColumnHeader.HeaderCallback) : void
            public add_visibleColumnsChanged ($value: UnityEditor.IMGUI.Controls.MultiColumnHeader.HeaderCallback) : void
            public remove_visibleColumnsChanged ($value: UnityEditor.IMGUI.Controls.MultiColumnHeader.HeaderCallback) : void
            public add_columnSettingsChanged ($value: System.Action$1<number>) : void
            public remove_columnSettingsChanged ($value: System.Action$1<number>) : void
            public add_columnsSwapped ($value: System.Action$2<number, number>) : void
            public remove_columnsSwapped ($value: System.Action$2<number, number>) : void
            /** Sets multiple sorting columns and the associated sorting orders.
            * @param $columnIndices Column indices of the sorted columns.
            * @param $sortAscending Sorting order for the column indices specified.
            */
            public SetSortingColumns ($columnIndices: System.Array$1<number>, $sortAscending: System.Array$1<boolean>) : void
            /** Sets the primary sorting column and its sorting order.
            * @param $columnIndex Column to sort.
            * @param $sortAscending Sorting order for the column specified.
            */
            public SetSorting ($columnIndex: number, $sortAscending: boolean) : void
            /** Change sort direction for a given column.
            * @param $columnIndex Column index.
            * @param $sortAscending Direction of the sorting.
            */
            public SetSortDirection ($columnIndex: number, $sortAscending: boolean) : void
            /** Check the sorting order state for a column.
            * @param $columnIndex Column index.
            * @returns True if sorted ascending. 
            */
            public IsSortedAscending ($columnIndex: number) : boolean
            /** Returns the column data for a given column index.
            * @param $columnIndex Column index.
            * @returns Column data. 
            */
            public GetColumn ($columnIndex: number) : UnityEditor.IMGUI.Controls.MultiColumnHeaderState.Column
            /** Check if a column is currently visible in the MultiColumnHeader.
            * @param $columnIndex Column index.
            */
            public IsColumnVisible ($columnIndex: number) : boolean
            /** Convert from column index to visible column index.
            * @param $columnIndex Column index.
            * @returns Visible column index. 
            */
            public GetVisibleColumnIndex ($columnIndex: number) : number
            /** Calculates a cell rect for a column and row using the visibleColumnIndex and rowRect parameters.
            */
            public GetCellRect ($visibleColumnIndex: number, $rowRect: UnityEngine.Rect) : UnityEngine.Rect
            /** Returns the header column Rect for a given visible column index.
            * @param $visibleColumnIndex Index of a visible column.
            */
            public GetColumnRect ($visibleColumnIndex: number) : UnityEngine.Rect
            /** Resizes the column widths of the columns that have auto-resize enabled to make all the columns fit to the width of the MultiColumnHeader render rect.
            */
            public ResizeToFit () : void
            /** Render and handle input for the MultiColumnHeader at the given rect.
            * @param $xScroll Horizontal scroll offset.
            * @param $rect Rect where the MultiColumnHeader is drawn in.
            */
            public OnGUI ($rect: UnityEngine.Rect, $xScroll: number) : void
            /** Requests the window which contains the MultiColumnHeader to repaint.
            */
            public Repaint () : void
            public constructor ($state: UnityEditor.IMGUI.Controls.MultiColumnHeaderState)
        }
        /** State used by the MultiColumnHeader.
        */
        class MultiColumnHeaderState extends System.Object
        {
            protected [__keep_incompatibility]: never;
            /** This property holds the index to the primary sorted column.
            */
            public get sortedColumnIndex(): number;
            public set sortedColumnIndex(value: number);
            /** This property controls the maximum number of columns returned by the sortedColumns property.
            */
            public get maximumNumberOfSortedColumns(): number;
            public set maximumNumberOfSortedColumns(value: number);
            /** The array of column indices for multiple column sorting.
            */
            public get sortedColumns(): System.Array$1<number>;
            public set sortedColumns(value: System.Array$1<number>);
            /** The array of column states used by the MultiColumnHeader class.
            */
            public get columns(): System.Array$1<UnityEditor.IMGUI.Controls.MultiColumnHeaderState.Column>;
            /** This is the array of currently visible column indices.
            */
            public get visibleColumns(): System.Array$1<number>;
            public set visibleColumns(value: System.Array$1<number>);
            /** Returns the sum of all the widths of the visible columns in the visibleColumns array.
            */
            public get widthOfAllVisibleColumns(): number;
            /** Checks if the source state can transfer its serialized data to the destination state.
            * @param $source State that have serialized data to be transfered to the destination state.
            * @param $destination Destination state.
            * @returns Returns true if the source state have the same number of columns as the destination state. 
            */
            public static CanOverwriteSerializedFields ($source: UnityEditor.IMGUI.Controls.MultiColumnHeaderState, $destination: UnityEditor.IMGUI.Controls.MultiColumnHeaderState) : boolean
            /** Overwrites the seralized fields from the source state to the destination state.
            * @param $source State that have serialized data to be transfered to the destination state.
            * @param $destination Destination state.
            */
            public static OverwriteSerializedFields ($source: UnityEditor.IMGUI.Controls.MultiColumnHeaderState, $destination: UnityEditor.IMGUI.Controls.MultiColumnHeaderState) : void
            public constructor ($columns: System.Array$1<UnityEditor.IMGUI.Controls.MultiColumnHeaderState.Column>)
        }
        /** A class for a compound handle to edit an angle and a radius in the Scene view.
        */
        class ArcHandle extends System.Object
        {
            protected [__keep_incompatibility]: never;
            /** Returns or specifies the angle of the arc for the handle.
            */
            public get angle(): number;
            public set angle(value: number);
            /** Returns or specifies the radius of the arc for the handle.
            */
            public get radius(): number;
            public set radius(value: number);
            /** Returns or specifies the color of the angle control handle.
            */
            public get angleHandleColor(): UnityEngine.Color;
            public set angleHandleColor(value: UnityEngine.Color);
            /** Returns or specifies the color of the radius control handle.
            */
            public get radiusHandleColor(): UnityEngine.Color;
            public set radiusHandleColor(value: UnityEngine.Color);
            /** Returns or specifies the color of the arc shape.
            */
            public get fillColor(): UnityEngine.Color;
            public set fillColor(value: UnityEngine.Color);
            /** Returns or specifies the color of the curved line along the outside of the arc.
            */
            public get wireframeColor(): UnityEngine.Color;
            public set wireframeColor(value: UnityEngine.Color);
            /** The Handles.CapFunction to use when displaying the angle control handle.
            */
            public get angleHandleDrawFunction(): UnityEditor.Handles.CapFunction;
            public set angleHandleDrawFunction(value: UnityEditor.Handles.CapFunction);
            /** The Handles.SizeFunction to specify how large the angle control handle should be.
            */
            public get angleHandleSizeFunction(): UnityEditor.Handles.SizeFunction;
            public set angleHandleSizeFunction(value: UnityEditor.Handles.SizeFunction);
            /** The Handles.CapFunction to use when displaying the radius control handle.
            */
            public get radiusHandleDrawFunction(): UnityEditor.Handles.CapFunction;
            public set radiusHandleDrawFunction(value: UnityEditor.Handles.CapFunction);
            /** The Handles.SizeFunction to specify how large the angle control handle should be.
            */
            public get radiusHandleSizeFunction(): UnityEditor.Handles.SizeFunction;
            public set radiusHandleSizeFunction(value: UnityEditor.Handles.SizeFunction);
            /** A Handles.CapFunction that draws a line terminated with Handles.CylinderHandleCap.
            * @param $controlID The control ID for the handle.
            * @param $position The position of the handle in the space of Handles.matrix.
            * @param $rotation The rotation of the handle in the space of Handles.matrix.
            * @param $size The size of the handle in the space of Handles.matrix. Use HandleUtility.GetHandleSize if you want a constant screen-space size.
            * @param $eventType Event type for the handle to act upon. By design it handles EventType.Layout and EventType.Repaint events.
            */
            public static DefaultAngleHandleDrawFunction ($controlID: number, $position: UnityEngine.Vector3, $rotation: UnityEngine.Quaternion, $size: number, $eventType: UnityEngine.EventType) : void
            /** A Handles.SizeFunction that returns a fixed screen-space size.
            * @param $position The current position of the handle in the space of Handles.matrix.
            * @returns The size to use for a handle at the specified position. 
            */
            public static DefaultAngleHandleSizeFunction ($position: UnityEngine.Vector3) : number
            /** A Handles.SizeFunction that returns a fixed screen-space size.
            * @param $position The current position of the handle in the space of Handles.matrix.
            * @returns The size to use for a handle at the specified position. 
            */
            public static DefaultRadiusHandleSizeFunction ($position: UnityEngine.Vector3) : number
            /** Sets angleHandleColor, wireframeColor, and fillColor to the same value, where fillColor will have the specified alpha value. radiusHandleColor will be set to Color.clear and the radius handle will be disabled.
            * @param $color The color to use for the angle control handle and the fill shape.
            * @param $fillColorAlpha The alpha value to use for fillColor.
            */
            public SetColorWithoutRadiusHandle ($color: UnityEngine.Color, $fillColorAlpha: number) : void
            /** Sets angleHandleColor, radiusHandleColor, wireframeColor, and fillColor to the same value, where fillColor will have the specified alpha value.
            * @param $color The color to use for the angle and radius control handles and the fill shape.
            * @param $fillColorAlpha The alpha value to use for fillColor.
            */
            public SetColorWithRadiusHandle ($color: UnityEngine.Color, $fillColorAlpha: number) : void
            /** A function to display this instance in the current handle camera using its current configuration.
            */
            public DrawHandle () : void
            public constructor ()
        }
        /** Base class for a compound handle to edit a bounding volume in the Scene view.
        */
        class PrimitiveBoundsHandle extends System.Object
        {
            protected [__keep_incompatibility]: never;
            /** Returns or specifies the center of the bounding volume for the handle.
            */
            public get center(): UnityEngine.Vector3;
            public set center(value: UnityEngine.Vector3);
            /** Flags specifying which axes should display control handles.
            */
            public get axes(): UnityEditor.IMGUI.Controls.PrimitiveBoundsHandle.Axes;
            public set axes(value: UnityEditor.IMGUI.Controls.PrimitiveBoundsHandle.Axes);
            /** Returns or specifies the color of the control handles.
            */
            public get handleColor(): UnityEngine.Color;
            public set handleColor(value: UnityEngine.Color);
            /** Returns or specifies the color of the wireframe shape.
            */
            public get wireframeColor(): UnityEngine.Color;
            public set wireframeColor(value: UnityEngine.Color);
            /** An optional Handles.CapFunction to use when displaying the control handles. Defaults to Handles.DotHandleCap if no value is specified.
            */
            public get midpointHandleDrawFunction(): UnityEditor.Handles.CapFunction;
            public set midpointHandleDrawFunction(value: UnityEditor.Handles.CapFunction);
            /** The Handles.SizeFunction to specify how large the midpoint control handles should be.
            */
            public get midpointHandleSizeFunction(): UnityEditor.Handles.SizeFunction;
            public set midpointHandleSizeFunction(value: UnityEditor.Handles.SizeFunction);
            /** A Handles.SizeFunction that returns a fixed screen-space size.
            * @param $position The current position of the handle in the space of Handles.matrix.
            * @returns The size to use for a handle at the specified position. 
            */
            public static DefaultMidpointHandleSizeFunction ($position: UnityEngine.Vector3) : number
            /** Sets handleColor and wireframeColor to the same value.
            * @param $color The color to use for the control handles and the wireframe shape.
            */
            public SetColor ($color: UnityEngine.Color) : void
            /** A function to display this instance in the current handle camera using its current configuration.
            */
            public DrawHandle () : void
        }
        /** A compound handle to edit a box-shaped bounding volume in the Scene view.
        */
        class BoxBoundsHandle extends UnityEditor.IMGUI.Controls.PrimitiveBoundsHandle
        {
            protected [__keep_incompatibility]: never;
            /** Returns or specifies the size of the bounding box.
            */
            public get size(): UnityEngine.Vector3;
            public set size(value: UnityEngine.Vector3);
            public constructor ()
        }
        /** A compound handle to edit a capsule-shaped bounding volume in the Scene view.
        */
        class CapsuleBoundsHandle extends UnityEditor.IMGUI.Controls.PrimitiveBoundsHandle
        {
            protected [__keep_incompatibility]: never;
            /** Returns or specifies the axis in the handle's space to which height maps. The radius maps to the remaining axes.
            */
            public get heightAxis(): UnityEditor.IMGUI.Controls.CapsuleBoundsHandle.HeightAxis;
            public set heightAxis(value: UnityEditor.IMGUI.Controls.CapsuleBoundsHandle.HeightAxis);
            /** Returns or specifies the height of the capsule bounding volume.
            */
            public get height(): number;
            public set height(value: number);
            /** Returns or specifies the radius of the capsule bounding volume.
            */
            public get radius(): number;
            public set radius(value: number);
            public constructor ()
        }
        /** A compound handle to edit a sphere-shaped bounding volume in the Scene view.
        */
        class SphereBoundsHandle extends UnityEditor.IMGUI.Controls.PrimitiveBoundsHandle
        {
            protected [__keep_incompatibility]: never;
            /** Returns or specifies the radius of the sphere bounding volume.
            */
            public get radius(): number;
            public set radius(value: number);
            public constructor ()
        }
        /** The SearchField control creates a text field for a user to input text that can be used for searching.
        */
        class SearchField extends System.Object
        {
            protected [__keep_incompatibility]: never;
            /** This is the controlID used for the text field to obtain keyboard focus.
            */
            public get searchFieldControlID(): number;
            public set searchFieldControlID(value: number);
            /** Changes the keyboard focus to the search field when the user presses ‘Ctrl/Cmd + F’ when set to true. It is true by default.
            */
            public get autoSetFocusOnFindCommand(): boolean;
            public set autoSetFocusOnFindCommand(value: boolean);
            public add_downOrUpArrowKeyPressed ($value: UnityEditor.IMGUI.Controls.SearchField.SearchFieldCallback) : void
            public remove_downOrUpArrowKeyPressed ($value: UnityEditor.IMGUI.Controls.SearchField.SearchFieldCallback) : void
            /** This function changes keyboard focus to the search field so a user can start typing.
            */
            public SetFocus () : void
            /** This function returns true if the search field has keyboard focus.
            */
            public HasFocus () : boolean
            /** This function displays a search text field with the given Rect and UI style parameters.
            * @param $rect Rectangle to use for the search field.
            * @param $text Text string to display in the search field.
            * @param $style The text field style.
            * @param $cancelButtonStyle The cancel button style used when there is text in the search field.
            * @param $emptyCancelButtonStyle The cancel button style used when there is no text in the search field.
            * @returns The text entered in the SearchField. The original input string is returned instead if the search field text was not changed. 
            */
            public OnGUI ($rect: UnityEngine.Rect, $text: string, $style: UnityEngine.GUIStyle, $cancelButtonStyle: UnityEngine.GUIStyle, $emptyCancelButtonStyle: UnityEngine.GUIStyle) : string
            /** This function displays the search field with the default UI style in the given Rect.
            * @param $rect Rectangle to use for the search field.
            * @param $text Text string to display in the search field.
            * @returns The text entered in the search field. The original input string is returned instead if the search field text was not changed. 
            */
            public OnGUI ($rect: UnityEngine.Rect, $text: string) : string
            /** This function displays the search field with the default UI style and uses the GUILayout class to automatically calculate the position and size of the Rect it is rendered to. Pass an optional list to specify extra layout properties.
            * @param $text Text string to display in the search field.
            * @param $options An optional list of layout options that specify extra layout properties. <br>
            Additional resources: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
            GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.
            * @returns The text entered in the search field. The original input string is returned instead if the search field text was not changed. 
            */
            public OnGUI ($text: string, ...options: UnityEngine.GUILayoutOption[]) : string
            /** This function displays the search field with a toolbar style in the given Rect.
            * @param $rect Rectangle to use for the search field.
            * @param $text Text string to display in the search field.
            * @returns The text entered in the search field. The original input string is returned instead if the search field text was not changed. 
            */
            public OnToolbarGUI ($rect: UnityEngine.Rect, $text: string) : string
            /** This function displays the search field with the toolbar UI style and uses the GUILayout class to automatically calculate the position and size of the Rect it is rendered to. Pass an optional list to specify extra layout properties.
            * @param $text Text string to display in the search field.
            * @param $options An optional list of layout options that specify extra layout properties. <br>
            Additional resources: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight,
            GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight.
            * @returns The text entered in the search field. The original input string is returned instead if the search field text was not changed. 
            */
            public OnToolbarGUI ($text: string, ...options: UnityEngine.GUILayoutOption[]) : string
            public constructor ()
        }
        /** The TreeView is an IMGUI control that lets you create tree views, list views and multi-column tables for Editor tools.
        */
        class TreeView extends System.Object
        {
            protected [__keep_incompatibility]: never;
            /** The state of the TreeView (expanded state, selection, scroll etc.)
            */
            public get state(): UnityEditor.IMGUI.Controls.TreeViewState;
            /** Get the MultiColumnHeader of the TreeView. Can be null if the TreeView was created without a MultiColumnHeader.
            */
            public get multiColumnHeader(): UnityEditor.IMGUI.Controls.MultiColumnHeader;
            public set multiColumnHeader(value: UnityEditor.IMGUI.Controls.MultiColumnHeader);
            /** Returns the sum of the TreeView row heights, the MultiColumnHeader height (if used) and the border (if used).
            */
            public get totalHeight(): number;
            /** The controlID used by the TreeView to obtain keyboard control focus.
            */
            public get treeViewControlID(): number;
            public set treeViewControlID(value: number);
            /** The current search state of the TreeView.
            */
            public get hasSearch(): boolean;
            /** Current search string of the TreeView.
            */
            public get searchString(): string;
            public set searchString(value: string);
            /** Call this to force the TreeView to reload its data. This in turn causes BuildRoot and BuildRows to be called.
            */
            public Reload () : void
            /** Request a repaint of the window that the TreeView is rendered in.
            */
            public Repaint () : void
            /** This is the list of TreeViewItems that have been built in BuildRows.
            * @returns Rows. 
            */
            public GetRows () : System.Collections.Generic.IList$1<UnityEditor.IMGUI.Controls.TreeViewItem>
            /** Expand all collapsed items in the TreeView.
            */
            public ExpandAll () : void
            /** Collapse all expanded items in the TreeView.
            */
            public CollapseAll () : void
            /** Expand or collapse all items under item with id.
            * @param $id TreeViewItem ID.
            * @param $expanded Expanded state: true expands, false collapses.
            */
            public SetExpandedRecursive ($id: number, $expanded: boolean) : void
            /** Set a single TreeViewItem to be expanded or collapsed.
            * @param $id TreeViewItem ID.
            * @param $expanded True expands item. False collapses item.
            * @returns True if item changed expanded state, false if item already had the expanded state. 
            */
            public SetExpanded ($id: number, $expanded: boolean) : boolean
            public SetExpanded ($ids: System.Collections.Generic.IList$1<number>) : void
            /** Returns a list of TreeViewItem IDs that are currently expanded in the TreeView.
            * @returns TreeViewItem IDs. 
            */
            public GetExpanded () : System.Collections.Generic.IList$1<number>
            /** Returns true if the TreeViewItem with ID id is currently expanded.
            * @param $id TreeViewItem ID.
            */
            public IsExpanded ($id: number) : boolean
            /** Returns the list of TreeViewItem IDs that are currently selected.
            */
            public GetSelection () : System.Collections.Generic.IList$1<number>
            public SetSelection ($selectedIDs: System.Collections.Generic.IList$1<number>) : void
            public SetSelection ($selectedIDs: System.Collections.Generic.IList$1<number>, $options: UnityEditor.IMGUI.Controls.TreeViewSelectionOptions) : void
            /** Returns true if the TreeViewItem with ID id is currently selected.
            * @param $id TreeViewItem ID.
            */
            public IsSelected ($id: number) : boolean
            /** Returns true if the TreeView has a selection.
            */
            public HasSelection () : boolean
            /** Returns true if the TreeView and its EditorWindow have keyboard focus.
            */
            public HasFocus () : boolean
            /** Calling this function changes the keyboard focus to the TreeView.
            */
            public SetFocus () : void
            /** Calling this function changes the keyboard focus to the TreeView and ensures an item is selected. Use this function to enable key navigation of the TreeView.
            */
            public SetFocusAndEnsureSelectedItem () : void
            /** Shows the rename overlay for a TreeViewItem.
            * @param $item Item to rename.
            * @param $delay Delay in seconds until the rename overlay shows.
            * @returns Returns true if renaming was started. Returns false if renaming was already active. 
            */
            public BeginRename ($item: UnityEditor.IMGUI.Controls.TreeViewItem) : boolean
            /** Shows the rename overlay for a TreeViewItem.
            * @param $item Item to rename.
            * @param $delay Delay in seconds until the rename overlay shows.
            * @returns Returns true if renaming was started. Returns false if renaming was already active. 
            */
            public BeginRename ($item: UnityEditor.IMGUI.Controls.TreeViewItem, $delay: number) : boolean
            /** Ends renaming if the rename overlay is shown. If called while the rename overlay is not being shown, this method does nothing.
            */
            public EndRename () : void
            /** This will reveal the item with ID id (by expanding the ancestors of that item) and will make sure it is visible in the ScrollView.
            * @param $id TreeViewItem ID.
            */
            public FrameItem ($id: number) : void
            /** This is the main GUI method of the TreeView, where the TreeViewItems are processed and drawn.
            * @param $rect Rect where the TreeView is rendered.
            */
            public OnGUI ($rect: UnityEngine.Rect) : void
            /** Selects all rows in the TreeView.
            */
            public SelectAllRows () : void
        }
        /** The TreeViewState contains serializable state information for the TreeView.
        */
        class TreeViewState extends System.Object
        {
            protected [__keep_incompatibility]: never;
            /** The current scroll values of the TreeView's scroll view.
            */
            public scrollPos : UnityEngine.Vector2
            /** Selected TreeViewItem IDs. Use of the SetSelection and IsSelected API will access this state.
            */
            public get selectedIDs(): System.Collections.Generic.List$1<number>;
            public set selectedIDs(value: System.Collections.Generic.List$1<number>);
            /** The ID for the TreeViewItem that currently is being used for multi selection and key navigation.
            */
            public get lastClickedID(): number;
            public set lastClickedID(value: number);
            /** This is the list of currently expanded TreeViewItem IDs.
            */
            public get expandedIDs(): System.Collections.Generic.List$1<number>;
            public set expandedIDs(value: System.Collections.Generic.List$1<number>);
            /** Search string state that can be used in the TreeView to filter the tree data when creating the TreeViewItems.
            */
            public get searchString(): string;
            public set searchString(value: string);
            public constructor ()
        }
        /** The TreeViewItem is used to build the tree representation of a tree data structure.
        */
        class TreeViewItem extends System.Object implements System.IComparable$1<UnityEditor.IMGUI.Controls.TreeViewItem>
        {
            protected [__keep_incompatibility]: never;
            /** Unique ID for an item.
            */
            public get id(): number;
            public set id(value: number);
            /** Name shown for this item when rendered.
            */
            public get displayName(): string;
            public set displayName(value: string);
            /** The depth refers to how many ancestors this item has, and corresponds to the number of horizontal ‘indents’ this item has.
            */
            public get depth(): number;
            public set depth(value: number);
            /** Returns true if children has any items.
            */
            public get hasChildren(): boolean;
            /** The list of child items of this TreeViewItem.
            */
            public get children(): System.Collections.Generic.List$1<UnityEditor.IMGUI.Controls.TreeViewItem>;
            public set children(value: System.Collections.Generic.List$1<UnityEditor.IMGUI.Controls.TreeViewItem>);
            /** The parent of this TreeViewItem. If it is null then it is considered the root of the TreeViewItem tree.
            */
            public get parent(): UnityEditor.IMGUI.Controls.TreeViewItem;
            public set parent(value: UnityEditor.IMGUI.Controls.TreeViewItem);
            /** If set, this icon will be rendered to the left of the displayName. The icon is rendered at 16x16 points by default.
            */
            public get icon(): UnityEngine.Texture2D;
            public set icon(value: UnityEngine.Texture2D);
            /** Helper method that adds the child TreeViewItem to the children list and sets the parent property on the child.
            * @param $child TreeViewItem to be added to the children list.
            */
            public AddChild ($child: UnityEditor.IMGUI.Controls.TreeViewItem) : void
            public CompareTo ($other: UnityEditor.IMGUI.Controls.TreeViewItem) : number
            public constructor ()
            public constructor ($id: number)
            public constructor ($id: number, $depth: number)
            public constructor ($id: number, $depth: number, $displayName: string)
        }
        /** Enum used by the TreeView.SetSelection method.
        */
        enum TreeViewSelectionOptions
        { None = 0, FireSelectionChanged = 1, RevealAndFrame = 2 }
        /** Items that build the drop-down list.
        */
        class AdvancedDropdownItem extends System.Object implements System.IComparable
        {
            protected [__keep_incompatibility]: never;
            /** Name shown for this item when rendered.
            */
            public get name(): string;
            public set name(value: string);
            /** If set, this icon will be rendered to the left of the item name.
            */
            public get icon(): UnityEngine.Texture2D;
            public set icon(value: UnityEngine.Texture2D);
            /** The unique identifier for an item.
            */
            public get id(): number;
            public set id(value: number);
            /** True if the item is enabled.
            */
            public get enabled(): boolean;
            public set enabled(value: boolean);
            /** The list of child items of this item.
            */
            public get children(): System.Collections.Generic.IEnumerable$1<UnityEditor.IMGUI.Controls.AdvancedDropdownItem>;
            /** Adds the given AdvancedDropdownItem child to the children list.
            * @param $child AdvancedDropdownItem to be added to the children list.
            */
            public AddChild ($child: UnityEditor.IMGUI.Controls.AdvancedDropdownItem) : void
            public CompareTo ($o: any) : number
            /** Adds a separator to the list of children in the drop-down.
            */
            public AddSeparator () : void
            public constructor ($name: string)
        }
        /** The state of the drop-down. This Object can be serialized.
        */
        class AdvancedDropdownState extends System.Object
        {
            protected [__keep_incompatibility]: never;
            public constructor ()
        }
        /** Inherit from this class to implement your own drop-down control.
        */
        class AdvancedDropdown extends System.Object
        {
            protected [__keep_incompatibility]: never;
            /** Call this method to show the drop-down at the given position.
            * @param $rect Position of the button that triggered the drop-down.
            */
            public Show ($rect: UnityEngine.Rect) : void
        }
    }
    namespace UnityEditorInternal.ProfilerFrameDataMultiColumnHeader {
        class Column extends System.ValueType
        {
            protected [__keep_incompatibility]: never;
            public profilerColumn : number
            public headerLabel : UnityEngine.GUIContent
        }
    }
    namespace UnityEditor.Profiling {
        /** Base funtionality for accessing the Profiler data.
        */
        class FrameDataView extends System.Object implements System.IDisposable
        {
            protected [__keep_incompatibility]: never;
            /** Identifier of the invalid marker.
            */
            public static invalidMarkerId : number
            /** This constant defines a thread index that does not match any valid thread's index.
            */
            public static invalidThreadIndex : number
            /** This constant defines a thread id that does not match any valid thread's id.
            */
            public static invalidThreadId : bigint
            /** True after the frame data for the thread is processed and ready for retrieval.
            */
            public get valid(): boolean;
            /** The frame index for the FrameDataView.
            */
            public get frameIndex(): number;
            /** The index of the thread in the current frame.
            */
            public get threadIndex(): number;
            /** The name of the group that the thread belongs to.
            */
            public get threadGroupName(): string;
            /** Name of the thread.
            */
            public get threadName(): string;
            /** Persistent identifier associated with the thread.
            */
            public get threadId(): bigint;
            /** The start time of CPU frame in milliseconds.
            */
            public get frameStartTimeMs(): number;
            /** The start time of CPU frame in nanoseconds.
            */
            public get frameStartTimeNs(): bigint;
            /** The amount of CPU frame time in milliseconds.
            */
            public get frameTimeMs(): number;
            /** The amount of CPU frame time in nanoseconds.
            */
            public get frameTimeNs(): bigint;
            /** The amount of GPU frame time in milliseconds.
            */
            public get frameGpuTimeMs(): number;
            /** The amount of GPU frame time in nanoseconds.
            */
            public get frameGpuTimeNs(): bigint;
            /** The current frames per second (FPS) for the frame.
            */
            public get frameFps(): number;
            /** The amount of samples in the frame for the thread.
            */
            public get sampleCount(): number;
            /** Maximum child samples levels in the thread data.
            */
            public get maxDepth(): number;
            public Dispose () : void
            /** Gets Profiler marker category for the specific marker identifier.
            * @param $markerId Marker identifier.
            * @returns Returns Profiler category index. 
            */
            public GetMarkerCategoryIndex ($markerId: number) : number
            /** Gets Profiler marker flags for the specific marker identifier.
            * @param $markerId Marker identifier.
            * @returns Returns Profiler marker flags. 
            */
            public GetMarkerFlags ($markerId: number) : Unity.Profiling.LowLevel.MarkerFlags
            /** Gets Profiler marker name for the specific marker identifier.
            * @param $markerId Marker identifier.
            * @returns Returns marker name. Returns null if identifier is unknown. 
            */
            public GetMarkerName ($markerId: number) : string
            /** Gets Profiler marker metadata information for the specific marker identifier.
            * @param $markerId Marker identifier.
            * @returns Returns an array of metadata information structures. 
            */
            public GetMarkerMetadataInfo ($markerId: number) : System.Array$1<UnityEditor.Profiling.FrameDataView.MarkerMetadataInfo>
            /** Get Profiler marker identifier for a specific name.
            * @param $markerName Marker name.
            * @returns Returns marker identifier as integer. Returns invalidMarkerId if there is no such marker in the capture. 
            */
            public GetMarkerId ($markerName: string) : number
            public GetMarkers ($markerInfoList: System.Collections.Generic.List$1<UnityEditor.Profiling.FrameDataView.MarkerInfo>) : void
            /** Gets the Profiler category information for a given category ID.
            * @param $id The ID for the Category.
            * @returns Returns a ProfilerCategoryInfo struct based on the supplied ID. If the ID doesn't exist, an exception is thrown. 
            */
            public GetCategoryInfo ($id: number) : UnityEditor.Profiling.ProfilerCategoryInfo
            public GetAllCategories ($categoryInfoList: System.Collections.Generic.List$1<UnityEditor.Profiling.ProfilerCategoryInfo>) : void
            /** Gets the total number of metadata chunks for each id and tag pair in the frame.
            * @param $id Project or package identifier.
            * @param $tag Data stream index.
            * @returns Returns count of metadata chunks. 
            */
            public GetFrameMetaDataCount ($id: System.Guid, $tag: number) : number
            /** Gets the total number of metadata chunks for each id and tag pair in the Profiler session.
            * @param $id Unique identifier associated with the data.
            * @param $tag Data stream index.
            * @returns Returns count of metadata chunks. 
            */
            public GetSessionMetaDataCount ($id: System.Guid, $tag: number) : number
            /** Returns method name and location information for the specified method address.
            * @param $addr Instruction pointer.
            * @returns Method name and location information. 
            */
            public ResolveMethodInfo ($addr: bigint) : UnityEditor.Profiling.FrameDataView.MethodInfo
            /** Returns true for a marker that includes a counter in the active frame.
            * @param $markerId Marker identifier.
            */
            public HasCounterValue ($markerId: number) : boolean
            /** Gets the last value of a counter marker in the frame as an int data type'.
            * @param $markerId Marker identifier.
            * @returns Returns the counter value as int. 
            */
            public GetCounterValueAsInt ($markerId: number) : number
            /** Gets the last value of a counter marker in the frame as a long data type.
            * @param $markerId Marker identifier.
            * @returns Returns the counter value as long. 
            */
            public GetCounterValueAsLong ($markerId: number) : bigint
            /** Gets the last value of a counter marker in the frame as a float data type'.
            * @param $markerId Marker identifier.
            * @returns Returns the counter value as float. 
            */
            public GetCounterValueAsFloat ($markerId: number) : number
            /** Gets the last value of a counter marker in the frame as a double data type'.
            * @param $markerId Marker identifier.
            * @returns Returns the counter value as double. 
            */
            public GetCounterValueAsDouble ($markerId: number) : number
            public GetUnityObjectInfo ($instanceId: number, $info: $Ref<UnityEditor.Profiling.FrameDataView.UnityObjectInfo>) : boolean
            public GetUnityObjectNativeTypeInfo ($nativeTypeIndex: number, $info: $Ref<UnityEditor.Profiling.FrameDataView.UnityObjectNativeTypeInfo>) : boolean
            /** Returns native types count in the capture.
            * @returns Type count. 
            */
            public GetUnityObjectNativeTypeInfoCount () : number
            public GetGfxResourceInfo ($gfxResourceId: bigint, $info: $Ref<UnityEditor.Profiling.FrameDataView.GfxResourceInfo>) : boolean
        }
        /** Provides access to the Profiler data for a specific frame and thread.
        */
        class HierarchyFrameDataView extends UnityEditor.Profiling.FrameDataView implements System.IDisposable
        {
            protected [__keep_incompatibility]: never;
            /** Index of the invalid item.
            */
            public static invalidSampleId : number
            /** The column identifier that indicates whether sorting is disabled.
            */
            public static columnDontSort : number
            /** The Profiler Sample Name column.
            */
            public static columnName : number
            /** The percentage of the CPU time Unity spends in a sample, including the time from child samples.
            */
            public static columnTotalPercent : number
            /** The percentage of the CPU time Unity spends in a sample itself, excluding the time from child samples.
            */
            public static columnSelfPercent : number
            /** The Calls column.
            */
            public static columnCalls : number
            /** The amount of managed allocations within a sample.
            */
            public static columnGcMemory : number
            /** The CPU time in milliseconds that Unity spends in a sample, including the time from child samples.
            */
            public static columnTotalTime : number
            /** The CPU time in milliseconds that Unity spends in a sample itself, excluding the time from child samples.
            */
            public static columnSelfTime : number
            /** The amount of samples that are inside a code execution path that is suboptimal for performance.
            */
            public static columnWarningCount : number
            /** The Object Name column.
            */
            public static columnObjectName : number
            /** The start time of a call in milliseconds.
            */
            public static columnStartTime : number
            /** The view mode which defines how data is aggregated.
            */
            public get viewMode(): UnityEditor.Profiling.HierarchyFrameDataView.ViewModes;
            /** The column identifier that defines the sort column.
            */
            public get sortColumn(): number;
            /** Whether the sorting order is ascending, true, or descending, false.
            */
            public get sortColumnAscending(): boolean;
            /** Gets the identifier for the root tree item.
            */
            public GetRootItemID () : number
            /** Returns Profiler marker which uniquely identifies sample name.
            * @param $id Hierarchy item identifier.
            */
            public GetItemMarkerID ($id: number) : number
            /** Use to retrieve a marker usage flags.
            * @param $id Hierarchy item identifier.
            * @returns Marker usage flags. 
            */
            public GetItemMarkerFlags ($id: number) : Unity.Profiling.LowLevel.MarkerFlags
            /** Gets Profiler marker category for the specific marker identifier.
            * @param $id Hierarchy item identifier.
            * @returns Returns Profiler category index. 
            */
            public GetItemCategoryIndex ($id: number) : number
            /** Returns hierarchy level of the item.
            * @param $id Hierarchy item identifier.
            */
            public GetItemDepth ($id: number) : number
            /** Checks whether the tree item has children.
            * @param $id Hierarchy item identifier.
            */
            public HasItemChildren ($id: number) : boolean
            public GetItemChildren ($id: number, $outChildren: System.Collections.Generic.List$1<number>) : void
            public GetItemAncestors ($id: number, $outAncestors: System.Collections.Generic.List$1<number>) : void
            public GetItemDescendantsThatHaveChildren ($id: number, $outChildren: System.Collections.Generic.List$1<number>) : void
            /** Gets the sample name associated with the item.
            * @param $id Hierarchy item identifier.
            * @returns Returns item name. Returns null if identifier is invalid. 
            */
            public GetItemName ($id: number) : string
            /** Returns InstanceID of the UnityEngine.Object associated with the sample.
            * @param $id Hierarchy item identifier.
            */
            public GetItemInstanceID ($id: number) : number
            /** Returns string representation of hierarchy item value associated with the column.
            * @param $id Hierarchy item identifier.
            * @param $column Column identifier.
            * @returns Value of the correspnding column as string. 
            */
            public GetItemColumnData ($id: number, $column: number) : string
            /** Returns float representation of hierarchy item value associated with the column.
            * @param $id Hierarchy item identifier.
            * @param $column Column identifier.
            * @returns Value of the correspnding column as float. 
            */
            public GetItemColumnDataAsSingle ($id: number, $column: number) : number
            /** Returns float representation of hierarchy item value associated with the column.
            * @param $id Hierarchy item identifier.
            * @param $column Column identifier.
            * @returns Value of the correspnding column as float. 
            */
            public GetItemColumnDataAsFloat ($id: number, $column: number) : number
            /** Returns double representation of hierarchy item value associated with the column.
            * @param $id Hierarchy item identifier.
            * @param $column Column identifier.
            * @returns Value of the correspnding column as double. 
            */
            public GetItemColumnDataAsDouble ($id: number, $column: number) : number
            /** Returns metadata count associated with hierarchy item.
            * @param $id Hierarchy item identifier.
            * @returns Metadata count. 
            */
            public GetItemMetadataCount ($id: number) : number
            /** Returns string representation of hierarchy item metadata value.
            * @param $id Hierarchy item identifier.
            * @param $index Metadata index.
            * @returns Value of the metadata as string. 
            */
            public GetItemMetadata ($id: number, $index: number) : string
            /** Returns float representation of hierarchy item metadata value.
            * @param $id Hierarchy item identifier.
            * @param $index Metadata index.
            * @returns Value of the metadata as float. 
            */
            public GetItemMetadataAsFloat ($id: number, $index: number) : number
            /** Returns long representation of hierarchy item metadata value.
            * @param $id Hierarchy item identifier.
            * @param $index Metadata index.
            * @returns Value of the metadata as long. 
            */
            public GetItemMetadataAsLong ($id: number, $index: number) : bigint
            /** Returns metadata count associated with hierarchy item.
            * @param $id Hierarchy item identifier.
            * @param $sampleIndex Merged sample index.
            * @returns Returns metadata count. 
            */
            public GetItemMergedSamplesMetadataCount ($id: number, $sampleIndex: number) : number
            /** Returns string representation of hierarchy item metadata value.
            * @param $id Hierarchy item identifier.
            * @param $sampleIndex Merged sample index.
            * @param $metadataIndex Metadata index.
            * @returns Returns value of the metadata as string. 
            */
            public GetItemMergedSamplesMetadata ($id: number, $sampleIndex: number, $metadataIndex: number) : string
            /** Returns float representation of hierarchy item metadata value.
            * @param $id Hierarchy item identifier.
            * @param $sampleIndex Merged sample index.
            * @param $metadataIndex Metadata index.
            * @returns Returns value of the metadata as float. 
            */
            public GetItemMergedSamplesMetadataAsFloat ($id: number, $sampleIndex: number, $metadataIndex: number) : number
            /** Returns long representation of hierarchy item metadata value.
            * @param $id Hierarchy item identifier.
            * @param $sampleIndex Merged sample index.
            * @param $metadataIndex Metadata index.
            * @returns Returns value of the metadata as long. 
            */
            public GetItemMergedSamplesMetadataAsLong ($id: number, $sampleIndex: number, $metadataIndex: number) : bigint
            /** Gets the callstack associated with the specified hierarchy item.
            * @param $id Hierarchy item identifier.
            * @returns Returns the callstack associated with the hierarchy item. Returns an empty string if the callstack is empty or if the method is unsuccessful. 
            */
            public ResolveItemCallstack ($id: number) : string
            public GetItemCallstack ($id: number, $outCallstack: System.Collections.Generic.List$1<bigint>) : void
            /** Return merged samples count represented by the hierarchy item.
            * @param $id Hierarchy item identifier.
            * @returns Returns merged samples count represented by the tree item. 
            */
            public GetItemMergedSamplesCount ($id: number) : number
            public GetItemRawFrameDataViewIndices ($id: number, $outSampleIndices: System.Collections.Generic.List$1<number>) : void
            /** Checks if the provided raw sample index matches any of the raw sample indices associated with this Hierarchy item identifier.
            * @param $id Hierarchy item identifier.
            * @param $sampleIndex The particular profiler sample index that should be checked if it is represented by this hierarchy item.
            * @returns True if the sample index is represented by this hierarchy item, false if it is not. 
            */
            public ItemContainsRawFrameDataViewIndex ($id: number, $sampleIndex: number) : boolean
            public GetItemMergedSamplesColumnData ($id: number, $column: number, $outStrings: System.Collections.Generic.List$1<string>) : void
            public GetItemMergedSamplesColumnDataAsFloats ($id: number, $column: number, $outValues: System.Collections.Generic.List$1<number>) : void
            public GetItemMergedSamplesColumnDataAsDoubles ($id: number, $column: number, $outValues: System.Collections.Generic.List$1<number>) : void
            public GetItemMergedSamplesInstanceID ($id: number, $outInstanceIds: System.Collections.Generic.List$1<number>) : void
            public GetItemMergedSampleCallstack ($id: number, $sampleIndex: number, $outCallstack: System.Collections.Generic.List$1<bigint>) : void
            /** Gets the callstack associated with a specific item sample.
            * @param $id Hierarchy item identifier.
            * @param $sampleIndex Merged sample index.
            * @returns Returns the callstack associated with the specific item sample. Returns an empty string if the callstack is empty or if the method is unsuccessful. 
            */
            public ResolveItemMergedSampleCallstack ($id: number, $sampleIndex: number) : string
            public GetItemMarkerIDPath ($id: number, $outFullIdPath: System.Collections.Generic.List$1<number>) : void
            /** Retrieves the hierarchy item path as a string. Each level is delimited by forward slashes ('/').
            * @param $id Hierarchy item identifier.
            */
            public GetItemPath ($id: number) : string
            /** Sorts the hierarchy view.
            */
            public Sort ($sortColumn: number, $sortAscending: boolean) : void
        }
        /** Provides access to the Profiler data for a specific frame and thread.
        */
        class RawFrameDataView extends UnityEditor.Profiling.FrameDataView implements System.IDisposable
        {
            protected [__keep_incompatibility]: never;
            /** This constant defines a sample index that does not match any valid Profiler Sample.
            */
            public static invalidSampleIndex : number
            /** Gets the start time of the sample. The amount of time is expressed in milliseconds.
            * @param $sampleIndex Index of the Profiler sample.
            * @returns Returns sample start time in milliseconds. 
            */
            public GetSampleStartTimeMs ($sampleIndex: number) : number
            /** Gets the start time of the sample. The amount of time is expressed in nanoseconds.
            * @param $sampleIndex Index of the Profiler sample.
            * @returns Returns sample start time in nanoseconds. 
            */
            public GetSampleStartTimeNs ($sampleIndex: number) : bigint
            /** Gets the duration of sample. The amount of time is expressed in milliseconds.
            * @param $sampleIndex Index of the Profiler sample.
            * @returns Returns sample duration in milliseconds. 
            */
            public GetSampleTimeMs ($sampleIndex: number) : number
            /** Gets the duration of sample. The amount of time is expressed in nanoseconds.
            * @param $sampleIndex Index of the Profiler sample.
            * @returns Returns sample duration in nanoseconds. 
            */
            public GetSampleTimeNs ($sampleIndex: number) : bigint
            /** Gets Profiler marker indentifier which uniquely identifies sample name.
            * @param $sampleIndex Index of the Profiler sample.
            * @returns Returns Profiler marker indentifier. Returns invalidMarkerId for invalid index. 
            */
            public GetSampleMarkerId ($sampleIndex: number) : number
            /** Gets Profiler marker flags for the specific sample.
            * @param $sampleIndex Index of the Profiler sample.
            * @returns Returns Profiler marker flags. 
            */
            public GetSampleFlags ($sampleIndex: number) : Unity.Profiling.LowLevel.MarkerFlags
            /** Gets Profiler marker category for the specific sample.
            * @param $sampleIndex Index of the Profiler sample.
            * @returns Returns Profiler category index. 
            */
            public GetSampleCategoryIndex ($sampleIndex: number) : number
            /** Gets the name of the specific sample.
            * @param $sampleIndex Index of the Profiler sample.
            * @returns Returns sample name. Returns null if sample index is invalid. 
            */
            public GetSampleName ($sampleIndex: number) : string
            /** Gets amount of child samples for the specific sample.
            * @param $sampleIndex Index of the Profiler sample.
            * @returns Returns amount of child samples. 
            */
            public GetSampleChildrenCount ($sampleIndex: number) : number
            /** Gets amount of direct and indirect child samples for the specific sample.
            * @param $sampleIndex Index of the Profiler sample.
            * @returns Returns amount of direct and indirect child samples. 
            */
            public GetSampleChildrenCountRecursive ($sampleIndex: number) : number
            /** Gets metadata count associated with the specific sample.
            * @param $sampleIndex Index of the Profiler sample.
            * @returns Amount of metadata values. 
            */
            public GetSampleMetadataCount ($sampleIndex: number) : number
            /** Gets sample metadata value as string.
            * @param $sampleIndex Index of the Profiler sample.
            * @param $metadataIndex Metadata index.
            * @returns Returns string representation of sample metadata value. 
            */
            public GetSampleMetadataAsString ($sampleIndex: number, $metadataIndex: number) : string
            /** Gets sample metadata value as integer.
            * @param $sampleIndex Index of the Profiler sample.
            * @param $metadataIndex Metadata index.
            * @returns Returns integer representation of sample metadata value. 
            */
            public GetSampleMetadataAsInt ($sampleIndex: number, $metadataIndex: number) : number
            /** Gets sample metadata value as long.
            * @param $sampleIndex Index of the Profiler sample.
            * @param $metadataIndex Metadata index.
            * @returns Returns long representation of sample metadata value. 
            */
            public GetSampleMetadataAsLong ($sampleIndex: number, $metadataIndex: number) : bigint
            /** Gets sample metadata value as float.
            * @param $sampleIndex Index of the Profiler sample.
            * @param $metadataIndex Metadata index.
            * @returns Returns float representation of sample metadata value. 
            */
            public GetSampleMetadataAsFloat ($sampleIndex: number, $metadataIndex: number) : number
            /** Gets sample metadata value as double.
            * @param $sampleIndex Index of the Profiler sample.
            * @param $metadataIndex Metadata index.
            * @returns Returns double representation of sample metadata value. 
            */
            public GetSampleMetadataAsDouble ($sampleIndex: number, $metadataIndex: number) : number
            public GetSampleCallstack ($sampleIndex: number, $outCallstack: System.Collections.Generic.List$1<bigint>) : void
            public GetSampleFlowEvents ($sampleIndex: number, $outFlowEvents: System.Collections.Generic.List$1<UnityEditor.Profiling.RawFrameDataView.FlowEvent>) : void
            public GetFlowEvents ($outFlowEvents: System.Collections.Generic.List$1<UnityEditor.Profiling.RawFrameDataView.FlowEvent>) : void
        }
        interface IProfilerFrameTimeViewSampleSelectionController
        {
            /** Get the current selection in a frame time sample based.
            */
            selection : UnityEditor.Profiling.ProfilerTimeSampleSelection
            /** This filters the samples displayed in Hierarchy view to only include the names that include this string.
            */
            sampleNameSearchFilter : string
            /** The index of the the thread selected to be displayed in the.
            */
            focusedThreadIndex : number
            add_selectionChanged ($value: System.Action$2<UnityEditor.Profiling.IProfilerFrameTimeViewSampleSelectionController, UnityEditor.Profiling.ProfilerTimeSampleSelection>) : void
            remove_selectionChanged ($value: System.Action$2<UnityEditor.Profiling.IProfilerFrameTimeViewSampleSelectionController, UnityEditor.Profiling.ProfilerTimeSampleSelection>) : void
            /** Set the current selection in a frame time sample based Profiler Module, such as the.
            * @param $selection A fully described selection created via a the ProfilerTimeSampleSelection constructor or previously retrieved via ProfilerWindow.selection.
            * @returns Returns true if the selection was successfully set, false if it was rejected because no fitting sample could be found. 
            */
            SetSelection ($selection: UnityEditor.Profiling.ProfilerTimeSampleSelection) : boolean
            /** Call this method to clear the current selection in this frame time view based.
            */
            ClearSelection () : void
        }
        interface IProfilerFrameTimeViewSampleSelectionController {
            /** Set the current selection in a frame time sample based Profiler Module, such as the.
            * @param $controller The controller object of the Profiler module whose selection you want to set. When the value is null, Unity throws a NullArgumentException.
            * @param $frameIndex The 0 based frame index. Note that the Profiler Window UI shows the frame index as n+1. When this value is outside of the range described by ProfilerWindow.firstAvailableFrameIndex and ProfilerWindow.lastAvailableFrameIndex, or smaller than 0, Unity throws an ArgumentOutOfRangeException.
            * @param $threadGroupName The name of the thread group. Null or an empty string signify that the thread isn't part of a thread group. "Job", "Loading" and "Scripting Threads" are examples of such thread group names.
            * @param $threadName The Name of the thread, e.g. "Main Thread", "Render Thread" or "Worker 0". When this value is null or an empty string, Unity throws an ArgumentException.
            * @param $sampleName The name of the sample to select. If Unity cannot find a sample that matches this name, it does not set a selection and this method returns false. When this value is null or an empty string, Unity throws an ArgumentNullException or ArgumentException respectively.
            * @param $markerNamePath The names of all samples in the sample stack, each separated by a , that define the base path for the search. Similar to a file folder structure, this base path defines where Unity looks for a sample which matches the sampleName. The searched sampleName can be the last item in that marker path or any child sample of it. Do not add a trailing . If no sample can be found matching this sample stack path and the sampleName, no selection is set and this method returns false. This defaults to null which means no requirement is set on the sample's sample stack and the first sample fitting the sampleName is selected.
            * @param $threadId The ID of the thread. When the default value of FrameDataView.invalidThreadId is passed, Unity searches for the sample in the first thread matching the provided threadGroupName and threadName. Specify this threadId if there are multiple threads with the same name. Use a RawFrameDataView.threadId or HierarchyFrameDataView.threadId to retrieve the ID to a specific thread, if you need it to be specific.
            * @param $sampleMarkerId Use HierarchyFrameDataView or RawFrameDataView to get the Marker Ids. When no sample can be found matching this sample stack path and the sampleMarkerId, no selection is set and this method returns false.
            * @param $markerIdPath A list of Profiler marker IDs for all samples in the sample stack, that define the base path for the search. Similar to a file folder structure, this base path defines where Unity looks for a sample which matches the sampleMarkerId. The searched sampleMarkerId can be the last item in that marker path or any child sample of it. If no sample can be found matching this sample stack path and the sampleMarkerId, no selection is set and this method returns false. This defaults to null which means no requirement is set on the sample's sample stack and the first sample fitting the sampleMarkerId is selected.
            * @returns Returns true if the selection was successfully set, false if it was rejected because no fitting sample could be found. 
            */
            SetSelection ($frameIndex: bigint, $threadGroupName: string, $threadName: string, $sampleName: string, $markerNamePath?: string, $threadId?: bigint) : boolean;
            SetSelection ($frameIndex: bigint, $threadGroupName: string, $threadName: string, $sampleMarkerId: number, $markerIdPath?: System.Collections.Generic.List$1<number>, $threadId?: bigint) : boolean;
            /** Set the current selection in a frame time sample based Profiler Module, such as the.
            * @param $controller The controller object of the Profiler module whose selection you want to set. When the value is null, Unity throws a NullArgumentException.
            * @param $markerNameOrMarkerNamePath The name of the sample to be selected, or the names of all samples in the sample stack. Separate each name with a , ending on the sample that should be selected. Do not add a trailing . If Unity cannot find a sample that matches this name or sample stack, it does not set a selection and this method returns false. When this value is null or an empty string, Unity throws an ArgumentException.
            * @param $frameIndex The 0 based frame index. This value defaults to -1 which means the selection is set on the currently shown frame. Note that the Profiler Window UI shows the frame index as n+1. When this value is outside of the range described by ProfilerWindow.firstAvailableFrameIndex and ProfilerWindow.lastAvailableFrameIndex, or not -1, Unity throws an ArgumentOutOfRangeException.
            * @param $threadGroupName The name of the thread group. The parameter defaults to an empty string. Null or an empty string signify that the thread isn't part of a thread group. "Job", "Loading" and "Scripting Threads" are examples of such thread group names.
            * @param $threadName The Name of the thread, e.g. "Main Thread", "Render Thread" or "Worker 0". This parameter defaults to "Main Thread". When this value is null or an empty string, Unity throws an ArgumentException.
            * @param $threadId The ID of the thread. When the default value of FrameDataView.invalidThreadId is passed, Unity searches for the sample in the first thread matching the provided threadGroupName and threadName. Specify this threadId if there are multiple threads with the same name. Use a RawFrameDataView.threadId or HierarchyFrameDataView.threadId to retrieve the ID to a specific thread, if you need it to be specific.
            * @returns Returns true if the selection was successfully set, false if it was rejected because no fitting sample could be found. 
            */
            SetSelection ($markerNameOrMarkerNamePath: string, $frameIndex?: bigint, $threadGroupName?: string, $threadName?: string, $threadId?: bigint) : boolean;
        }
        /** A Utility class for Profiler tooling in the Unity Editor.
        */
        class ProfilerEditorUtility extends System.Object
        {
            protected [__keep_incompatibility]: never;
            /** Set the current selection in a frame time sample based Profiler Module, such as the.
            * @param $controller The controller object of the Profiler module whose selection you want to set. When the value is null, Unity throws a NullArgumentException.
            * @param $frameIndex The 0 based frame index. Note that the Profiler Window UI shows the frame index as n+1. When this value is outside of the range described by ProfilerWindow.firstAvailableFrameIndex and ProfilerWindow.lastAvailableFrameIndex, or smaller than 0, Unity throws an ArgumentOutOfRangeException.
            * @param $threadGroupName The name of the thread group. Null or an empty string signify that the thread isn't part of a thread group. "Job", "Loading" and "Scripting Threads" are examples of such thread group names.
            * @param $threadName The Name of the thread, e.g. "Main Thread", "Render Thread" or "Worker 0". When this value is null or an empty string, Unity throws an ArgumentException.
            * @param $sampleName The name of the sample to select. If Unity cannot find a sample that matches this name, it does not set a selection and this method returns false. When this value is null or an empty string, Unity throws an ArgumentNullException or ArgumentException respectively.
            * @param $markerNamePath The names of all samples in the sample stack, each separated by a , that define the base path for the search. Similar to a file folder structure, this base path defines where Unity looks for a sample which matches the sampleName. The searched sampleName can be the last item in that marker path or any child sample of it. Do not add a trailing . If no sample can be found matching this sample stack path and the sampleName, no selection is set and this method returns false. This defaults to null which means no requirement is set on the sample's sample stack and the first sample fitting the sampleName is selected.
            * @param $threadId The ID of the thread. When the default value of FrameDataView.invalidThreadId is passed, Unity searches for the sample in the first thread matching the provided threadGroupName and threadName. Specify this threadId if there are multiple threads with the same name. Use a RawFrameDataView.threadId or HierarchyFrameDataView.threadId to retrieve the ID to a specific thread, if you need it to be specific.
            * @param $sampleMarkerId Use HierarchyFrameDataView or RawFrameDataView to get the Marker Ids. When no sample can be found matching this sample stack path and the sampleMarkerId, no selection is set and this method returns false.
            * @param $markerIdPath A list of Profiler marker IDs for all samples in the sample stack, that define the base path for the search. Similar to a file folder structure, this base path defines where Unity looks for a sample which matches the sampleMarkerId. The searched sampleMarkerId can be the last item in that marker path or any child sample of it. If no sample can be found matching this sample stack path and the sampleMarkerId, no selection is set and this method returns false. This defaults to null which means no requirement is set on the sample's sample stack and the first sample fitting the sampleMarkerId is selected.
            * @returns Returns true if the selection was successfully set, false if it was rejected because no fitting sample could be found. 
            */
            public static SetSelection ($controller: UnityEditor.Profiling.IProfilerFrameTimeViewSampleSelectionController, $frameIndex: bigint, $threadGroupName: string, $threadName: string, $sampleName: string, $markerNamePath?: string, $threadId?: bigint) : boolean
            public static SetSelection ($controller: UnityEditor.Profiling.IProfilerFrameTimeViewSampleSelectionController, $frameIndex: bigint, $threadGroupName: string, $threadName: string, $sampleMarkerId: number, $markerIdPath?: System.Collections.Generic.List$1<number>, $threadId?: bigint) : boolean
            /** Set the current selection in a frame time sample based Profiler Module, such as the.
            * @param $controller The controller object of the Profiler module whose selection you want to set. When the value is null, Unity throws a NullArgumentException.
            * @param $markerNameOrMarkerNamePath The name of the sample to be selected, or the names of all samples in the sample stack. Separate each name with a , ending on the sample that should be selected. Do not add a trailing . If Unity cannot find a sample that matches this name or sample stack, it does not set a selection and this method returns false. When this value is null or an empty string, Unity throws an ArgumentException.
            * @param $frameIndex The 0 based frame index. This value defaults to -1 which means the selection is set on the currently shown frame. Note that the Profiler Window UI shows the frame index as n+1. When this value is outside of the range described by ProfilerWindow.firstAvailableFrameIndex and ProfilerWindow.lastAvailableFrameIndex, or not -1, Unity throws an ArgumentOutOfRangeException.
            * @param $threadGroupName The name of the thread group. The parameter defaults to an empty string. Null or an empty string signify that the thread isn't part of a thread group. "Job", "Loading" and "Scripting Threads" are examples of such thread group names.
            * @param $threadName The Name of the thread, e.g. "Main Thread", "Render Thread" or "Worker 0". This parameter defaults to "Main Thread". When this value is null or an empty string, Unity throws an ArgumentException.
            * @param $threadId The ID of the thread. When the default value of FrameDataView.invalidThreadId is passed, Unity searches for the sample in the first thread matching the provided threadGroupName and threadName. Specify this threadId if there are multiple threads with the same name. Use a RawFrameDataView.threadId or HierarchyFrameDataView.threadId to retrieve the ID to a specific thread, if you need it to be specific.
            * @returns Returns true if the selection was successfully set, false if it was rejected because no fitting sample could be found. 
            */
            public static SetSelection ($controller: UnityEditor.Profiling.IProfilerFrameTimeViewSampleSelectionController, $markerNameOrMarkerNamePath: string, $frameIndex?: bigint, $threadGroupName?: string, $threadName?: string, $threadId?: bigint) : boolean
        }
        /** An object describing a selection made in a frame time sample based.
        */
        class ProfilerTimeSampleSelection extends System.Object
        {
            protected [__keep_incompatibility]: never;
            /** The 0 based frame index. Note that the Profiler Window UI shows the frame index as n+1.
            */
            public get frameIndex(): bigint;
            /** The name of the group of the thread this sample resides in. When the thread is not part of a thread group, this value is string.empty.
            */
            public get threadGroupName(): string;
            /** The name of the thread this sample resides in.
            */
            public get threadName(): string;
            /** The ID of the thread this sample resides in.
            */
            public get threadId(): bigint;
            /** The name of the Sample as it is displayed in the. This might be a shorter version than the last item in _markerNamePath.
            */
            public get sampleDisplayName(): string;
            /** A list of the names of all ProfilerMarker|ProfilerMarkers that make up the Sample Stack of this selection. Unity populates this list on a selection object if it was passed to IProfilerFrameTimeViewSampleSelectionController.SetSelection and was accepted as a valid selection.
            */
            public get markerNamePath(): System.Collections.ObjectModel.ReadOnlyCollection$1<string>;
            /** A shorthand for _markerNamePath.Count. When _markerNamePath is null, this value is 0. 
            */
            public get markerPathDepth(): number;
            /** A sample selected in Hierarchy view might correspond to multiple samples in RawFrameDataView. This is a list of all of these sample indices.
            */
            public get rawSampleIndices(): System.Collections.ObjectModel.ReadOnlyCollection$1<number>;
            /** The raw index of a sample, i.e. the index as if would be used with RawFrameDataView and NOT an Item ID as it would be used with HierarchyFrameDataView.
            */
            public get rawSampleIndex(): number;
            public constructor ($frameIndex: bigint, $threadGroupName: string, $threadName: string, $threadId: bigint, $rawSampleIndex: number, $sampleName?: string)
            public constructor ($frameIndex: bigint, $threadGroupName: string, $threadName: string, $threadId: bigint, $rawSampleIndices: System.Collections.Generic.IList$1<number>, $sampleName?: string)
            public constructor ($selection: UnityEditor.Profiling.ProfilerTimeSampleSelection)
        }
        /** Category information descriptor structure.
        */
        class ProfilerCategoryInfo extends System.ValueType
        {
            protected [__keep_incompatibility]: never;
            /** Id used by Unity for tracking the Category.
            */
            public get id(): number;
            /** The color of the Profiler category, as a Color32.
            */
            public get color(): UnityEngine.Color32;
            /** The name used by Unity for the Category.
            */
            public get name(): string;
            /** Flags for showing if the Category is user defined or built into Unity.
            */
            public get flags(): Unity.Profiling.ProfilerCategoryFlags;
        }
    }
    namespace UnityEditor.Profiling.HierarchyFrameDataView {
        enum ViewModes
        { Default = 0, MergeSamplesWithTheSameName = 1, HideEditorOnlySamples = 2, InvertHierarchy = 4 }
    }
    namespace UnityEditorInternal.VR {
        class VREditor extends System.Object
        {
            protected [__keep_incompatibility]: never;
            public static GetVREnabledOnTargetGroup ($targetGroup: UnityEditor.BuildTargetGroup) : boolean
            public static SetVREnabledOnTargetGroup ($targetGroup: UnityEditor.BuildTargetGroup, $value: boolean) : void
            public static NativeSetVREnabledDevicesOnTargetGroup ($targetGroup: UnityEditor.BuildTargetGroup, $devices: System.Array$1<string>) : void
            public static SetVREnabledDevicesOnTargetGroup ($targetGroup: UnityEditor.BuildTargetGroup, $devices: System.Array$1<string>) : void
            public constructor ()
        }
    }
    namespace UnityEditorInternal.Profiling.Memory.Experimental {
        interface GetItem$1<T>
        { 
        (data: System.Array$1<number>, startIndex: number, numBytes: number) : T; 
        Invoke?: (data: System.Array$1<number>, startIndex: number, numBytes: number) => T;
        }
        class MemorySnapshotFileReader extends System.Object implements UnityEngine.ISerializationCallbackReceiver
        {
            protected [__keep_incompatibility]: never;
            public Dispose () : void
            public GetFilePath () : string
            public Open ($filePath: string) : void
            public Close () : void
            public OnBeforeSerialize () : void
            public OnAfterDeserialize () : void
            public GetNumEntries ($entryType: UnityEditorInternal.Profiling.Memory.Experimental.FileFormat.EntryType) : number
            public constructor ($filePath: string)
            public constructor ()
        }
        class MemorySnapshotFileWriter extends System.Object implements System.IDisposable
        {
            protected [__keep_incompatibility]: never;
            public Close () : void
            public Open ($filename: string) : void
            public Dispose () : void
            public WriteEntry ($entryType: UnityEditorInternal.Profiling.Memory.Experimental.FileFormat.EntryType, $data: string) : void
            public constructor ($filepath: string)
            public constructor ()
        }
    }
    namespace UnityEditorInternal.Profiling.Memory.Experimental.FileFormat {
        enum EntryType
        { Metadata_Version = 0, Metadata_RecordDate = 1, Metadata_UserMetadata = 2, Metadata_CaptureFlags = 3, Metadata_VirtualMachineInformation = 4, NativeTypes_Name = 5, NativeTypes_NativeBaseTypeArrayIndex = 6, NativeObjects_NativeTypeArrayIndex = 7, NativeObjects_HideFlags = 8, NativeObjects_Flags = 9, NativeObjects_InstanceId = 10, NativeObjects_Name = 11, NativeObjects_NativeObjectAddress = 12, NativeObjects_Size = 13, NativeObjects_RootReferenceId = 14, GCHandles_Target = 15, Connections_From = 16, Connections_To = 17, ManagedHeapSections_StartAddress = 18, ManagedHeapSections_Bytes = 19, ManagedStacks_StartAddress = 20, ManagedStacks_Bytes = 21, TypeDescriptions_Flags = 22, TypeDescriptions_Name = 23, TypeDescriptions_Assembly = 24, TypeDescriptions_FieldIndices = 25, TypeDescriptions_StaticFieldBytes = 26, TypeDescriptions_BaseOrElementTypeIndex = 27, TypeDescriptions_Size = 28, TypeDescriptions_TypeInfoAddress = 29, TypeDescriptions_TypeIndex = 30, FieldDescriptions_Offset = 31, FieldDescriptions_TypeIndex = 32, FieldDescriptions_Name = 33, FieldDescriptions_IsStatic = 34, NativeRootReferences_Id = 35, NativeRootReferences_AreaName = 36, NativeRootReferences_ObjectName = 37, NativeRootReferences_AccumulatedSize = 38, NativeAllocations_MemoryRegionIndex = 39, NativeAllocations_RootReferenceId = 40, NativeAllocations_AllocationSiteId = 41, NativeAllocations_Address = 42, NativeAllocations_Size = 43, NativeAllocations_OverheadSize = 44, NativeAllocations_PaddingSize = 45, NativeMemoryRegions_Name = 46, NativeMemoryRegions_ParentIndex = 47, NativeMemoryRegions_AddressBase = 48, NativeMemoryRegions_AddressSize = 49, NativeMemoryRegions_FirstAllocationIndex = 50, NativeMemoryRegions_NumAllocations = 51, NativeMemoryLabels_Name = 52, NativeAllocationSites_Id = 53, NativeAllocationSites_MemoryLabelIndex = 54, NativeAllocationSites_CallstackSymbols = 55, NativeCallstackSymbol_Symbol = 56, NativeCallstackSymbol_ReadableStackTrace = 57, NativeObjects_GCHandleIndex = 58 }
    }
    namespace UnityEditorInternal.VersionControl {
        class AssetModificationHook extends System.Object
        {
            protected [__keep_incompatibility]: never;
            public static FileModeChanged ($assets: System.Array$1<string>, $mode: UnityEditor.VersionControl.FileMode) : void
            public static OnWillMoveAsset ($from: string, $to: string) : UnityEditor.AssetMoveResult
            public static OnWillDeleteAsset ($assetPath: string, $option: UnityEditor.RemoveAssetOptions) : UnityEditor.AssetDeleteResult
            public static OnWillDeleteAssets ($assetPaths: System.Array$1<string>, $deletionResults: System.Array$1<UnityEditor.AssetDeleteResult>, $option: UnityEditor.RemoveAssetOptions) : void
            public static IsOpenForEdit ($assetPath: string, $message: $Ref<string>, $statusOptions: UnityEditor.StatusQueryOptions) : boolean
            public constructor ()
        }
        class ListControl extends System.Object
        {
            protected [__keep_incompatibility]: never;
            public get listState(): UnityEditorInternal.VersionControl.ListControl.ListState;
            public get ExpandEvent(): UnityEditorInternal.VersionControl.ListControl.ExpandDelegate;
            public set ExpandEvent(value: UnityEditorInternal.VersionControl.ListControl.ExpandDelegate);
            public get DragEvent(): UnityEditorInternal.VersionControl.ListControl.DragDelegate;
            public set DragEvent(value: UnityEditorInternal.VersionControl.ListControl.DragDelegate);
            public get ActionEvent(): UnityEditorInternal.VersionControl.ListControl.ActionDelegate;
            public set ActionEvent(value: UnityEditorInternal.VersionControl.ListControl.ActionDelegate);
            public get Root(): UnityEditorInternal.VersionControl.ListItem;
            public get SelectedAssets(): UnityEditor.VersionControl.AssetList;
            public get SelectedChangeSets(): UnityEditor.VersionControl.ChangeSets;
            public get EmptyChangeSets(): UnityEditor.VersionControl.ChangeSets;
            public get ReadOnly(): boolean;
            public set ReadOnly(value: boolean);
            public get MenuFolder(): string;
            public set MenuFolder(value: string);
            public get MenuDefault(): string;
            public set MenuDefault(value: string);
            public get DragAcceptOnly(): boolean;
            public set DragAcceptOnly(value: boolean);
            public get Size(): number;
            public static FromID ($id: number) : UnityEditorInternal.VersionControl.ListControl
            public FindItemWithIdentifier ($identifier: number) : UnityEditorInternal.VersionControl.ListItem
            public Add ($parent: UnityEditorInternal.VersionControl.ListItem, $name: string, $asset: UnityEditor.VersionControl.Asset) : UnityEditorInternal.VersionControl.ListItem
            public Add ($parent: UnityEditorInternal.VersionControl.ListItem, $name: string, $change: UnityEditor.VersionControl.ChangeSet) : UnityEditorInternal.VersionControl.ListItem
            public Clear () : void
            public Refresh () : void
            public Refresh ($updateExpanded: boolean) : void
            public Sync () : void
            public OnGUI ($area: UnityEngine.Rect, $focus: boolean) : boolean
            public SelectedSet ($item: UnityEditorInternal.VersionControl.ListItem) : void
            public SelectedAll () : void
            public SelectedAdd ($item: UnityEditorInternal.VersionControl.ListItem) : void
            public constructor ()
        }
        class ListItem extends System.Object
        {
            protected [__keep_incompatibility]: never;
            public get Icon(): UnityEngine.Texture;
            public set Icon(value: UnityEngine.Texture);
            public get Identifier(): number;
            public get Name(): string;
            public set Name(value: string);
            public get Indent(): number;
            public set Indent(value: number);
            public get Asset(): UnityEditor.VersionControl.Asset;
            public set Asset(value: UnityEditor.VersionControl.Asset);
            public get Change(): UnityEditor.VersionControl.ChangeSet;
            public set Change(value: UnityEditor.VersionControl.ChangeSet);
            public get Expanded(): boolean;
            public set Expanded(value: boolean);
            public get Exclusive(): boolean;
            public set Exclusive(value: boolean);
            public get Dummy(): boolean;
            public set Dummy(value: boolean);
            public get Hidden(): boolean;
            public set Hidden(value: boolean);
            public get HasChildren(): boolean;
            public get HasActions(): boolean;
            public get Actions(): System.Array$1<string>;
            public set Actions(value: System.Array$1<string>);
            public get CanExpand(): boolean;
            public get CanAccept(): boolean;
            public set CanAccept(value: boolean);
            public get OpenCount(): number;
            public get ChildCount(): number;
            public get Parent(): UnityEditorInternal.VersionControl.ListItem;
            public get FirstChild(): UnityEditorInternal.VersionControl.ListItem;
            public get LastChild(): UnityEditorInternal.VersionControl.ListItem;
            public get Prev(): UnityEditorInternal.VersionControl.ListItem;
            public get Next(): UnityEditorInternal.VersionControl.ListItem;
            public get PrevOpen(): UnityEditorInternal.VersionControl.ListItem;
            public get NextOpen(): UnityEditorInternal.VersionControl.ListItem;
            public get PrevOpenSkip(): UnityEditorInternal.VersionControl.ListItem;
            public get NextOpenSkip(): UnityEditorInternal.VersionControl.ListItem;
            public get PrevOpenVisible(): UnityEditorInternal.VersionControl.ListItem;
            public get NextOpenVisible(): UnityEditorInternal.VersionControl.ListItem;
            public HasPath () : boolean
            public IsChildOf ($listItem: UnityEditorInternal.VersionControl.ListItem) : boolean
            public Clear () : void
            public Add ($listItem: UnityEditorInternal.VersionControl.ListItem) : void
            public Remove ($listItem: UnityEditorInternal.VersionControl.ListItem) : boolean
            public RemoveAll () : void
            public FindWithIdentifierRecurse ($inIdentifier: number) : UnityEditorInternal.VersionControl.ListItem
            public constructor ()
        }
        class Overlay extends System.Object
        {
            protected [__keep_incompatibility]: never;
            public static GetOverlayRect ($itemRect: UnityEngine.Rect) : UnityEngine.Rect
            public static DrawOverlay ($asset: UnityEditor.VersionControl.Asset, $metaAsset: UnityEditor.VersionControl.Asset, $itemRect: UnityEngine.Rect) : void
            public static DrawOverlay ($asset: UnityEditor.VersionControl.Asset, $itemRect: UnityEngine.Rect) : void
            public constructor ()
        }
    }
    namespace UnityEditor.VersionControl {
        /** Mode of the file.
        */
        enum FileMode
        { None = 0, Binary = 1, Text = 2 }
        /** Wrapper around a changeset description and ID.
        */
        class ChangeSet extends System.Object
        {
            protected [__keep_incompatibility]: never;
            /** The ID of  the default changeset.
            */
            public static defaultID : string
            /** Description of a changeset.
            */
            public get description(): string;
            /** Version control specific ID of a changeset.
            */
            public get id(): string;
            public Dispose () : void
            public constructor ()
            public constructor ($description: string)
            public constructor ($description: string, $revision: string)
            public constructor ($other: UnityEditor.VersionControl.ChangeSet)
        }
        /** This class containes information about the version control state of an asset.
        */
        class Asset extends System.Object
        {
            protected [__keep_incompatibility]: never;
            public get prettyPath(): string;
            /** Gets the version control state of the asset.
            */
            public get state(): UnityEditor.VersionControl.Asset.States;
            /** Gets the path of the asset.
            */
            public get path(): string;
            /** Gets the path of the meta file for this Asset relative to the project root. If the Asset is a meta file, the path to the meta file is returned.
            */
            public get metaPath(): string;
            /** Gets the path of the Asset relative to the project root. If the Asset is a meta file, the path to the meta file is returned.
            */
            public get assetPath(): string;
            /** Returns true if the asset is a folder.
            */
            public get isFolder(): boolean;
            /** Returns true is the asset is read only.
            */
            public get readOnly(): boolean;
            /** Returns true if the instance of the Asset class actually refers to a .meta file.
            */
            public get isMeta(): boolean;
            /** Returns true if the asset is locked by the version control system.
            */
            public get locked(): boolean;
            /** Get the name of the asset.
            */
            public get name(): string;
            /** Gets the full name of the asset including extension.
            */
            public get fullName(): string;
            /** Returns true if the asset file exists and is in the current project.
            */
            public get isInCurrentProject(): boolean;
            public IsState ($state: UnityEditor.VersionControl.Asset.States) : boolean
            public IsOneOfStates ($states: System.Array$1<UnityEditor.VersionControl.Asset.States>) : boolean
            /** Opens the assets in an associated editor.
            */
            public Edit () : void
            /** Loads the asset to memory.
            */
            public Load () : UnityEngine.Object
            public Dispose () : void
            public IsChildOf ($other: UnityEditor.VersionControl.Asset) : boolean
            public constructor ($clientPath: string)
        }
        /** A list of version control information about assets.
        */
        class AssetList extends System.Collections.Generic.List$1<UnityEditor.VersionControl.Asset> implements System.Collections.Generic.IReadOnlyList$1<UnityEditor.VersionControl.Asset>, System.Collections.ICollection, System.Collections.Generic.IEnumerable$1<UnityEditor.VersionControl.Asset>, System.Collections.IEnumerable, System.Collections.Generic.IList$1<UnityEditor.VersionControl.Asset>, System.Collections.Generic.IReadOnlyCollection$1<UnityEditor.VersionControl.Asset>, System.Collections.IList, System.Collections.Generic.ICollection$1<UnityEditor.VersionControl.Asset>
        {
            protected [__keep_incompatibility]: never;
            public Filter ($includeFolder: boolean, ...states: UnityEditor.VersionControl.Asset.States[]) : UnityEditor.VersionControl.AssetList
            public FilterCount ($includeFolder: boolean, ...states: UnityEditor.VersionControl.Asset.States[]) : number
            /** Create an optimised list of assets by removing children of folders in the same list.
            */
            public FilterChildren () : UnityEditor.VersionControl.AssetList
            public constructor ()
            public constructor ($src: UnityEditor.VersionControl.AssetList)
        }
        /** A list of the ChangeSet class.
        */
        class ChangeSets extends System.Collections.Generic.List$1<UnityEditor.VersionControl.ChangeSet> implements System.Collections.Generic.IReadOnlyList$1<UnityEditor.VersionControl.ChangeSet>, System.Collections.ICollection, System.Collections.Generic.IEnumerable$1<UnityEditor.VersionControl.ChangeSet>, System.Collections.IEnumerable, System.Collections.Generic.IList$1<UnityEditor.VersionControl.ChangeSet>, System.Collections.Generic.IReadOnlyCollection$1<UnityEditor.VersionControl.ChangeSet>, System.Collections.IList, System.Collections.Generic.ICollection$1<UnityEditor.VersionControl.ChangeSet>
        {
            protected [__keep_incompatibility]: never;
            public constructor ()
        }
        /** Type of icon overlay.
        */
        enum IconOverlayType
        { Project = 0, Hierarchy = 1, Other = 2 }
        interface IIconOverlayExtension
        {
            /** Draws icon overlay.
            * @param $assetPath Asset path.
            * @param $type Icon overlay type.
            * @param $rect Icon bounding box.
            */
            DrawOverlay ($assetPath: string, $type: UnityEditor.VersionControl.IconOverlayType, $rect: UnityEngine.Rect) : void
        }
        interface IInspectorWindowExtension
        {
            /** Allows you to add custom GUI controls to the version control bar in the specified inspector.
            * @param $editor Inspector that contains the version control bar.
            */
            OnVersionControlBar ($editor: UnityEditor.Editor) : void
            /** Resets any cached state for the version control bar.
            */
            InvalidateVersionControlBarState () : void
        }
        interface IPopupMenuExtension
        {
            /** Displays a version control system context menu.
            * @param $position The position of the context menu.
            */
            DisplayPopupMenu ($position: UnityEngine.Rect) : void
        }
        interface ISettingsInspectorExtension
        {
            /** Allows you to add custom GUI controls to the version control settings in the inspector.
            */
            OnInspectorGUI () : void
        }
        /** Messages from the version control system.
        */
        class Message extends System.Object
        {
            protected [__keep_incompatibility]: never;
            /** The severity of the message.
            */
            public get severity(): UnityEditor.VersionControl.Message.Severity;
            /** The message text.
            */
            public get message(): string;
            /** Write the message to the console.
            */
            public Show () : void
            public Dispose () : void
        }
        /** What to checkout when starting the Checkout task through the version control Provider.
        */
        enum CheckoutMode
        { Asset = 1, Meta = 2, Both = 3, Exact = 4 }
        /** How assets should be resolved.
        */
        enum ResolveMethod
        { UseMine = 1, UseTheirs = 2, UseMerged = 3 }
        /** Which method to use when merging.
        */
        enum MergeMethod
        { MergeNone = 0, MergeAll = 1, MergeNonConflicting = 2 }
        /** Represent the connection state of the version control provider.
        */
        enum OnlineState
        { Updating = 0, Online = 1, Offline = 2 }
        /** Defines the behaviour of the version control revert methods.
        */
        enum RevertMode
        { Normal = 0, Unchanged = 1, KeepModifications = 2 }
        /** This class provides access to the version control API.
        */
        class Provider extends System.Object
        {
            protected [__keep_incompatibility]: never;
            /** User-supplied callback to be called before Version Control Submit operation.
            */
            public static preSubmitCallback : UnityEditor.VersionControl.Provider.PreSubmitCallback
            /** User-supplied callback to be called before Version Control check out operation.
            */
            public static preCheckoutCallback : UnityEditor.VersionControl.Provider.PreCheckoutCallback
            /** Returns true if the version control provider is enabled and a valid Unity Pro License was found.
            */
            public static get enabled(): boolean;
            /** Returns true if a version control plugin has been selected and configured correctly.
            */
            public static get isActive(): boolean;
            /** This is true if a network connection is required by the currently selected version control plugin to perform any action.
            */
            public static get requiresNetwork(): boolean;
            public static get hasChangelistSupport(): boolean;
            /** This is true if the currently selected version control plugin supports the Checkout method.
            */
            public static get hasCheckoutSupport(): boolean;
            /** This is true if the currently selected version control plugin supports the Lock and Unlock methods.
            */
            public static get hasLockingSupport(): boolean;
            public static get isVersioningFolders(): boolean;
            /** Returns the OnlineState of the version control provider.
            */
            public static get onlineState(): UnityEditor.VersionControl.OnlineState;
            /** Returns the reason for the version control provider being offline (if it is offline).
            */
            public static get offlineReason(): string;
            /** Gets the currently executing task.
            */
            public static get activeTask(): UnityEditor.VersionControl.Task;
            /** Starts a task that will fetch the most recent status about the asset or assets from the revision control system.
            * @param $assets The asset list to fetch state information for.
            * @param $asset The asset to fetch state information for.
            * @param $recursively If any assets specified are folders this flag will get status for all descendants of the folder as well.
            */
            public static Status ($assets: UnityEditor.VersionControl.AssetList) : UnityEditor.VersionControl.Task
            /** Starts a task that will fetch the most recent status about the asset or assets from the revision control system.
            * @param $assets The asset list to fetch state information for.
            * @param $asset The asset to fetch state information for.
            * @param $recursively If any assets specified are folders this flag will get status for all descendants of the folder as well.
            */
            public static Status ($asset: UnityEditor.VersionControl.Asset) : UnityEditor.VersionControl.Task
            /** Starts a task that will fetch the most recent status about the asset or assets from the revision control system.
            * @param $assets The asset list to fetch state information for.
            * @param $asset The asset to fetch state information for.
            * @param $recursively If any assets specified are folders this flag will get status for all descendants of the folder as well.
            */
            public static Status ($assets: UnityEditor.VersionControl.AssetList, $recursively: boolean) : UnityEditor.VersionControl.Task
            /** Starts a task that will fetch the most recent status about the asset or assets from the revision control system.
            * @param $assets The asset list to fetch state information for.
            * @param $asset The asset to fetch state information for.
            * @param $recursively If any assets specified are folders this flag will get status for all descendants of the folder as well.
            */
            public static Status ($asset: UnityEditor.VersionControl.Asset, $recursively: boolean) : UnityEditor.VersionControl.Task
            /** Starts a task that will fetch the most recent status about the asset or assets from the revision control system.
            * @param $assets The asset list to fetch state information for.
            * @param $asset The asset to fetch state information for.
            * @param $recursively If any assets specified are folders this flag will get status for all descendants of the folder as well.
            */
            public static Status ($assets: System.Array$1<string>) : UnityEditor.VersionControl.Task
            /** Starts a task that will fetch the most recent status about the asset or assets from the revision control system.
            * @param $assets The asset list to fetch state information for.
            * @param $asset The asset to fetch state information for.
            * @param $recursively If any assets specified are folders this flag will get status for all descendants of the folder as well.
            */
            public static Status ($assets: System.Array$1<string>, $recursively: boolean) : UnityEditor.VersionControl.Task
            /** Starts a task that will fetch the most recent status about the asset or assets from the revision control system.
            * @param $assets The asset list to fetch state information for.
            * @param $asset The asset to fetch state information for.
            * @param $recursively If any assets specified are folders this flag will get status for all descendants of the folder as well.
            */
            public static Status ($asset: string) : UnityEditor.VersionControl.Task
            /** Starts a task that will fetch the most recent status about the asset or assets from the revision control system.
            * @param $assets The asset list to fetch state information for.
            * @param $asset The asset to fetch state information for.
            * @param $recursively If any assets specified are folders this flag will get status for all descendants of the folder as well.
            */
            public static Status ($asset: string, $recursively: boolean) : UnityEditor.VersionControl.Task
            /** Uses the version control plugin to move an asset from one path to another.
            * @param $from Path to the source asset.
            * @param $to Path to the destination.
            */
            public static Move ($from: string, $to: string) : UnityEditor.VersionControl.Task
            /** Given an asset or a  list of assets this function returns true if Provider.Checkout is a valid task to perform on at least one of the given assets.
            * @param $assets List of assets.
            * @param $asset Single asset.
            * @param $mode Specify to check only asset files, meta files or both.
            */
            public static CheckoutIsValid ($assets: UnityEditor.VersionControl.AssetList) : boolean
            /** Given an asset or a  list of assets this function returns true if Provider.Checkout is a valid task to perform on at least one of the given assets.
            * @param $assets List of assets.
            * @param $asset Single asset.
            * @param $mode Specify to check only asset files, meta files or both.
            */
            public static CheckoutIsValid ($assets: UnityEditor.VersionControl.AssetList, $mode: UnityEditor.VersionControl.CheckoutMode) : boolean
            /** Checkout an asset or a list of assets from the version control system.
            * @param $assets List of assets to checkout.
            * @param $asset Asset to checkout.
            * @param $mode Tell the Provider to checkout just the asset file, the .meta file or both.
            * @param $changeset Tell the Provider to checkout the assets to a specific changeset.
            */
            public static Checkout ($assets: UnityEditor.VersionControl.AssetList, $mode: UnityEditor.VersionControl.CheckoutMode) : UnityEditor.VersionControl.Task
            /** Checkout an asset or a list of assets from the version control system.
            * @param $assets List of assets to checkout.
            * @param $asset Asset to checkout.
            * @param $mode Tell the Provider to checkout just the asset file, the .meta file or both.
            * @param $changeset Tell the Provider to checkout the assets to a specific changeset.
            */
            public static Checkout ($assets: UnityEditor.VersionControl.AssetList, $mode: UnityEditor.VersionControl.CheckoutMode, $changeset: UnityEditor.VersionControl.ChangeSet) : UnityEditor.VersionControl.Task
            /** Checkout an asset or a list of assets from the version control system.
            * @param $assets List of assets to checkout.
            * @param $asset Asset to checkout.
            * @param $mode Tell the Provider to checkout just the asset file, the .meta file or both.
            * @param $changeset Tell the Provider to checkout the assets to a specific changeset.
            */
            public static Checkout ($assets: System.Array$1<string>, $mode: UnityEditor.VersionControl.CheckoutMode) : UnityEditor.VersionControl.Task
            /** Checkout an asset or a list of assets from the version control system.
            * @param $assets List of assets to checkout.
            * @param $asset Asset to checkout.
            * @param $mode Tell the Provider to checkout just the asset file, the .meta file or both.
            * @param $changeset Tell the Provider to checkout the assets to a specific changeset.
            */
            public static Checkout ($assets: System.Array$1<string>, $mode: UnityEditor.VersionControl.CheckoutMode, $changeset: UnityEditor.VersionControl.ChangeSet) : UnityEditor.VersionControl.Task
            /** Checkout an asset or a list of assets from the version control system.
            * @param $assets List of assets to checkout.
            * @param $asset Asset to checkout.
            * @param $mode Tell the Provider to checkout just the asset file, the .meta file or both.
            * @param $changeset Tell the Provider to checkout the assets to a specific changeset.
            */
            public static Checkout ($assets: System.Array$1<UnityEngine.Object>, $mode: UnityEditor.VersionControl.CheckoutMode) : UnityEditor.VersionControl.Task
            /** Checkout an asset or a list of assets from the version control system.
            * @param $assets List of assets to checkout.
            * @param $asset Asset to checkout.
            * @param $mode Tell the Provider to checkout just the asset file, the .meta file or both.
            * @param $changeset Tell the Provider to checkout the assets to a specific changeset.
            */
            public static Checkout ($assets: System.Array$1<UnityEngine.Object>, $mode: UnityEditor.VersionControl.CheckoutMode, $changeset: UnityEditor.VersionControl.ChangeSet) : UnityEditor.VersionControl.Task
            /** Given an asset or a  list of assets this function returns true if Provider.Checkout is a valid task to perform on at least one of the given assets.
            * @param $assets List of assets.
            * @param $asset Single asset.
            * @param $mode Specify to check only asset files, meta files or both.
            */
            public static CheckoutIsValid ($asset: UnityEditor.VersionControl.Asset) : boolean
            /** Given an asset or a  list of assets this function returns true if Provider.Checkout is a valid task to perform on at least one of the given assets.
            * @param $assets List of assets.
            * @param $asset Single asset.
            * @param $mode Specify to check only asset files, meta files or both.
            */
            public static CheckoutIsValid ($asset: UnityEditor.VersionControl.Asset, $mode: UnityEditor.VersionControl.CheckoutMode) : boolean
            /** Checkout an asset or a list of assets from the version control system.
            * @param $assets List of assets to checkout.
            * @param $asset Asset to checkout.
            * @param $mode Tell the Provider to checkout just the asset file, the .meta file or both.
            * @param $changeset Tell the Provider to checkout the assets to a specific changeset.
            */
            public static Checkout ($asset: UnityEditor.VersionControl.Asset, $mode: UnityEditor.VersionControl.CheckoutMode) : UnityEditor.VersionControl.Task
            /** Checkout an asset or a list of assets from the version control system.
            * @param $assets List of assets to checkout.
            * @param $asset Asset to checkout.
            * @param $mode Tell the Provider to checkout just the asset file, the .meta file or both.
            * @param $changeset Tell the Provider to checkout the assets to a specific changeset.
            */
            public static Checkout ($asset: UnityEditor.VersionControl.Asset, $mode: UnityEditor.VersionControl.CheckoutMode, $changeset: UnityEditor.VersionControl.ChangeSet) : UnityEditor.VersionControl.Task
            /** Checkout an asset or a list of assets from the version control system.
            * @param $assets List of assets to checkout.
            * @param $asset Asset to checkout.
            * @param $mode Tell the Provider to checkout just the asset file, the .meta file or both.
            * @param $changeset Tell the Provider to checkout the assets to a specific changeset.
            */
            public static Checkout ($asset: string, $mode: UnityEditor.VersionControl.CheckoutMode) : UnityEditor.VersionControl.Task
            /** Checkout an asset or a list of assets from the version control system.
            * @param $assets List of assets to checkout.
            * @param $asset Asset to checkout.
            * @param $mode Tell the Provider to checkout just the asset file, the .meta file or both.
            * @param $changeset Tell the Provider to checkout the assets to a specific changeset.
            */
            public static Checkout ($asset: string, $mode: UnityEditor.VersionControl.CheckoutMode, $changeset: UnityEditor.VersionControl.ChangeSet) : UnityEditor.VersionControl.Task
            /** Checkout an asset or a list of assets from the version control system.
            * @param $assets List of assets to checkout.
            * @param $asset Asset to checkout.
            * @param $mode Tell the Provider to checkout just the asset file, the .meta file or both.
            * @param $changeset Tell the Provider to checkout the assets to a specific changeset.
            */
            public static Checkout ($asset: UnityEngine.Object, $mode: UnityEditor.VersionControl.CheckoutMode) : UnityEditor.VersionControl.Task
            /** Checkout an asset or a list of assets from the version control system.
            * @param $assets List of assets to checkout.
            * @param $asset Asset to checkout.
            * @param $mode Tell the Provider to checkout just the asset file, the .meta file or both.
            * @param $changeset Tell the Provider to checkout the assets to a specific changeset.
            */
            public static Checkout ($asset: UnityEngine.Object, $mode: UnityEditor.VersionControl.CheckoutMode, $changeset: UnityEditor.VersionControl.ChangeSet) : UnityEditor.VersionControl.Task
            /** Starts a task to delete an Asset or a list of Assets from the disk and from the version control system.
            * @param $assetProjectPath The path to the asset that is to be deleted.
            * @param $assets List of assets to delete.
            * @param $asset Asset to delete.
            */
            public static Delete ($assetProjectPath: string) : UnityEditor.VersionControl.Task
            /** Starts a task to delete an Asset or a list of Assets from the disk and from the version control system.
            * @param $assetProjectPath The path to the asset that is to be deleted.
            * @param $assets List of assets to delete.
            * @param $asset Asset to delete.
            */
            public static Delete ($assets: UnityEditor.VersionControl.AssetList) : UnityEditor.VersionControl.Task
            /** Starts a task to delete an Asset or a list of Assets from the disk and from the version control system.
            * @param $assetProjectPath The path to the asset that is to be deleted.
            * @param $assets List of assets to delete.
            * @param $asset Asset to delete.
            */
            public static Delete ($asset: UnityEditor.VersionControl.Asset) : UnityEditor.VersionControl.Task
            /** Given a list of assets this function returns true if Provider.Add is a valid task to perform on at least one of the assets in the list.
            * @param $assets List of assets to test.
            */
            public static AddIsValid ($assets: UnityEditor.VersionControl.AssetList) : boolean
            /** Allows you to add files to via script.
            * @param $assets List of assets to add to version control system.
            * @param $asset Single asset to add to version control system.
            * @param $recursive Set this to true if adding should be done recursively into subfolders.
            */
            public static Add ($assets: UnityEditor.VersionControl.AssetList, $recursive: boolean) : UnityEditor.VersionControl.Task
            /** Allows you to add files to via script.
            * @param $assets List of assets to add to version control system.
            * @param $asset Single asset to add to version control system.
            * @param $recursive Set this to true if adding should be done recursively into subfolders.
            */
            public static Add ($asset: UnityEditor.VersionControl.Asset, $recursive: boolean) : UnityEditor.VersionControl.Task
            /** Tests if deleting the given changesets is a valid task to perform.
            * @param $changesets Changesets to test.
            */
            public static DeleteChangeSetsIsValid ($changesets: UnityEditor.VersionControl.ChangeSets) : boolean
            /** Starts a task that will attempt to delete the given changesets.
            * @param $changesets List of changetsets to delete.
            */
            public static DeleteChangeSets ($changesets: UnityEditor.VersionControl.ChangeSets) : UnityEditor.VersionControl.Task
            /** Returns true if submitting the assets is a valid operation.
            * @param $changeset The changeset to submit.
            * @param $assets The asset to submit.
            */
            public static SubmitIsValid ($changeset: UnityEditor.VersionControl.ChangeSet, $assets: UnityEditor.VersionControl.AssetList) : boolean
            /** Starts a task that submits the assets to version control.
            * @param $changeset The changeset to submit.
            * @param $list The list of assets to submit.
            * @param $description The description of the changeset.
            * @param $saveOnly If true then only save the changeset to be submitted later.
            */
            public static Submit ($changeset: UnityEditor.VersionControl.ChangeSet, $list: UnityEditor.VersionControl.AssetList, $description: string, $saveOnly: boolean) : UnityEditor.VersionControl.Task
            /** Returns true if starting a Diff task is a valid operation for at least one asset in the given AssetList.
            * @param $assets List of assets.
            */
            public static DiffIsValid ($assets: UnityEditor.VersionControl.AssetList) : boolean
            /** Starts a task for showing a diff of the given assest versus their head revision.
            * @param $assets List of assets to diff.
            * @param $includingMetaFiles Whether or not to include the .meta file.
            */
            public static DiffHead ($assets: UnityEditor.VersionControl.AssetList, $includingMetaFiles: boolean) : UnityEditor.VersionControl.Task
            /** Tests if any of the assets in the list have the conflicted state and can be resolved.
            * @param $assets The list of asset to be resolved.
            */
            public static ResolveIsValid ($assets: UnityEditor.VersionControl.AssetList) : boolean
            /** Starts a task that will resolve the conflicting assets in version control.
            * @param $assets List of assets to resolve.
            * @param $resolveMethod How the assets should be resolved.
            */
            public static Resolve ($assets: UnityEditor.VersionControl.AssetList, $resolveMethod: UnityEditor.VersionControl.ResolveMethod) : UnityEditor.VersionControl.Task
            /** Initiates a merge task to handle the merging of conflicting Assets. This invokes a merge tool, which you can set in the External Tools section of the Preferences window, on the conflicting Assets. When the merge task finishes, the AssetList only contains the Assets that the tool could merge.
            * @param $assets The list of conflicting assets to be merged.
            */
            public static Merge ($assets: UnityEditor.VersionControl.AssetList) : UnityEditor.VersionControl.Task
            /** Returns true if the Provider.Lock task can be executed on one or more assets from the given asset list.
            * @param $assets List of assets to test.
            */
            public static LockIsValid ($assets: UnityEditor.VersionControl.AssetList) : boolean
            /** TODO.
            */
            public static LockIsValid ($asset: UnityEditor.VersionControl.Asset) : boolean
            /** Returns true if unlocking the assets is a valid operation.
            * @param $assets The asset list to test.
            * @param $asset The asset to test.
            */
            public static UnlockIsValid ($assets: UnityEditor.VersionControl.AssetList) : boolean
            /** Returns true if unlocking the assets is a valid operation.
            * @param $assets The asset list to test.
            * @param $asset The asset to test.
            */
            public static UnlockIsValid ($asset: UnityEditor.VersionControl.Asset) : boolean
            /** Attempt to lock an asset for exclusive editing.
            * @param $asset Asset to lock/unlock.
            * @param $assets List of assets to lock/unlock.
            * @param $locked True to lock assets, false to unlock assets.
            */
            public static Lock ($assets: UnityEditor.VersionControl.AssetList, $locked: boolean) : UnityEditor.VersionControl.Task
            /** Attempt to lock an asset for exclusive editing.
            * @param $asset Asset to lock/unlock.
            * @param $assets List of assets to lock/unlock.
            * @param $locked True to lock assets, false to unlock assets.
            */
            public static Lock ($asset: UnityEditor.VersionControl.Asset, $locked: boolean) : UnityEditor.VersionControl.Task
            /** Returns true if Provider.Revert is a valid task to perform on at least one of the given assets in the list.
            * @param $assets List of assets to test.
            * @param $asset Asset to test.
            * @param $mode Revert mode to test for.
            */
            public static RevertIsValid ($assets: UnityEditor.VersionControl.AssetList, $mode: UnityEditor.VersionControl.RevertMode) : boolean
            /** Reverts the specified assets by undoing any changes done since the last time you synced.
            * @param $assets The list of assets to be reverted.
            * @param $asset The asset to be reverted.
            * @param $mode How to revert the assets.
            */
            public static Revert ($assets: UnityEditor.VersionControl.AssetList, $mode: UnityEditor.VersionControl.RevertMode) : UnityEditor.VersionControl.Task
            /** Returns true if Provider.Revert is a valid task to perform on at least one of the given assets in the list.
            * @param $assets List of assets to test.
            * @param $asset Asset to test.
            * @param $mode Revert mode to test for.
            */
            public static RevertIsValid ($asset: UnityEditor.VersionControl.Asset, $mode: UnityEditor.VersionControl.RevertMode) : boolean
            /** Reverts the specified assets by undoing any changes done since the last time you synced.
            * @param $assets The list of assets to be reverted.
            * @param $asset The asset to be reverted.
            * @param $mode How to revert the assets.
            */
            public static Revert ($asset: UnityEditor.VersionControl.Asset, $mode: UnityEditor.VersionControl.RevertMode) : UnityEditor.VersionControl.Task
            /** The task tests the given asset list and returns true if Provider.GetLatest is valid operation for one or more assets.
            * @param $assets List of assets to test.
            */
            public static GetLatestIsValid ($assets: UnityEditor.VersionControl.AssetList) : boolean
            /** TODO.
            */
            public static GetLatestIsValid ($asset: UnityEditor.VersionControl.Asset) : boolean
            /** Start a task for getting the latest version of an out of sync asset from the version control server.
            * @param $assets List of assets to update.
            * @param $asset Asset to update.
            */
            public static GetLatest ($assets: UnityEditor.VersionControl.AssetList) : UnityEditor.VersionControl.Task
            /** Start a task for getting the latest version of an out of sync asset from the version control server.
            * @param $assets List of assets to update.
            * @param $asset Asset to update.
            */
            public static GetLatest ($asset: UnityEditor.VersionControl.Asset) : UnityEditor.VersionControl.Task
            /** Given a changeset only containing the changeset ID, this will start a task for quering the description of the changeset.
            * @param $changeset Changeset to query description of.
            */
            public static ChangeSetDescription ($changeset: UnityEditor.VersionControl.ChangeSet) : UnityEditor.VersionControl.Task
            /** Retrieves a list of assets belonging to a changeset.
            * @param $changeset Changeset to query for assets.
            * @param $changesetID ChangesetID to query for assets.
            */
            public static ChangeSetStatus ($changeset: UnityEditor.VersionControl.ChangeSet) : UnityEditor.VersionControl.Task
            /** Retrieves a list of assets belonging to a changeset.
            * @param $changeset Changeset to query for assets.
            * @param $changesetID ChangesetID to query for assets.
            */
            public static ChangeSetStatus ($changesetID: string) : UnityEditor.VersionControl.Task
            /** Given an incoming changeset this will start a task to query the version control server for which assets are part of the changeset.
            * @param $changeset Incoming changeset.
            * @param $changesetID Incoming changesetid.
            */
            public static IncomingChangeSetAssets ($changeset: UnityEditor.VersionControl.ChangeSet) : UnityEditor.VersionControl.Task
            /** Given an incoming changeset this will start a task to query the version control server for which assets are part of the changeset.
            * @param $changeset Incoming changeset.
            * @param $changesetID Incoming changesetid.
            */
            public static IncomingChangeSetAssets ($changesetID: string) : UnityEditor.VersionControl.Task
            /** Move an Asset or a list of Assets from their current changeset to a new changeset.
            * @param $assets List of Assets to move to changeset.
            * @param $changeset Changeset to move an Asset to.
            * @param $asset Asset to move to changeset.
            * @param $changesetID ChangesetID to move an Asset to.
            */
            public static ChangeSetMove ($assets: UnityEditor.VersionControl.AssetList, $changeset: UnityEditor.VersionControl.ChangeSet) : UnityEditor.VersionControl.Task
            /** Move an Asset or a list of Assets from their current changeset to a new changeset.
            * @param $assets List of Assets to move to changeset.
            * @param $changeset Changeset to move an Asset to.
            * @param $asset Asset to move to changeset.
            * @param $changesetID ChangesetID to move an Asset to.
            */
            public static ChangeSetMove ($asset: UnityEditor.VersionControl.Asset, $changeset: UnityEditor.VersionControl.ChangeSet) : UnityEditor.VersionControl.Task
            /** Move an Asset or a list of Assets from their current changeset to a new changeset.
            * @param $assets List of Assets to move to changeset.
            * @param $changeset Changeset to move an Asset to.
            * @param $asset Asset to move to changeset.
            * @param $changesetID ChangesetID to move an Asset to.
            */
            public static ChangeSetMove ($assets: UnityEditor.VersionControl.AssetList, $changesetID: string) : UnityEditor.VersionControl.Task
            /** Move an Asset or a list of Assets from their current changeset to a new changeset.
            * @param $assets List of Assets to move to changeset.
            * @param $changeset Changeset to move an Asset to.
            * @param $asset Asset to move to changeset.
            * @param $changesetID ChangesetID to move an Asset to.
            */
            public static ChangeSetMove ($asset: UnityEditor.VersionControl.Asset, $changesetID: string) : UnityEditor.VersionControl.Task
            /** Returns the version control information about the currently selected Assets.
            */
            public static GetAssetListFromSelection () : UnityEditor.VersionControl.AssetList
            /** Gets the current, user selected verson control Plugin.
            */
            public static GetActivePlugin () : UnityEditor.VersionControl.Plugin
            /** Returns the configuration fields for the currently active version control plugin.
            */
            public static GetActiveConfigFields () : System.Array$1<UnityEditor.VersionControl.ConfigField>
            /** Gets a list of pending changesets owned by the current user.
            */
            public static ChangeSets () : UnityEditor.VersionControl.Task
            /** Starts a task that queries the version control server for incoming changes.
            */
            public static Incoming () : UnityEditor.VersionControl.Task
            /** Starts a task that sends the version control settings to the version control system.
            */
            public static UpdateSettings () : UnityEditor.VersionControl.Task
            /** Returns the version control information about an asset. Can be used with "AssetList.Add" to add assets to a list for further version control actions.
            * @param $unityPath Path to asset.
            */
            public static GetAssetByPath ($unityPath: string) : UnityEditor.VersionControl.Asset
            /** Returns version control information about an asset from a given GUID.
            * @param $guid GUID of asset.
            */
            public static GetAssetByGUID ($guid: string) : UnityEditor.VersionControl.Asset
            /** Returns true if an asset can be edited.
            * @param $asset Asset to test.
            */
            public static IsOpenForEdit ($asset: UnityEditor.VersionControl.Asset) : boolean
            /** This will invalidate the cached state information for all assets.
            */
            public static ClearCache () : void
            public static Internal_WarningTask ($message: string) : UnityEditor.VersionControl.Task
            public static Internal_ErrorTask ($message: string) : UnityEditor.VersionControl.Task
            public constructor ()
        }
        /** A Task describes an instance of a version control operation.
        */
        class Task extends System.Object
        {
            protected [__keep_incompatibility]: never;
            /** The result of some types of tasks.
            */
            public get assetList(): UnityEditor.VersionControl.AssetList;
            /** List of changesets returned by some tasks.
            */
            public get changeSets(): UnityEditor.VersionControl.ChangeSets;
            public get userIdentifier(): number;
            public set userIdentifier(value: number);
            /** Will contain the result of the Provider.ChangeSetDescription task.
            */
            public get text(): string;
            /** A short description of the current task.
            */
            public get description(): string;
            /** Get whether or not the task was completed succesfully.
            */
            public get success(): boolean;
            /** Total time spent in task since the task was started.
            */
            public get secondsSpent(): number;
            /** A progress percentage for the current task.
            */
            public get progressPct(): number;
            public get progressMessage(): string;
            /** Some task return result codes, these are stored here.
            */
            public get resultCode(): number;
            /** May contain messages from the version control plugins.
            */
            public get messages(): System.Array$1<UnityEditor.VersionControl.Message>;
            /** A blocking wait for the task to complete.
            */
            public Wait () : void
            /** Upon completion of a task a completion task will be performed if it is set.
            * @param $action Which completion action to perform.
            */
            public SetCompletionAction ($action: UnityEditor.VersionControl.CompletionAction) : void
            public Dispose () : void
        }
        /** The plug-in class describes the currently active version control plug-in and its configuration options.
        */
        class Plugin extends System.Object
        {
            protected [__keep_incompatibility]: never;
            public static get availablePlugins(): System.Array$1<UnityEditor.VersionControl.Plugin>;
            /** The name of the currently active version control.
            */
            public get name(): string;
            /** Configuration fields of the plugin.
            */
            public get configFields(): System.Array$1<UnityEditor.VersionControl.ConfigField>;
            public Dispose () : void
        }
        /** Describes the configuration fields of the version control that the user has selected in the Unity Editor.
        */
        class ConfigField extends System.Object
        {
            protected [__keep_incompatibility]: never;
            /** Name of the configuration field.
            */
            public get name(): string;
            /** Label that is displayed next to the configuration field in the editor.
            */
            public get label(): string;
            /** Descrition of the configuration field.
            */
            public get description(): string;
            /** This is true if the configuration field is required for the version control plugin to function correctly.
            */
            public get isRequired(): boolean;
            /** This is true if the configuration field is a password field.
            */
            public get isPassword(): boolean;
            public Dispose () : void
        }
        /** Different actions a version control task can do upon completion.
        */
        enum CompletionAction
        { UpdatePendingWindow = 1, OnChangeContentsPendingWindow = 2, OnIncomingPendingWindow = 3, OnChangeSetsPendingWindow = 4, OnGotLatestPendingWindow = 5, OnSubmittedChangeWindow = 6, OnAddedChangeWindow = 7, OnCheckoutCompleted = 8 }
        /** Contains version control system specific utility methods.
        */
        class VersionControlUtils extends System.Object
        {
            protected [__keep_incompatibility]: never;
            /** Allows you to check whether the specified file is tracked by version control.
            * @param $path Path to the file.
            * @returns true if the file should be tracked by VCS. false otherwise. 
            */
            public static IsPathVersioned ($path: string) : boolean
        }
        /** Allows you to mark a class as a version control system object.
        */
        class VersionControlAttribute extends System.Attribute implements System.Runtime.InteropServices._Attribute
        {
            protected [__keep_incompatibility]: never;
            /** Version control system name.
            */
            public get name(): string;
            /** Version control system display name.
            */
            public get displayName(): string;
            public constructor ($name: string, $displayName?: string)
        }
        /** Contains unique version control system name.
        */
        class VersionControlDescriptor extends System.Object
        {
            protected [__keep_incompatibility]: never;
            /** Version control system name.
            */
            public get name(): string;
            /** Version control system display name.
            */
            public get displayName(): string;
        }
        /** Manages version control systems.
        */
        class VersionControlManager extends System.Object
        {
            protected [__keep_incompatibility]: never;
            /** An array containing all available version control systems.
            */
            public static get versionControlDescriptors(): System.Array$1<UnityEditor.VersionControl.VersionControlDescriptor>;
            /** The VersionControlObject representing active VCS.
            */
            public static get activeVersionControlObject(): UnityEditor.VersionControl.VersionControlObject;
            /** Sets the active version control system.
            * @param $name Unique version control system name.
            * @returns Returns true if VCS has been activated. false otherwise. 
            */
            public static SetVersionControl ($name: string) : boolean
        }
        /** The abstract base class for representing a version control system.
        */
        class VersionControlObject extends UnityEngine.ScriptableObject
        {
            protected [__keep_incompatibility]: never;
            /** Tests whether the VersionControlObject is connected to an underlying version control system.
            */
            public get isConnected(): boolean;
            /** Called when your version control system is activated.
            */
            public OnActivate () : void
            /** Called when your version control system is deactivated.
            */
            public OnDeactivate () : void
            /** Called when the cached state should be discarded and the new state should be retrieved from the underlying VCS.
            */
            public Refresh () : void
        }
        /** The status of an operation returned by the VCS.
        */
        enum SubmitResult
        { OK = 1, Error = 2, ConflictingFiles = 4, UnaddedFiles = 8 }
    }
    namespace UnityEditorInternal.VersionControl.ListControl {
        class ListState extends System.Object
        {
            protected [__keep_incompatibility]: never;
            public Scroll : number
            public Expanded : System.Collections.Generic.List$1<string>
            public constructor ()
        }
        interface ExpandDelegate
        { 
        (expand: UnityEditor.VersionControl.ChangeSet, item: UnityEditorInternal.VersionControl.ListItem) : void; 
        Invoke?: (expand: UnityEditor.VersionControl.ChangeSet, item: UnityEditorInternal.VersionControl.ListItem) => void;
        }
        var ExpandDelegate: { new (func: (expand: UnityEditor.VersionControl.ChangeSet, item: UnityEditorInternal.VersionControl.ListItem) => void): ExpandDelegate; }
        interface DragDelegate
        { 
        (target: UnityEditor.VersionControl.ChangeSet) : void; 
        Invoke?: (target: UnityEditor.VersionControl.ChangeSet) => void;
        }
        var DragDelegate: { new (func: (target: UnityEditor.VersionControl.ChangeSet) => void): DragDelegate; }
        interface ActionDelegate
        { 
        (item: UnityEditorInternal.VersionControl.ListItem, actionIdx: number) : void; 
        Invoke?: (item: UnityEditorInternal.VersionControl.ListItem, actionIdx: number) => void;
        }
        var ActionDelegate: { new (func: (item: UnityEditorInternal.VersionControl.ListItem, actionIdx: number) => void): ActionDelegate; }
        enum SelectDirection
        { Up = 0, Down = 1, Current = 2 }
    }
    namespace UnityEditor.AnimationUtility {
        interface OnCurveWasModified
        { 
        (clip: UnityEngine.AnimationClip, binding: UnityEditor.EditorCurveBinding, type: UnityEditor.AnimationUtility.CurveModifiedType) : void; 
        Invoke?: (clip: UnityEngine.AnimationClip, binding: UnityEditor.EditorCurveBinding, type: UnityEditor.AnimationUtility.CurveModifiedType) => void;
        }
        var OnCurveWasModified: { new (func: (clip: UnityEngine.AnimationClip, binding: UnityEditor.EditorCurveBinding, type: UnityEditor.AnimationUtility.CurveModifiedType) => void): OnCurveWasModified; }
        enum CurveModifiedType
        { CurveDeleted = 0, CurveModified = 1, ClipModified = 2 }
        enum TangentMode
        { Free = 0, Auto = 1, Linear = 2, Constant = 3, ClampedAuto = 4 }
    }
    namespace UnityEditor.AssemblyReloadEvents {
        interface AssemblyReloadCallback
        { 
        () : void; 
        Invoke?: () => void;
        }
        var AssemblyReloadCallback: { new (func: () => void): AssemblyReloadCallback; }
    }
    namespace UnityEditor.AssetDatabase {
        interface ImportPackageCallback
        { 
        (packageName: string) : void; 
        Invoke?: (packageName: string) => void;
        }
        var ImportPackageCallback: { new (func: (packageName: string) => void): ImportPackageCallback; }
        interface ImportPackageFailedCallback
        { 
        (packageName: string, errorMessage: string) : void; 
        Invoke?: (packageName: string, errorMessage: string) => void;
        }
        var ImportPackageFailedCallback: { new (func: (packageName: string, errorMessage: string) => void): ImportPackageFailedCallback; }
        enum RefreshImportMode
        { InProcess = 0, OutOfProcessPerQueue = 1 }
        class AssetEditingScope extends System.Object implements System.IDisposable
        {
            protected [__keep_incompatibility]: never;
            public Dispose () : void
            public constructor ()
        }
    }
    namespace UnityEditor.AssetImporters {
        /** Container class that holds the collection of logs generated by an importer during the import process.
        */
        class ImportLog extends UnityEngine.Object
        {
            protected [__keep_incompatibility]: never;
            /** Returns the collection of import log entries.
            */
            public get logEntries(): System.Array$1<UnityEditor.AssetImporters.ImportLog.ImportLogEntry>;
            public constructor ()
        }
        /** Defines the import context for scripted importers during an import event.
        */
        class AssetImportContext extends System.Object
        {
            protected [__keep_incompatibility]: never;
            /** The path of the source asset file to be imported.
            */
            public get assetPath(): string;
            /** Returns the current build target and creates a dependency on the target platform within a scripted importer.
            */
            public get selectedBuildTarget(): UnityEditor.BuildTarget;
            /** The main object set on the AssetImportContext.
            */
            public get mainObject(): UnityEngine.Object;
            /** Sets the main object for import.
            * @param $obj The object to be set as the main object. This object must already be added with the AddObjectToAsset method.
            */
            public SetMainObject ($obj: UnityEngine.Object) : void
            /** Adds an object to the result of the import operation.
            * @param $identifier A unique identifier associated to this object.
            * @param $obj The Unity Object to add to the asset.
            * @param $thumbnail An optional 2D texture to use as the thumbnail for this object.
            */
            public AddObjectToAsset ($identifier: string, $obj: UnityEngine.Object) : void
            public GetObjects ($objects: System.Collections.Generic.List$1<UnityEngine.Object>) : void
            /** Adds an object to the result of the import operation.
            * @param $identifier A unique identifier associated to this object.
            * @param $obj The Unity Object to add to the asset.
            * @param $thumbnail An optional 2D texture to use as the thumbnail for this object.
            */
            public AddObjectToAsset ($identifier: string, $obj: UnityEngine.Object, $thumbnail: UnityEngine.Texture2D) : void
            /** Allows you to specify that an Asset depends directly on the source file of another Asset (as opposed to the import result of another asset).
            * @param $path The path of the source dependency.
            * @param $guid The guid of the source asset dependency.
            */
            public DependsOnSourceAsset ($path: string) : void
            /** Allows you to specify that an Asset depends directly on the source file of another Asset (as opposed to the import result of another asset).
            * @param $path The path of the source dependency.
            * @param $guid The guid of the source asset dependency.
            */
            public DependsOnSourceAsset ($guid: UnityEditor.GUID) : void
            /** Returns the path of the Artifact file that was created by another importer, and adds a dependency to that file and the source asset path.
            * @param $path The path of the Asset whose Artifact File should be the dependency. Note: Although the dependency is the Artifact File (import result) which is stored in the library folder, this parameter is the path to the Asset in the Assets folder, and not a path to the Artifact File in the Library folder.
            * @param $fileName The name of the Artifact File to depend upon. See [[AssetImportContext.GetOutputArtifactFilePath.
            * @returns The path inside the Library folder from which you can read the content of the requested Artifact File. 
            */
            public GetArtifactFilePath ($path: string, $fileName: string) : string
            /** Returns the path of the Artifact file that was created by another importer, and adds a dependency to that file.
            * @param $guid The guid of the Artifact File dependency.
            * @param $key The Artifact key of the Artifact File dependency.
            * @param $fileName The name of the Artifact File to depend upon. See [[AssetImportContext.GetOutputArtifactFilePath.
            * @returns The path inside the Library folder from which you can read the content of the requested Artifact File. 
            */
            public GetArtifactFilePath ($guid: UnityEditor.GUID, $fileName: string) : string
            /** Returns the path of the Artifact file that was created by another importer, and adds a dependency to that file.
            * @param $guid The guid of the Artifact File dependency.
            * @param $key The Artifact key of the Artifact File dependency.
            * @param $fileName The name of the Artifact File to depend upon. See [[AssetImportContext.GetOutputArtifactFilePath.
            * @returns The path inside the Library folder from which you can read the content of the requested Artifact File. 
            */
            public GetArtifactFilePath ($key: UnityEditor.Experimental.ArtifactKey, $fileName: string) : string
            /** Returns the path where to write a new Artifact File with the given fileName.
            * @param $fileName Unique identifier to refer to this Artifact File.
            * @returns The file path which can be used to create a new Artifact File. 
            */
            public GetOutputArtifactFilePath ($fileName: string) : string
            /** Setup artifact dependency to an asset.
            * @param $path The path of the Asset whose artifact should be the dependency. Note: Although the dependency is the artifact (import result) which is stored in the library folder, this parameter is the path to the Asset in the Assets folder, and not a path to the artifact in the Library folder.
            * @param $guid The guid of the artifact dependency.
            * @param $key The artifact key of the artifact dependency.
            */
            public DependsOnArtifact ($key: UnityEditor.Experimental.ArtifactKey) : void
            /** Setup artifact dependency to an asset.
            * @param $path The path of the Asset whose artifact should be the dependency. Note: Although the dependency is the artifact (import result) which is stored in the library folder, this parameter is the path to the Asset in the Assets folder, and not a path to the artifact in the Library folder.
            * @param $guid The guid of the artifact dependency.
            * @param $key The artifact key of the artifact dependency.
            */
            public DependsOnArtifact ($guid: UnityEditor.GUID) : void
            /** Setup artifact dependency to an asset.
            * @param $path The path of the Asset whose artifact should be the dependency. Note: Although the dependency is the artifact (import result) which is stored in the library folder, this parameter is the path to the Asset in the Assets folder, and not a path to the artifact in the Library folder.
            * @param $guid The guid of the artifact dependency.
            * @param $key The artifact key of the artifact dependency.
            */
            public DependsOnArtifact ($path: string) : void
            /** Allows you to specify that an Asset has a custom dependency.
            * @param $dependency Name of dependency. You can use any name you like, but because these names are global across all your Assets, it can be useful to use a naming convention (eg a path-based naming system as in the example below) to avoid clashes with other custom dependency names.
            */
            public DependsOnCustomDependency ($dependency: string) : void
            /** Logs an error message encountered during import.
            * @param $msg The error message.
            * @param $obj Optional Object that is targeted by the error.
            */
            public LogImportError ($msg: string, $obj?: UnityEngine.Object) : void
            /** Logs a warning message encountered during import.
            * @param $msg The warning message.
            * @param $obj Optional Object that is targeted by the warning.
            */
            public LogImportWarning ($msg: string, $obj?: UnityEngine.Object) : void
        }
        /** Represents camera information from an imported file.
        */
        class CameraDescription extends System.Object implements System.IDisposable
        {
            protected [__keep_incompatibility]: never;
            /** Disposes of the CameraDescription instance. This clears any resources that the instance was using.
            */
            public Dispose () : void
            /** Retrieves the value of a specified camera property.
            * @param $propertyName Name of the property.
            * @param $value The retrieved value.
            * @returns Returns true if the property exists on the camera. Returns false otherwise. 
            */
            public TryGetProperty ($propertyName: string, $value: $Ref<number>) : boolean
            /** Retrieves the value of a specified camera property.
            * @param $propertyName Name of the property.
            * @param $value The retrieved value.
            * @returns Returns true if the property exists on the camera. Returns false otherwise. 
            */
            public TryGetProperty ($propertyName: string, $value: $Ref<UnityEngine.Vector4>) : boolean
            /** Retrieves the value of a specified camera property.
            * @param $propertyName Name of the property.
            * @param $value The retrieved value.
            * @returns Returns true if the property exists on the camera. Returns false otherwise. 
            */
            public TryGetProperty ($propertyName: string, $value: $Ref<string>) : boolean
            public GetVector4PropertyNames ($names: System.Collections.Generic.List$1<string>) : void
            public GetFloatPropertyNames ($names: System.Collections.Generic.List$1<string>) : void
            public GetStringPropertyNames ($names: System.Collections.Generic.List$1<string>) : void
            public GetIntPropertyNames ($names: System.Collections.Generic.List$1<string>) : void
            /** Retrieves the AnimationCurve for an animated camera property in a specific AnimationClip.
            * @param $clipName The name of the AnimationClip.
            * @param $propertyName The name of the camera property.
            * @param $value The retrieved AnimationCurve, if one exists for the specified camera property.
            * @returns Returns true if the camera property is animated. Returns false otherwise. 
            */
            public TryGetAnimationCurve ($clipName: string, $propertyName: string, $value: $Ref<UnityEngine.AnimationCurve>) : boolean
            /** Checks if a camera property is animated in a specific AnimationClip.
            * @param $propertyName Name of the camera's animated property.
            * @param $clipName The name of the AnimationClip.
            * @returns Returns true if the camera property is animated. Returns false otherwise. 
            */
            public HasAnimationCurveInClip ($clipName: string, $propertyName: string) : boolean
            /** Checks if a camera property is animated in a any AnimationClip.
            * @param $propertyName The name of the camera property.
            * @returns Returns true if the camera property is animated. Returns false otherwise. 
            */
            public HasAnimationCurve ($propertyName: string) : boolean
            public constructor ()
        }
        /** A value indicating the severity of an import log.
        */
        enum ImportLogFlags
        { None = 0, Error = 64, Warning = 128 }
        /** Represents light information from an imported file.
        */
        class LightDescription extends System.Object implements System.IDisposable
        {
            protected [__keep_incompatibility]: never;
            /** Disposes of the LightDescription instance. This clears any resources that the instance was using.
            */
            public Dispose () : void
            /** Retrieves the value of a specified light property.
            * @param $propertyName Name of the property.
            * @param $value The retrieved value.
            * @returns Returns true if the property exists on the light. Returns false otherwise. 
            */
            public TryGetProperty ($propertyName: string, $value: $Ref<number>) : boolean
            /** Retrieves the value of a specified light property.
            * @param $propertyName Name of the property.
            * @param $value The retrieved value.
            * @returns Returns true if the property exists on the light. Returns false otherwise. 
            */
            public TryGetProperty ($propertyName: string, $value: $Ref<UnityEngine.Vector4>) : boolean
            /** Retrieves the value of a specified light property.
            * @param $propertyName Name of the property.
            * @param $value The retrieved value.
            * @returns Returns true if the property exists on the light. Returns false otherwise. 
            */
            public TryGetProperty ($propertyName: string, $value: $Ref<string>) : boolean
            public GetVector4PropertyNames ($names: System.Collections.Generic.List$1<string>) : void
            public GetFloatPropertyNames ($names: System.Collections.Generic.List$1<string>) : void
            public GetStringPropertyNames ($names: System.Collections.Generic.List$1<string>) : void
            public GetIntPropertyNames ($names: System.Collections.Generic.List$1<string>) : void
            /** Retrieves the AnimationCurve for an animated light property in a specific AnimationClip.
            * @param $clipName The name of the AnimationClip.
            * @param $propertyName The name of the light property.
            * @param $value The retrieved AnimationCurve, if one exists for the specified light property.
            * @returns Returns true if the light property is animated. Returns false otherwise. 
            */
            public TryGetAnimationCurve ($clipName: string, $propertyName: string, $value: $Ref<UnityEngine.AnimationCurve>) : boolean
            /** Checks if a light property is animated in a specific AnimationClip.
            * @param $propertyName The name of the light's animated property.
            * @param $clipName The name of the AnimationClip.
            * @returns Returns true if the light property is animated. Returns false otherwise. 
            */
            public HasAnimationCurveInClip ($clipName: string, $propertyName: string) : boolean
            /** Checks if a light property is animated in a any AnimationClip.
            * @param $propertyName The name of the light property.
            * @returns Returns true if the light property is animated. Returns false otherwise. 
            */
            public HasAnimationCurve ($propertyName: string) : boolean
            public constructor ()
        }
        /** Contains a set of typed properties for describing a texture input of a MaterialDescription.
        */
        class TexturePropertyDescription extends System.ValueType
        {
            protected [__keep_incompatibility]: never;
            /** UV coordinates offset (x,y).
            */
            public offset : UnityEngine.Vector2
            /** UV coordinates scaling (x,y).
            */
            public scale : UnityEngine.Vector2
            /** Reference to the texture asset.
            */
            public texture : UnityEngine.Texture
            /** Path to the texture asset relative to the Asset folder.
            */
            public relativePath : string
            /** Absolute path to the texture asset.
            */
            public path : string
        }
        /** Contains a set of typed properties for describing a texture input of a MaterialDescription.
        */
        class MaterialDescription extends System.Object implements System.IDisposable
        {
            protected [__keep_incompatibility]: never;
            /** The name of the material
            */
            public get materialName(): string;
            public Dispose () : void
            /** Retrieves the value of a specified material property.
            * @param $propertyName Name of the property.
            * @param $value The retrieved value.
            * @returns Returns true if the property exists on the material. Returns false otherwise. 
            */
            public TryGetProperty ($propertyName: string, $value: $Ref<number>) : boolean
            /** Retrieves the value of a specified material property.
            * @param $propertyName Name of the property.
            * @param $value The retrieved value.
            * @returns Returns true if the property exists on the material. Returns false otherwise. 
            */
            public TryGetProperty ($propertyName: string, $value: $Ref<UnityEngine.Vector4>) : boolean
            /** Retrieves the value of a specified material property.
            * @param $propertyName Name of the property.
            * @param $value The retrieved value.
            * @returns Returns true if the property exists on the material. Returns false otherwise. 
            */
            public TryGetProperty ($propertyName: string, $value: $Ref<string>) : boolean
            /** Retrieves the value of a specified material property.
            * @param $propertyName Name of the property.
            * @param $value The retrieved value.
            * @returns Returns true if the property exists on the material. Returns false otherwise. 
            */
            public TryGetProperty ($propertyName: string, $value: $Ref<UnityEditor.AssetImporters.TexturePropertyDescription>) : boolean
            public GetVector4PropertyNames ($names: System.Collections.Generic.List$1<string>) : void
            public GetFloatPropertyNames ($names: System.Collections.Generic.List$1<string>) : void
            public GetTexturePropertyNames ($names: System.Collections.Generic.List$1<string>) : void
            public GetStringPropertyNames ($names: System.Collections.Generic.List$1<string>) : void
            /** Retrieves the AnimationCurve for an animated material property in a specific AnimationClip.
            * @param $clipName The name of the AnimationClip.
            * @param $propertyName The name of the material property.
            * @param $value The retrieved AnimationCurve, if one exists for the specified material property.
            * @returns Returns true if the material property is animated. Returns false otherwise. 
            */
            public TryGetAnimationCurve ($clipName: string, $propertyName: string, $value: $Ref<UnityEngine.AnimationCurve>) : boolean
            /** Checks if a material property is animated in a specific AnimationClip.
            * @param $propertyName Name of the material's animated property.
            * @param $clipName The name of the AnimationClip.
            * @returns Returns true if the material property is animated. Returns false otherwise. 
            */
            public HasAnimationCurveInClip ($clipName: string, $propertyName: string) : boolean
            /** Checks if a material property is animated in a any AnimationClip.
            * @param $propertyName The name of the material property.
            * @returns Returns true if the material property is animated. Returns false otherwise. 
            */
            public HasAnimationCurve ($propertyName: string) : boolean
            public constructor ()
        }
        /** Struct that represents how Sprite asset should be generated when calling TextureGenerator.GenerateTexture.
        */
        class SpriteImportData extends System.ValueType
        {
            protected [__keep_incompatibility]: never;
            /** Name for the generated Sprite.
            */
            public get name(): string;
            public set name(value: string);
            /** Position and size of the Sprite in a given texture.
            */
            public get rect(): UnityEngine.Rect;
            public set rect(value: UnityEngine.Rect);
            /** Pivot value represented by SpriteAlignment.
            */
            public get alignment(): UnityEngine.SpriteAlignment;
            public set alignment(value: UnityEngine.SpriteAlignment);
            /** Pivot value represented in Vector2.
            */
            public get pivot(): UnityEngine.Vector2;
            public set pivot(value: UnityEngine.Vector2);
            /** Border value for the generated Sprite.
            */
            public get border(): UnityEngine.Vector4;
            public set border(value: UnityEngine.Vector4);
            /** Sprite Asset creation uses this outline when it generates the Mesh for the Sprite. If this is not given, SpriteImportData.tesselationDetail will be used to determine the mesh detail.
            */
            public get outline(): System.Collections.Generic.List$1<System.Array$1<UnityEngine.Vector2>>;
            public set outline(value: System.Collections.Generic.List$1<System.Array$1<UnityEngine.Vector2>>);
            /** Controls mesh generation detail. This value will be ignored if SpriteImportData.ouline is provided.
            */
            public get tessellationDetail(): number;
            public set tessellationDetail(value: number);
            /** An identifier given to a Sprite. Use this to identify which data was used to generate that Sprite.
            */
            public get spriteID(): string;
            public set spriteID(value: string);
        }
        /** Structure that represents the result from calling TextureGenerator.GenerateTexture.
        */
        class TextureGenerationOutput extends System.ValueType
        {
            protected [__keep_incompatibility]: never;
            /** This is a Texture2D generated by TextureGenerator.GenerateTexture based on the colorBuffer argument passed to that function.
            If the generator is configured to generate a non-2D texture (cubemap, 3D, ...), this member will always be null. To get the result for an arbitrary texture type, please use the TextureGenerationOutput.output property.
            We recommend always using TextureGenerationOutput.output  as the texture property will deprecated/removed in the future.
            */
            public get texture(): UnityEngine.Texture2D;
            /** This is a Texture generated by TextureGenerator.GenerateTexture based on the colorBuffer argument passed to that function.
            The actual texture type (2D, 3D, cubemap,..) depends on the TextureImporterSettings.textureShape settings of the generator.
            */
            public get output(): UnityEngine.Texture;
            /** Warnings that should be shown in Inspector after generating a Texture.
            */
            public get importInspectorWarnings(): string;
            /** TextureGenerator.GenerateTexture reports warnings when you generate a Texture.
            */
            public get importWarnings(): System.Array$1<string>;
            /** Thumbnail version of the generated texture. This may be null depending on the import settings. E.g. cubemaps will not return a thumbnail.
            */
            public get thumbNail(): UnityEngine.Texture2D;
            /** Sprites that are generated by TextureGenerator.GenerateTexture from TextureGenerationSettings.spriteSheetData.
            */
            public get sprites(): System.Array$1<UnityEngine.Sprite>;
        }
        /** Original texture data information.
        */
        class SourceTextureInformation extends System.Object
        {
            protected [__keep_incompatibility]: never;
            /** Width of the image data.
            */
            public get width(): number;
            public set width(value: number);
            /** Height of the image data.
            */
            public get height(): number;
            public set height(value: number);
            /** Determines if alpha channel is present in image data.
            */
            public get containsAlpha(): boolean;
            public set containsAlpha(value: boolean);
            /** Determines if image has HDR data.
            */
            public get hdr(): boolean;
            public set hdr(value: boolean);
            public constructor ()
        }
        /** Represents how a texture should be generated from calling TextureGenerator.GenerateTexture.
        */
        class TextureGenerationSettings extends System.ValueType
        {
            protected [__keep_incompatibility]: never;
            /** Path where the Asset will be placed.
            */
            public get assetPath(): string;
            public set assetPath(value: string);
            /** Indicates if the Sprite generated can be used for atlas packing.
            */
            public get qualifyForSpritePacking(): boolean;
            public set qualifyForSpritePacking(value: boolean);
            /** When set to true, the AssetPostprocessor hooks will be called during texture generation. The following will hold for any AssetPostprocessors triggered through TextureGenerator.GenerateTexture
            - When the postprocessor is invoked AssetPostprocessor.assetPath will be set to the assetPath value in this structure.
            - The value of AssetPostprocessor.context will be set to null.
            - Only OnPostprocessTexture, OnPostprocessCubemap, ... is called. The OnPreprocessTexture functions are not called.
            */
            public get enablePostProcessor(): boolean;
            public set enablePostProcessor(value: boolean);
            /** Settings for generating texture.
            */
            public get textureImporterSettings(): UnityEditor.TextureImporterSettings;
            public set textureImporterSettings(value: UnityEditor.TextureImporterSettings);
            /** Platform settings for generating the texture.
            */
            public get platformSettings(): UnityEditor.TextureImporterPlatformSettings;
            public set platformSettings(value: UnityEditor.TextureImporterPlatformSettings);
            /** Texture format for the image data.
            */
            public get sourceTextureInformation(): UnityEditor.AssetImporters.SourceTextureInformation;
            public set sourceTextureInformation(value: UnityEditor.AssetImporters.SourceTextureInformation);
            /** Sprite Asset generation data.
            */
            public get spriteImportData(): System.Array$1<UnityEditor.AssetImporters.SpriteImportData>;
            public set spriteImportData(value: System.Array$1<UnityEditor.AssetImporters.SpriteImportData>);
            /** Tag used for Sprite packing.
            */
            public get spritePackingTag(): string;
            public set spritePackingTag(value: string);
            /** Secondary textures for the generated Sprites.
            */
            public get secondarySpriteTextures(): System.Array$1<UnityEngine.SecondarySpriteTexture>;
            public set secondarySpriteTextures(value: System.Array$1<UnityEngine.SecondarySpriteTexture>);
            public constructor ($type: UnityEditor.TextureImporterType)
        }
        /** Experimental utilities for generating Texture2D.
        */
        class TextureGenerator extends System.Object
        {
            protected [__keep_incompatibility]: never;
            public static GenerateTexture ($settings: UnityEditor.AssetImporters.TextureGenerationSettings, $colorBuffer: Unity.Collections.NativeArray$1<UnityEngine.Color32>) : UnityEditor.AssetImporters.TextureGenerationOutput
        }
        /** Use this method attribute to specify which methods declare dependancies on imported assets. The methods are called by AssetDatabase during import.
        */
        class CollectImportedDependenciesAttribute extends System.Attribute implements System.Runtime.InteropServices._Attribute
        {
            protected [__keep_incompatibility]: never;
            /** The type of the importer for which the imported dependency getter is declared.
            */
            public get importerType(): System.Type;
            /** The version of the imported dependency getter.
            */
            public get version(): number;
            public constructor ($importerType: System.Type, $version: number)
        }
        /** This is a default implementation for AssetPostProcessor.OnPreprocessMaterialDescription, this implementation converts material descriptions imported from FBX assets into materials for the internal rendering pipeline.
        */
        class FBXMaterialDescriptionPreprocessor extends UnityEditor.AssetPostprocessor
        {
            protected [__keep_incompatibility]: never;
            public OnPreprocessMaterialDescription ($description: UnityEditor.AssetImporters.MaterialDescription, $material: UnityEngine.Material, $clips: System.Array$1<UnityEngine.AnimationClip>) : void
            public constructor ()
        }
        /** This is a default implementation for AssetPostProcessor.OnPreprocessMaterialDescription, this implementation converts material descriptions imported from Sketchup assets into materials for the internal rendering pipeline.
        */
        class SketchupMaterialDescriptionPreprocessor extends UnityEditor.AssetPostprocessor
        {
            protected [__keep_incompatibility]: never;
            public OnPreprocessMaterialDescription ($description: UnityEditor.AssetImporters.MaterialDescription, $material: UnityEngine.Material, $clips: System.Array$1<UnityEngine.AnimationClip>) : void
            public constructor ()
        }
        /** This is a default implementation for AssetPostProcessor.OnPreprocessMaterialDescription, this implementation converts material descriptions imported from .3DS assets into materials for the internal rendering pipeline.
        */
        class ThreeDSMaterialDescriptionPreprocessor extends UnityEditor.AssetPostprocessor
        {
            protected [__keep_incompatibility]: never;
            public OnPreprocessMaterialDescription ($description: UnityEditor.AssetImporters.MaterialDescription, $material: UnityEngine.Material, $clips: System.Array$1<UnityEngine.AnimationClip>) : void
            public constructor ()
        }
        /** Default editor for all asset importer settings.
        */
        class AssetImporterEditor extends UnityEditor.Editor implements UnityEditor.IToolModeOwner, UnityEditor.IPreviewable
        {
            protected [__keep_incompatibility]: never;
            /** Should imported object be shown as a separate editor?
            */
            public get showImportedObject(): boolean;
            /** This function is called when the object is loaded.
            */
            public OnEnable () : void
            /** This function is called when the editor object goes out of scope.
            */
            public OnDisable () : void
            /** Determine if the import settings have been modified.
            */
            public HasModified () : boolean
        }
        /** Default editor for source assets handled by Scripted Importers.
        */
        class ScriptedImporterEditor extends UnityEditor.AssetImporters.AssetImporterEditor implements UnityEditor.IToolModeOwner, UnityEditor.IPreviewable
        {
            protected [__keep_incompatibility]: never;
            public constructor ()
        }
        /** Abstract base class for custom Asset importers.
        */
        class ScriptedImporter extends UnityEditor.AssetImporter
        {
            protected [__keep_incompatibility]: never;
            /** This method must by overriden by the derived class and is called by the Asset pipeline to import files.
            * @param $ctx This argument contains all the contextual information needed to process the import event and is also used by the custom importer to store the resulting Unity Asset.
            */
            public OnImportAsset ($ctx: UnityEditor.AssetImporters.AssetImportContext) : void
            /** Override this method if your ScriptedImporter supports remapping specific asset types.
            * @param $type The type of asset to check.
            * @returns Returns true if the importer supports remapping the given type. Otherwise, returns false. 
            */
            public SupportsRemappedAssetType ($type: System.Type) : boolean
        }
        /** Class attribute used to register a custom asset importer derived from ScriptedImporter with Unity's Asset import pipeline.
        */
        class ScriptedImporterAttribute extends System.Attribute implements System.Runtime.InteropServices._Attribute
        {
            protected [__keep_incompatibility]: never;
            /** Enable cache server uploads and downloads.
            */
            public AllowCaching : boolean
            /** Importer version number that is used by the import layer to detect new version of the importer and trigger re-imports when such events occur, to apply latest changes made to the scripted imrpoter.
            */
            public get version(): number;
            /** Enables controlling the ordering of asset import based on type. Positive values delay the processing of source asset files while negative values place them earlier in the import process.
            */
            public get importQueuePriority(): number;
            /** The list of file name extensions that this scripted importer should handle. You must not include the period character, only the extension characters such as "ext".
            */
            public get fileExtensions(): System.Array$1<string>;
            /** List of file name extensions (not including the leading period character) that the scripted importer can handle in addition to the default file name extension(s).
            */
            public get overrideFileExtensions(): System.Array$1<string>;
            public constructor ($version: number, $ext: string)
            public constructor ($version: number, $ext: string, $importQueueOffset: number)
            public constructor ($version: number, $exts: System.Array$1<string>)
            public constructor ($version: number, $exts: System.Array$1<string>, $overrideExts: System.Array$1<string>)
            public constructor ($version: number, $exts: System.Array$1<string>, $importQueueOffset: number)
            public constructor ($version: number, $exts: System.Array$1<string>, $overrideExts: System.Array$1<string>, $importQueueOffset: number)
        }
    }
    namespace UnityEditor.AssetImporter {
        class SourceAssetIdentifier extends System.ValueType
        {
            protected [__keep_incompatibility]: never;
            public type : System.Type
            public name : string
            public constructor ($asset: UnityEngine.Object)
            public constructor ($type: System.Type, $name: string)
        }
    }
    namespace UnityEditor.SpeedTreeImporter {
        enum MaterialLocation
        { External = 0, InPrefab = 1 }
    }
    namespace UnityEditor.AudioCurveRendering {
        interface AudioCurveEvaluator
        { 
        (x: number) : number; 
        Invoke?: (x: number) => number;
        }
        var AudioCurveEvaluator: { new (func: (x: number) => number): AudioCurveEvaluator; }
        interface AudioCurveAndColorEvaluator
        { 
        (x: number, col: $Ref<UnityEngine.Color>) : number; 
        Invoke?: (x: number, col: $Ref<UnityEngine.Color>) => number;
        }
        var AudioCurveAndColorEvaluator: { new (func: (x: number, col: $Ref<UnityEngine.Color>) => number): AudioCurveAndColorEvaluator; }
        interface AudioMinMaxCurveAndColorEvaluator
        { 
        (x: number, col: $Ref<UnityEngine.Color>, minValue: $Ref<number>, maxValue: $Ref<number>) : void; 
        Invoke?: (x: number, col: $Ref<UnityEngine.Color>, minValue: $Ref<number>, maxValue: $Ref<number>) => void;
        }
        var AudioMinMaxCurveAndColorEvaluator: { new (func: (x: number, col: $Ref<UnityEngine.Color>, minValue: $Ref<number>, maxValue: $Ref<number>) => void): AudioMinMaxCurveAndColorEvaluator; }
    }
    namespace UnityEditor.Build.Reporting {
        /** The BuildReport API gives you information about the Unity build process.
        */
        class BuildReport extends UnityEngine.Object
        {
            protected [__keep_incompatibility]: never;
            /** An array of all the BuildSteps that took place during the build process.
            */
            public get steps(): System.Array$1<UnityEditor.Build.Reporting.BuildStep>;
            /** A BuildSummary containing overall statistics and data about the build process.
            */
            public get summary(): UnityEditor.Build.Reporting.BuildSummary;
            /** The StrippingInfo object for the build.
            */
            public get strippingInfo(): UnityEditor.Build.Reporting.StrippingInfo;
            /** An array of all the PackedAssets generated by the build process.
            */
            public get packedAssets(): System.Array$1<UnityEditor.Build.Reporting.PackedAssets>;
            /** An optional array of ScenesUsingAssets generated by the build process if BuildOptions.DetailedBuildReport was used during the build.
            */
            public get scenesUsingAssets(): System.Array$1<UnityEditor.Build.Reporting.ScenesUsingAssets>;
            /** Returns an array of all the files output by the build process.
            * @returns An array of all the files output by the build process. 
            */
            public GetFiles () : System.Array$1<UnityEditor.Build.Reporting.BuildFile>
            /** Returns a string summarizing any errors that occurred during the build
            */
            public SummarizeErrors () : string
            /** Return the build report generated by the most recent Player or AssetBundle build
            */
            public static GetLatestReport () : UnityEditor.Build.Reporting.BuildReport
        }
        /** Contains information about a single file produced by the build process.
        */
        class BuildFile extends System.ValueType
        {
            protected [__keep_incompatibility]: never;
            /** The unique indentifier of the build file.
            */
            public get id(): number;
            /** The absolute path of the file produced by the build process.
            */
            public get path(): string;
            /** The role the file plays in the build output.
            */
            public get role(): string;
            /** The total size of the file, in bytes.
            */
            public get size(): bigint;
        }
        /** 
        Contains information about a single step in the build process.
        Additional resources: Build.Reporting.BuildReport.steps
        */
        class BuildStep extends System.ValueType
        {
            protected [__keep_incompatibility]: never;
            /** The name of this build step.
            */
            public get name(): string;
            /** The total duration for this build step.
            */
            public get duration(): System.TimeSpan;
            /** All log messages recorded during this build step, in the order of which they occurred.
            * @returns An array of BuildStepMessage structs. 
            */
            public get messages(): System.Array$1<UnityEditor.Build.Reporting.BuildStepMessage>;
            /** The nesting depth of the build step.
            */
            public get depth(): number;
        }
        /** Contains overall summary information about a build.
        */
        class BuildSummary extends System.ValueType
        {
            protected [__keep_incompatibility]: never;
            /** The time the build was started.
            */
            public get buildStartedAt(): System.DateTime;
            /** The Application.buildGUID of the build.
            */
            public get guid(): UnityEditor.GUID;
            /** The platform that the build was created for.
            */
            public get platform(): UnityEditor.BuildTarget;
            /** The platform group the build was created for.
            */
            public get platformGroup(): UnityEditor.BuildTargetGroup;
            /** The BuildOptions used for the build, as passed to BuildPipeline.BuildPlayer.
            */
            public get options(): UnityEditor.BuildOptions;
            /** The output path for the build, as provided to BuildPipeline.BuildPlayer.
            */
            public get outputPath(): string;
            /** The total size of the build output, in bytes.
            */
            public get totalSize(): bigint;
            /** The total time taken by the build process.
            */
            public get totalTime(): System.TimeSpan;
            /** The time the build ended.
            */
            public get buildEndedAt(): System.DateTime;
            /** The total number of errors and exceptions recorded during the build process.
            */
            public get totalErrors(): number;
            /** The total number of warnings recorded during the build process.
            */
            public get totalWarnings(): number;
            /** The outcome of the build.
            */
            public get result(): UnityEditor.Build.Reporting.BuildResult;
            /** Whether the multi-process option was enabled for the build.
            */
            public get multiProcessEnabled(): boolean;
        }
        /** The StrippingInfo object contains information about which native code modules in the engine are still present in the build, and the reasons why they are still present.
        */
        class StrippingInfo extends UnityEngine.ScriptableObject implements UnityEngine.ISerializationCallbackReceiver
        {
            protected [__keep_incompatibility]: never;
            /** The native engine modules that were included in the build.
            */
            public get includedModules(): System.Collections.Generic.IEnumerable$1<string>;
            /** Returns the list of dependencies or reasons that caused the given entity to be included in the build.
            * @param $entityName The name of an engine module, class, or other entity present in the build.
            * @returns A list of modules, classes, or other entities that caused the provided entity to be included in the build. 
            */
            public GetReasonsForIncluding ($entityName: string) : System.Collections.Generic.IEnumerable$1<string>
            public constructor ()
        }
        /** An extension to the BuildReport class that tracks how Assets contribute to the size of the build.
        */
        class PackedAssets extends UnityEngine.Object
        {
            protected [__keep_incompatibility]: never;
            /** The file path to the Asset package, relative to the Data folder of the build.
            */
            public get shortPath(): string;
            /** The header size of the packed Asset file.
            */
            public get overhead(): bigint;
            /** An array of PackedAssetInfo objects that holds information about the Assets that are included in the PackedAssets bundle, such as packed Asset size and type.
            */
            public get contents(): System.Array$1<UnityEditor.Build.Reporting.PackedAssetInfo>;
            public constructor ()
        }
        /** An extension to the BuildReport class that tracks which scenes in the build have references to a specific asset in the build.
        */
        class ScenesUsingAssets extends UnityEngine.Object
        {
            protected [__keep_incompatibility]: never;
            /** An array of ScenesUsingAsset that holds information about the Assets that are included in the build.
            */
            public get list(): System.Array$1<UnityEditor.Build.Reporting.ScenesUsingAsset>;
            public constructor ()
        }
        /** Describes the outcome of the build process.
        */
        enum BuildResult
        { Unknown = 0, Succeeded = 1, Failed = 2, Cancelled = 3 }
        /** 
        Contains information about a single log message recorded during the build process.
        Additional resources: Build.Reporting.BuildStep.messages
        */
        class BuildStepMessage extends System.ValueType
        {
            protected [__keep_incompatibility]: never;
            /** The LogType of the log message.
            */
            public get type(): UnityEngine.LogType;
            /** The text content of the log message.
            */
            public get content(): string;
        }
        /** This class provides constant values for some of the common roles used by files in the build. The role of each file in the build is available in BuildFile.role.
        */
        class CommonRoles extends System.Object
        {
            protected [__keep_incompatibility]: never;
            /** The BuildFile.role value of a file that contains the packed content of a Scene.
            */
            public static get scene(): string;
            /** The BuildFile.role value of a file that contains asset objects which are shared between Scenes. Examples of asset objects are textures, models, and audio.
            */
            public static get sharedAssets(): string;
            /** The BuildFile.role value of the file that contains the contents of the project's "Resources" folder, packed into a single file.
            */
            public static get resourcesFile(): string;
            /** The BuildFile.role value of built AssetBundle files.
            */
            public static get assetBundle(): string;
            /** The BuildFile.role value of a manifest AssetBundle, which is an AssetBundle that contains information about other AssetBundles and their dependencies.
            */
            public static get manifestAssetBundle(): string;
            /** The BuildFile.role value of an AssetBundle manifest file, produced during the build process, that contains information about the bundle and its dependencies.
            */
            public static get assetBundleTextManifest(): string;
            /** The BuildFile.role value of a managed assembly, containing compiled script code.
            */
            public static get managedLibrary(): string;
            /** The BuildFile.role value of a managed library that is present in the build due to being a dependency of a CommonRoles.managedLibrary.
            */
            public static get dependentManagedLibrary(): string;
            /** The BuildFile.role value of an executable - the file that will actually be launched on the target device.
            */
            public static get executable(): string;
            /** The BuildFile.role value of a file that contains streaming resource data.
            */
            public static get streamingResourceFile(): string;
            /** The BuildFile.role value of files that have been copied into the build without modification from the StreamingAssets folder in the project.
            */
            public static get streamingAsset(): string;
            /** The BuildFile.role value of the file that contains configuration information for the very early stages of engine startup.
            */
            public static get bootConfig(): string;
            /** The BuildFile.role value of the file that contains built-in resources for the engine.
            */
            public static get builtInResources(): string;
            /** The BuildFile.role value of the file that contains Unity's built-in shaders, such as the Standard shader.
            */
            public static get builtInShaders(): string;
            /** The BuildFile.role value of the file that provides config information used in Low Integrity mode on Windows.
            */
            public static get appInfo(): string;
            /** The BuildFile.role value of files that provide the managed API for Unity.
            */
            public static get managedEngineApi(): string;
            /** The BuildFile.role value of files that make up the Mono runtime itself.
            */
            public static get monoRuntime(): string;
            /** The BuildFile.role value of files that are used as configuration data by the Mono runtime.
            */
            public static get monoConfig(): string;
            /** The BuildFile.role value of files that contain information for debuggers.
            */
            public static get debugInfo(): string;
            /** The BuildFile.role value of the file that contains global Project Settings data for the player.
            */
            public static get globalGameManagers(): string;
            /** The BuildFile.role value of the executable that is used to capture crashes from the player.
            */
            public static get crashHandler(): string;
            /** The BuildFile.role value of the main Unity runtime when it is built as a separate library.
            */
            public static get engineLibrary(): string;
        }
        /** Contains information about a single packed Asset.
        */
        class PackedAssetInfo extends System.ValueType
        {
            protected [__keep_incompatibility]: never;
            /** The unique identifier of the packed Asset.
            */
            public get id(): bigint;
            /** The type of source Asset that the build process used to generate the package Asset, such as image, Mesh or audio types.
            */
            public get type(): System.Type;
            /** The size of the packed Asset.
            */
            public get packedSize(): bigint;
            /** The offset in a PackedAssets file that indicates the beginning of the packed Asset.
            */
            public get offset(): bigint;
            /** The Global Unique Identifier (GUID) of the source Asset that the build process used to generate the packed Asset.
            */
            public get sourceAssetGUID(): UnityEditor.GUID;
            /** The file path to the source Asset that the build process used to generate the package Asset, relative to the Project directory.
            */
            public get sourceAssetPath(): string;
        }
        /** Contains information about which scenes in a build have references to an Asset in the build.
        */
        class ScenesUsingAsset extends System.ValueType
        {
            protected [__keep_incompatibility]: never;
            /** The asset path.
            */
            public get assetPath(): string;
            /** The list of scenes in the build referring to the asset, identified by a string containing the scene index in the BuildPlayerOptions.scenes list, as well as the scene path.
            */
            public get scenePaths(): System.Array$1<string>;
        }
    }
    namespace UnityEditor.BuildPlayerWindow {
        class BuildMethodException extends System.Exception implements System.Runtime.Serialization.ISerializable, System.Runtime.InteropServices._Exception
        {
            protected [__keep_incompatibility]: never;
            public constructor ()
            public constructor ($message: string)
        }
        class DefaultBuildMethods extends System.Object
        {
            protected [__keep_incompatibility]: never;
            public static BuildPlayer ($options: UnityEditor.BuildPlayerOptions) : void
            public static GetBuildPlayerOptions ($defaultBuildPlayerOptions: UnityEditor.BuildPlayerOptions) : UnityEditor.BuildPlayerOptions
        }
    }
    namespace UnityEditor.DragAndDrop {
        interface ProjectBrowserDropHandler
        { 
        (dragInstanceId: number, dropUponPath: string, perform: boolean) : UnityEditor.DragAndDropVisualMode; 
        Invoke?: (dragInstanceId: number, dropUponPath: string, perform: boolean) => UnityEditor.DragAndDropVisualMode;
        }
        var ProjectBrowserDropHandler: { new (func: (dragInstanceId: number, dropUponPath: string, perform: boolean) => UnityEditor.DragAndDropVisualMode): ProjectBrowserDropHandler; }
        interface SceneDropHandler
        { 
        (dropUpon: UnityEngine.Object, worldPosition: UnityEngine.Vector3, viewportPosition: UnityEngine.Vector2, parentForDraggedObjects: UnityEngine.Transform, perform: boolean) : UnityEditor.DragAndDropVisualMode; 
        Invoke?: (dropUpon: UnityEngine.Object, worldPosition: UnityEngine.Vector3, viewportPosition: UnityEngine.Vector2, parentForDraggedObjects: UnityEngine.Transform, perform: boolean) => UnityEditor.DragAndDropVisualMode;
        }
        var SceneDropHandler: { new (func: (dropUpon: UnityEngine.Object, worldPosition: UnityEngine.Vector3, viewportPosition: UnityEngine.Vector2, parentForDraggedObjects: UnityEngine.Transform, perform: boolean) => UnityEditor.DragAndDropVisualMode): SceneDropHandler; }
        interface HierarchyDropHandler
        { 
        (dropTargetInstanceID: number, dropMode: UnityEditor.HierarchyDropFlags, parentForDraggedObjects: UnityEngine.Transform, perform: boolean) : UnityEditor.DragAndDropVisualMode; 
        Invoke?: (dropTargetInstanceID: number, dropMode: UnityEditor.HierarchyDropFlags, parentForDraggedObjects: UnityEngine.Transform, perform: boolean) => UnityEditor.DragAndDropVisualMode;
        }
        var HierarchyDropHandler: { new (func: (dropTargetInstanceID: number, dropMode: UnityEditor.HierarchyDropFlags, parentForDraggedObjects: UnityEngine.Transform, perform: boolean) => UnityEditor.DragAndDropVisualMode): HierarchyDropHandler; }
        interface InspectorDropHandler
        { 
        (targets: System.Array$1<UnityEngine.Object>, perform: boolean) : UnityEditor.DragAndDropVisualMode; 
        Invoke?: (targets: System.Array$1<UnityEngine.Object>, perform: boolean) => UnityEditor.DragAndDropVisualMode;
        }
        var InspectorDropHandler: { new (func: (targets: System.Array$1<UnityEngine.Object>, perform: boolean) => UnityEditor.DragAndDropVisualMode): InspectorDropHandler; }
    }
    namespace UnityEditor.EditorApplication {
        interface ProjectWindowItemCallback
        { 
        (guid: string, selectionRect: UnityEngine.Rect) : void; 
        Invoke?: (guid: string, selectionRect: UnityEngine.Rect) => void;
        }
        var ProjectWindowItemCallback: { new (func: (guid: string, selectionRect: UnityEngine.Rect) => void): ProjectWindowItemCallback; }
        interface ProjectWindowItemInstanceCallback
        { 
        (instanceID: number, selectionRect: UnityEngine.Rect) : void; 
        Invoke?: (instanceID: number, selectionRect: UnityEngine.Rect) => void;
        }
        var ProjectWindowItemInstanceCallback: { new (func: (instanceID: number, selectionRect: UnityEngine.Rect) => void): ProjectWindowItemInstanceCallback; }
        interface HierarchyWindowItemCallback
        { 
        (instanceID: number, selectionRect: UnityEngine.Rect) : void; 
        Invoke?: (instanceID: number, selectionRect: UnityEngine.Rect) => void;
        }
        var HierarchyWindowItemCallback: { new (func: (instanceID: number, selectionRect: UnityEngine.Rect) => void): HierarchyWindowItemCallback; }
        interface CallbackFunction
        { 
        () : void; 
        Invoke?: () => void;
        }
        var CallbackFunction: { new (func: () => void): CallbackFunction; }
        interface SerializedPropertyCallbackFunction
        { 
        (menu: UnityEditor.GenericMenu, property: UnityEditor.SerializedProperty) : void; 
        Invoke?: (menu: UnityEditor.GenericMenu, property: UnityEditor.SerializedProperty) => void;
        }
        var SerializedPropertyCallbackFunction: { new (func: (menu: UnityEditor.GenericMenu, property: UnityEditor.SerializedProperty) => void): SerializedPropertyCallbackFunction; }
    }
    namespace UnityEditor.EditorGUI {
        enum PropertyVisibility
        { All = 0, OnlyVisible = 1 }
        class DisabledGroupScope extends UnityEngine.GUI.Scope implements System.IDisposable
        {
            protected [__keep_incompatibility]: never;
            public constructor ($disabled: boolean)
        }
        class DisabledScope extends System.ValueType implements System.IDisposable
        {
            protected [__keep_incompatibility]: never;
            public Dispose () : void
            public constructor ($disabled: boolean)
        }
        class ChangeCheckScope extends UnityEngine.GUI.Scope implements System.IDisposable
        {
            protected [__keep_incompatibility]: never;
            public get changed(): boolean;
            public constructor ()
        }
        class MixedValueScope extends System.ValueType implements System.IDisposable
        {
            protected [__keep_incompatibility]: never;
            public constructor ($newMixedValue: boolean)
        }
        class IndentLevelScope extends UnityEngine.GUI.Scope implements System.IDisposable
        {
            protected [__keep_incompatibility]: never;
            public constructor ()
            public constructor ($increment: number)
        }
        class PropertyScope extends UnityEngine.GUI.Scope implements System.IDisposable
        {
            protected [__keep_incompatibility]: never;
            public get content(): UnityEngine.GUIContent;
            public constructor ($totalPosition: UnityEngine.Rect, $label: UnityEngine.GUIContent, $property: UnityEditor.SerializedProperty)
        }
    }
    namespace UnityEditor.GenericMenu {
        interface MenuFunction2
        { 
        (userData: any) : void; 
        Invoke?: (userData: any) => void;
        }
        var MenuFunction2: { new (func: (userData: any) => void): MenuFunction2; }
        interface MenuFunction
        { 
        () : void; 
        Invoke?: () => void;
        }
        var MenuFunction: { new (func: () => void): MenuFunction; }
    }
    namespace UnityEditor.EditorTools {
        /** Use this class to implement editor tools. This is the base class from which all editor tools are inherited.
        */
        class EditorTool extends UnityEngine.ScriptableObject implements UnityEditor.EditorTools.IEditor
        {
            protected [__keep_incompatibility]: never;
            /** An array of the objects being inspected.
            */
            public get targets(): System.Collections.Generic.IEnumerable$1<UnityEngine.Object>;
            /** The object being inspected.
            */
            public get target(): UnityEngine.Object;
            /** The icon and tooltip for this custom editor tool. If this function is not implemented, the toolbar displays the Inspector icon for the target type. If no target type is defined, the toolbar displays the Tool Mode icon.
            */
            public get toolbarIcon(): UnityEngine.GUIContent;
            /** Use this property to allow the current EditorTool to enable/disable grid snapping.
            */
            public get gridSnapEnabled(): boolean;
            /** Invoked after this EditorTool becomes the active tool.
            */
            public OnActivated () : void
            /** Invoked before this EditorTool stops being the active tool.
            */
            public OnWillBeDeactivated () : void
            /** Use this method to implement a custom editor tool.
            * @param $window The window that is displaying the custom editor tool.
            */
            public OnToolGUI ($window: UnityEditor.EditorWindow) : void
            /** Adds menu items to Scene view context menu.
            * @param $menu The Scene view context menu to add menu items to.
            */
            public PopulateMenu ($menu: UnityEngine.UIElements.DropdownMenu) : void
            /** Checks whether the custom editor tool is available based on the state of the editor.
            * @returns Returns true if the custom editor tool is available. Returns false otherwise. 
            */
            public IsAvailable () : boolean
        }
        interface IEditor
        {
        }
        /** Use this class to implement specialized versions of the built-in transform tools. Built-in transform tools include Move, Rotate, Scale, Rect, and Transform.
        */
        class EditorToolContext extends UnityEngine.ScriptableObject implements UnityEditor.EditorTools.IEditor
        {
            protected [__keep_incompatibility]: never;
            /** An array of the objects being inspected.
            */
            public get targets(): System.Collections.Generic.IEnumerable$1<UnityEngine.Object>;
            /** The object being inspected.
            */
            public get target(): UnityEngine.Object;
            /** Invoked after this EditorToolContext becomes the active tool context.
            */
            public OnActivated () : void
            /** Invoked before this EditorToolContext stops being the active tool context.
            */
            public OnWillBeDeactivated () : void
            /** Adds menu items to the Scene view context menu.
            * @param $menu The Scene view context menu to add menu items to.
            */
            public PopulateMenu ($menu: UnityEngine.UIElements.DropdownMenu) : void
            /** Implements any common functionality for the set of manipulation tools available for this context.
            * @param $window The window that is displaying the active EditorTool.
            */
            public OnToolGUI ($window: UnityEditor.EditorWindow) : void
            /** Returns the matching EditorTool type for the specified Tool given the context.
            * @param $tool The Tool to resolve to an EditorTool type.
            * @returns An EditorTool type for the requested Tool. 
            */
            public ResolveTool ($tool: UnityEditor.Tool) : System.Type
            /** Get an additional collection of tools to display in the same category as the built-in transform tools.
            * @returns A collection of EditorTool types. 
            */
            public GetAdditionalToolTypes () : System.Collections.Generic.IEnumerable$1<System.Type>
        }
        interface IDrawSelectedHandles
        {
            /** Implement this method to draw non-interactive handles when a custom editor tool is available.
            */
            OnDrawHandles () : void
        }
        /** Base class from which EditorToolAttribute and EditorToolContextAttribute inherit.
        */
        class ToolAttribute extends System.Attribute implements System.Runtime.InteropServices._Attribute
        {
            protected [__keep_incompatibility]: never;
            /** The default value for ToolAttribute.toolPriority and ToolAttribute.variantPriority. Specify a priority lower than this value to display a tool before the default entries, or specify a higher value to display it after the default entries.
            */
            public static defaultPriority : number
            /** The name that displays in menus.
            */
            public get displayName(): string;
            public set displayName(value: string);
            /** Set to the type that this EditorTool or EditorToolContext can edit. Set to null if the tool is not specific to a Component and should be available at any time.
            */
            public get targetType(): System.Type;
            public set targetType(value: System.Type);
            /** If provided, the EditorTool will only be made available when the ToolManager.activeContextType is equal to targetContext.
            */
            public get targetContext(): System.Type;
            public set targetContext(value: System.Type);
            /** Tool priority defines the order that tools are displayed in within the Tools Overlay.
            */
            public get toolPriority(): number;
            public set toolPriority(value: number);
            /** Tool variants are used to group logically similar tools into a single button in the Tools Overlay.
            */
            public get variantGroup(): System.Type;
            public set variantGroup(value: System.Type);
            /** The variant priority defines the order that tools are displayed in when they are displayed in a ToolAttribute.variantGroup dropdown.
            */
            public get variantPriority(): number;
            public set variantPriority(value: number);
        }
        /** Registers an EditorTool as either a Global tool or a Component tool for a specific target type.
        */
        class EditorToolAttribute extends UnityEditor.EditorTools.ToolAttribute implements System.Runtime.InteropServices._Attribute
        {
            protected [__keep_incompatibility]: never;
            public constructor ($displayName: string, $componentToolTarget?: System.Type)
            public constructor ($displayName: string, $componentToolTarget: System.Type, $editorToolContext: System.Type)
            public constructor ($displayName: string, $componentToolTarget: System.Type, $editorToolContext: System.Type, $variantGroup: System.Type)
            public constructor ($displayName: string, $componentToolTarget: System.Type, $editorToolContext: System.Type, $toolPriority: number, $variantGroup: System.Type)
            public constructor ($displayName: string, $componentToolTarget: System.Type, $editorToolContext: System.Type, $toolPriority: number, $variantGroup: System.Type, $variantPriority: number)
        }
        /** Registers an EditorToolContext as either a global context or a Component context  for a specific target type.
        */
        class EditorToolContextAttribute extends UnityEditor.EditorTools.ToolAttribute implements System.Runtime.InteropServices._Attribute
        {
            protected [__keep_incompatibility]: never;
            public constructor ($displayName?: string, $targetType?: System.Type)
        }
        class EditorTools extends System.Object
        {
            protected [__keep_incompatibility]: never;
            public static get activeToolType(): System.Type;
            public static add_activeToolChanging ($value: System.Action) : void
            public static remove_activeToolChanging ($value: System.Action) : void
            public static add_activeToolChanged ($value: System.Action) : void
            public static remove_activeToolChanged ($value: System.Action) : void
            public static SetActiveTool ($type: System.Type) : void
            public static SetActiveTool ($tool: UnityEditor.EditorTools.EditorTool) : void
            public static RestorePreviousTool () : void
            public static RestorePreviousPersistentTool () : void
            public static IsActiveTool ($tool: UnityEditor.EditorTools.EditorTool) : boolean
        }
        /** This class represents the default context for manipulation tools. When GameObjectToolContext is active, manipulation tools affect the transform property of GameObjects in the SceneView Selection.
        */
        class GameObjectToolContext extends UnityEditor.EditorTools.EditorToolContext implements UnityEditor.EditorTools.IEditor
        {
            protected [__keep_incompatibility]: never;
        }
        /** This class manipulates editor tools in the Scene view.
        */
        class ToolManager extends System.Object
        {
            protected [__keep_incompatibility]: never;
            /** Gets the type of EditorToolContext that is currently active. The default value is GameObjectToolContext.
            */
            public static get activeContextType(): System.Type;
            /** Gets the type of the EditorTool that is currently active.
            */
            public static get activeToolType(): System.Type;
            /** Sets the active EditorToolContext.
            * @param $context The EditorToolContext type to be set as the active tool.
            */
            public static SetActiveContext ($context: System.Type) : void
            public static add_activeToolChanging ($value: System.Action) : void
            public static remove_activeToolChanging ($value: System.Action) : void
            public static add_activeToolChanged ($value: System.Action) : void
            public static remove_activeToolChanged ($value: System.Action) : void
            public static add_activeContextChanging ($value: System.Action) : void
            public static remove_activeContextChanging ($value: System.Action) : void
            public static add_activeContextChanged ($value: System.Action) : void
            public static remove_activeContextChanged ($value: System.Action) : void
            /** Sets the active EditorTool.
            * @param $type The EditorTool type to set as the active tool.
            * @param $tool The EditorTool instance to set as the active tool.
            */
            public static SetActiveTool ($type: System.Type) : void
            /** Sets the active EditorTool.
            * @param $type The EditorTool type to set as the active tool.
            * @param $tool The EditorTool instance to set as the active tool.
            */
            public static SetActiveTool ($tool: UnityEditor.EditorTools.EditorTool) : void
            /** Sets the last-used EditorTool as the active tool.
            */
            public static RestorePreviousTool () : void
            /** Sets the last-used global EditorTool as the active tool.
            */
            public static RestorePreviousPersistentTool () : void
            /** Test if an EditorTool is currently the active tool.
            * @param $tool The EditorTool to compare with the active tool.
            * @returns Returns true if the tool is active, false if it is not the active tool. 
            */
            public static IsActiveTool ($tool: UnityEditor.EditorTools.EditorTool) : boolean
            /** Call RefreshAvailableTools to rebuild the contents of the Scene View Tools Overlay.
            */
            public static RefreshAvailableTools () : void
            /** Test if an EditorToolContext is currently the active tool context.
            * @param $context The EditorToolContext to compare with the active tool context.
            * @returns Returns true if the context is active, false if it is not the active context. 
            */
            public static IsActiveContext ($context: UnityEditor.EditorTools.EditorToolContext) : boolean
        }
    }
    namespace UnityEditor.EditorGUILayout {
        class ToggleGroupScope extends UnityEngine.GUI.Scope implements System.IDisposable
        {
            protected [__keep_incompatibility]: never;
            public get enabled(): boolean;
            public constructor ($label: string, $toggle: boolean)
            public constructor ($label: UnityEngine.GUIContent, $toggle: boolean)
        }
        class HorizontalScope extends UnityEngine.GUI.Scope implements System.IDisposable
        {
            protected [__keep_incompatibility]: never;
            public get rect(): UnityEngine.Rect;
            public constructor (...options: UnityEngine.GUILayoutOption[])
            public constructor ($style: UnityEngine.GUIStyle, ...options: UnityEngine.GUILayoutOption[])
        }
        class VerticalScope extends UnityEngine.GUI.Scope implements System.IDisposable
        {
            protected [__keep_incompatibility]: never;
            public get rect(): UnityEngine.Rect;
            public constructor (...options: UnityEngine.GUILayoutOption[])
            public constructor ($style: UnityEngine.GUIStyle, ...options: UnityEngine.GUILayoutOption[])
        }
        class ScrollViewScope extends UnityEngine.GUI.Scope implements System.IDisposable
        {
            protected [__keep_incompatibility]: never;
            public get scrollPosition(): UnityEngine.Vector2;
            public get handleScrollWheel(): boolean;
            public set handleScrollWheel(value: boolean);
            public constructor ($scrollPosition: UnityEngine.Vector2, ...options: UnityEngine.GUILayoutOption[])
            public constructor ($scrollPosition: UnityEngine.Vector2, $alwaysShowHorizontal: boolean, $alwaysShowVertical: boolean, ...options: UnityEngine.GUILayoutOption[])
            public constructor ($scrollPosition: UnityEngine.Vector2, $horizontalScrollbar: UnityEngine.GUIStyle, $verticalScrollbar: UnityEngine.GUIStyle, ...options: UnityEngine.GUILayoutOption[])
            public constructor ($scrollPosition: UnityEngine.Vector2, $style: UnityEngine.GUIStyle, ...options: UnityEngine.GUILayoutOption[])
            public constructor ($scrollPosition: UnityEngine.Vector2, $alwaysShowHorizontal: boolean, $alwaysShowVertical: boolean, $horizontalScrollbar: UnityEngine.GUIStyle, $verticalScrollbar: UnityEngine.GUIStyle, $background: UnityEngine.GUIStyle, ...options: UnityEngine.GUILayoutOption[])
        }
        class FadeGroupScope extends UnityEngine.GUI.Scope implements System.IDisposable
        {
            protected [__keep_incompatibility]: never;
            public get visible(): boolean;
            public constructor ($value: number)
        }
    }
    namespace UnityEditor.EditorGUIUtility {
        class PropertyCallbackScope extends System.Object implements System.IDisposable
        {
            protected [__keep_incompatibility]: never;
            public Dispose () : void
            public constructor ($callback: System.Action$2<UnityEngine.Rect, UnityEditor.SerializedProperty>)
        }
        class IconSizeScope extends UnityEngine.GUI.Scope implements System.IDisposable
        {
            protected [__keep_incompatibility]: never;
            public constructor ($iconSizeWithinScope: UnityEngine.Vector2)
        }
    }
    namespace UnityEditor.Handles {
        interface CapFunction
        { 
        (controlID: number, position: UnityEngine.Vector3, rotation: UnityEngine.Quaternion, size: number, eventType: UnityEngine.EventType) : void; 
        Invoke?: (controlID: number, position: UnityEngine.Vector3, rotation: UnityEngine.Quaternion, size: number, eventType: UnityEngine.EventType) => void;
        }
        var CapFunction: { new (func: (controlID: number, position: UnityEngine.Vector3, rotation: UnityEngine.Quaternion, size: number, eventType: UnityEngine.EventType) => void): CapFunction; }
        class PositionHandleIds extends System.ValueType
        {
            protected [__keep_incompatibility]: never;
            public x : number
            public y : number
            public z : number
            public xy : number
            public yz : number
            public xz : number
            public xyz : number
            public static get default(): UnityEditor.Handles.PositionHandleIds;
        }
        class RotationHandleIds extends System.ValueType
        {
            protected [__keep_incompatibility]: never;
            public x : number
            public y : number
            public z : number
            public cameraAxis : number
            public xyz : number
            public static get default(): UnityEditor.Handles.RotationHandleIds;
        }
        class DrawingScope extends System.ValueType implements System.IDisposable
        {
            protected [__keep_incompatibility]: never;
            public get originalColor(): UnityEngine.Color;
            public get originalMatrix(): UnityEngine.Matrix4x4;
            public Dispose () : void
            public constructor ($color: UnityEngine.Color)
            public constructor ($matrix: UnityEngine.Matrix4x4)
            public constructor ($color: UnityEngine.Color, $matrix: UnityEngine.Matrix4x4)
        }
        interface SizeFunction
        { 
        (position: UnityEngine.Vector3) : number; 
        Invoke?: (position: UnityEngine.Vector3) => number;
        }
        var SizeFunction: { new (func: (position: UnityEngine.Vector3) => number): SizeFunction; }
    }
    namespace UnityEditor.ModeService {
        class ModeChangedArgs extends System.ValueType
        {
            protected [__keep_incompatibility]: never;
            public prevIndex : number
            public nextIndex : number
        }
    }
    namespace UnityEditor.EditorSettings {
        enum NamingScheme
        { SpaceParenthesis = 0, Dot = 1, Underscore = 2 }
    }
    namespace UnityEditor.Build {
        /** Sets which texture compression override to use when importing assets.
        */
        enum OverrideTextureCompression
        { NoOverride = 0, ForceUncompressed = 1, ForceFastCompressor = 2 }
        /** Build Target by name. This allows to describe and identify build targets that are not fully represented by BuildTargetGroup and BuildTarget.
        */
        class NamedBuildTarget extends System.ValueType implements System.IComparable$1<UnityEditor.Build.NamedBuildTarget>, System.IEquatable$1<UnityEditor.Build.NamedBuildTarget>
        {
            protected [__keep_incompatibility]: never;
            /** Unknown.
            */
            public static Unknown : UnityEditor.Build.NamedBuildTarget
            /** Desktop Standalone.
            */
            public static Standalone : UnityEditor.Build.NamedBuildTarget
            /** Server.
            */
            public static Server : UnityEditor.Build.NamedBuildTarget
            /** iOS.
            */
            public static iOS : UnityEditor.Build.NamedBuildTarget
            /** Android.
            */
            public static Android : UnityEditor.Build.NamedBuildTarget
            /** WebGL.
            */
            public static WebGL : UnityEditor.Build.NamedBuildTarget
            /** Windows Store Apps.
            */
            public static WindowsStoreApps : UnityEditor.Build.NamedBuildTarget
            /** PS4.
            */
            public static PS4 : UnityEditor.Build.NamedBuildTarget
            /** PS5.
            */
            public static PS5 : UnityEditor.Build.NamedBuildTarget
            /** Xbox One.
            */
            public static XboxOne : UnityEditor.Build.NamedBuildTarget
            /** TvOS.
            */
            public static tvOS : UnityEditor.Build.NamedBuildTarget
            /** Bratwurst.
            */
            public static Bratwurst : UnityEditor.Build.NamedBuildTarget
            /** Nintendo Switch.
            */
            public static NintendoSwitch : UnityEditor.Build.NamedBuildTarget
            /** LinuxHeadlessSimulation.
            */
            public static LinuxHeadlessSimulation : UnityEditor.Build.NamedBuildTarget
            /** EmbeddedLinux.
            */
            public static EmbeddedLinux : UnityEditor.Build.NamedBuildTarget
            /** QNX.
            */
            public static QNX : UnityEditor.Build.NamedBuildTarget
            /** Name of the build target.
            */
            public get TargetName(): string;
            /** Returns the appropriate BuildTargetGroup that corresponds to the specified NamedBuildTarget.
            * @param $namedBuildTarget Named build target.
            */
            public ToBuildTargetGroup () : UnityEditor.BuildTargetGroup
            /** Returns the appropriate NamedBuildTarget that corresponds to the specified BuildTargetGroup.
            * @param $buildTargetGroup Build target group.
            */
            public static FromBuildTargetGroup ($buildTargetGroup: UnityEditor.BuildTargetGroup) : UnityEditor.Build.NamedBuildTarget
            public static op_Equality ($lhs: UnityEditor.Build.NamedBuildTarget, $rhs: UnityEditor.Build.NamedBuildTarget) : boolean
            public static op_Inequality ($lhs: UnityEditor.Build.NamedBuildTarget, $rhs: UnityEditor.Build.NamedBuildTarget) : boolean
            public Equals ($obj: any) : boolean
            public Equals ($other: UnityEditor.Build.NamedBuildTarget) : boolean
            public CompareTo ($other: UnityEditor.Build.NamedBuildTarget) : number
        }
        /** Options to control code generation for IL2CPP compiler.
        */
        enum Il2CppCodeGeneration
        { OptimizeSpeed = 0, OptimizeSize = 1 }
        /** An exception class that represents a failed build.
        */
        class BuildFailedException extends System.Exception implements System.Runtime.Serialization.ISerializable, System.Runtime.InteropServices._Exception
        {
            protected [__keep_incompatibility]: never;
            public constructor ($message: string)
            public constructor ($innerException: System.Exception)
        }
        interface IOrderedCallback
        {
            /** Returns the relative callback order for callbacks.  Callbacks with lower values are called before ones with higher values.
            */
            callbackOrder : number
        }
        interface IPreprocessBuild extends UnityEditor.Build.IOrderedCallback
        {
            /** Returns the relative callback order for callbacks.  Callbacks with lower values are called before ones with higher values.
            */
            callbackOrder : number
            /** This method is obsolete. Use Build.IPreprocessBuildWithReport.OnPreprocessBuild instead.
            */
            OnPreprocessBuild ($target: UnityEditor.BuildTarget, $path: string) : void
        }
        /** Extend BuildPlayerProcessor to receive callbacks during a player build.
        */
        class BuildPlayerProcessor extends System.Object implements UnityEditor.Build.IOrderedCallback
        {
            protected [__keep_incompatibility]: never;
            /** Returns the relative callback order for callbacks.  Callbacks with lower values are called before ones with higher values.
            */
            public get callbackOrder(): number;
            /** Implement this function to receive a callback before a player build starts.
            * @param $buildPlayerContext A context tied to the scheduled player build.
            */
            public PrepareForBuild ($buildPlayerContext: UnityEditor.Build.BuildPlayerContext) : void
        }
        /** Get a BuildPlayerContext object from a Build.BuildPlayerProcessor.PrepareForBuild callback.
        */
        class BuildPlayerContext extends System.Object
        {
            protected [__keep_incompatibility]: never;
            /** The player build options associated with this build.
            */
            public get BuildPlayerOptions(): UnityEditor.BuildPlayerOptions;
            /** Add additional streaming assets to the built player data. For example, you can include AssetBundles or other streaming assets without first putting them in the project StreamingAssets folder.
            * @param $directoryOrFile Path representing an existing file or directory. If the path doesn't exit, this function throws a FileNotFoundException.
            * @param $pathInStreamingAssets The path within the StreamingAssets folder at which to place the additional assets. If null, the file or directory is placed directly in the StreamingAssets folder.
            */
            public AddAdditionalPathToStreamingAssets ($directoryOrFile: string, $pathInStreamingAssets?: string) : void
        }
        interface IPreprocessBuildWithReport extends UnityEditor.Build.IOrderedCallback
        {
            /** Returns the relative callback order for callbacks.  Callbacks with lower values are called before ones with higher values.
            */
            callbackOrder : number
            /** Implement this function to receive a callback before the build is started.
            * @param $report A report containing information about the build, such as its target platform and output path.
            */
            OnPreprocessBuild ($report: UnityEditor.Build.Reporting.BuildReport) : void
        }
        interface IFilterBuildAssemblies extends UnityEditor.Build.IOrderedCallback
        {
            /** Returns the relative callback order for callbacks.  Callbacks with lower values are called before ones with higher values.
            */
            callbackOrder : number
            /** Will be called after building script assemblies, but makes it possible to filter away unwanted scripts to be included.
            * @param $buildOptions The current build options.
            * @param $assemblies The list of assemblies that will be included.
            * @returns Returns the filtered list of assemblies that are included in the build. 
            */
            OnFilterAssemblies ($buildOptions: UnityEditor.BuildOptions, $assemblies: System.Array$1<string>) : System.Array$1<string>
        }
        interface IPostprocessBuild extends UnityEditor.Build.IOrderedCallback
        {
            /** Returns the relative callback order for callbacks.  Callbacks with lower values are called before ones with higher values.
            */
            callbackOrder : number
            /** This method is obsolete. Use Build.IPostprocessBuildWithReport.OnPostprocessBuild instead.
            */
            OnPostprocessBuild ($target: UnityEditor.BuildTarget, $path: string) : void
        }
        interface IPostprocessBuildWithReport extends UnityEditor.Build.IOrderedCallback
        {
            /** Returns the relative callback order for callbacks.  Callbacks with lower values are called before ones with higher values.
            */
            callbackOrder : number
            /** Implement this function to receive a callback after the build is complete.
            * @param $report A BuildReport containing information about the build, such as the target platform and output path.
            */
            OnPostprocessBuild ($report: UnityEditor.Build.Reporting.BuildReport) : void
        }
        interface IPostBuildPlayerScriptDLLs extends UnityEditor.Build.IOrderedCallback
        {
            /** Returns the relative callback order for callbacks.  Callbacks with lower values are called before ones with higher values.
            */
            callbackOrder : number
            /** Implement this interface to receive a callback just after the player scripts have been compiled.
            * @param $report A report containing information about the build, such as its target platform and output path.
            */
            OnPostBuildPlayerScriptDLLs ($report: UnityEditor.Build.Reporting.BuildReport) : void
        }
        interface IProcessScene extends UnityEditor.Build.IOrderedCallback
        {
            /** Returns the relative callback order for callbacks.  Callbacks with lower values are called before ones with higher values.
            */
            callbackOrder : number
            /** Implement this function to receive a callback for each Scene during the build.
            * @param $scene The current Scene being processed.
            */
            OnProcessScene ($scene: UnityEngine.SceneManagement.Scene) : void
        }
        interface IProcessSceneWithReport extends UnityEditor.Build.IOrderedCallback
        {
            /** Returns the relative callback order for callbacks.  Callbacks with lower values are called before ones with higher values.
            */
            callbackOrder : number
            /** Implement this function to receive a callback for each Scene during the build.
            * @param $scene The current Scene being processed.
            * @param $report A report containing information about the current build. When this callback is invoked for Scene loading during Editor playmode, this parameter will be null.
            */
            OnProcessScene ($scene: UnityEngine.SceneManagement.Scene, $report: UnityEditor.Build.Reporting.BuildReport) : void
        }
        interface IActiveBuildTargetChanged extends UnityEditor.Build.IOrderedCallback
        {
            /** Returns the relative callback order for callbacks.  Callbacks with lower values are called before ones with higher values.
            */
            callbackOrder : number
            /** This function is called automatically when the active build platform has changed.
            * @param $previousTarget The build target before the change.
            * @param $newTarget The new active build target.
            */
            OnActiveBuildTargetChanged ($previousTarget: UnityEditor.BuildTarget, $newTarget: UnityEditor.BuildTarget) : void
        }
        interface IPreprocessShaders extends UnityEditor.Build.IOrderedCallback
        {
            /** Returns the relative callback order for callbacks.  Callbacks with lower values are called before ones with higher values.
            */
            callbackOrder : number
            OnProcessShader ($shader: UnityEngine.Shader, $snippet: UnityEditor.Rendering.ShaderSnippetData, $data: System.Collections.Generic.IList$1<UnityEditor.Rendering.ShaderCompilerData>) : void
        }
        interface IPreprocessComputeShaders extends UnityEditor.Build.IOrderedCallback
        {
            /** Returns the relative callback order for callbacks.  Callbacks with lower values are called before ones with higher values.
            */
            callbackOrder : number
            OnProcessComputeShader ($shader: UnityEngine.ComputeShader, $kernelName: string, $data: System.Collections.Generic.IList$1<UnityEditor.Rendering.ShaderCompilerData>) : void
        }
        interface IUnityLinkerProcessor extends UnityEditor.Build.IOrderedCallback
        {
            /** Returns the relative callback order for callbacks.  Callbacks with lower values are called before ones with higher values.
            */
            callbackOrder : number
            /** Generates additional link.xml files for preserving additional types and their members.
            * @param $report The current built report.
            * @param $data Information about the current run of UnityLinker.
            * @returns The file path to the generated link.xml file. If the path is relative, GenerateAdditionalLinkXmlFile combines it with the working directory to make an absolute path. 
            */
            GenerateAdditionalLinkXmlFile ($report: UnityEditor.Build.Reporting.BuildReport, $data: UnityEditor.UnityLinker.UnityLinkerBuildPipelineData) : string
        }
        interface IIl2CppProcessor extends UnityEditor.Build.IOrderedCallback
        {
            /** Returns the relative callback order for callbacks.  Callbacks with lower values are called before ones with higher values.
            */
            callbackOrder : number
        }
        /** Enum representing processor architectures that are supported by certain operating systems.
        */
        enum OSArchitecture
        { x64 = 0, ARM64 = 1, x64ARM64 = 2, x86 = 3 }
        /** Attribute to provide a version number for IProcessSceneWithReport callbacks.
        */
        class BuildCallbackVersionAttribute extends System.Attribute implements System.Runtime.InteropServices._Attribute
        {
            protected [__keep_incompatibility]: never;
            /** Version number.
            */
            public get Version(): number;
            public constructor ($version: number)
        }
        /** Defines the build context for IProcessSceneWithReport during a build event.
        */
        class BuildPipelineContext extends System.Object
        {
            protected [__keep_incompatibility]: never;
            /** Allows you to specify that a Scene depends on contents of a source asset at the provided path.
            * @param $path The path of the dependency.
            */
            public static DependOnPath ($path: string) : void
            /** Allows you to specify that a Scene depends on contents of an asset directly provided.
            * @param $asset The Unity Object from an asset.
            */
            public static DependOnAsset ($asset: UnityEngine.Object) : void
        }
    }
    namespace UnityEditor.EditorUtility {
        interface SelectMenuItemFunction
        { 
        (userData: any, options: System.Array$1<string>, selected: number) : void; 
        Invoke?: (userData: any, options: System.Array$1<string>, selected: number) => void;
        }
        var SelectMenuItemFunction: { new (func: (userData: any, options: System.Array$1<string>, selected: number) => void): SelectMenuItemFunction; }
    }
    namespace UnityEditor.LightmapEditorSettings {
        enum Lightmapper
        { Radiosity = 0, Enlighten = 0, PathTracer = 1, ProgressiveCPU = 1, ProgressiveGPU = 2 }
        enum Sampling
        { Auto = 0, Fixed = 1 }
        enum FilterMode
        { None = 0, Auto = 1, Advanced = 2 }
        enum DenoiserType
        { None = 0, Optix = 1, OpenImage = 2, RadeonPro = 3 }
        enum FilterType
        { Gaussian = 0, ATrous = 1, None = 2 }
        enum GIBakeBackend
        { Radiosity = 0, PathTracer = 1 }
        enum PathTracerSampling
        { Auto = 0, Fixed = 1 }
        enum PathTracerFilter
        { Gaussian = 0, ATrous = 1 }
    }
    namespace UnityEditor.LightmapParameters {
        enum AntiAliasingSamples
        { SSAA1 = 1, SSAA4 = 2, SSAA16 = 4 }
    }
    namespace UnityEditor.Lightmapping {
        interface OnCompletedFunction
        { 
        () : void; 
        Invoke?: () => void;
        }
        var OnCompletedFunction: { new (func: () => void): OnCompletedFunction; }
        enum GIWorkflowMode
        { Iterative = 0, OnDemand = 1, Legacy = 2 }
        interface OnStartedFunction
        { 
        () : void; 
        Invoke?: () => void;
        }
        var OnStartedFunction: { new (func: () => void): OnStartedFunction; }
    }
    namespace UnityEditor.HandleUtility {
        interface PickGameObjectCallback
        { 
        (cam: UnityEngine.Camera, layers: number, position: UnityEngine.Vector2, ignore: System.Array$1<UnityEngine.GameObject>, filter: System.Array$1<UnityEngine.GameObject>, materialIndex: $Ref<number>) : UnityEngine.GameObject; 
        Invoke?: (cam: UnityEngine.Camera, layers: number, position: UnityEngine.Vector2, ignore: System.Array$1<UnityEngine.GameObject>, filter: System.Array$1<UnityEngine.GameObject>, materialIndex: $Ref<number>) => UnityEngine.GameObject;
        }
        var PickGameObjectCallback: { new (func: (cam: UnityEngine.Camera, layers: number, position: UnityEngine.Vector2, ignore: System.Array$1<UnityEngine.GameObject>, filter: System.Array$1<UnityEngine.GameObject>, materialIndex: $Ref<number>) => UnityEngine.GameObject): PickGameObjectCallback; }
        interface PlaceObjectDelegate
        { 
        (guiPosition: UnityEngine.Vector2, position: $Ref<UnityEngine.Vector3>, normal: $Ref<UnityEngine.Vector3>) : boolean; 
        Invoke?: (guiPosition: UnityEngine.Vector2, position: $Ref<UnityEngine.Vector3>, normal: $Ref<UnityEngine.Vector3>) => boolean;
        }
        var PlaceObjectDelegate: { new (func: (guiPosition: UnityEngine.Vector2, position: $Ref<UnityEngine.Vector3>, normal: $Ref<UnityEngine.Vector3>) => boolean): PlaceObjectDelegate; }
        interface RenderPickingCallback
        { 
        (args: $Ref<UnityEditor.RenderPickingArgs>) : UnityEditor.RenderPickingResult; 
        Invoke?: (args: $Ref<UnityEditor.RenderPickingArgs>) => UnityEditor.RenderPickingResult;
        }
        var RenderPickingCallback: { new (func: (args: $Ref<UnityEditor.RenderPickingArgs>) => UnityEditor.RenderPickingResult): RenderPickingCallback; }
        interface ResolvePickingCallback
        { 
        (localPickingIndex: number) : UnityEngine.Object; 
        Invoke?: (localPickingIndex: number) => UnityEngine.Object;
        }
        var ResolvePickingCallback: { new (func: (localPickingIndex: number) => UnityEngine.Object): ResolvePickingCallback; }
        interface ResolvePickingWithWorldPositionCallback
        { 
        (localPickingIndex: number, worldPos: UnityEngine.Vector3, depth: number) : UnityEngine.Object; 
        Invoke?: (localPickingIndex: number, worldPos: UnityEngine.Vector3, depth: number) => UnityEngine.Object;
        }
        var ResolvePickingWithWorldPositionCallback: { new (func: (localPickingIndex: number, worldPos: UnityEngine.Vector3, depth: number) => UnityEngine.Object): ResolvePickingWithWorldPositionCallback; }
    }
    namespace UnityEditor.SceneManagement.SceneHierarchyHooks {
        class SubSceneInfo extends System.ValueType
        {
            protected [__keep_incompatibility]: never;
            public transform : UnityEngine.Transform
            public scene : UnityEngine.SceneManagement.Scene
            public sceneAsset : UnityEditor.SceneAsset
            public sceneName : string
            public color : UnityEngine.Color32
            public get isValid(): boolean;
        }
    }
    namespace UnityEditor.CameraEditor {
        class Settings extends System.Object
        {
            protected [__keep_incompatibility]: never;
            public static get ApertureFormatNames(): System.Collections.Generic.IEnumerable$1<string>;
            public static get ApertureFormatValues(): System.Collections.Generic.IEnumerable$1<UnityEngine.Vector2>;
            public get clearFlags(): UnityEditor.SerializedProperty;
            public get backgroundColor(): UnityEditor.SerializedProperty;
            public get normalizedViewPortRect(): UnityEditor.SerializedProperty;
            public get iso(): UnityEditor.SerializedProperty;
            public get shutterSpeed(): UnityEditor.SerializedProperty;
            public get aperture(): UnityEditor.SerializedProperty;
            public get focusDistance(): UnityEditor.SerializedProperty;
            public get focalLength(): UnityEditor.SerializedProperty;
            public get bladeCount(): UnityEditor.SerializedProperty;
            public get curvature(): UnityEditor.SerializedProperty;
            public get barrelClipping(): UnityEditor.SerializedProperty;
            public get anamorphism(): UnityEditor.SerializedProperty;
            public get sensorSize(): UnityEditor.SerializedProperty;
            public get lensShift(): UnityEditor.SerializedProperty;
            public get gateFit(): UnityEditor.SerializedProperty;
            public get verticalFOV(): UnityEditor.SerializedProperty;
            public get orthographic(): UnityEditor.SerializedProperty;
            public get orthographicSize(): UnityEditor.SerializedProperty;
            public get depth(): UnityEditor.SerializedProperty;
            public get cullingMask(): UnityEditor.SerializedProperty;
            public get renderingPath(): UnityEditor.SerializedProperty;
            public get occlusionCulling(): UnityEditor.SerializedProperty;
            public get targetTexture(): UnityEditor.SerializedProperty;
            public get HDR(): UnityEditor.SerializedProperty;
            public get allowMSAA(): UnityEditor.SerializedProperty;
            public get allowDynamicResolution(): UnityEditor.SerializedProperty;
            public get stereoConvergence(): UnityEditor.SerializedProperty;
            public get stereoSeparation(): UnityEditor.SerializedProperty;
            public get nearClippingPlane(): UnityEditor.SerializedProperty;
            public get farClippingPlane(): UnityEditor.SerializedProperty;
            public get fovAxisMode(): UnityEditor.SerializedProperty;
            public get targetDisplay(): UnityEditor.SerializedProperty;
            public get targetEye(): UnityEditor.SerializedProperty;
            public OnEnable () : void
            public Update () : void
            public ApplyModifiedProperties () : void
            public DrawClearFlags () : void
            public DrawBackgroundColor () : void
            public DrawCullingMask () : void
            public DrawProjection () : void
            public DrawClippingPlanes () : void
            public DrawNormalizedViewPort () : void
            public DrawDepth () : void
            public DrawRenderingPath () : void
            public DrawTargetTexture ($deferred: boolean) : void
            public DrawOcclusionCulling () : void
            public DrawHDR () : void
            public DrawMSAA () : void
            public DrawDynamicResolution () : void
            public DrawVR () : void
            public DrawMultiDisplay () : void
            public DrawTargetEye () : void
            public static DrawCameraWarnings ($camera: UnityEngine.Camera) : void
            public constructor ($so: UnityEditor.SerializedObject)
        }
    }
    namespace UnityEditor.LightEditor {
        class Settings extends System.Object
        {
            protected [__keep_incompatibility]: never;
            public get lightType(): UnityEditor.SerializedProperty;
            public get range(): UnityEditor.SerializedProperty;
            public get spotAngle(): UnityEditor.SerializedProperty;
            public get innerSpotAngle(): UnityEditor.SerializedProperty;
            public get cookieSize(): UnityEditor.SerializedProperty;
            public get color(): UnityEditor.SerializedProperty;
            public get intensity(): UnityEditor.SerializedProperty;
            public get bounceIntensity(): UnityEditor.SerializedProperty;
            public get colorTemperature(): UnityEditor.SerializedProperty;
            public get useColorTemperature(): UnityEditor.SerializedProperty;
            public get cookieProp(): UnityEditor.SerializedProperty;
            public get shadowsType(): UnityEditor.SerializedProperty;
            public get shadowsStrength(): UnityEditor.SerializedProperty;
            public get shadowsResolution(): UnityEditor.SerializedProperty;
            public get shadowsBias(): UnityEditor.SerializedProperty;
            public get shadowsNormalBias(): UnityEditor.SerializedProperty;
            public get shadowsNearPlane(): UnityEditor.SerializedProperty;
            public get halo(): UnityEditor.SerializedProperty;
            public get flare(): UnityEditor.SerializedProperty;
            public get renderMode(): UnityEditor.SerializedProperty;
            public get cullingMask(): UnityEditor.SerializedProperty;
            public get renderingLayerMask(): UnityEditor.SerializedProperty;
            public get lightmapping(): UnityEditor.SerializedProperty;
            public get areaSizeX(): UnityEditor.SerializedProperty;
            public get areaSizeY(): UnityEditor.SerializedProperty;
            public get bakedShadowRadiusProp(): UnityEditor.SerializedProperty;
            public get bakedShadowAngleProp(): UnityEditor.SerializedProperty;
            public get isRealtime(): boolean;
            public get isMixed(): boolean;
            public get isCompletelyBaked(): boolean;
            public get isBakedOrMixed(): boolean;
            public get isAreaLightType(): boolean;
            public get light(): UnityEngine.Light;
            public get cookie(): UnityEngine.Texture;
            public OnEnable () : void
            public OnDestroy () : void
            public Update () : void
            public DrawLightType () : void
            public DrawRange () : void
            public DrawSpotAngle () : void
            public DrawInnerAndOuterSpotAngle () : void
            public DrawArea () : void
            public DrawColor () : void
            public DrawLightmapping () : void
            public DrawIntensity () : void
            public DrawBounceIntensity () : void
            public DrawCookieProperty ($cookieProperty: UnityEditor.SerializedProperty, $content: UnityEngine.GUIContent, $cookieLightType: UnityEngine.LightType) : void
            public DrawCookie () : void
            public DrawCookieSize () : void
            public DrawHalo () : void
            public DrawFlare () : void
            public DrawRenderMode () : void
            public DrawCullingMask () : void
            public DrawRenderingLayerMask () : void
            public ApplyModifiedProperties () : void
            public DrawShadowsType () : void
            public DrawBakedShadowRadius () : void
            public DrawBakedShadowAngle () : void
            public DrawRuntimeShadow () : void
            public constructor ($so: UnityEditor.SerializedObject)
        }
    }
    namespace UnityEditor.ShaderUtil {
        enum ShaderPropertyTexDim
        { TexDimNone = 0, TexDim2D = 2, TexDim3D = 3, TexDimCUBE = 4, TexDimAny = 6 }
        enum ShaderPropertyType
        { Color = 0, Vector = 1, Float = 2, Range = 3, TexEnv = 4, Int = 5 }
    }
    namespace UnityEditor.RootEditorAttribute {
        interface RootEditorHandler
        { 
        (objects: System.Array$1<UnityEngine.Object>) : System.Type; 
        Invoke?: (objects: System.Array$1<UnityEngine.Object>) => System.Type;
        }
        var RootEditorHandler: { new (func: (objects: System.Array$1<UnityEngine.Object>) => System.Type): RootEditorHandler; }
    }
    namespace UnityEditor.MaterialProperty {
        enum PropType
        { Color = 0, Vector = 1, Float = 2, Range = 3, Texture = 4, Int = 5 }
        enum PropFlags
        { None = 0, HideInInspector = 1, PerRendererData = 2, NoScaleOffset = 4, Normal = 8, HDR = 16, Gamma = 32, NonModifiableTextureData = 64 }
        interface ApplyPropertyCallback
        { 
        (prop: UnityEditor.MaterialProperty, changeMask: number, previousValue: any) : boolean; 
        Invoke?: (prop: UnityEditor.MaterialProperty, changeMask: number, previousValue: any) => boolean;
        }
        var ApplyPropertyCallback: { new (func: (prop: UnityEditor.MaterialProperty, changeMask: number, previousValue: any) => boolean): ApplyPropertyCallback; }
        enum TexDim
        { Unknown = -1, None = 0, Tex2D = 2, Tex3D = 3, Cube = 4, Any = 6 }
    }
    namespace UnityEditor.PlayerSettings {
        class Android extends System.Object
        {
            protected [__keep_incompatibility]: never;
            public static get disableDepthAndStencilBuffers(): boolean;
            public static set disableDepthAndStencilBuffers(value: boolean);
            public static get defaultWindowWidth(): number;
            public static set defaultWindowWidth(value: number);
            public static get defaultWindowHeight(): number;
            public static set defaultWindowHeight(value: number);
            public static get minimumWindowWidth(): number;
            public static set minimumWindowWidth(value: number);
            public static get minimumWindowHeight(): number;
            public static set minimumWindowHeight(value: number);
            public static get resizableWindow(): boolean;
            public static set resizableWindow(value: boolean);
            public static get fullscreenMode(): UnityEngine.FullScreenMode;
            public static set fullscreenMode(value: UnityEngine.FullScreenMode);
            public static get autoRotationBehavior(): UnityEditor.AndroidAutoRotationBehavior;
            public static set autoRotationBehavior(value: UnityEditor.AndroidAutoRotationBehavior);
            public static get bundleVersionCode(): number;
            public static set bundleVersionCode(value: number);
            public static get minSdkVersion(): UnityEditor.AndroidSdkVersions;
            public static set minSdkVersion(value: UnityEditor.AndroidSdkVersions);
            public static get targetSdkVersion(): UnityEditor.AndroidSdkVersions;
            public static set targetSdkVersion(value: UnityEditor.AndroidSdkVersions);
            public static get preferredInstallLocation(): UnityEditor.AndroidPreferredInstallLocation;
            public static set preferredInstallLocation(value: UnityEditor.AndroidPreferredInstallLocation);
            public static get forceInternetPermission(): boolean;
            public static set forceInternetPermission(value: boolean);
            public static get forceSDCardPermission(): boolean;
            public static set forceSDCardPermission(value: boolean);
            public static get androidTVCompatibility(): boolean;
            public static set androidTVCompatibility(value: boolean);
            public static get androidIsGame(): boolean;
            public static set androidIsGame(value: boolean);
            public static get ARCoreEnabled(): boolean;
            public static set ARCoreEnabled(value: boolean);
            public static get chromeosInputEmulation(): boolean;
            public static set chromeosInputEmulation(value: boolean);
            public static get targetArchitectures(): UnityEditor.AndroidArchitecture;
            public static set targetArchitectures(value: UnityEditor.AndroidArchitecture);
            public static get enableArmv9SecurityFeatures(): boolean;
            public static set enableArmv9SecurityFeatures(value: boolean);
            public static get buildApkPerCpuArchitecture(): boolean;
            public static set buildApkPerCpuArchitecture(value: boolean);
            public static get androidTargetDevices(): UnityEditor.AndroidTargetDevices;
            public static set androidTargetDevices(value: UnityEditor.AndroidTargetDevices);
            public static get splashScreenScale(): UnityEditor.AndroidSplashScreenScale;
            public static set splashScreenScale(value: UnityEditor.AndroidSplashScreenScale);
            public static get useCustomKeystore(): boolean;
            public static set useCustomKeystore(value: boolean);
            public static get keystoreName(): string;
            public static set keystoreName(value: string);
            public static get keystorePass(): string;
            public static set keystorePass(value: string);
            public static get keyaliasName(): string;
            public static set keyaliasName(value: string);
            public static get keyaliasPass(): string;
            public static set keyaliasPass(value: string);
            public static get licenseVerification(): boolean;
            public static get splitApplicationBinary(): boolean;
            public static set splitApplicationBinary(value: boolean);
            public static get showActivityIndicatorOnLoading(): UnityEditor.AndroidShowActivityIndicatorOnLoading;
            public static set showActivityIndicatorOnLoading(value: UnityEditor.AndroidShowActivityIndicatorOnLoading);
            public static get blitType(): UnityEditor.AndroidBlitType;
            public static set blitType(value: UnityEditor.AndroidBlitType);
            public static get maxAspectRatio(): number;
            public static set maxAspectRatio(value: number);
            public static get minAspectRatio(): number;
            public static set minAspectRatio(value: number);
            public static get startInFullscreen(): boolean;
            public static set startInFullscreen(value: boolean);
            public static get renderOutsideSafeArea(): boolean;
            public static set renderOutsideSafeArea(value: boolean);
            public static get minifyRelease(): boolean;
            public static set minifyRelease(value: boolean);
            public static get minifyDebug(): boolean;
            public static set minifyDebug(value: boolean);
            public static get optimizedFramePacing(): boolean;
            public static set optimizedFramePacing(value: boolean);
            public static get textureCompressionFormats(): System.Array$1<UnityEditor.TextureCompressionFormat>;
            public static set textureCompressionFormats(value: System.Array$1<UnityEditor.TextureCompressionFormat>);
            public static get reportGooglePlayAppDependencies(): boolean;
            public static set reportGooglePlayAppDependencies(value: boolean);
            public static get applicationEntry(): UnityEditor.AndroidApplicationEntry;
            public static set applicationEntry(value: UnityEditor.AndroidApplicationEntry);
            public constructor ()
        }
        class iOS extends System.Object
        {
            protected [__keep_incompatibility]: never;
            public static get applicationDisplayName(): string;
            public static set applicationDisplayName(value: string);
            public static get buildNumber(): string;
            public static set buildNumber(value: string);
            public static get disableDepthAndStencilBuffers(): boolean;
            public static set disableDepthAndStencilBuffers(value: boolean);
            public static get scriptCallOptimization(): UnityEditor.ScriptCallOptimizationLevel;
            public static set scriptCallOptimization(value: UnityEditor.ScriptCallOptimizationLevel);
            public static get sdkVersion(): UnityEditor.iOSSdkVersion;
            public static set sdkVersion(value: UnityEditor.iOSSdkVersion);
            public static get targetOSVersionString(): string;
            public static set targetOSVersionString(value: string);
            public static get targetDevice(): UnityEditor.iOSTargetDevice;
            public static set targetDevice(value: UnityEditor.iOSTargetDevice);
            public static get prerenderedIcon(): boolean;
            public static set prerenderedIcon(value: boolean);
            public static get requiresPersistentWiFi(): boolean;
            public static set requiresPersistentWiFi(value: boolean);
            public static get requiresFullScreen(): boolean;
            public static set requiresFullScreen(value: boolean);
            public static get statusBarStyle(): UnityEditor.iOSStatusBarStyle;
            public static set statusBarStyle(value: UnityEditor.iOSStatusBarStyle);
            public static get deferSystemGesturesMode(): UnityEngine.iOS.SystemGestureDeferMode;
            public static set deferSystemGesturesMode(value: UnityEngine.iOS.SystemGestureDeferMode);
            public static get hideHomeButton(): boolean;
            public static set hideHomeButton(value: boolean);
            public static get appInBackgroundBehavior(): UnityEditor.iOSAppInBackgroundBehavior;
            public static set appInBackgroundBehavior(value: UnityEditor.iOSAppInBackgroundBehavior);
            public static get backgroundModes(): UnityEditor.iOSBackgroundMode;
            public static set backgroundModes(value: UnityEditor.iOSBackgroundMode);
            public static get forceHardShadowsOnMetal(): boolean;
            public static set forceHardShadowsOnMetal(value: boolean);
            public static get appleDeveloperTeamID(): string;
            public static set appleDeveloperTeamID(value: string);
            public static get iOSManualProvisioningProfileID(): string;
            public static set iOSManualProvisioningProfileID(value: string);
            public static get tvOSManualProvisioningProfileID(): string;
            public static set tvOSManualProvisioningProfileID(value: string);
            public static get tvOSManualProvisioningProfileType(): UnityEditor.ProvisioningProfileType;
            public static set tvOSManualProvisioningProfileType(value: UnityEditor.ProvisioningProfileType);
            public static get iOSManualProvisioningProfileType(): UnityEditor.ProvisioningProfileType;
            public static set iOSManualProvisioningProfileType(value: UnityEditor.ProvisioningProfileType);
            public static get appleEnableAutomaticSigning(): boolean;
            public static set appleEnableAutomaticSigning(value: boolean);
            public static get cameraUsageDescription(): string;
            public static set cameraUsageDescription(value: string);
            public static get locationUsageDescription(): string;
            public static set locationUsageDescription(value: string);
            public static get microphoneUsageDescription(): string;
            public static set microphoneUsageDescription(value: string);
            public static get showActivityIndicatorOnLoading(): UnityEditor.iOSShowActivityIndicatorOnLoading;
            public static set showActivityIndicatorOnLoading(value: UnityEditor.iOSShowActivityIndicatorOnLoading);
            public static get useOnDemandResources(): boolean;
            public static set useOnDemandResources(value: boolean);
            public static get iOSUrlSchemes(): System.Array$1<string>;
            public static set iOSUrlSchemes(value: System.Array$1<string>);
            public static SetLaunchScreenImage ($image: UnityEngine.Texture2D, $type: UnityEditor.iOSLaunchScreenImageType) : void
            public static SetiPhoneLaunchScreenType ($type: UnityEditor.iOSLaunchScreenType) : void
            public static SetiPadLaunchScreenType ($type: UnityEditor.iOSLaunchScreenType) : void
            public constructor ()
        }
        class Bratwurst extends System.Object
        {
            protected [__keep_incompatibility]: never;
            public static get sdkVersion(): UnityEditor.BratwurstSdkVersion;
            public static set sdkVersion(value: UnityEditor.BratwurstSdkVersion);
            public static get buildNumber(): string;
            public static set buildNumber(value: string);
            public static get targetOSVersionString(): string;
            public static set targetOSVersionString(value: string);
            public constructor ()
        }
        class EmbeddedLinux extends System.Object
        {
            protected [__keep_incompatibility]: never;
            public static get playerDataPath(): string;
            public static set playerDataPath(value: string);
            public static get forceSRGBBlit(): boolean;
            public static set forceSRGBBlit(value: boolean);
            public static get enableGamepadInput(): boolean;
            public static set enableGamepadInput(value: boolean);
            public static get cpuConfiguration(): System.Array$1<number>;
            public static set cpuConfiguration(value: System.Array$1<number>);
            public static get hmiLoadingImage(): UnityEngine.Texture2D;
            public static set hmiLoadingImage(value: UnityEngine.Texture2D);
            public static get hmiLogStartupTiming(): boolean;
            public static set hmiLogStartupTiming(value: boolean);
            public constructor ()
        }
        class Facebook extends System.Object
        {
            protected [__keep_incompatibility]: never;
            public static get sdkVersion(): string;
            public static set sdkVersion(value: string);
            public static get appId(): string;
            public static set appId(value: string);
            public static get useCookies(): boolean;
            public static set useCookies(value: boolean);
            public static get useStatus(): boolean;
            public static set useStatus(value: boolean);
            public static get useFrictionlessRequests(): boolean;
            public static set useFrictionlessRequests(value: boolean);
            public constructor ()
        }
        class Lumin extends System.Object
        {
            protected [__keep_incompatibility]: never;
            public static get iconModelFolderPath(): string;
            public static set iconModelFolderPath(value: string);
            public static get iconPortalFolderPath(): string;
            public static set iconPortalFolderPath(value: string);
            public static get certificatePath(): string;
            public static set certificatePath(value: string);
            public static get signPackage(): boolean;
            public static set signPackage(value: boolean);
            public static get isChannelApp(): boolean;
            public static set isChannelApp(value: boolean);
            public static get versionCode(): number;
            public static set versionCode(value: number);
            public static get versionName(): string;
            public static set versionName(value: string);
            public constructor ()
        }
        class macOS extends System.Object
        {
            protected [__keep_incompatibility]: never;
            public static get buildNumber(): string;
            public static set buildNumber(value: string);
            public static get applicationCategoryType(): string;
            public static set applicationCategoryType(value: string);
            public static get cameraUsageDescription(): string;
            public static set cameraUsageDescription(value: string);
            public static get microphoneUsageDescription(): string;
            public static set microphoneUsageDescription(value: string);
            public static get bluetoothUsageDescription(): string;
            public static set bluetoothUsageDescription(value: string);
            public static get urlSchemes(): System.Array$1<string>;
            public static set urlSchemes(value: System.Array$1<string>);
            public static get targetOSVersion(): string;
            public static set targetOSVersion(value: string);
            public constructor ()
        }
        class PS4 extends System.Object
        {
            protected [__keep_incompatibility]: never;
            public static get npTrophyPackPath(): string;
            public static set npTrophyPackPath(value: string);
            public static get npAgeRating(): number;
            public static set npAgeRating(value: number);
            public static get npTitleSecret(): string;
            public static set npTitleSecret(value: string);
            public static get parentalLevel(): number;
            public static set parentalLevel(value: number);
            public static get applicationParameter1(): number;
            public static set applicationParameter1(value: number);
            public static get applicationParameter2(): number;
            public static set applicationParameter2(value: number);
            public static get applicationParameter3(): number;
            public static set applicationParameter3(value: number);
            public static get applicationParameter4(): number;
            public static set applicationParameter4(value: number);
            public static get passcode(): string;
            public static set passcode(value: string);
            public static get monoEnv(): string;
            public static set monoEnv(value: string);
            public static get playerPrefsSupport(): boolean;
            public static set playerPrefsSupport(value: boolean);
            public static get restrictedAudioUsageRights(): boolean;
            public static set restrictedAudioUsageRights(value: boolean);
            public static get useResolutionFallback(): boolean;
            public static set useResolutionFallback(value: boolean);
            public static get contentID(): string;
            public static set contentID(value: string);
            public static get category(): UnityEditor.PlayerSettings.PS4.PS4AppCategory;
            public static set category(value: UnityEditor.PlayerSettings.PS4.PS4AppCategory);
            public static get appType(): number;
            public static set appType(value: number);
            public static get masterVersion(): string;
            public static set masterVersion(value: string);
            public static get appVersion(): string;
            public static set appVersion(value: string);
            public static get remotePlayKeyAssignment(): UnityEditor.PlayerSettings.PS4.PS4RemotePlayKeyAssignment;
            public static set remotePlayKeyAssignment(value: UnityEditor.PlayerSettings.PS4.PS4RemotePlayKeyAssignment);
            public static get remotePlayKeyMappingDir(): string;
            public static set remotePlayKeyMappingDir(value: string);
            public static get playTogetherPlayerCount(): number;
            public static set playTogetherPlayerCount(value: number);
            public static get enterButtonAssignment(): UnityEditor.PlayerSettings.PS4.PS4EnterButtonAssignment;
            public static set enterButtonAssignment(value: UnityEditor.PlayerSettings.PS4.PS4EnterButtonAssignment);
            public static get paramSfxPath(): string;
            public static set paramSfxPath(value: string);
            public static get videoOutPixelFormat(): number;
            public static set videoOutPixelFormat(value: number);
            public static get videoOutInitialWidth(): number;
            public static set videoOutInitialWidth(value: number);
            public static get SdkOverride(): string;
            public static set SdkOverride(value: string);
            public static get videoOutBaseModeInitialWidth(): number;
            public static set videoOutBaseModeInitialWidth(value: number);
            public static get videoOutReprojectionRate(): number;
            public static set videoOutReprojectionRate(value: number);
            public static get PronunciationXMLPath(): string;
            public static set PronunciationXMLPath(value: string);
            public static get PronunciationSIGPath(): string;
            public static set PronunciationSIGPath(value: string);
            public static get BackgroundImagePath(): string;
            public static set BackgroundImagePath(value: string);
            public static get StartupImagePath(): string;
            public static set StartupImagePath(value: string);
            public static get startupImagesFolder(): string;
            public static set startupImagesFolder(value: string);
            public static get iconImagesFolder(): string;
            public static set iconImagesFolder(value: string);
            public static get SaveDataImagePath(): string;
            public static set SaveDataImagePath(value: string);
            public static get BGMPath(): string;
            public static set BGMPath(value: string);
            public static get ShareFilePath(): string;
            public static set ShareFilePath(value: string);
            public static get ShareOverlayImagePath(): string;
            public static set ShareOverlayImagePath(value: string);
            public static get PrivacyGuardImagePath(): string;
            public static set PrivacyGuardImagePath(value: string);
            public static get ExtraSceSysFile(): string;
            public static set ExtraSceSysFile(value: string);
            public static get patchDayOne(): boolean;
            public static set patchDayOne(value: boolean);
            public static get PatchPkgPath(): string;
            public static set PatchPkgPath(value: string);
            public static get PatchLatestPkgPath(): string;
            public static set PatchLatestPkgPath(value: string);
            public static get PatchChangeinfoPath(): string;
            public static set PatchChangeinfoPath(value: string);
            public static get NPtitleDatPath(): string;
            public static set NPtitleDatPath(value: string);
            public static get pnSessions(): boolean;
            public static set pnSessions(value: boolean);
            public static get pnPresence(): boolean;
            public static set pnPresence(value: boolean);
            public static get pnFriends(): boolean;
            public static set pnFriends(value: boolean);
            public static get pnGameCustomData(): boolean;
            public static set pnGameCustomData(value: boolean);
            public static get downloadDataSize(): number;
            public static set downloadDataSize(value: number);
            public static get garlicHeapSize(): number;
            public static set garlicHeapSize(value: number);
            public static get proGarlicHeapSize(): number;
            public static set proGarlicHeapSize(value: number);
            public static get reprojectionSupport(): boolean;
            public static set reprojectionSupport(value: boolean);
            public static get useAudio3dBackend(): boolean;
            public static set useAudio3dBackend(value: boolean);
            public static get audio3dVirtualSpeakerCount(): number;
            public static set audio3dVirtualSpeakerCount(value: number);
            public static get useLowGarlicFragmentationMode(): boolean;
            public static set useLowGarlicFragmentationMode(value: boolean);
            public static get socialScreenEnabled(): number;
            public static set socialScreenEnabled(value: number);
            public static get attribUserManagement(): boolean;
            public static set attribUserManagement(value: boolean);
            public static get attribMoveSupport(): boolean;
            public static set attribMoveSupport(value: boolean);
            public static get attrib3DSupport(): boolean;
            public static set attrib3DSupport(value: boolean);
            public static get attribShareSupport(): boolean;
            public static set attribShareSupport(value: boolean);
            public static get attribExclusiveVR(): boolean;
            public static set attribExclusiveVR(value: boolean);
            public static get disableAutoHideSplash(): boolean;
            public static set disableAutoHideSplash(value: boolean);
            public static get attribCpuUsage(): number;
            public static set attribCpuUsage(value: number);
            public static get videoRecordingFeaturesUsed(): boolean;
            public static set videoRecordingFeaturesUsed(value: boolean);
            public static get contentSearchFeaturesUsed(): boolean;
            public static set contentSearchFeaturesUsed(value: boolean);
            public static get attribEyeToEyeDistanceSettingVR(): UnityEditor.PlayerSettings.PS4.PlayStationVREyeToEyeDistanceSettings;
            public static set attribEyeToEyeDistanceSettingVR(value: UnityEditor.PlayerSettings.PS4.PlayStationVREyeToEyeDistanceSettings);
            public static get includedModules(): System.Array$1<string>;
            public static set includedModules(value: System.Array$1<string>);
            public static get enableApplicationExit(): boolean;
            public static set enableApplicationExit(value: boolean);
            public static get resetTempFolder(): boolean;
            public static set resetTempFolder(value: boolean);
            public static get playerPrefsMaxSize(): number;
            public static set playerPrefsMaxSize(value: number);
            public static get attribVROutputEnabled(): boolean;
            public static set attribVROutputEnabled(value: boolean);
            public static get compatibilityPS5(): boolean;
            public static set compatibilityPS5(value: boolean);
            public static get allowPS5Detection(): boolean;
            public static set allowPS5Detection(value: boolean);
            public static get gpu800MHz(): boolean;
            public static set gpu800MHz(value: boolean);
            public constructor ()
        }
        class QNX extends System.Object
        {
            protected [__keep_incompatibility]: never;
            public static get playerDataPath(): string;
            public static set playerDataPath(value: string);
            public static get forceSRGBBlit(): boolean;
            public static set forceSRGBBlit(value: boolean);
            public static get cpuConfiguration(): System.Array$1<number>;
            public static set cpuConfiguration(value: System.Array$1<number>);
            public static get hmiLoadingImage(): UnityEngine.Texture2D;
            public static set hmiLoadingImage(value: UnityEngine.Texture2D);
            public static get hmiLogStartupTiming(): boolean;
            public static set hmiLogStartupTiming(value: boolean);
            public static get graphicConfPath(): string;
            public static set graphicConfPath(value: string);
            public constructor ()
        }
        class SplashScreenLogo extends System.ValueType
        {
            protected [__keep_incompatibility]: never;
            public get logo(): UnityEngine.Sprite;
            public set logo(value: UnityEngine.Sprite);
            public static get unityLogo(): UnityEngine.Sprite;
            public get duration(): number;
            public set duration(value: number);
            public static Create ($duration: number) : UnityEditor.PlayerSettings.SplashScreenLogo
            public static Create () : UnityEditor.PlayerSettings.SplashScreenLogo
            public static Create ($duration: number, $logo: UnityEngine.Sprite) : UnityEditor.PlayerSettings.SplashScreenLogo
            public static CreateWithUnityLogo () : UnityEditor.PlayerSettings.SplashScreenLogo
            public static CreateWithUnityLogo ($duration: number) : UnityEditor.PlayerSettings.SplashScreenLogo
        }
        class SplashScreen extends System.Object
        {
            protected [__keep_incompatibility]: never;
            public static get animationMode(): UnityEditor.PlayerSettings.SplashScreen.AnimationMode;
            public static set animationMode(value: UnityEditor.PlayerSettings.SplashScreen.AnimationMode);
            public static get animationBackgroundZoom(): number;
            public static set animationBackgroundZoom(value: number);
            public static get animationLogoZoom(): number;
            public static set animationLogoZoom(value: number);
            public static get background(): UnityEngine.Sprite;
            public static set background(value: UnityEngine.Sprite);
            public static get backgroundPortrait(): UnityEngine.Sprite;
            public static set backgroundPortrait(value: UnityEngine.Sprite);
            public static get blurBackgroundImage(): boolean;
            public static set blurBackgroundImage(value: boolean);
            public static get backgroundColor(): UnityEngine.Color;
            public static set backgroundColor(value: UnityEngine.Color);
            public static get drawMode(): UnityEditor.PlayerSettings.SplashScreen.DrawMode;
            public static set drawMode(value: UnityEditor.PlayerSettings.SplashScreen.DrawMode);
            public static get logos(): System.Array$1<UnityEditor.PlayerSettings.SplashScreenLogo>;
            public static set logos(value: System.Array$1<UnityEditor.PlayerSettings.SplashScreenLogo>);
            public static get overlayOpacity(): number;
            public static set overlayOpacity(value: number);
            public static get show(): boolean;
            public static set show(value: boolean);
            public static get showUnityLogo(): boolean;
            public static set showUnityLogo(value: boolean);
            public static get unityLogoStyle(): UnityEditor.PlayerSettings.SplashScreen.UnityLogoStyle;
            public static set unityLogoStyle(value: UnityEditor.PlayerSettings.SplashScreen.UnityLogoStyle);
            public constructor ()
        }
        class Switch extends System.Object
        {
            protected [__keep_incompatibility]: never;
            public static get socketMemoryPoolSize(): number;
            public static set socketMemoryPoolSize(value: number);
            public static get socketAllocatorPoolSize(): number;
            public static set socketAllocatorPoolSize(value: number);
            public static get socketConcurrencyLimit(): number;
            public static set socketConcurrencyLimit(value: number);
            public static get useSwitchCPUProfiler(): boolean;
            public static set useSwitchCPUProfiler(value: boolean);
            public static get enableFileSystemTrace(): boolean;
            public static set enableFileSystemTrace(value: boolean);
            public static get switchLTOSetting(): number;
            public static set switchLTOSetting(value: number);
            public static get queueCommandMemory(): number;
            public static set queueCommandMemory(value: number);
            public static get defaultSwitchQueueCommandMemory(): number;
            public static get minimumSwitchQueueCommandMemory(): number;
            public static get queueControlMemory(): number;
            public static set queueControlMemory(value: number);
            public static get defaultSwitchQueueControlMemory(): number;
            public static get minimumSwitchQueueControlMemory(): number;
            public static get queueComputeMemory(): number;
            public static set queueComputeMemory(value: number);
            public static get defaultSwitchQueueComputeMemory(): number;
            public static get NVNShaderPoolsGranularity(): number;
            public static set NVNShaderPoolsGranularity(value: number);
            public static get NVNDefaultPoolsGranularity(): number;
            public static set NVNDefaultPoolsGranularity(value: number);
            public static get NVNOtherPoolsGranularity(): number;
            public static set NVNOtherPoolsGranularity(value: number);
            public static get GpuScratchPoolGranularity(): number;
            public static set GpuScratchPoolGranularity(value: number);
            public static get AllowGpuScratchShrinking(): boolean;
            public static set AllowGpuScratchShrinking(value: boolean);
            public static get NVNMaxPublicTextureIDCount(): number;
            public static set NVNMaxPublicTextureIDCount(value: number);
            public static get NVNMaxPublicSamplerIDCount(): number;
            public static set NVNMaxPublicSamplerIDCount(value: number);
            public static get NVNGraphicsFirmwareMemory(): number;
            public static set NVNGraphicsFirmwareMemory(value: number);
            public static get defaultSwitchNVNGraphicsFirmwareMemory(): number;
            public static get minimumSwitchNVNGraphicsFirmwareMemory(): number;
            public static get maximumSwitchNVNGraphicsFirmwareMemory(): number;
            public static get switchMaxWorkerMultiple(): number;
            public static set switchMaxWorkerMultiple(value: number);
            public static get screenResolutionBehavior(): UnityEditor.PlayerSettings.Switch.ScreenResolutionBehavior;
            public static set screenResolutionBehavior(value: UnityEditor.PlayerSettings.Switch.ScreenResolutionBehavior);
            public static get NMETAOverride(): string;
            public static set NMETAOverride(value: string);
            public static get NMETAOverrideFullPath(): string;
            public static get compilerFlags(): System.Array$1<string>;
            public static set compilerFlags(value: System.Array$1<string>);
            public static get nsoDependencies(): string;
            public static set nsoDependencies(value: string);
            public static get supportedNpadStyles(): UnityEditor.PlayerSettings.Switch.SupportedNpadStyle;
            public static set supportedNpadStyles(value: UnityEditor.PlayerSettings.Switch.SupportedNpadStyle);
            public static get nativeFsCacheSize(): number;
            public static set nativeFsCacheSize(value: number);
            public static get isHoldTypeHorizontal(): boolean;
            public static set isHoldTypeHorizontal(value: boolean);
            public static get supportedNpadCount(): number;
            public static set supportedNpadCount(value: number);
            public static get enableTouchScreen(): boolean;
            public static set enableTouchScreen(value: boolean);
            public static get socketConfigEnabled(): boolean;
            public static set socketConfigEnabled(value: boolean);
            public static get tcpInitialSendBufferSize(): number;
            public static set tcpInitialSendBufferSize(value: number);
            public static get tcpInitialReceiveBufferSize(): number;
            public static set tcpInitialReceiveBufferSize(value: number);
            public static get tcpAutoSendBufferSizeMax(): number;
            public static set tcpAutoSendBufferSizeMax(value: number);
            public static get tcpAutoReceiveBufferSizeMax(): number;
            public static set tcpAutoReceiveBufferSizeMax(value: number);
            public static get udpSendBufferSize(): number;
            public static set udpSendBufferSize(value: number);
            public static get udpReceiveBufferSize(): number;
            public static set udpReceiveBufferSize(value: number);
            public static get socketBufferEfficiency(): number;
            public static set socketBufferEfficiency(value: number);
            public static get socketInitializeEnabled(): boolean;
            public static set socketInitializeEnabled(value: boolean);
            public static get networkInterfaceManagerInitializeEnabled(): boolean;
            public static set networkInterfaceManagerInitializeEnabled(value: boolean);
            public static get disableHTCSPlayerConnection(): boolean;
            public static set disableHTCSPlayerConnection(value: boolean);
            public static get useNewStyleFilepaths(): boolean;
            public static set useNewStyleFilepaths(value: boolean);
            public static get switchUseLegacyFmodPriorities(): boolean;
            public static set switchUseLegacyFmodPriorities(value: boolean);
            public static get switchUseMicroSleepForYield(): boolean;
            public static set switchUseMicroSleepForYield(value: boolean);
            public static get switchMicroSleepForYieldTime(): number;
            public static set switchMicroSleepForYieldTime(value: number);
            public static get switchEnableRamDiskSupport(): boolean;
            public static set switchEnableRamDiskSupport(value: boolean);
            public static get switchRamDiskSpaceSize(): number;
            public static set switchRamDiskSpaceSize(value: number);
            public constructor ()
        }
        class tvOS extends System.Object
        {
            protected [__keep_incompatibility]: never;
            public static get sdkVersion(): UnityEditor.tvOSSdkVersion;
            public static set sdkVersion(value: UnityEditor.tvOSSdkVersion);
            public static get buildNumber(): string;
            public static set buildNumber(value: string);
            public static get targetOSVersionString(): string;
            public static set targetOSVersionString(value: string);
            public static get requireExtendedGameController(): boolean;
            public static set requireExtendedGameController(value: boolean);
            public constructor ()
        }
        class WebGL extends System.Object
        {
            protected [__keep_incompatibility]: never;
            public static get memorySize(): number;
            public static set memorySize(value: number);
            public static get exceptionSupport(): UnityEditor.WebGLExceptionSupport;
            public static set exceptionSupport(value: UnityEditor.WebGLExceptionSupport);
            public static get dataCaching(): boolean;
            public static set dataCaching(value: boolean);
            public static get emscriptenArgs(): string;
            public static set emscriptenArgs(value: string);
            public static get modulesDirectory(): string;
            public static set modulesDirectory(value: string);
            public static get template(): string;
            public static set template(value: string);
            public static get analyzeBuildSize(): boolean;
            public static set analyzeBuildSize(value: boolean);
            public static get useEmbeddedResources(): boolean;
            public static set useEmbeddedResources(value: boolean);
            public static get threadsSupport(): boolean;
            public static set threadsSupport(value: boolean);
            public static get linkerTarget(): UnityEditor.WebGLLinkerTarget;
            public static set linkerTarget(value: UnityEditor.WebGLLinkerTarget);
            public static get compressionFormat(): UnityEditor.WebGLCompressionFormat;
            public static set compressionFormat(value: UnityEditor.WebGLCompressionFormat);
            public static get nameFilesAsHashes(): boolean;
            public static set nameFilesAsHashes(value: boolean);
            public static get debugSymbolMode(): UnityEditor.WebGLDebugSymbolMode;
            public static set debugSymbolMode(value: UnityEditor.WebGLDebugSymbolMode);
            public static get showDiagnostics(): boolean;
            public static set showDiagnostics(value: boolean);
            public static get decompressionFallback(): boolean;
            public static set decompressionFallback(value: boolean);
            public static get wasmArithmeticExceptions(): UnityEditor.WebGLWasmArithmeticExceptions;
            public static set wasmArithmeticExceptions(value: UnityEditor.WebGLWasmArithmeticExceptions);
            public static get initialMemorySize(): number;
            public static set initialMemorySize(value: number);
            public static get maximumMemorySize(): number;
            public static set maximumMemorySize(value: number);
            public static get memoryGrowthMode(): UnityEditor.WebGLMemoryGrowthMode;
            public static set memoryGrowthMode(value: UnityEditor.WebGLMemoryGrowthMode);
            public static get linearMemoryGrowthStep(): number;
            public static set linearMemoryGrowthStep(value: number);
            public static get geometricMemoryGrowthStep(): number;
            public static set geometricMemoryGrowthStep(value: number);
            public static get memoryGeometricGrowthCap(): number;
            public static set memoryGeometricGrowthCap(value: number);
            public static get enableWebGPU(): boolean;
            public static set enableWebGPU(value: boolean);
            public static get powerPreference(): UnityEditor.WebGLPowerPreference;
            public static set powerPreference(value: UnityEditor.WebGLPowerPreference);
            public static get webAssemblyTable(): boolean;
            public static set webAssemblyTable(value: boolean);
            public static get webAssemblyBigInt(): boolean;
            public static set webAssemblyBigInt(value: boolean);
            public static get closeOnQuit(): boolean;
            public static set closeOnQuit(value: boolean);
            public constructor ()
        }
        enum WSAApplicationShowName
        { NotSet = 0, AllLogos = 1, NoLogos = 2, StandardLogoOnly = 3, WideLogoOnly = 4 }
        enum WSADefaultTileSize
        { NotSet = 0, Medium = 1, Wide = 2 }
        enum WSAApplicationForegroundText
        { Light = 1, Dark = 2 }
        enum WSACapability
        { EnterpriseAuthentication = 0, InternetClient = 1, InternetClientServer = 2, MusicLibrary = 3, PicturesLibrary = 4, PrivateNetworkClientServer = 5, RemovableStorage = 6, SharedUserCertificates = 7, VideosLibrary = 8, WebCam = 9, Proximity = 10, Microphone = 11, Location = 12, HumanInterfaceDevice = 13, AllJoyn = 14, BlockedChatMessages = 15, Chat = 16, CodeGeneration = 17, Objects3D = 18, PhoneCall = 19, UserAccountInformation = 20, VoipCall = 21, Bluetooth = 22, SpatialPerception = 23, InputInjectionBrokered = 24, Appointments = 25, BackgroundMediaPlayback = 26, Contacts = 27, LowLevelDevices = 28, OfflineMapsManagement = 29, PhoneCallHistoryPublic = 30, PointOfService = 31, RecordedCallsFolder = 32, RemoteSystem = 33, SystemManagement = 34, UserDataTasks = 35, UserNotificationListener = 36, GazeInput = 37 }
        enum WSATargetFamily
        { Desktop = 0, Mobile = 1, Xbox = 2, Holographic = 3, Team = 4, IoT = 5, IoTHeadless = 6 }
        enum WSAImageScale
        { _100 = 100, _125 = 125, _150 = 150, _200 = 200, _400 = 400, Target16 = 16, Target24 = 24, Target32 = 32, Target48 = 48, Target256 = 256, _80 = 80, _140 = 140, _180 = 180, _240 = 240 }
        enum WSAImageType
        { PackageLogo = 1, SplashScreenImage = 2, UWPSquare44x44Logo = 31, UWPSquare71x71Logo = 32, UWPSquare150x150Logo = 33, UWPSquare310x310Logo = 34, UWPWide310x150Logo = 35 }
        enum WSAInputSource
        { CoreWindow = 0, IndependentInputSource = 1, SwapChainPanel = 2 }
        class WSASupportedFileType extends System.ValueType
        {
            protected [__keep_incompatibility]: never;
            public contentType : string
            public fileType : string
        }
        class WSAFileTypeAssociations extends System.ValueType
        {
            protected [__keep_incompatibility]: never;
            public name : string
            public supportedFileTypes : System.Array$1<UnityEditor.PlayerSettings.WSASupportedFileType>
        }
        class WSA extends System.Object
        {
            protected [__keep_incompatibility]: never;
            public static get transparentSwapchain(): boolean;
            public static set transparentSwapchain(value: boolean);
            public static get packageName(): string;
            public static set packageName(value: string);
            public static get certificatePath(): string;
            public static get certificateSubject(): string;
            public static get certificateIssuer(): string;
            public static get applicationDescription(): string;
            public static set applicationDescription(value: string);
            public static get tileShortName(): string;
            public static set tileShortName(value: string);
            public static get tileShowName(): UnityEditor.PlayerSettings.WSAApplicationShowName;
            public static set tileShowName(value: UnityEditor.PlayerSettings.WSAApplicationShowName);
            public static get mediumTileShowName(): boolean;
            public static set mediumTileShowName(value: boolean);
            public static get largeTileShowName(): boolean;
            public static set largeTileShowName(value: boolean);
            public static get wideTileShowName(): boolean;
            public static set wideTileShowName(value: boolean);
            public static get defaultTileSize(): UnityEditor.PlayerSettings.WSADefaultTileSize;
            public static set defaultTileSize(value: UnityEditor.PlayerSettings.WSADefaultTileSize);
            public static get tileForegroundText(): UnityEditor.PlayerSettings.WSAApplicationForegroundText;
            public static set tileForegroundText(value: UnityEditor.PlayerSettings.WSAApplicationForegroundText);
            public static get tileBackgroundColor(): UnityEngine.Color;
            public static set tileBackgroundColor(value: UnityEngine.Color);
            public static get inputSource(): UnityEditor.PlayerSettings.WSAInputSource;
            public static set inputSource(value: UnityEditor.PlayerSettings.WSAInputSource);
            public static get supportStreamingInstall(): boolean;
            public static set supportStreamingInstall(value: boolean);
            public static get lastRequiredScene(): number;
            public static set lastRequiredScene(value: number);
            public static get vcxProjDefaultLanguage(): string;
            public static set vcxProjDefaultLanguage(value: string);
            public static get packageVersion(): System.Version;
            public static set packageVersion(value: System.Version);
            public static get certificateNotAfter(): System.DateTime | null;
            public static get splashScreenBackgroundColor(): UnityEngine.Color | null;
            public static set splashScreenBackgroundColor(value: UnityEngine.Color | null);
            public static SetCertificate ($path: string, $password: string) : boolean
            public static GetVisualAssetsImage ($type: UnityEditor.PlayerSettings.WSAImageType, $scale: UnityEditor.PlayerSettings.WSAImageScale) : string
            public static SetVisualAssetsImage ($image: string, $type: UnityEditor.PlayerSettings.WSAImageType, $scale: UnityEditor.PlayerSettings.WSAImageScale) : void
            public static SetCapability ($capability: UnityEditor.PlayerSettings.WSACapability, $value: boolean) : void
            public static GetCapability ($capability: UnityEditor.PlayerSettings.WSACapability) : boolean
            public static SetTargetDeviceFamily ($family: UnityEditor.PlayerSettings.WSATargetFamily, $value: boolean) : void
            public static GetTargetDeviceFamily ($family: UnityEditor.PlayerSettings.WSATargetFamily) : boolean
            public constructor ()
        }
        class XboxOne extends System.Object
        {
            protected [__keep_incompatibility]: never;
            public static get XTitleMemory(): number;
            public static set XTitleMemory(value: number);
            public static get defaultLoggingLevel(): UnityEditor.XboxOneLoggingLevel;
            public static set defaultLoggingLevel(value: UnityEditor.XboxOneLoggingLevel);
            public static get ProductId(): string;
            public static set ProductId(value: string);
            public static get UpdateKey(): string;
            public static set UpdateKey(value: string);
            public static get ContentId(): string;
            public static set ContentId(value: string);
            public static get TitleId(): string;
            public static set TitleId(value: string);
            public static get SCID(): string;
            public static set SCID(value: string);
            public static get EnableVariableGPU(): boolean;
            public static set EnableVariableGPU(value: boolean);
            public static get PresentImmediateThreshold(): number;
            public static set PresentImmediateThreshold(value: number);
            public static get Enable7thCore(): boolean;
            public static set Enable7thCore(value: boolean);
            public static get DisableKinectGpuReservation(): boolean;
            public static set DisableKinectGpuReservation(value: boolean);
            public static get EnablePIXSampling(): boolean;
            public static set EnablePIXSampling(value: boolean);
            public static get GameOsOverridePath(): string;
            public static set GameOsOverridePath(value: string);
            public static get PackagingOverridePath(): string;
            public static set PackagingOverridePath(value: string);
            public static get PackagingEncryption(): UnityEditor.XboxOneEncryptionLevel;
            public static set PackagingEncryption(value: UnityEditor.XboxOneEncryptionLevel);
            public static get PackageUpdateGranularity(): UnityEditor.XboxOnePackageUpdateGranularity;
            public static set PackageUpdateGranularity(value: UnityEditor.XboxOnePackageUpdateGranularity);
            public static get OverrideIdentityName(): string;
            public static set OverrideIdentityName(value: string);
            public static get OverrideIdentityPublisher(): string;
            public static set OverrideIdentityPublisher(value: string);
            public static get AppManifestOverridePath(): string;
            public static set AppManifestOverridePath(value: string);
            public static get IsContentPackage(): boolean;
            public static set IsContentPackage(value: boolean);
            public static get EnhancedXboxCompatibilityMode(): boolean;
            public static set EnhancedXboxCompatibilityMode(value: boolean);
            public static get Version(): string;
            public static set Version(value: string);
            public static get Description(): string;
            public static set Description(value: string);
            public static get SocketNames(): System.Array$1<string>;
            public static get AllowedProductIds(): System.Array$1<string>;
            public static get PersistentLocalStorageSize(): number;
            public static set PersistentLocalStorageSize(value: number);
            public static get EnableTypeOptimization(): boolean;
            public static set EnableTypeOptimization(value: boolean);
            public static get monoLoggingLevel(): number;
            public static set monoLoggingLevel(value: number);
            public static SetCapability ($capability: string, $value: boolean) : void
            public static GetCapability ($capability: string) : boolean
            public static SetSupportedLanguage ($language: string, $enabled: boolean) : void
            public static GetSupportedLanguage ($language: string) : boolean
            public static RemoveSocketDefinition ($name: string) : void
            public static SetSocketDefinition ($name: string, $port: string, $protocol: number, $usages: System.Array$1<number>, $templateName: string, $sessionRequirment: number, $deviceUsages: System.Array$1<number>) : void
            public static GetSocketDefinition ($name: string, $port: $Ref<string>, $protocol: $Ref<number>, $usages: $Ref<System.Array$1<number>>, $templateName: $Ref<string>, $sessionRequirment: $Ref<number>, $deviceUsages: $Ref<System.Array$1<number>>) : void
            public static RemoveAllowedProductId ($id: string) : void
            public static AddAllowedProductId ($id: string) : boolean
            public static UpdateAllowedProductId ($idx: number, $id: string) : void
            public constructor ()
        }
        class VRWindowsMixedReality extends System.Object
        {
            protected [__keep_incompatibility]: never;
        }
    }
    namespace UnityEditor.PlayerSettings.PS4 {
        enum PS4AppCategory
        { Application = 0, Patch = 1, Remaster = 2 }
        enum PS4RemotePlayKeyAssignment
        { None = -1, PatternA = 0, PatternB = 1, PatternC = 2, PatternD = 3, PatternE = 4, PatternF = 5, PatternG = 6, PatternH = 7 }
        enum PS4EnterButtonAssignment
        { CircleButton = 0, CrossButton = 1, SystemDefined = 2 }
        enum PlayStationVREyeToEyeDistanceSettings
        { PerUser = 0, ForceDefault = 1, DynamicModeAtRuntime = 2 }
    }
    namespace UnityEditor.PlayerSettings.SplashScreen {
        enum AnimationMode
        { Static = 0, Dolly = 1, Custom = 2 }
        enum DrawMode
        { UnityLogoBelow = 0, AllSequential = 1 }
        enum UnityLogoStyle
        { DarkOnLight = 0, LightOnDark = 1 }
    }
    namespace UnityEditor.PlayerSettings.Switch {
        enum ScreenResolutionBehavior
        { Manual = 0, OperationMode = 1, PerformanceMode = 2, Both = 3 }
        enum LogoHandling
        { Auto = 0, Manual = 1 }
        enum StartupUserAccount
        { None = 0, Required = 1, RequiredWithNetworkServiceAccountAvailable = 2 }
        enum LogoType
        { LicensedByNintendo = 0, DistributedByNintendo = 1, Nintendo = 2 }
        enum ApplicationAttribute
        { None = 0, Demo = 1 }
        enum SupportedNpadStyle
        { FullKey = 2, Handheld = 4, JoyDual = 16, JoyLeft = 256, JoyRight = 65536 }
        enum RatingCategories
        { CERO = 0, GRACGCRB = 1, GSRMR = 2, ESRB = 3, ClassInd = 4, USK = 5, PEGI = 6, PEGIPortugal = 7, PEGIBBFC = 8, Russian = 9, ACB = 10, OFLC = 11, IARCGeneric = 12 }
    }
    namespace UnityEditor.PlayerSettings.VRWindowsMixedReality {
        enum DepthBufferFormat
        { DepthBufferFormat16Bit = 0, DepthBufferFormat24Bit = 1 }
    }
    namespace UnityEditor.PlayModeWindow {
        enum PlayModeViewTypes
        { GameView = 0, SimulatorView = 1 }
    }
    namespace UnityEditor.PrefabUtility {
        interface PrefabInstanceUpdated
        { 
        (instance: UnityEngine.GameObject) : void; 
        Invoke?: (instance: UnityEngine.GameObject) => void;
        }
        var PrefabInstanceUpdated: { new (func: (instance: UnityEngine.GameObject) => void): PrefabInstanceUpdated; }
        class EditPrefabContentsScope extends System.ValueType implements System.IDisposable
        {
            protected [__keep_incompatibility]: never;
            public assetPath : string
            public prefabContentsRoot : UnityEngine.GameObject
            public Dispose () : void
            public constructor ($assetPath: string)
        }
    }
    namespace UnityEditor.SceneManagement {
        /** Class with information about a given override on a Prefab instance.
        */
        class PrefabOverride extends System.Object
        {
            protected [__keep_incompatibility]: never;
            public Apply ($prefabAssetPath: string, $mode: UnityEditor.InteractionMode) : void
            public Revert ($mode: UnityEditor.InteractionMode) : void
            /** Applies the override to the Prefab Asset at the given path.
            * @param $prefabAssetPath The path of the Prefab Asset to apply to.
            */
            public Apply () : void
            /** Applies the override to the Prefab Asset at the given path.
            * @param $prefabAssetPath The path of the Prefab Asset to apply to.
            */
            public Apply ($prefabAssetPath: string) : void
            public Apply ($mode: UnityEditor.InteractionMode) : void
            /** Reverts the override on the Prefab instance.
            */
            public Revert () : void
            /** Returns the asset object of the override in the outermost Prefab that the Prefab instance comes from.
            * @returns The object inside the Prefab Asset affected by the override. 
            */
            public GetAssetObject () : UnityEngine.Object
        }
        /** Class with information about an object on a Prefab instance with overridden properties.
        */
        class ObjectOverride extends UnityEditor.SceneManagement.PrefabOverride
        {
            protected [__keep_incompatibility]: never;
            /** The object on the Prefab instance.
            */
            public get instanceObject(): UnityEngine.Object;
            public set instanceObject(value: UnityEngine.Object);
            /** Access the coupled component modifications of the object being overidden, if present.
            */
            public get coupledOverride(): UnityEditor.SceneManagement.PrefabOverride;
            public set coupledOverride(value: UnityEditor.SceneManagement.PrefabOverride);
            public constructor ()
        }
        /** Class with information about a component that has been added to a Prefab instance.
        */
        class AddedComponent extends UnityEditor.SceneManagement.PrefabOverride
        {
            protected [__keep_incompatibility]: never;
            /** The added component on the Prefab instance.
            */
            public get instanceComponent(): UnityEngine.Component;
            public set instanceComponent(value: UnityEngine.Component);
            public constructor ()
        }
        /** Class with information about a component that has been removed from a Prefab instance.
        */
        class RemovedComponent extends UnityEditor.SceneManagement.PrefabOverride
        {
            protected [__keep_incompatibility]: never;
            /** The GameObject on the Prefab instance that the component has been removed from.
            */
            public get containingInstanceGameObject(): UnityEngine.GameObject;
            public set containingInstanceGameObject(value: UnityEngine.GameObject);
            /** The components on the Prefab Asset which has been removed on the Prefab instance.
            */
            public get assetComponent(): UnityEngine.Component;
            public set assetComponent(value: UnityEngine.Component);
            public constructor ()
        }
        /** Class with information about a GameObject that has been added as a child under a Prefab instance.
        */
        class AddedGameObject extends UnityEditor.SceneManagement.PrefabOverride
        {
            protected [__keep_incompatibility]: never;
            /** The added GameObject on the Prefab instance.
            */
            public get instanceGameObject(): UnityEngine.GameObject;
            public set instanceGameObject(value: UnityEngine.GameObject);
            /** The sibling index of the added GameObject.
            */
            public get siblingIndex(): number;
            public set siblingIndex(value: number);
            public constructor ()
        }
        /** Class with information about a GameObject that has been removed from a Prefab instance.
        */
        class RemovedGameObject extends UnityEditor.SceneManagement.PrefabOverride
        {
            protected [__keep_incompatibility]: never;
            /** The parent of the removed GameObject in the instance.
            */
            public get parentOfRemovedGameObjectInInstance(): UnityEngine.GameObject;
            public set parentOfRemovedGameObjectInInstance(value: UnityEngine.GameObject);
            /** The GameObject in the Prefab Asset that has been removed in the Prefab instance.
            */
            public get assetGameObject(): UnityEngine.GameObject;
            public set assetGameObject(value: UnityEngine.GameObject);
            public constructor ()
        }
        /** Scene management in the Editor.
        */
        class EditorSceneManager extends UnityEngine.SceneManagement.SceneManager
        {
            protected [__keep_incompatibility]: never;
            /** Use SceneCullingMasks.DefaultSceneCullingMask instead.
            */
            public static DefaultSceneCullingMask : bigint
            public static get loadedRootSceneCount(): number;
            /** The current amount of active preview Scenes.
            */
            public static get previewSceneCount(): number;
            /** Controls whether cross-Scene references are allowed in the Editor.
            */
            public static get preventCrossSceneReferences(): boolean;
            public static set preventCrossSceneReferences(value: boolean);
            /** Loads this SceneAsset when you start Play Mode.
            */
            public static get playModeStartScene(): UnityEditor.SceneAsset;
            public static set playModeStartScene(value: UnityEditor.SceneAsset);
            public static IsReloading ($scene: UnityEngine.SceneManagement.Scene) : boolean
            /** Open a Scene in the Editor.
            * @param $scenePath The path of the Scene. This should be relative to the Project folder; for example, "AssetsMyScenesMyScene.unity".
            * @param $mode Allows you to select how to open the specified Scene, and whether to keep existing Scenes in the Hierarchy. See SceneManagement.OpenSceneMode for more information about the options.
            * @returns A reference to the opened Scene. 
            */
            public static OpenScene ($scenePath: string, $mode: UnityEditor.SceneManagement.OpenSceneMode) : UnityEngine.SceneManagement.Scene
            /** Opens a Scene Asset in a preview Scene.
            * @param $scenePath Scene file to open.
            * @returns The created preview Scene. 
            */
            public static OpenPreviewScene ($scenePath: string) : UnityEngine.SceneManagement.Scene
            /** Create a new Scene.
            * @param $setup Whether the new Scene should use the default set of GameObjects.
            * @param $mode Whether to keep existing Scenes open.
            * @returns A reference to the new Scene. 
            */
            public static NewScene ($setup: UnityEditor.SceneManagement.NewSceneSetup, $mode: UnityEditor.SceneManagement.NewSceneMode) : UnityEngine.SceneManagement.Scene
            /** Creates a new preview Scene.  Any object added to a preview Scene will only be rendered in that Scene.
            * @returns The new preview Scene. 
            */
            public static NewPreviewScene () : UnityEngine.SceneManagement.Scene
            /** Close the Scene. If removeScene flag is true, the closed Scene will also be removed from EditorSceneManager.
            * @param $scene The Scene to be closed/removed.
            * @param $removeScene Bool flag to indicate if the Scene should be removed after closing.
            * @returns Returns true if the Scene is closed/removed. 
            */
            public static CloseScene ($scene: UnityEngine.SceneManagement.Scene, $removeScene: boolean) : boolean
            /** Closes a preview Scene created by NewPreviewScene or OpenPreviewScene.
            * @param $scene The preview Scene to close.
            * @returns True if the Scene was successfully closed. 
            */
            public static ClosePreviewScene ($scene: UnityEngine.SceneManagement.Scene) : boolean
            /** Is the Scene a preview Scene?
            * @param $scene The Scene to check.
            * @returns True if the Scene is a preview Scene. 
            */
            public static IsPreviewScene ($scene: UnityEngine.SceneManagement.Scene) : boolean
            /** Is this object part of a preview Scene?
            * @param $obj The object to check.
            * @returns True if this object is part of a preview Scene. 
            */
            public static IsPreviewSceneObject ($obj: UnityEngine.Object) : boolean
            /** Allows you to reorder the Scenes currently open in the Hierarchy window. Moves the source Scene so it comes before the destination Scene.
            * @param $src The Scene to move.
            * @param $dst The Scene which should come directly after the source Scene in the hierarchy.
            */
            public static MoveSceneBefore ($src: UnityEngine.SceneManagement.Scene, $dst: UnityEngine.SceneManagement.Scene) : void
            /** Allows you to reorder the Scenes currently open in the Hierarchy window. Moves the source Scene so it comes after the destination Scene.
            * @param $src The Scene to move.
            * @param $dst The Scene which should come directly before the source Scene in the hierarchy.
            */
            public static MoveSceneAfter ($src: UnityEngine.SceneManagement.Scene, $dst: UnityEngine.SceneManagement.Scene) : void
            /** Save all open Scenes.
            * @returns Returns true if all open Scenes are successfully saved. 
            */
            public static SaveOpenScenes () : boolean
            /** Save a list of Scenes.
            * @param $scenes List of Scenes that should be saved.
            * @returns True if the save succeeded. Otherwise false. 
            */
            public static SaveScenes ($scenes: System.Array$1<UnityEngine.SceneManagement.Scene>) : boolean
            /** Asks whether the modfied input Scenes should be saved.
            * @param $scenes Scenes that should be saved if they are modified.
            * @returns Returns true if the user clicked Save or Don't Save to indicate that that it is ok to close the input scenes after the dialog closes. Returns false if the user clicked Cancel to abort. 
            */
            public static SaveModifiedScenesIfUserWantsTo ($scenes: System.Array$1<UnityEngine.SceneManagement.Scene>) : boolean
            /** Shows a save dialog if an Untitled Scene exists in the current Scene manager setup.
            * @param $dialogContent Text shown in the save dialog.
            * @returns True if the Scene is saved or if there is no Untitled Scene. 
            */
            public static EnsureUntitledSceneHasBeenSaved ($dialogContent: string) : boolean
            /** Mark the specified Scene as modified.
            * @param $scene The Scene to be marked as modified.
            * @returns Whether the Scene was successfully marked as dirty. 
            */
            public static MarkSceneDirty ($scene: UnityEngine.SceneManagement.Scene) : boolean
            /** Mark all the loaded Scenes as modified.
            */
            public static MarkAllScenesDirty () : void
            /** Returns the current setup of the SceneManager.
            * @returns An array of SceneSetup classes - one item for each Scene. 
            */
            public static GetSceneManagerSetup () : System.Array$1<UnityEditor.SceneManagement.SceneSetup>
            /** Restore the setup of the SceneManager.
            * @param $value In this array, at least one Scene should be loaded, and there must be one active Scene.
            */
            public static RestoreSceneManagerSetup ($value: System.Array$1<UnityEditor.SceneManagement.SceneSetup>) : void
            /** Detects cross-Scene references in a Scene.
            * @param $scene Scene to check for cross-Scene references.
            * @returns Was any cross-Scene references found. 
            */
            public static DetectCrossSceneReferences ($scene: UnityEngine.SceneManagement.Scene) : boolean
            /** Return the culling mask set on the given Scene.
            * @param $scene The scene to get the culling mask from.
            * @returns The scene's current culling mask as a bitfield. 
            */
            public static GetSceneCullingMask ($scene: UnityEngine.SceneManagement.Scene) : bigint
            /** Set the culling mask on this scene to this value.
            Cameras will only render objects in Scenes that have the same bits set in their culling mask.
            * @param $scene The scene to set the culling mask on.
            * @param $sceneCullingMask The value of the culling mask, stored as a bitfield.
            */
            public static SetSceneCullingMask ($scene: UnityEngine.SceneManagement.Scene, $sceneCullingMask: bigint) : void
            /** Go through all Scenes and find the smallest unused bit in the unition of all Scene culling masks.
            * @returns The lowest unused bit of the union of all culling masks. 
            */
            public static CalculateAvailableSceneCullingMask () : bigint
            public static add_activeSceneChangedInEditMode ($value: UnityEngine.Events.UnityAction$2<UnityEngine.SceneManagement.Scene, UnityEngine.SceneManagement.Scene>) : void
            public static remove_activeSceneChangedInEditMode ($value: UnityEngine.Events.UnityAction$2<UnityEngine.SceneManagement.Scene, UnityEngine.SceneManagement.Scene>) : void
            /** Asks the user if they want to save the current open modified Scene or Scenes in the Hierarchy.
            * @returns Returns true if the user clicked Save or Don't Save to indicate that that it is ok to close the open scenes after the dialog closes. Returns false if the user clicked Cancel to abort. 
            */
            public static SaveCurrentModifiedScenesIfUserWantsTo () : boolean
            public static OpenScene ($scenePath: string) : UnityEngine.SceneManagement.Scene
            public static NewScene ($setup: UnityEditor.SceneManagement.NewSceneSetup) : UnityEngine.SceneManagement.Scene
            public static SaveScene ($scene: UnityEngine.SceneManagement.Scene, $dstScenePath: string) : boolean
            public static SaveScene ($scene: UnityEngine.SceneManagement.Scene) : boolean
            /** Save a Scene.
            * @param $scene The Scene to be saved.
            * @param $dstScenePath The file path to save the Scene to. If the path is empty, the current open Scene is overwritten. If it has not yet been saved at all, a save dialog is shown.
            * @param $saveAsCopy If set to true, the Scene is saved without changing the current Scene, and without clearing the unsaved changes marker.
            * @returns True if the save succeeded, otherwise false. 
            */
            public static SaveScene ($scene: UnityEngine.SceneManagement.Scene, $dstScenePath: string, $saveAsCopy: boolean) : boolean
            /** This method allows you to load a Scene during playmode in the editor, without requiring the Scene to be included in the Scene list.
            * @param $path Path to Scene to load.
            * @param $parameters Parameters used to load the Scene SceneManagement.LoadSceneParameters.
            * @returns Scene that is loading. 
            */
            public static LoadSceneInPlayMode ($path: string, $parameters: UnityEngine.SceneManagement.LoadSceneParameters) : UnityEngine.SceneManagement.Scene
            /** This method allows you to load a Scene during playmode in the editor, without requiring the Scene to be included in the Scene list.
            * @param $path Path to Scene to load.
            * @param $parameters Parameters to apply to loading. See SceneManagement.LoadSceneParameters.
            * @returns Use the AsyncOperation to determine if the operation has completed. 
            */
            public static LoadSceneAsyncInPlayMode ($path: string, $parameters: UnityEngine.SceneManagement.LoadSceneParameters) : UnityEngine.AsyncOperation
            public static add_sceneManagerSetupRestored ($value: UnityEditor.SceneManagement.EditorSceneManager.SceneManagerSetupRestoredCallback) : void
            public static remove_sceneManagerSetupRestored ($value: UnityEditor.SceneManagement.EditorSceneManager.SceneManagerSetupRestoredCallback) : void
            public static add_newSceneCreated ($value: UnityEditor.SceneManagement.EditorSceneManager.NewSceneCreatedCallback) : void
            public static remove_newSceneCreated ($value: UnityEditor.SceneManagement.EditorSceneManager.NewSceneCreatedCallback) : void
            public static add_sceneOpening ($value: UnityEditor.SceneManagement.EditorSceneManager.SceneOpeningCallback) : void
            public static remove_sceneOpening ($value: UnityEditor.SceneManagement.EditorSceneManager.SceneOpeningCallback) : void
            public static add_sceneOpened ($value: UnityEditor.SceneManagement.EditorSceneManager.SceneOpenedCallback) : void
            public static remove_sceneOpened ($value: UnityEditor.SceneManagement.EditorSceneManager.SceneOpenedCallback) : void
            public static add_sceneClosing ($value: UnityEditor.SceneManagement.EditorSceneManager.SceneClosingCallback) : void
            public static remove_sceneClosing ($value: UnityEditor.SceneManagement.EditorSceneManager.SceneClosingCallback) : void
            public static add_sceneClosed ($value: UnityEditor.SceneManagement.EditorSceneManager.SceneClosedCallback) : void
            public static remove_sceneClosed ($value: UnityEditor.SceneManagement.EditorSceneManager.SceneClosedCallback) : void
            public static add_sceneSaving ($value: UnityEditor.SceneManagement.EditorSceneManager.SceneSavingCallback) : void
            public static remove_sceneSaving ($value: UnityEditor.SceneManagement.EditorSceneManager.SceneSavingCallback) : void
            public static add_sceneSaved ($value: UnityEditor.SceneManagement.EditorSceneManager.SceneSavedCallback) : void
            public static remove_sceneSaved ($value: UnityEditor.SceneManagement.EditorSceneManager.SceneSavedCallback) : void
            public static add_sceneDirtied ($value: UnityEditor.SceneManagement.EditorSceneManager.SceneDirtiedCallback) : void
            public static remove_sceneDirtied ($value: UnityEditor.SceneManagement.EditorSceneManager.SceneDirtiedCallback) : void
            public constructor ()
        }
        /** Used when opening a Scene in the Editor to specify how a Scene should be opened.
        */
        enum OpenSceneMode
        { Single = 0, Additive = 1, AdditiveWithoutLoading = 2 }
        /** Used when creating a new Scene in the Editor.
        */
        enum NewSceneSetup
        { EmptyScene = 0, DefaultGameObjects = 1 }
        /** Used when creating a new Scene in the Editor.
        */
        enum NewSceneMode
        { Single = 0, Additive = 1 }
        /** The setup information for a Scene in the SceneManager. This cannot be used in Play Mode. 
        */
        class SceneSetup extends System.Object
        {
            protected [__keep_incompatibility]: never;
            /** Path of the Scene. Should be relative to the project folder. Like: "AssetsMyScenesMyScene.unity".
            */
            public get path(): string;
            public set path(value: string);
            /** If the Scene is loaded.
            */
            public get isLoaded(): boolean;
            public set isLoaded(value: boolean);
            /** If the Scene is active.
            */
            public get isActive(): boolean;
            public set isActive(value: boolean);
            public get isSubScene(): boolean;
            public set isSubScene(value: boolean);
            public constructor ()
        }
        /** Masks that control what kind of Scene views and Game views Unity should render a GameObject in.
        */
        class SceneCullingMasks extends System.Object
        {
            protected [__keep_incompatibility]: never;
            /** Specifies the default culling mask for a Scene.  Use the bits from this Scene culling mask for objects that you want to render in both in the Game view and the Scene view.
            */
            public static DefaultSceneCullingMask : bigint
            /** The bits from this mask specify GameObjects that Unity should render in Game view.
            */
            public static GameViewObjects : bigint
            /** The bits from this mask specify GameObjects that Unity should render in Scene views showing the main stage.
            */
            public static MainStageSceneViewObjects : bigint
        }
        class SceneHierarchyHooks extends System.Object
        {
            protected [__keep_incompatibility]: never;
            public static provideSubScenes : System.Func$1<System.Array$1<UnityEditor.SceneManagement.SceneHierarchyHooks.SubSceneInfo>>
            public static provideSubSceneName : System.Func$2<UnityEditor.SceneManagement.SceneHierarchyHooks.SubSceneInfo, string>
            public static add_addItemsToGameObjectContextMenu ($value: System.Action$2<UnityEditor.GenericMenu, UnityEngine.GameObject>) : void
            public static remove_addItemsToGameObjectContextMenu ($value: System.Action$2<UnityEditor.GenericMenu, UnityEngine.GameObject>) : void
            public static add_addItemsToSceneHeaderContextMenu ($value: System.Action$2<UnityEditor.GenericMenu, UnityEngine.SceneManagement.Scene>) : void
            public static remove_addItemsToSceneHeaderContextMenu ($value: System.Action$2<UnityEditor.GenericMenu, UnityEngine.SceneManagement.Scene>) : void
            public static add_addItemsToSubSceneHeaderContextMenu ($value: System.Action$2<UnityEditor.GenericMenu, UnityEditor.SceneManagement.SceneHierarchyHooks.SubSceneInfo>) : void
            public static remove_addItemsToSubSceneHeaderContextMenu ($value: System.Action$2<UnityEditor.GenericMenu, UnityEditor.SceneManagement.SceneHierarchyHooks.SubSceneInfo>) : void
            public static add_addItemsToCreateMenu ($value: System.Action$1<UnityEditor.GenericMenu>) : void
            public static remove_addItemsToCreateMenu ($value: System.Action$1<UnityEditor.GenericMenu>) : void
            public static ReloadAllSceneHierarchies () : void
            public static CanSetNewParent ($transform: UnityEngine.Transform, $newParent: UnityEngine.Transform) : boolean
            public static CanMoveTransformToScene ($transform: UnityEngine.Transform, $scene: UnityEngine.SceneManagement.Scene) : boolean
        }
        /** The Stage class represents an editing context which includes a collection of Scenes.
        */
        class Stage extends UnityEngine.ScriptableObject
        {
            protected [__keep_incompatibility]: never;
            /** The path of the Asset file associated with the stage, relative to the project root folder.
            */
            public get assetPath(): string;
            /** The StageHandle struct for this stage.
            */
            public get stageHandle(): UnityEditor.SceneManagement.StageHandle;
            /** Gets the Scene culling mask from this Stage.
            * @returns The combined Scene culling mask for this Stage. Unity uses this mask on the Scene view Camera for renderer filtering. 
            */
            public GetCombinedSceneCullingMaskForCamera () : bigint
        }
        /** The Main Stage contains all the currently open regular Scenes and is always available.
        */
        class MainStage extends UnityEditor.SceneManagement.Stage
        {
            protected [__keep_incompatibility]: never;
            public constructor ()
        }
        /** The PreviewSceneStage class represents an editing context based on a single preview Scene.
        */
        class PreviewSceneStage extends UnityEditor.SceneManagement.Stage
        {
            protected [__keep_incompatibility]: never;
            /** The preview Scene this stage controls. Stage content should be moved into this Scene.
            */
            public get scene(): UnityEngine.SceneManagement.Scene;
            /** See Stage.stageHandle.
            */
            public get stageHandle(): UnityEditor.SceneManagement.StageHandle;
        }
        /** The PrefabStage class represents an editing context for Prefab Assets.
        */
        class PrefabStage extends UnityEditor.SceneManagement.PreviewSceneStage
        {
            protected [__keep_incompatibility]: never;
            /** The root GameObject of the loaded Prefab Asset contents.
            */
            public get prefabContentsRoot(): UnityEngine.GameObject;
            /** The root of the Prefab instance that you opened Prefab Mode through.
            */
            public get openedFromInstanceRoot(): UnityEngine.GameObject;
            /** A GameObject inside the Prefab instance that you opened Prefab Mode through.
            */
            public get openedFromInstanceObject(): UnityEngine.GameObject;
            /** The Prefab Stage can be opened either in isolation or in context.
            */
            public get mode(): UnityEditor.SceneManagement.PrefabStage.Mode;
            /** The asset path where the Prefab Asset file is stored, relative to the project root.
            */
            public get assetPath(): string;
            public static add_prefabStageOpened ($value: System.Action$1<UnityEditor.SceneManagement.PrefabStage>) : void
            public static remove_prefabStageOpened ($value: System.Action$1<UnityEditor.SceneManagement.PrefabStage>) : void
            public static add_prefabStageClosing ($value: System.Action$1<UnityEditor.SceneManagement.PrefabStage>) : void
            public static remove_prefabStageClosing ($value: System.Action$1<UnityEditor.SceneManagement.PrefabStage>) : void
            public static add_prefabStageDirtied ($value: System.Action$1<UnityEditor.SceneManagement.PrefabStage>) : void
            public static remove_prefabStageDirtied ($value: System.Action$1<UnityEditor.SceneManagement.PrefabStage>) : void
            public static add_prefabSaving ($value: System.Action$1<UnityEngine.GameObject>) : void
            public static remove_prefabSaving ($value: System.Action$1<UnityEngine.GameObject>) : void
            public static add_prefabSaved ($value: System.Action$1<UnityEngine.GameObject>) : void
            public static remove_prefabSaved ($value: System.Action$1<UnityEngine.GameObject>) : void
            /** Is this GameObject part of the loaded Prefab Asset contents in the Prefab stage?
            * @param $gameObject The GameObject to check.
            * @returns True if the GameObject is part of the Prefab contents. 
            */
            public IsPartOfPrefabContents ($gameObject: UnityEngine.GameObject) : boolean
            /** Clear the dirtyness flag for the Prefab stage.
            */
            public ClearDirtiness () : void
        }
        /** Utility methods related to Prefab stages.
        */
        class PrefabStageUtility extends System.Object
        {
            protected [__keep_incompatibility]: never;
            /** Opens a Prefab Asset in Prefab Mode.
            * @param $prefabAssetPath File path for the Prefab Asset to open in Prefab Mode.
            * @param $openedFromInstance Opens Prefab Mode in context of this Prefab instance GameObject.
            * @param $prefabStageMode Mode that determines whether to open in isolation or in context.
            * @returns The opened PrefabStage. 
            */
            public static OpenPrefab ($prefabAssetPath: string) : UnityEditor.SceneManagement.PrefabStage
            /** Opens a Prefab Asset in Prefab Mode.
            * @param $prefabAssetPath File path for the Prefab Asset to open in Prefab Mode.
            * @param $openedFromInstance Opens Prefab Mode in context of this Prefab instance GameObject.
            * @param $prefabStageMode Mode that determines whether to open in isolation or in context.
            * @returns The opened PrefabStage. 
            */
            public static OpenPrefab ($prefabAssetPath: string, $openedFromInstance: UnityEngine.GameObject) : UnityEditor.SceneManagement.PrefabStage
            public static OpenPrefab ($prefabAssetPath: string, $openedFromInstance: UnityEngine.GameObject, $prefabStageMode: UnityEditor.SceneManagement.PrefabStage.Mode) : UnityEditor.SceneManagement.PrefabStage
            /** Get the current Prefab stage, or null if there is none.
            * @returns The current Prefab stage or null. 
            */
            public static GetCurrentPrefabStage () : UnityEditor.SceneManagement.PrefabStage
            /** Get the Prefab stage which contains the given GameObject.
            * @param $gameObject The GameObject to check.
            * @returns The containing Prefab stage. 
            */
            public static GetPrefabStage ($gameObject: UnityEngine.GameObject) : UnityEditor.SceneManagement.PrefabStage
        }
        /** Struct that represents a stage handle.
        */
        class StageHandle extends System.ValueType implements System.IEquatable$1<UnityEditor.SceneManagement.StageHandle>
        {
            protected [__keep_incompatibility]: never;
            /** Does the stage contain the given GameObject?
            * @param $gameObject The GameObject to check.
            * @returns True if the stage contains the given GameObject. 
            */
            public Contains ($gameObject: UnityEngine.GameObject) : boolean
            /** Is this stage handle valid?
            * @returns True if the stage handle is valid. 
            */
            public IsValid () : boolean
            public static op_Equality ($s1: UnityEditor.SceneManagement.StageHandle, $s2: UnityEditor.SceneManagement.StageHandle) : boolean
            public static op_Inequality ($s1: UnityEditor.SceneManagement.StageHandle, $s2: UnityEditor.SceneManagement.StageHandle) : boolean
            public Equals ($other: any) : boolean
            public Equals ($other: UnityEditor.SceneManagement.StageHandle) : boolean
        }
        /** Utility methods related to stages.
        */
        class StageUtility extends System.Object
        {
            protected [__keep_incompatibility]: never;
            /** Is the given GameObject rendered by the given Camera?
            * @param $gameObject The GameObject to check.
            * @param $camera The camera to check.
            * @returns True if the GameObject is rendered by the camera. 
            */
            public static IsGameObjectRenderedByCamera ($gameObject: UnityEngine.GameObject, $camera: UnityEngine.Camera) : boolean
            /** Specifies whether the given Camera currently renders the given GameObject and the GameObject is also part of an editable scene.
            * @param $gameObject The GameObject to check.
            * @param $camera The Camera to check.
            * @returns True if the GameObject is rendered by the camera and part of an editable scene. 
            */
            public static IsGameObjectRenderedByCameraAndPartOfEditableScene ($gameObject: UnityEngine.GameObject, $camera: UnityEngine.Camera) : boolean
            /** The current Stage can either be the MainStage or any other opened Stage, visualized in the Scene view as the last breadcrumb in the breadcrumb bar.
            * @returns The current Stage that is currently being rendered in the Scene view and shown in the Hierarchy. 
            */
            public static GetCurrentStage () : UnityEditor.SceneManagement.Stage
            /** Get the MainStage object. This object is always available.
            * @returns The Main Stage object. 
            */
            public static GetMainStage () : UnityEditor.SceneManagement.MainStage
            /** Get the Stage object that contains the input GameObject or Scene.
            * @returns The Stage that contains either the GameObject or the Scene. 
            */
            public static GetStage ($gameObject: UnityEngine.GameObject) : UnityEditor.SceneManagement.Stage
            /** Get the Stage object that contains the input GameObject or Scene.
            * @returns The Stage that contains either the GameObject or the Scene. 
            */
            public static GetStage ($scene: UnityEngine.SceneManagement.Scene) : UnityEditor.SceneManagement.Stage
            /** Get the current stage being edited.
            * @returns The current stage. 
            */
            public static GetCurrentStageHandle () : UnityEditor.SceneManagement.StageHandle
            /** Get the main stage which contains all the currently open regular Scenes.
            * @returns The main stage. 
            */
            public static GetMainStageHandle () : UnityEditor.SceneManagement.StageHandle
            /** Get the stage in which the given GameObject exists.
            * @param $gameObject The GameObject to find the stage of.
            * @returns The stage of the GameObject. 
            */
            public static GetStageHandle ($gameObject: UnityEngine.GameObject) : UnityEditor.SceneManagement.StageHandle
            /** Get the stage in which the given Scene exists.
            * @param $scene The Scene to find the stage of.
            * @returns The stage of the Scene. 
            */
            public static GetStageHandle ($scene: UnityEngine.SceneManagement.Scene) : UnityEditor.SceneManagement.StageHandle
            /** Navigate the Editor to the main stage.
            */
            public static GoToMainStage () : void
            /** Navigate the Editor to the previous stage.
            */
            public static GoBackToPreviousStage () : void
            /** Navigates the Editor to the specified stage.
            * @param $stage The stage to navigate to.
            * @param $setAsFirstItemAfterMainStage When set to true, the new stage replaces existing stages in the breadcrumbs, apart from the main stage.
            */
            public static GoToStage ($stage: UnityEditor.SceneManagement.Stage, $setAsFirstItemAfterMainStage: boolean) : void
            /** Place the given GameObject in the current stage being edited.
            * @param $gameObject The GameObject to be placed in the current stage.
            */
            public static PlaceGameObjectInCurrentStage ($gameObject: UnityEngine.GameObject) : void
        }
    }
    namespace UnityEditor.Progress {
        enum Options
        { None = 0, Sticky = 1, Indefinite = 2, Synchronous = 4, Managed = 8, Unmanaged = 16 }
        enum Status
        { Running = 0, Succeeded = 1, Failed = 2, Canceled = 3, Paused = 4 }
        enum TimeDisplayMode
        { NoTimeShown = 0, ShowRunningTime = 1, ShowRemainingTime = 2 }
        enum Priority
        { Unresponsive = 0, Idle = 1, Low = 2, Normal = 6, High = 10 }
        class Item extends System.Object
        {
            protected [__keep_incompatibility]: never;
            public get name(): string;
            public get description(): string;
            public get id(): number;
            public get progress(): number;
            public get currentStep(): number;
            public get totalSteps(): number;
            public get stepLabel(): string;
            public get parentId(): number;
            public get startTime(): System.DateTime;
            public get endTime(): System.DateTime;
            public get updateTime(): System.DateTime;
            public get status(): UnityEditor.Progress.Status;
            public get options(): UnityEditor.Progress.Options;
            public get timeDisplayMode(): UnityEditor.Progress.TimeDisplayMode;
            public get priority(): number;
            public get remainingTime(): System.TimeSpan;
            public get finished(): boolean;
            public get running(): boolean;
            public get paused(): boolean;
            public get responding(): boolean;
            public get cancellable(): boolean;
            public get pausable(): boolean;
            public get indefinite(): boolean;
            public get elapsedTime(): number;
            public get exists(): boolean;
            public Report ($newProgress: number) : void
            public Report ($newCurrentStep: number, $newTotalSteps: number) : void
            public Report ($newProgress: number, $newDescription: string) : void
            public Report ($newCurrentStep: number, $newTotalSteps: number, $newDescription: string) : void
            public Cancel () : boolean
            public Pause () : boolean
            public Resume () : boolean
            public Finish ($finishedStatus?: UnityEditor.Progress.Status) : void
            public Remove () : number
            public RegisterCancelCallback ($callback: System.Func$1<boolean>) : void
            public UnregisterCancelCallback () : void
            public RegisterPauseCallback ($callback: System.Func$2<boolean, boolean>) : void
            public UnregisterPauseCallback () : void
            public SetDescription ($newDescription: string) : void
            public SetTimeDisplayMode ($mode: UnityEditor.Progress.TimeDisplayMode) : void
            public SetRemainingTime ($seconds: bigint) : void
            public SetPriority ($priority: number) : void
            public SetPriority ($priority: UnityEditor.Progress.Priority) : void
            public ClearRemainingTime () : void
            public SetStepLabel ($label: string) : void
        }
    }
    namespace UnityEditor.ProjectWindowCallback {
        /** Base class to implement callbacks to be used when creating assets via the project window. You can extend the EndNameEditAction and write your own callback.
        */
        class EndNameEditAction extends UnityEngine.ScriptableObject
        {
            protected [__keep_incompatibility]: never;
            /** Unity calls this function when an asset is about to be created, allowing user to setup any actions that needs to be called during the asset creation process from the Project Browser.
            */
            public OnEnable () : void
            /** Unity calls this function when the user accepts an edited name, either by pressing the Enter key or by losing the keyboard input focus.
            * @param $instanceId The instance ID of the edited asset.
            * @param $pathName The path to the asset.
            * @param $resourceFile The resource file string argument passed to ProjectWindowUtil.StartNameEditingIfProjectWindowExists.
            */
            public Action ($instanceId: number, $pathName: string, $resourceFile: string) : void
            /** Unity calls this function when the user presses the Escape key to cancel editing a name.
            * @param $instanceId The instance ID of the asset that the user attempted to edit.
            * @param $pathName The path to the asset.
            * @param $resourceFile The resource file string argument passed to ProjectWindowUtil.StartNameEditingIfProjectWindowExists.
            */
            public Cancelled ($instanceId: number, $pathName: string, $resourceFile: string) : void
            /** Unity calls this function when the asset has been created allowing user to clean any allocated resources.
            */
            public CleanUp () : void
        }
    }
    namespace UnityEditor.SearchableEditorWindow {
        enum SearchMode
        { All = 0, Name = 1, Type = 2, Label = 3, AssetBundleName = 4 }
        enum SearchModeHierarchyWindow
        { All = 0, Name = 1, Type = 2 }
    }
    namespace UnityEditor.Rendering {
        /** Use this attribute to apply a condition to a filter that finds the class based on which ScriptableRenderPipeline you are currently using.
        */
        class ScriptableRenderPipelineExtensionAttribute extends System.Attribute implements System.Runtime.InteropServices._Attribute
        {
            protected [__keep_incompatibility]: never;
            public constructor ($rpAssetType: System.Type)
        }
        /** Shader compiler used to generate player data shader variants.
        */
        enum ShaderCompilerPlatform
        { None = 0, D3D = 4, GLES20 = 5, GLES3x = 9, PS4 = 11, XboxOneD3D11 = 12, Metal = 14, OpenGLCore = 15, Vulkan = 18, Switch = 19, XboxOneD3D12 = 20, GameCoreXboxOne = 21, GameCoreXboxSeries = 22, PS5 = 23, PS5NGGC = 24, GameCore = 25, WebGPU = 26 }
        /** Indicates the severity of a message returned by the Unity Shader Compiler.
        */
        enum ShaderCompilerMessageSeverity
        { Error = 0, Warning = 1 }
        /** Identifies the stage in the rendering pipeline.
        */
        enum ShaderType
        { Vertex = 1, Fragment = 2, Geometry = 3, Hull = 4, Domain = 5, Surface = 6, RayTracing = 7, Count = 7 }
        /** Utilities for Camera rendering in the Editor.
        */
        class EditorCameraUtils extends System.Object
        {
            protected [__keep_incompatibility]: never;
            /** Renders this Camera into a static cubemap.
            * @param $camera The Camera to use during rendering.
            * @param $target The cubemap to render to.
            * @param $faceMask A bitmask which determines which of the six faces to render to.
            * @param $culledFlags The flags of objects to cull during rendering.
            * @returns If the render process succeeds, returns true. Otherwise, returns false. 
            */
            public static RenderToCubemap ($camera: UnityEngine.Camera, $target: UnityEngine.Texture, $faceMask: number, $culledFlags: UnityEditor.StaticEditorFlags) : boolean
        }
        /** Editor-specific script interface for.
        */
        class EditorGraphicsSettings extends System.Object
        {
            protected [__keep_incompatibility]: never;
            /** Returns an array of Rendering.AlbedoSwatchInfo.
            */
            public static get albedoSwatches(): System.Array$1<UnityEditor.Rendering.AlbedoSwatchInfo>;
            public static set albedoSwatches(value: System.Array$1<UnityEditor.Rendering.AlbedoSwatchInfo>);
            /** The current mode the BatchRendererGroup stripping is set to.
            */
            public static get batchRendererGroupShaderStrippingMode(): UnityEditor.Rendering.BatchRendererGroupStrippingMode;
            /** Returns TierSettings for a given build target and.
            */
            public static GetTierSettings ($target: UnityEditor.BuildTargetGroup, $tier: UnityEngine.Rendering.GraphicsTier) : UnityEditor.Rendering.TierSettings
            /** Returns TierSettings for a given build target and.
            */
            public static GetTierSettings ($target: UnityEditor.Build.NamedBuildTarget, $tier: UnityEngine.Rendering.GraphicsTier) : UnityEditor.Rendering.TierSettings
            /** The method sets the association between the given RenderPipeline asset and the RenderPipelineGlobalSettings asset.
            * @param $renderPipelineType A valid RenderPipeline type.
            * @param $newSettings A valid instance of the RenderPipelineGlobalSettings asset to create the association or null to remove the association.
            */
            public static SetRenderPipelineGlobalSettingsAsset ($renderPipelineType: System.Type, $newSettings: UnityEngine.Rendering.RenderPipelineGlobalSettings) : void
            /** Gets the RenderPipelineGlobalSettings asset registered for the given RenderPipeline asset.
            * @param $renderPipelineType The type of the RenderPipeline asset to get the RenderPipelineGlobalSettings asset from.
            * @returns The asset reference. 
            */
            public static GetRenderPipelineGlobalSettingsAsset ($renderPipelineType: System.Type) : UnityEngine.Rendering.RenderPipelineGlobalSettings
            /** Set the TierSettings for a given build target and.
            */
            public static SetTierSettings ($target: UnityEditor.BuildTargetGroup, $tier: UnityEngine.Rendering.GraphicsTier, $settings: UnityEditor.Rendering.TierSettings) : void
            /** Set the TierSettings for a given build target and.
            */
            public static SetTierSettings ($target: UnityEditor.Build.NamedBuildTarget, $tier: UnityEngine.Rendering.GraphicsTier, $settings: UnityEditor.Rendering.TierSettings) : void
            public constructor ()
        }
        /** A struct that represents graphics settings for a given build target and.
        */
        class TierSettings extends System.ValueType
        {
            protected [__keep_incompatibility]: never;
            /** The Standard Shader Quality.
            */
            public standardShaderQuality : UnityEditor.Rendering.ShaderQuality
            /** The format to use for the HDR buffer.
            */
            public hdrMode : UnityEngine.Rendering.CameraHDRMode
            /** Whether to use Reflection Probes Box Projection.
            */
            public reflectionProbeBoxProjection : boolean
            /** Whether to enable Reflection Probes Blending.
            */
            public reflectionProbeBlending : boolean
            /** Whether to enable High Dynamic Range (HDR) rendering.
            */
            public hdr : boolean
            /** Whether to sample a Detail Normal Map, if assigned.
            */
            public detailNormalMap : boolean
            /** Whether to use cascaded shadow maps.
            */
            public cascadedShadowMaps : boolean
            /** Whether Unity should try to use 32-bit shadow maps, where possible.
            */
            public prefer32BitShadowMaps : boolean
            /** Whether Light Probe Proxy Volume should be used.
            */
            public enableLPPV : boolean
            /** Whether to enable Semitransparent Shadows.
            */
            public semitransparentShadows : boolean
            /** The rendering path to use.
            */
            public renderingPath : UnityEngine.RenderingPath
            /** The RealtimeGICPUUsage to use.
            */
            public realtimeGICPUUsage : UnityEngine.Rendering.RealtimeGICPUUsage
        }
        /** Contains the custom albedo swatch data.
        */
        class AlbedoSwatchInfo extends System.ValueType
        {
            protected [__keep_incompatibility]: never;
            /** Name of the albedo swatch to show in the physically based renderer validator user interface.
            */
            public name : string
            /** Color of the albedo swatch that is shown in the physically based rendering validator user interface.
            */
            public color : UnityEngine.Color
            /** The minimum luminance value used to validate the albedo for the physically based rendering albedo validator.
            */
            public minLuminance : number
            /** The maximum luminance value used to validate the albedo for the physically based rendering albedo validator.
            */
            public maxLuminance : number
        }
        /** Enum of the different modes of operation for BatchRendererGroup shader variant stripping.
        */
        enum BatchRendererGroupStrippingMode
        { KeepIfEntitiesGraphics = 0, StripAll = 1, KeepAll = 2 }
        /** Used to set up shader settings, per-platform and per-shader-hardware-tier.
        */
        class PlatformShaderSettings extends System.ValueType
        {
            protected [__keep_incompatibility]: never;
            /** Allows you to specify whether cascaded shadow maps should be used.
            */
            public cascadedShadowMaps : boolean
            /** Allows you to specify whether Reflection Probes Box Projection should be used.
            */
            public reflectionProbeBoxProjection : boolean
            /** Allows you to specify whether Reflection Probes Blending should be enabled.
            */
            public reflectionProbeBlending : boolean
            /** Allows you to select Standard Shader Quality.
            */
            public standardShaderQuality : UnityEditor.Rendering.ShaderQuality
        }
        /** Shader quality preset.
        */
        enum ShaderQuality
        { Low = 0, Medium = 1, High = 2 }
        /** Collection of properties about the specific shader code being compiled.
        */
        class ShaderSnippetData extends System.ValueType
        {
            protected [__keep_incompatibility]: never;
            /** Shader stage in the rendering the pipeline.
            */
            public get shaderType(): UnityEditor.Rendering.ShaderType;
            /** Shader pass type for Unity's lighting pipeline.
            */
            public get passType(): UnityEngine.Rendering.PassType;
            /** Shader.
            */
            public get passName(): string;
            /** An opaque identifier for the being compiled.
            */
            public get pass(): UnityEngine.Rendering.PassIdentifier;
        }
        /** Collection of data used for shader variants generation, including targeted platform data and the keyword set representing a specific shader variant.
        */
        class ShaderCompilerData extends System.ValueType
        {
            protected [__keep_incompatibility]: never;
            /** A collection of Rendering.ShaderKeyword that represents a specific shader variant.
            */
            public shaderKeywordSet : UnityEngine.Rendering.ShaderKeywordSet
            /** A collection of Rendering.ShaderKeyword that represents a specific platform shader variant.
            */
            public platformKeywordSet : UnityEngine.Rendering.PlatformKeywordSet
            /** Shader features required by a specific shader.
            */
            public get shaderRequirements(): UnityEditor.Rendering.ShaderRequirements;
            /** A GraphicsTier classifies low, medium and high performance hardware. You can only set a Graphics Tier in the Built-in Render Pipeline.
            */
            public get graphicsTier(): UnityEngine.Rendering.GraphicsTier;
            /** Shader compiler used to generate player data shader variants.
            */
            public get shaderCompilerPlatform(): UnityEditor.Rendering.ShaderCompilerPlatform;
            /** The build target to compile the shader variant for. (Read Only)
            */
            public get buildTarget(): UnityEditor.BuildTarget;
        }
        /** Shader features required by a specific shader. Features are bit flags.
        */
        enum ShaderRequirements
        { None = 0, BaseShaders = 1, Interpolators10 = 2, Interpolators32 = 4, MRT4 = 8, MRT8 = 16, Derivatives = 32, SampleLOD = 64, FragCoord = 128, FragClipDepth = 256, Interpolators15Integers = 512, Texture2DArray = 1024, Instancing = 2048, Geometry = 4096, CubeArray = 8192, Compute = 16384, RandomWrite = 32768, TessellationCompute = 65536, TessellationShaders = 131072, SparseTexelResident = 262144, FramebufferFetch = 524288, MSAATextureSamples = 1048576, SetRTArrayIndexFromAnyShader = 2097152 }
        /** Helper class that contains a utility function on ScriptableRenderPipeline for Editor.
        */
        class RenderPipelineEditorUtility extends System.Object
        {
            protected [__keep_incompatibility]: never;
        }
        class RenderPipelineGlobalSettingsEditor extends UnityEditor.Editor implements UnityEditor.IToolModeOwner, UnityEditor.IPreviewable
        {
            protected [__keep_incompatibility]: never;
            public constructor ()
        }
    }
    namespace UnityEditor.LightingExplorerTableColumn {
        enum DataType
        { Name = 0, Checkbox = 1, Enum = 2, Int = 3, Float = 4, Color = 5, Custom = 20 }
        interface OnGUIDelegate
        { 
        (r: UnityEngine.Rect, prop: UnityEditor.SerializedProperty, dependencies: System.Array$1<UnityEditor.SerializedProperty>) : void; 
        Invoke?: (r: UnityEngine.Rect, prop: UnityEditor.SerializedProperty, dependencies: System.Array$1<UnityEditor.SerializedProperty>) => void;
        }
        var OnGUIDelegate: { new (func: (r: UnityEngine.Rect, prop: UnityEditor.SerializedProperty, dependencies: System.Array$1<UnityEditor.SerializedProperty>) => void): OnGUIDelegate; }
        interface ComparePropertiesDelegate
        { 
        (lhs: UnityEditor.SerializedProperty, rhs: UnityEditor.SerializedProperty) : number; 
        Invoke?: (lhs: UnityEditor.SerializedProperty, rhs: UnityEditor.SerializedProperty) => number;
        }
        var ComparePropertiesDelegate: { new (func: (lhs: UnityEditor.SerializedProperty, rhs: UnityEditor.SerializedProperty) => number): ComparePropertiesDelegate; }
        interface CopyPropertiesDelegate
        { 
        (target: UnityEditor.SerializedProperty, source: UnityEditor.SerializedProperty) : void; 
        Invoke?: (target: UnityEditor.SerializedProperty, source: UnityEditor.SerializedProperty) => void;
        }
        var CopyPropertiesDelegate: { new (func: (target: UnityEditor.SerializedProperty, source: UnityEditor.SerializedProperty) => void): CopyPropertiesDelegate; }
    }
    namespace UnityEditor.LightingWindow {
        interface WindowTab
        {
        }
    }
    namespace UnityEditor.SceneView {
        interface OnSceneFunc
        { 
        (sceneView: UnityEditor.SceneView) : void; 
        Invoke?: (sceneView: UnityEditor.SceneView) => void;
        }
        var OnSceneFunc: { new (func: (sceneView: UnityEditor.SceneView) => void): OnSceneFunc; }
        class CameraMode extends System.ValueType
        {
            protected [__keep_incompatibility]: never;
            public drawMode : UnityEditor.DrawCameraMode
            public name : string
            public section : string
            public static op_Equality ($a: UnityEditor.SceneView.CameraMode, $z: UnityEditor.SceneView.CameraMode) : boolean
            public static op_Inequality ($a: UnityEditor.SceneView.CameraMode, $z: UnityEditor.SceneView.CameraMode) : boolean
        }
        class SceneViewState extends System.Object
        {
            protected [__keep_incompatibility]: never;
            public showFog : boolean
            public showSkybox : boolean
            public showFlares : boolean
            public showImageEffects : boolean
            public showParticleSystems : boolean
            public showVisualEffectGraphs : boolean
            public get alwaysRefresh(): boolean;
            public set alwaysRefresh(value: boolean);
            public get showClouds(): boolean;
            public set showClouds(value: boolean);
            public get fogEnabled(): boolean;
            public get alwaysRefreshEnabled(): boolean;
            public get skyboxEnabled(): boolean;
            public get cloudsEnabled(): boolean;
            public get flaresEnabled(): boolean;
            public get imageEffectsEnabled(): boolean;
            public get particleSystemsEnabled(): boolean;
            public get visualEffectGraphsEnabled(): boolean;
            public get allEnabled(): boolean;
            public get fxEnabled(): boolean;
            public set fxEnabled(value: boolean);
            public SetAllEnabled ($value: boolean) : void
            public constructor ()
            public constructor ($other: UnityEditor.SceneView.SceneViewState)
        }
        class CameraSettings extends System.Object
        {
            protected [__keep_incompatibility]: never;
            public get speed(): number;
            public set speed(value: number);
            public get speedNormalized(): number;
            public set speedNormalized(value: number);
            public get speedMin(): number;
            public set speedMin(value: number);
            public get speedMax(): number;
            public set speedMax(value: number);
            public get easingEnabled(): boolean;
            public set easingEnabled(value: boolean);
            public get easingDuration(): number;
            public set easingDuration(value: number);
            public get accelerationEnabled(): boolean;
            public set accelerationEnabled(value: boolean);
            public get fieldOfView(): number;
            public set fieldOfView(value: number);
            public get nearClip(): number;
            public set nearClip(value: number);
            public get farClip(): number;
            public set farClip(value: number);
            public get dynamicClip(): boolean;
            public set dynamicClip(value: boolean);
            public get occlusionCulling(): boolean;
            public set occlusionCulling(value: boolean);
            public constructor ()
        }
    }
    namespace UnityEditor.FilePathAttribute {
        enum Location
        { PreferencesFolder = 0, ProjectFolder = 1 }
    }
    namespace UnityEditor.ShaderData {
        class Subshader extends System.Object
        {
            protected [__keep_incompatibility]: never;
            public get PassCount(): number;
            public get LevelOfDetail(): number;
            public FindTagValue ($tag: UnityEngine.Rendering.ShaderTagId) : UnityEngine.Rendering.ShaderTagId
            public GetPass ($passIndex: number) : UnityEditor.ShaderData.Pass
        }
        class Pass extends System.Object
        {
            protected [__keep_incompatibility]: never;
            public get SourceCode(): string;
            public get Name(): string;
            public get IsGrabPass(): boolean;
            public FindTagValue ($tagName: UnityEngine.Rendering.ShaderTagId) : UnityEngine.Rendering.ShaderTagId
            public HasShaderStage ($shaderType: UnityEditor.Rendering.ShaderType) : boolean
            public CompileVariant ($shaderType: UnityEditor.Rendering.ShaderType, $keywords: System.Array$1<string>, $shaderCompilerPlatform: UnityEditor.Rendering.ShaderCompilerPlatform, $buildTarget: UnityEditor.BuildTarget) : UnityEditor.ShaderData.VariantCompileInfo
            public CompileVariant ($shaderType: UnityEditor.Rendering.ShaderType, $keywords: System.Array$1<string>, $shaderCompilerPlatform: UnityEditor.Rendering.ShaderCompilerPlatform, $buildTarget: UnityEditor.BuildTarget, $forExternalTool: boolean) : UnityEditor.ShaderData.VariantCompileInfo
            public CompileVariant ($shaderType: UnityEditor.Rendering.ShaderType, $keywords: System.Array$1<string>, $shaderCompilerPlatform: UnityEditor.Rendering.ShaderCompilerPlatform, $buildTarget: UnityEditor.BuildTarget, $tier: UnityEngine.Rendering.GraphicsTier) : UnityEditor.ShaderData.VariantCompileInfo
            public CompileVariant ($shaderType: UnityEditor.Rendering.ShaderType, $keywords: System.Array$1<string>, $shaderCompilerPlatform: UnityEditor.Rendering.ShaderCompilerPlatform, $buildTarget: UnityEditor.BuildTarget, $tier: UnityEngine.Rendering.GraphicsTier, $forExternalTool: boolean) : UnityEditor.ShaderData.VariantCompileInfo
            public CompileVariant ($shaderType: UnityEditor.Rendering.ShaderType, $keywords: System.Array$1<string>, $shaderCompilerPlatform: UnityEditor.Rendering.ShaderCompilerPlatform, $buildTarget: UnityEditor.BuildTarget, $platformKeywords: System.Array$1<UnityEngine.Rendering.BuiltinShaderDefine>) : UnityEditor.ShaderData.VariantCompileInfo
            public CompileVariant ($shaderType: UnityEditor.Rendering.ShaderType, $keywords: System.Array$1<string>, $shaderCompilerPlatform: UnityEditor.Rendering.ShaderCompilerPlatform, $buildTarget: UnityEditor.BuildTarget, $platformKeywords: System.Array$1<UnityEngine.Rendering.BuiltinShaderDefine>, $forExternalTool: boolean) : UnityEditor.ShaderData.VariantCompileInfo
            public CompileVariant ($shaderType: UnityEditor.Rendering.ShaderType, $keywords: System.Array$1<string>, $shaderCompilerPlatform: UnityEditor.Rendering.ShaderCompilerPlatform, $buildTarget: UnityEditor.BuildTarget, $platformKeywords: System.Array$1<UnityEngine.Rendering.BuiltinShaderDefine>, $tier: UnityEngine.Rendering.GraphicsTier) : UnityEditor.ShaderData.VariantCompileInfo
            public CompileVariant ($shaderType: UnityEditor.Rendering.ShaderType, $keywords: System.Array$1<string>, $shaderCompilerPlatform: UnityEditor.Rendering.ShaderCompilerPlatform, $buildTarget: UnityEditor.BuildTarget, $platformKeywords: System.Array$1<UnityEngine.Rendering.BuiltinShaderDefine>, $tier: UnityEngine.Rendering.GraphicsTier, $forExternalTool: boolean) : UnityEditor.ShaderData.VariantCompileInfo
            public PreprocessVariant ($shaderType: UnityEditor.Rendering.ShaderType, $keywords: System.Array$1<string>, $shaderCompilerPlatform: UnityEditor.Rendering.ShaderCompilerPlatform, $buildTarget: UnityEditor.BuildTarget, $stripLineDirectives: boolean) : UnityEditor.ShaderData.PreprocessedVariant
            public PreprocessVariant ($shaderType: UnityEditor.Rendering.ShaderType, $keywords: System.Array$1<string>, $shaderCompilerPlatform: UnityEditor.Rendering.ShaderCompilerPlatform, $buildTarget: UnityEditor.BuildTarget, $tier: UnityEngine.Rendering.GraphicsTier, $stripLineDirectives: boolean) : UnityEditor.ShaderData.PreprocessedVariant
            public PreprocessVariant ($shaderType: UnityEditor.Rendering.ShaderType, $keywords: System.Array$1<string>, $shaderCompilerPlatform: UnityEditor.Rendering.ShaderCompilerPlatform, $buildTarget: UnityEditor.BuildTarget, $platformKeywords: System.Array$1<UnityEngine.Rendering.BuiltinShaderDefine>, $stripLineDirectives: boolean) : UnityEditor.ShaderData.PreprocessedVariant
            public PreprocessVariant ($shaderType: UnityEditor.Rendering.ShaderType, $keywords: System.Array$1<string>, $shaderCompilerPlatform: UnityEditor.Rendering.ShaderCompilerPlatform, $buildTarget: UnityEditor.BuildTarget, $platformKeywords: System.Array$1<UnityEngine.Rendering.BuiltinShaderDefine>, $tier: UnityEngine.Rendering.GraphicsTier, $stripLineDirectives: boolean) : UnityEditor.ShaderData.PreprocessedVariant
        }
        class VariantCompileInfo extends System.ValueType
        {
            protected [__keep_incompatibility]: never;
            public get Success(): boolean;
            public get Messages(): System.Array$1<UnityEditor.ShaderMessage>;
            public get ShaderData(): System.Array$1<number>;
            public get Attributes(): System.Array$1<UnityEngine.Rendering.VertexAttribute>;
            public get ConstantBuffers(): System.Array$1<UnityEditor.ShaderData.ConstantBufferInfo>;
            public get TextureBindings(): System.Array$1<UnityEditor.ShaderData.TextureBindingInfo>;
        }
        class PreprocessedVariant extends System.ValueType
        {
            protected [__keep_incompatibility]: never;
            public get Success(): boolean;
            public get Messages(): System.Array$1<UnityEditor.ShaderMessage>;
            public get PreprocessedCode(): string;
        }
        class ConstantBufferInfo extends System.ValueType
        {
            protected [__keep_incompatibility]: never;
            public get Name(): string;
            public get Size(): number;
            public get Fields(): System.Array$1<UnityEditor.ShaderData.ConstantInfo>;
        }
        class TextureBindingInfo extends System.ValueType
        {
            protected [__keep_incompatibility]: never;
            public get Name(): string;
            public get Index(): number;
            public get SamplerIndex(): number;
            public get Multisampled(): boolean;
            public get ArraySize(): number;
            public get Dim(): UnityEngine.Rendering.TextureDimension;
        }
        class ConstantInfo extends System.ValueType
        {
            protected [__keep_incompatibility]: never;
            public get Name(): string;
            public get Index(): number;
            public get ConstantType(): UnityEngine.Rendering.ShaderConstantType;
            public get DataType(): UnityEngine.Rendering.ShaderParamType;
            public get Rows(): number;
            public get Columns(): number;
            public get ArraySize(): number;
            public get StructSize(): number;
            public get StructFields(): System.Array$1<UnityEditor.ShaderData.ConstantInfo>;
        }
    }
    namespace UnityEditor.TypeCache {
        class TypeCollection extends System.ValueType implements System.Collections.ICollection, System.Collections.Generic.IEnumerable$1<System.Type>, System.Collections.IEnumerable, System.Collections.Generic.IList$1<System.Type>, System.Collections.IList, System.Collections.Generic.ICollection$1<System.Type>
        {
            protected [__keep_incompatibility]: never;
            public get Count(): number;
            public get IsReadOnly(): boolean;
            public get IsFixedSize(): boolean;
            public get IsSynchronized(): boolean;
            public get_Item ($index: number) : System.Type
            public set_Item ($index: number, $value: System.Type) : void
            public Contains ($item: System.Type) : boolean
            public Contains ($item: any) : boolean
            public GetEnumerator () : UnityEditor.TypeCache.TypeCollection.Enumerator
            public CopyTo ($array: System.Array$1<System.Type>, $arrayIndex: number) : void
            public CopyTo ($array: System.Array, $arrayIndex: number) : void
            public IndexOf ($item: System.Type) : number
            public IndexOf ($item: any) : number
        }
        class MethodCollection extends System.ValueType implements System.Collections.ICollection, System.Collections.Generic.IEnumerable$1<System.Reflection.MethodInfo>, System.Collections.IEnumerable, System.Collections.Generic.IList$1<System.Reflection.MethodInfo>, System.Collections.IList, System.Collections.Generic.ICollection$1<System.Reflection.MethodInfo>
        {
            protected [__keep_incompatibility]: never;
            public get Count(): number;
            public get IsReadOnly(): boolean;
            public get IsFixedSize(): boolean;
            public get IsSynchronized(): boolean;
            public get_Item ($index: number) : System.Reflection.MethodInfo
            public set_Item ($index: number, $value: System.Reflection.MethodInfo) : void
            public Contains ($item: System.Reflection.MethodInfo) : boolean
            public Contains ($item: any) : boolean
            public GetEnumerator () : UnityEditor.TypeCache.MethodCollection.Enumerator
            public CopyTo ($array: System.Array$1<System.Reflection.MethodInfo>, $arrayIndex: number) : void
            public CopyTo ($array: System.Array, $arrayIndex: number) : void
            public IndexOf ($item: System.Reflection.MethodInfo) : number
            public IndexOf ($item: any) : number
        }
        class FieldInfoCollection extends System.ValueType implements System.Collections.ICollection, System.Collections.Generic.IEnumerable$1<System.Reflection.FieldInfo>, System.Collections.IEnumerable, System.Collections.Generic.IList$1<System.Reflection.FieldInfo>, System.Collections.IList, System.Collections.Generic.ICollection$1<System.Reflection.FieldInfo>
        {
            protected [__keep_incompatibility]: never;
            public get Count(): number;
            public get IsReadOnly(): boolean;
            public get IsFixedSize(): boolean;
            public get IsSynchronized(): boolean;
            public get_Item ($index: number) : System.Reflection.FieldInfo
            public set_Item ($index: number, $value: System.Reflection.FieldInfo) : void
            public Contains ($item: System.Reflection.FieldInfo) : boolean
            public Contains ($item: any) : boolean
            public GetEnumerator () : UnityEditor.TypeCache.FieldInfoCollection.Enumerator
            public CopyTo ($array: System.Array$1<System.Reflection.FieldInfo>, $arrayIndex: number) : void
            public CopyTo ($array: System.Array, $arrayIndex: number) : void
            public IndexOf ($item: System.Reflection.FieldInfo) : number
            public IndexOf ($item: any) : number
        }
    }
    namespace UnityEditor.TypeCache.TypeCollection {
        class Enumerator extends System.ValueType implements System.Collections.Generic.IEnumerator$1<System.Type>, System.Collections.IEnumerator, System.IDisposable
        {
            protected [__keep_incompatibility]: never;
        }
    }
    namespace UnityEditor.TypeCache.MethodCollection {
        class Enumerator extends System.ValueType implements System.Collections.Generic.IEnumerator$1<System.Reflection.MethodInfo>, System.Collections.IEnumerator, System.IDisposable
        {
            protected [__keep_incompatibility]: never;
        }
    }
    namespace UnityEditor.TypeCache.FieldInfoCollection {
        class Enumerator extends System.ValueType implements System.Collections.Generic.IEnumerator$1<System.Reflection.FieldInfo>, System.Collections.IEnumerator, System.IDisposable
        {
            protected [__keep_incompatibility]: never;
        }
    }
    namespace UnityEditor.Undo {
        interface UndoRedoCallback
        { 
        () : void; 
        Invoke?: () => void;
        }
        var UndoRedoCallback: { new (func: () => void): UndoRedoCallback; }
        interface UndoRedoEventCallback
        { 
        (undo: $Ref<UnityEditor.UndoRedoInfo>) : void; 
        Invoke?: (undo: $Ref<UnityEditor.UndoRedoInfo>) => void;
        }
        var UndoRedoEventCallback: { new (func: (undo: $Ref<UnityEditor.UndoRedoInfo>) => void): UndoRedoEventCallback; }
        interface WillFlushUndoRecord
        { 
        () : void; 
        Invoke?: () => void;
        }
        var WillFlushUndoRecord: { new (func: () => void): WillFlushUndoRecord; }
        interface PostprocessModifications
        { 
        (modifications: System.Array$1<UnityEditor.UndoPropertyModification>) : System.Array$1<UnityEditor.UndoPropertyModification>; 
        Invoke?: (modifications: System.Array$1<UnityEditor.UndoPropertyModification>) => System.Array$1<UnityEditor.UndoPropertyModification>;
        }
        var PostprocessModifications: { new (func: (modifications: System.Array$1<UnityEditor.UndoPropertyModification>) => System.Array$1<UnityEditor.UndoPropertyModification>): PostprocessModifications; }
    }
    namespace UnityEditor.ObjectChangeEvents {
        interface ObjectChangeEventsHandler
        { 
        (stream: $Ref<UnityEditor.ObjectChangeEventStream>) : void; 
        Invoke?: (stream: $Ref<UnityEditor.ObjectChangeEventStream>) => void;
        }
        var ObjectChangeEventsHandler: { new (func: (stream: $Ref<UnityEditor.ObjectChangeEventStream>) => void): ObjectChangeEventsHandler; }
    }
    namespace UnityEditor.ObjectChangeEventStream {
        class Builder extends System.ValueType implements System.IDisposable
        {
            protected [__keep_incompatibility]: never;
            public get eventCount(): number;
            public ToStream ($allocator: Unity.Collections.Allocator) : UnityEditor.ObjectChangeEventStream
            public Dispose () : void
            public PushChangeSceneEvent ($data: $Ref<UnityEditor.ChangeSceneEventArgs>) : void
            public PushCreateGameObjectHierarchyEvent ($data: $Ref<UnityEditor.CreateGameObjectHierarchyEventArgs>) : void
            public PushDestroyGameObjectHierarchyEvent ($data: $Ref<UnityEditor.DestroyGameObjectHierarchyEventArgs>) : void
            public PushChangeGameObjectStructureHierarchyEvent ($data: $Ref<UnityEditor.ChangeGameObjectStructureHierarchyEventArgs>) : void
            public PushChangeGameObjectStructureEvent ($data: $Ref<UnityEditor.ChangeGameObjectStructureEventArgs>) : void
            public PushChangeGameObjectParentEvent ($data: $Ref<UnityEditor.ChangeGameObjectParentEventArgs>) : void
            public PushChangeGameObjectOrComponentPropertiesEvent ($data: $Ref<UnityEditor.ChangeGameObjectOrComponentPropertiesEventArgs>) : void
            public PushCreateAssetObjectEvent ($data: $Ref<UnityEditor.CreateAssetObjectEventArgs>) : void
            public PushDestroyAssetObjectEvent ($data: $Ref<UnityEditor.DestroyAssetObjectEventArgs>) : void
            public PushChangeAssetObjectPropertiesEvent ($data: $Ref<UnityEditor.ChangeAssetObjectPropertiesEventArgs>) : void
            public PushUpdatePrefabInstancesEvent ($data: $Ref<UnityEditor.UpdatePrefabInstancesEventArgs>) : void
            public constructor ($allocator: Unity.Collections.Allocator)
        }
    }
    namespace UnityEditor.Animations {
        /** The Animator Controller controls animation through layers with state machines, controlled by parameters.
        */
        class AnimatorController extends UnityEngine.RuntimeAnimatorController
        {
            protected [__keep_incompatibility]: never;
            /** The layers in the controller.
            */
            public get layers(): System.Array$1<UnityEditor.Animations.AnimatorControllerLayer>;
            public set layers(value: System.Array$1<UnityEditor.Animations.AnimatorControllerLayer>);
            /** Parameters are used to communicate between scripting and the controller. They are used to drive transitions and blendtrees for example.
            */
            public get parameters(): System.Array$1<UnityEngine.AnimatorControllerParameter>;
            public set parameters(value: System.Array$1<UnityEngine.AnimatorControllerParameter>);
            /** Utility function to add a layer to the controller.
            * @param $name The name of the Layer.
            * @param $layer The layer to add.
            */
            public AddLayer ($name: string) : void
            /** Utility function to add a layer to the controller.
            * @param $name The name of the Layer.
            * @param $layer The layer to add.
            */
            public AddLayer ($layer: UnityEditor.Animations.AnimatorControllerLayer) : void
            /** Utility function to remove a layer from the controller.
            * @param $index The index of the AnimatorLayer.
            */
            public RemoveLayer ($index: number) : void
            /** Utility function to add a parameter to the controller.
            * @param $name The name of the parameter.
            * @param $type The type of the parameter.
            * @param $parameter The parameter to add.
            */
            public AddParameter ($name: string, $type: UnityEngine.AnimatorControllerParameterType) : void
            /** Utility function to add a parameter to the controller.
            * @param $name The name of the parameter.
            * @param $type The type of the parameter.
            * @param $parameter The parameter to add.
            */
            public AddParameter ($paramater: UnityEngine.AnimatorControllerParameter) : void
            /** Utility function to remove a parameter from the controller.
            * @param $index The index of the AnimatorParameter.
            */
            public RemoveParameter ($index: number) : void
            public RemoveParameter ($parameter: UnityEngine.AnimatorControllerParameter) : void
            /** Utility function that creates a new state  with the motion in it.
            * @param $motion The Motion that will be in the AnimatorState.
            * @param $layerIndex The layer where the Motion will be added.
            */
            public AddMotion ($motion: UnityEngine.Motion) : UnityEditor.Animations.AnimatorState
            /** Utility function that creates a new state  with the motion in it.
            * @param $motion The Motion that will be in the AnimatorState.
            * @param $layerIndex The layer where the Motion will be added.
            */
            public AddMotion ($motion: UnityEngine.Motion, $layerIndex: number) : UnityEditor.Animations.AnimatorState
            /** Creates a BlendTree in a new AnimatorState.
            * @param $name The name of the BlendTree.
            * @param $tree The created BlendTree.
            * @param $layerIndex The index where the BlendTree will be created.
            */
            public CreateBlendTreeInController ($name: string, $tree: $Ref<UnityEditor.Animations.BlendTree>) : UnityEditor.Animations.AnimatorState
            /** Creates a BlendTree in a new AnimatorState.
            * @param $name The name of the BlendTree.
            * @param $tree The created BlendTree.
            * @param $layerIndex The index where the BlendTree will be created.
            */
            public CreateBlendTreeInController ($name: string, $tree: $Ref<UnityEditor.Animations.BlendTree>, $layerIndex: number) : UnityEditor.Animations.AnimatorState
            /** Creates an AnimatorController at the given path.
            * @param $path The path where the AnimatorController asset will be created.
            * @returns The created AnimationController or null if an error occured. 
            */
            public static CreateAnimatorControllerAtPath ($path: string) : UnityEditor.Animations.AnimatorController
            public static AllocateAnimatorClip ($name: string) : UnityEngine.AnimationClip
            /** Creates an AnimatorController at the given path, and automatically create an AnimatorLayer  with an AnimatorStateMachine that will add a State with the AnimationClip in it.
            * @param $path The path where the AnimatorController will be created.
            * @param $clip The default clip that will be played by the AnimatorController.
            */
            public static CreateAnimatorControllerAtPathWithClip ($path: string, $clip: UnityEngine.AnimationClip) : UnityEditor.Animations.AnimatorController
            /** Sets the effective Motion for the AnimatorState. The Motion is either stored in the AnimatorStateMachine or in the AnimatorLayer's ovverrides. Use this function to set the Motion that is effectively used.
            * @param $state The AnimatorState which we want to set the Motion.
            * @param $motion The Motion that will be set.
            * @param $layerIndex The layer to set the Motion.
            */
            public SetStateEffectiveMotion ($state: UnityEditor.Animations.AnimatorState, $motion: UnityEngine.Motion) : void
            /** Sets the effective Motion for the AnimatorState. The Motion is either stored in the AnimatorStateMachine or in the AnimatorLayer's ovverrides. Use this function to set the Motion that is effectively used.
            * @param $state The AnimatorState which we want to set the Motion.
            * @param $motion The Motion that will be set.
            * @param $layerIndex The layer to set the Motion.
            */
            public SetStateEffectiveMotion ($state: UnityEditor.Animations.AnimatorState, $motion: UnityEngine.Motion, $layerIndex: number) : void
            /** Gets the effective Motion for the AnimatorState. The Motion is either stored in the AnimatorStateMachine or in the AnimatorLayer's ovverrides. Use this function to get the Motion that is effectively used.
            * @param $state The AnimatorState which we want the Motion.
            * @param $layerIndex The layer that is queried.
            */
            public GetStateEffectiveMotion ($state: UnityEditor.Animations.AnimatorState) : UnityEngine.Motion
            /** Gets the effective Motion for the AnimatorState. The Motion is either stored in the AnimatorStateMachine or in the AnimatorLayer's ovverrides. Use this function to get the Motion that is effectively used.
            * @param $state The AnimatorState which we want the Motion.
            * @param $layerIndex The layer that is queried.
            */
            public GetStateEffectiveMotion ($state: UnityEditor.Animations.AnimatorState, $layerIndex: number) : UnityEngine.Motion
            public SetStateEffectiveBehaviours ($state: UnityEditor.Animations.AnimatorState, $layerIndex: number, $behaviours: System.Array$1<UnityEngine.StateMachineBehaviour>) : void
            /** Gets the effective state machine behaviour list for the AnimatorState. Behaviours are either stored in the AnimatorStateMachine or in the AnimatorLayer's ovverrides. Use this function to get Behaviour list that is effectively used.
            * @param $state The AnimatorState which we want the Behaviour list.
            * @param $layerIndex The layer that is queried.
            */
            public GetStateEffectiveBehaviours ($state: UnityEditor.Animations.AnimatorState, $layerIndex: number) : System.Array$1<UnityEngine.StateMachineBehaviour>
            public static SetAnimatorController ($animator: UnityEngine.Animator, $controller: UnityEditor.Animations.AnimatorController) : void
            /** Creates a unique name for the parameter.
            * @param $name The desired name of the AnimatorParameter.
            */
            public MakeUniqueParameterName ($name: string) : string
            /** Creates a unique name for the layers.
            * @param $name The desired name of the AnimatorLayer.
            */
            public MakeUniqueLayerName ($name: string) : string
            /** Use this function to retrieve the owner of this behaviour.
            * @param $behaviour The State Machine Behaviour to get context for.
            * @returns Returns the State Machine Behaviour edition context. 
            */
            public static FindStateMachineBehaviourContext ($behaviour: UnityEngine.StateMachineBehaviour) : System.Array$1<UnityEditor.Animations.StateMachineBehaviourContext>
            /** This function will create a StateMachineBehaviour instance based on the class define in this script.
            * @param $script MonoScript class to instantiate.
            * @returns Returns instance id of created object, returns 0 if something is not valid. 
            */
            public static CreateStateMachineBehaviour ($script: UnityEditor.MonoScript) : number
            /** The non-generic version of this method.
            * @param $stateMachineBehaviourType The type of state machine behaviour to add.
            * @param $state The AnimatorState to add the Behaviour to.
            * @param $layerIndex The layer index.
            */
            public AddEffectiveStateMachineBehaviour ($stateMachineBehaviourType: System.Type, $state: UnityEditor.Animations.AnimatorState, $layerIndex: number) : UnityEngine.StateMachineBehaviour
            public constructor ()
        }
        /** A graph controlling the interaction of states. Each state references a motion.
        */
        class AnimatorStateMachine extends UnityEngine.Object
        {
            protected [__keep_incompatibility]: never;
            /** The list of states.
            */
            public get states(): System.Array$1<UnityEditor.Animations.ChildAnimatorState>;
            public set states(value: System.Array$1<UnityEditor.Animations.ChildAnimatorState>);
            /** The list of sub state machines.
            */
            public get stateMachines(): System.Array$1<UnityEditor.Animations.ChildAnimatorStateMachine>;
            public set stateMachines(value: System.Array$1<UnityEditor.Animations.ChildAnimatorStateMachine>);
            /** The state that the state machine will be in when it starts.
            */
            public get defaultState(): UnityEditor.Animations.AnimatorState;
            public set defaultState(value: UnityEditor.Animations.AnimatorState);
            /** The position of the AnyState node.
            */
            public get anyStatePosition(): UnityEngine.Vector3;
            public set anyStatePosition(value: UnityEngine.Vector3);
            /** The position of the entry node.
            */
            public get entryPosition(): UnityEngine.Vector3;
            public set entryPosition(value: UnityEngine.Vector3);
            /** The position of the exit node.
            */
            public get exitPosition(): UnityEngine.Vector3;
            public set exitPosition(value: UnityEngine.Vector3);
            /** The position of the parent state machine node. Only valid when in a hierachic state machine.
            */
            public get parentStateMachinePosition(): UnityEngine.Vector3;
            public set parentStateMachinePosition(value: UnityEngine.Vector3);
            /** The list of AnyState transitions.
            */
            public get anyStateTransitions(): System.Array$1<UnityEditor.Animations.AnimatorStateTransition>;
            public set anyStateTransitions(value: System.Array$1<UnityEditor.Animations.AnimatorStateTransition>);
            /** The list of entry transitions in the state machine.
            */
            public get entryTransitions(): System.Array$1<UnityEditor.Animations.AnimatorTransition>;
            public set entryTransitions(value: System.Array$1<UnityEditor.Animations.AnimatorTransition>);
            /** The Behaviour list assigned to this state machine.
            */
            public get behaviours(): System.Array$1<UnityEngine.StateMachineBehaviour>;
            public set behaviours(value: System.Array$1<UnityEngine.StateMachineBehaviour>);
            /** Utility function to add a state to the state machine.
            * @param $name The name of the new state.
            * @param $position The position of the state node.
            * @returns The AnimatorState that was created for this state. 
            */
            public AddState ($name: string) : UnityEditor.Animations.AnimatorState
            /** Utility function to add a state to the state machine.
            * @param $name The name of the new state.
            * @param $position The position of the state node.
            * @returns The AnimatorState that was created for this state. 
            */
            public AddState ($name: string, $position: UnityEngine.Vector3) : UnityEditor.Animations.AnimatorState
            /** Utility function to add a state to the state machine.
            * @param $state The state to add.
            * @param $position The position of the state node.
            */
            public AddState ($state: UnityEditor.Animations.AnimatorState, $position: UnityEngine.Vector3) : void
            /** Utility function to remove a state from the state machine.
            * @param $state The state to remove.
            */
            public RemoveState ($state: UnityEditor.Animations.AnimatorState) : void
            /** Utility function to add a state machine to the state machine.
            * @param $name The name of the new state machine.
            * @param $position The position of the state machine node.
            * @returns The newly created Animations.AnimatorStateMachine state machine. 
            */
            public AddStateMachine ($name: string) : UnityEditor.Animations.AnimatorStateMachine
            /** Utility function to add a state machine to the state machine.
            * @param $name The name of the new state machine.
            * @param $position The position of the state machine node.
            * @returns The newly created Animations.AnimatorStateMachine state machine. 
            */
            public AddStateMachine ($name: string, $position: UnityEngine.Vector3) : UnityEditor.Animations.AnimatorStateMachine
            /** Utility function to add a state machine to the state machine.
            * @param $stateMachine The state machine to add.
            * @param $position The position of the state machine node.
            */
            public AddStateMachine ($stateMachine: UnityEditor.Animations.AnimatorStateMachine, $position: UnityEngine.Vector3) : void
            /** Utility function to remove a state machine from its parent state machine.
            * @param $stateMachine The state machine to remove.
            */
            public RemoveStateMachine ($stateMachine: UnityEditor.Animations.AnimatorStateMachine) : void
            /** Utility function to add an AnyState transition to the specified state or statemachine.
            * @param $destinationState The destination state.
            * @param $destinationStateMachine The destination statemachine.
            */
            public AddAnyStateTransition ($destinationState: UnityEditor.Animations.AnimatorState) : UnityEditor.Animations.AnimatorStateTransition
            /** Utility function to add an AnyState transition to the specified state or statemachine.
            * @param $destinationState The destination state.
            * @param $destinationStateMachine The destination statemachine.
            */
            public AddAnyStateTransition ($destinationStateMachine: UnityEditor.Animations.AnimatorStateMachine) : UnityEditor.Animations.AnimatorStateTransition
            /** Utility function to remove an AnyState transition from the state machine.
            * @param $transition The AnyStat transition to remove.
            */
            public RemoveAnyStateTransition ($transition: UnityEditor.Animations.AnimatorStateTransition) : boolean
            /** Utility function to add an outgoing transition from the source state machine to the destination.
            * @param $sourceStateMachine The source state machine.
            * @param $destinationStateMachine The destination state machine.
            * @param $destinationState The destination state.
            * @returns The Animations.AnimatorTransition transition that was created. 
            */
            public AddStateMachineTransition ($sourceStateMachine: UnityEditor.Animations.AnimatorStateMachine) : UnityEditor.Animations.AnimatorTransition
            /** Utility function to add an outgoing transition from the source state machine to the destination.
            * @param $sourceStateMachine The source state machine.
            * @param $destinationStateMachine The destination state machine.
            * @param $destinationState The destination state.
            * @returns The Animations.AnimatorTransition transition that was created. 
            */
            public AddStateMachineTransition ($sourceStateMachine: UnityEditor.Animations.AnimatorStateMachine, $destinationStateMachine: UnityEditor.Animations.AnimatorStateMachine) : UnityEditor.Animations.AnimatorTransition
            /** Utility function to add an outgoing transition from the source state machine to the destination.
            * @param $sourceStateMachine The source state machine.
            * @param $destinationStateMachine The destination state machine.
            * @param $destinationState The destination state.
            * @returns The Animations.AnimatorTransition transition that was created. 
            */
            public AddStateMachineTransition ($sourceStateMachine: UnityEditor.Animations.AnimatorStateMachine, $destinationState: UnityEditor.Animations.AnimatorState) : UnityEditor.Animations.AnimatorTransition
            /** Utility function to add an outgoing transition from the source state machine to the exit of it's parent state machine.
            * @param $sourceStateMachine The source state machine.
            */
            public AddStateMachineExitTransition ($sourceStateMachine: UnityEditor.Animations.AnimatorStateMachine) : UnityEditor.Animations.AnimatorTransition
            /** Utility function to remove an outgoing transition from source state machine.
            * @param $transition The transition to remove.
            * @param $sourceStateMachine The source state machine.
            */
            public RemoveStateMachineTransition ($sourceStateMachine: UnityEditor.Animations.AnimatorStateMachine, $transition: UnityEditor.Animations.AnimatorTransition) : boolean
            /** Utility function to add an incoming transition to the exit of it's parent state machine.
            * @param $destinationState The destination Animations.AnimatorState state.
            * @param $destinationStateMachine The destination Animations.AnimatorStateMachine state machine.
            */
            public AddEntryTransition ($destinationState: UnityEditor.Animations.AnimatorState) : UnityEditor.Animations.AnimatorTransition
            /** Utility function to add an incoming transition to the exit of it's parent state machine.
            * @param $destinationState The destination Animations.AnimatorState state.
            * @param $destinationStateMachine The destination Animations.AnimatorStateMachine state machine.
            */
            public AddEntryTransition ($destinationStateMachine: UnityEditor.Animations.AnimatorStateMachine) : UnityEditor.Animations.AnimatorTransition
            /** Utility function to remove an entry transition from the state machine.
            * @param $transition The transition to remove.
            */
            public RemoveEntryTransition ($transition: UnityEditor.Animations.AnimatorTransition) : boolean
            /** Gets the list of all outgoing state machine transitions from given state machine.
            * @param $sourceStateMachine The source state machine.
            */
            public GetStateMachineTransitions ($sourceStateMachine: UnityEditor.Animations.AnimatorStateMachine) : System.Array$1<UnityEditor.Animations.AnimatorTransition>
            /** Sets the list of all outgoing state machine transitions from given state machine.
            * @param $stateMachine The source state machine.
            * @param $transitions The outgoing transitions.
            */
            public SetStateMachineTransitions ($sourceStateMachine: UnityEditor.Animations.AnimatorStateMachine, $transitions: System.Array$1<UnityEditor.Animations.AnimatorTransition>) : void
            /** A non-generic version of this method.
            * @param $stateMachineBehaviourType The type of state machine behaviour class to add.
            */
            public AddStateMachineBehaviour ($stateMachineBehaviourType: System.Type) : UnityEngine.StateMachineBehaviour
            /** Makes a unique state name in the context of the parent state machine.
            * @param $name Desired name for the state.
            */
            public MakeUniqueStateName ($name: string) : string
            /** Makes a unique state machine name in the context of the parent state machine.
            * @param $name Desired name for the state machine.
            */
            public MakeUniqueStateMachineName ($name: string) : string
            public constructor ()
        }
        /** The Animation Layer contains a state machine that controls animations of a model or part of it.
        */
        class AnimatorControllerLayer extends System.Object
        {
            protected [__keep_incompatibility]: never;
            /** The name of the layer.
            */
            public get name(): string;
            public set name(value: string);
            /** The state machine for the layer.
            */
            public get stateMachine(): UnityEditor.Animations.AnimatorStateMachine;
            public set stateMachine(value: UnityEditor.Animations.AnimatorStateMachine);
            /** The AvatarMask that is used to mask the animation on the given layer.
            */
            public get avatarMask(): UnityEngine.AvatarMask;
            public set avatarMask(value: UnityEngine.AvatarMask);
            /** The blending mode used by the layer. It is not taken into account for the first layer.
            */
            public get blendingMode(): UnityEditor.Animations.AnimatorLayerBlendingMode;
            public set blendingMode(value: UnityEditor.Animations.AnimatorLayerBlendingMode);
            /** Specifies the index of the Synced Layer.
            */
            public get syncedLayerIndex(): number;
            public set syncedLayerIndex(value: number);
            /** When active, the layer will have an IK pass when evaluated. It will trigger an OnAnimatorIK callback.
            */
            public get iKPass(): boolean;
            public set iKPass(value: boolean);
            /** The default blending weight that the layers has. It is not taken into account for the first layer.
            */
            public get defaultWeight(): number;
            public set defaultWeight(value: number);
            /** When active, the layer will take control of the duration of the Synced Layer.
            */
            public get syncedLayerAffectsTiming(): boolean;
            public set syncedLayerAffectsTiming(value: boolean);
            /** Gets the override motion for the state on the given layer.
            * @param $state The state which we want to get the motion.
            */
            public GetOverrideMotion ($state: UnityEditor.Animations.AnimatorState) : UnityEngine.Motion
            /** Sets the override motion for the state on the given layer.
            * @param $state The state which we want to set the motion.
            * @param $motion The motion that will be set.
            */
            public SetOverrideMotion ($state: UnityEditor.Animations.AnimatorState, $motion: UnityEngine.Motion) : void
            /** Gets the override behaviour list for the state on the given layer.
            * @param $state The state which we want to get the behaviour list.
            */
            public GetOverrideBehaviours ($state: UnityEditor.Animations.AnimatorState) : System.Array$1<UnityEngine.StateMachineBehaviour>
            public SetOverrideBehaviours ($state: UnityEditor.Animations.AnimatorState, $behaviours: System.Array$1<UnityEngine.StateMachineBehaviour>) : void
            public constructor ()
        }
        /** States are the basic building blocks of a state machine. Each state contains a Motion ( AnimationClip or BlendTree) which will play while the character is in that state. When an event in the game triggers a state transition, the character will be left in a new state whose animation sequence will then take over.
        */
        class AnimatorState extends UnityEngine.Object
        {
            protected [__keep_incompatibility]: never;
            /** The hashed name of the state.
            */
            public get nameHash(): number;
            /** The motion assigned to this state.
            */
            public get motion(): UnityEngine.Motion;
            public set motion(value: UnityEngine.Motion);
            /** The default speed of the motion.
            */
            public get speed(): number;
            public set speed(value: number);
            /** Offset at which the animation loop starts. Useful for synchronizing looped animations.
            Units is normalized time.
            */
            public get cycleOffset(): number;
            public set cycleOffset(value: number);
            /** Should the state be mirrored.
            */
            public get mirror(): boolean;
            public set mirror(value: boolean);
            /** Should Foot IK be respected for this state.
            */
            public get iKOnFeet(): boolean;
            public set iKOnFeet(value: boolean);
            /** Whether or not the AnimatorStates writes back the default values for properties that are not animated by its Motion.
            */
            public get writeDefaultValues(): boolean;
            public set writeDefaultValues(value: boolean);
            /** A tag can be used to identify a state.
            */
            public get tag(): string;
            public set tag(value: string);
            /** The animator controller parameter that drives the speed value.
            */
            public get speedParameter(): string;
            public set speedParameter(value: string);
            /** The animator controller parameter that drives the cycle offset value.
            */
            public get cycleOffsetParameter(): string;
            public set cycleOffsetParameter(value: string);
            /** The animator controller parameter that drives the mirror value.
            */
            public get mirrorParameter(): string;
            public set mirrorParameter(value: string);
            /** If timeParameterActive is true, the value of this Parameter will be used instead of normalized time.
            */
            public get timeParameter(): string;
            public set timeParameter(value: string);
            /** Define if the speed value is driven by an Animator controller parameter or by the value set in the editor.
            */
            public get speedParameterActive(): boolean;
            public set speedParameterActive(value: boolean);
            /** Define if the cycle offset value is driven by an Animator controller parameter or by the value set in the editor.
            */
            public get cycleOffsetParameterActive(): boolean;
            public set cycleOffsetParameterActive(value: boolean);
            /** Define if the mirror value is driven by an Animator controller parameter or by the value set in the editor.
            */
            public get mirrorParameterActive(): boolean;
            public set mirrorParameterActive(value: boolean);
            /** If true, use value of given Parameter as normalized time.
            */
            public get timeParameterActive(): boolean;
            public set timeParameterActive(value: boolean);
            /** The transitions that are going out of the state.
            */
            public get transitions(): System.Array$1<UnityEditor.Animations.AnimatorStateTransition>;
            public set transitions(value: System.Array$1<UnityEditor.Animations.AnimatorStateTransition>);
            /** The Behaviour list assigned to this state.
            */
            public get behaviours(): System.Array$1<UnityEngine.StateMachineBehaviour>;
            public set behaviours(value: System.Array$1<UnityEngine.StateMachineBehaviour>);
            /** Utility function to add an outgoing transition.
            * @param $transition The transition to add.
            */
            public AddTransition ($transition: UnityEditor.Animations.AnimatorStateTransition) : void
            /** Utility function to remove a transition from the state.
            * @param $transition Transition to remove.
            */
            public RemoveTransition ($transition: UnityEditor.Animations.AnimatorStateTransition) : void
            /** Utility function to add an outgoing transition to the destination state.
            * @param $defaultExitTime If true, the exit time will be the equivalent of 0.25 second.
            * @param $destinationState The destination state.
            */
            public AddTransition ($destinationState: UnityEditor.Animations.AnimatorState) : UnityEditor.Animations.AnimatorStateTransition
            /** Utility function to add an outgoing transition to the destination state machine.
            * @param $defaultExitTime If true, the exit time will be the equivalent of 0.25 second.
            * @param $destinationStateMachine The destination state machine.
            */
            public AddTransition ($destinationStateMachine: UnityEditor.Animations.AnimatorStateMachine) : UnityEditor.Animations.AnimatorStateTransition
            /** Utility function to add an outgoing transition to the destination state.
            * @param $defaultExitTime If true, the exit time will be the equivalent of 0.25 second.
            * @param $destinationState The destination state.
            */
            public AddTransition ($destinationState: UnityEditor.Animations.AnimatorState, $defaultExitTime: boolean) : UnityEditor.Animations.AnimatorStateTransition
            /** Utility function to add an outgoing transition to the destination state machine.
            * @param $defaultExitTime If true, the exit time will be the equivalent of 0.25 second.
            * @param $destinationStateMachine The destination state machine.
            */
            public AddTransition ($destinationStateMachine: UnityEditor.Animations.AnimatorStateMachine, $defaultExitTime: boolean) : UnityEditor.Animations.AnimatorStateTransition
            /** Utility function to add an outgoing transition to the exit of the state's parent state machine.
            * @param $defaultExitTime If true, the exit time will be the equivalent of 0.25 second.
            * @returns The Animations.AnimatorStateTransition that was added. 
            */
            public AddExitTransition () : UnityEditor.Animations.AnimatorStateTransition
            /** Utility function to add an outgoing transition to the exit of the state's parent state machine.
            * @param $defaultExitTime If true, the exit time will be the equivalent of 0.25 second.
            * @returns The Animations.AnimatorStateTransition that was added. 
            */
            public AddExitTransition ($defaultExitTime: boolean) : UnityEditor.Animations.AnimatorStateTransition
            /** Non-generic version of this method.
            */
            public AddStateMachineBehaviour ($stateMachineBehaviourType: System.Type) : UnityEngine.StateMachineBehaviour
            public constructor ()
        }
        /** Blend trees are used to blend continuously animation between their children. They can either be 1D or 2D.
        */
        class BlendTree extends UnityEngine.Motion
        {
            protected [__keep_incompatibility]: never;
            /** Parameter that is used to compute the blending weight of the children in 1D blend trees or on the X axis of a 2D blend tree.
            */
            public get blendParameter(): string;
            public set blendParameter(value: string);
            /** Parameter that is used to compute the blending weight of the children on the Y axis of a 2D blend tree.
            */
            public get blendParameterY(): string;
            public set blendParameterY(value: string);
            /** The Blending type can be either 1D or different types of 2D.
            */
            public get blendType(): UnityEditor.Animations.BlendTreeType;
            public set blendType(value: UnityEditor.Animations.BlendTreeType);
            /** A copy of the list of the blend tree child motions.
            */
            public get children(): System.Array$1<UnityEditor.Animations.ChildMotion>;
            public set children(value: System.Array$1<UnityEditor.Animations.ChildMotion>);
            /** When active, the children's thresholds are automatically spread between 0 and 1.
            */
            public get useAutomaticThresholds(): boolean;
            public set useAutomaticThresholds(value: boolean);
            /** Sets the minimum threshold that will be used by the ChildMotion. Only used when useAutomaticThresholds is true.
            */
            public get minThreshold(): number;
            public set minThreshold(value: number);
            /** Sets the maximum threshold that will be used by the ChildMotion. Only used when useAutomaticThresholds is true.
            */
            public get maxThreshold(): number;
            public set maxThreshold(value: number);
            /** Utility function to add a child motion to a blend trees.
            * @param $motion The motion to add as child.
            * @param $position The position of the child. When using 2D blend trees.
            * @param $threshold The threshold of the child. When using 1D blend trees.
            */
            public AddChild ($motion: UnityEngine.Motion) : void
            /** Utility function to add a child motion to a blend trees.
            * @param $motion The motion to add as child.
            * @param $position The position of the child. When using 2D blend trees.
            * @param $threshold The threshold of the child. When using 1D blend trees.
            */
            public AddChild ($motion: UnityEngine.Motion, $position: UnityEngine.Vector2) : void
            /** Utility function to add a child motion to a blend trees.
            * @param $motion The motion to add as child.
            * @param $position The position of the child. When using 2D blend trees.
            * @param $threshold The threshold of the child. When using 1D blend trees.
            */
            public AddChild ($motion: UnityEngine.Motion, $threshold: number) : void
            /** Utility function to remove the child of a blend tree.
            * @param $index The index of the blend tree to remove.
            */
            public RemoveChild ($index: number) : void
            /** Utility function to add a child blend tree to a blend tree.
            * @param $position The position of the child. When using 2D blend trees.
            * @param $threshold The threshold of the child. When using 1D blend trees.
            */
            public CreateBlendTreeChild ($threshold: number) : UnityEditor.Animations.BlendTree
            /** Utility function to add a child blend tree to a blend tree.
            * @param $position The position of the child. When using 2D blend trees.
            * @param $threshold The threshold of the child. When using 1D blend trees.
            */
            public CreateBlendTreeChild ($position: UnityEngine.Vector2) : UnityEditor.Animations.BlendTree
            public constructor ()
        }
        /** This class contains all the owner's information for this State Machine Behaviour.
        */
        class StateMachineBehaviourContext extends System.Object
        {
            protected [__keep_incompatibility]: never;
            /** The Animations.AnimatorController that owns this state machine behaviour.
            */
            public animatorController : UnityEditor.Animations.AnimatorController
            /** The object that owns this state machine behaviour. Could be an Animations.AnimatorState or Animations.AnimatorStateMachine.
            */
            public animatorObject : UnityEngine.Object
            /** The animator's layer index that owns this state machine behaviour.
            */
            public layerIndex : number
            public constructor ()
        }
        /** The type of blending algorithm that the blend tree uses.
        */
        enum BlendTreeType
        { Simple1D = 0, SimpleDirectional2D = 1, FreeformDirectional2D = 2, FreeformCartesian2D = 3, Direct = 4 }
        /** Structure that represents a motion in the context of its parent blend tree.
        */
        class ChildMotion extends System.ValueType
        {
            protected [__keep_incompatibility]: never;
            /** The motion itself.
            */
            public get motion(): UnityEngine.Motion;
            public set motion(value: UnityEngine.Motion);
            /** The threshold of the child. Used in 1D blend trees.
            */
            public get threshold(): number;
            public set threshold(value: number);
            /** The position of the child. Used in 2D blend trees.
            */
            public get position(): UnityEngine.Vector2;
            public set position(value: UnityEngine.Vector2);
            /** The relative speed of the child.
            */
            public get timeScale(): number;
            public set timeScale(value: number);
            /** Normalized time offset of the child.
            */
            public get cycleOffset(): number;
            public set cycleOffset(value: number);
            /** The parameter used by the child when used in a BlendTree of type BlendTreeType.Direct.
            */
            public get directBlendParameter(): string;
            public set directBlendParameter(value: string);
            /** Mirror of the child.
            */
            public get mirror(): boolean;
            public set mirror(value: boolean);
        }
        /** The keyframe reduction settings for compressing animation curves.
        */
        class CurveFilterOptions extends System.ValueType
        {
            protected [__keep_incompatibility]: never;
            /** The amount the position animation curve is allowed to deviate from its original curve. This amount is expressed as a percentage: a positive value between 0 and 100.
            */
            public positionError : number
            /** The amount the rotation animation curve is allowed to deviate from its original curve. This amount is expressed as a number of degrees. It should be a positive value between 0 and 180.
            */
            public rotationError : number
            /** The amount the scale animation curve is allowed to deviate from its original curve. This amount is expressed as a percentage: a positive value between 0 and 100.
            */
            public scaleError : number
            /** The amount the float animation curve is allowed to deviate from its original curve. This amount is expressed as a percentage: a positive value between 0 and 100.
            */
            public floatError : number
            /** Whether to apply keyframe reduction.
            */
            public keyframeReduction : boolean
            /** Whether to apply rotation unrolling. This option is enabled by default.
            */
            public unrollRotation : boolean
        }
        /** Records the changing properties of a GameObject as the Scene runs and saves the information into an AnimationClip.
        */
        class GameObjectRecorder extends UnityEngine.Object
        {
            protected [__keep_incompatibility]: never;
            /** The GameObject root of the animated hierarchy. (Read Only)
            */
            public get root(): UnityEngine.GameObject;
            /** Returns the current time of the recording. (Read Only)
            */
            public get currentTime(): number;
            /** Returns true when the recorder is recording. (Read Only)
            */
            public get isRecording(): boolean;
            /** Adds bindings for all the properties of the first component of type T found in target, and also for all the target's children if recursive is true.
            * @param $target .root or any of its children.
            * @param $recursive Binds also the target's children transform properties when set to true.
            * @param $componentType Type of the component.
            */
            public BindComponentsOfType ($target: UnityEngine.GameObject, $componentType: System.Type, $recursive: boolean) : void
            /** Binds a GameObject's property as defined by EditorCurveBinding.
            * @param $binding The binding definition.
            */
            public Bind ($binding: UnityEditor.EditorCurveBinding) : void
            /** Adds bindings for all of target's properties, and also for all the target's children if recursive is true.
            * @param $target .root or any of its children.
            * @param $recursive Binds also all the target's children properties when set to true.
            */
            public BindAll ($target: UnityEngine.GameObject, $recursive: boolean) : void
            /** Adds bindings for all the properties of component.
            * @param $component The component to bind.
            */
            public BindComponent ($component: UnityEngine.Component) : void
            /** Returns an array of all the bindings added to the recorder.
            * @returns Array of bindings. 
            */
            public GetBindings () : System.Array$1<UnityEditor.EditorCurveBinding>
            /** Forwards the animation by dt seconds, then record the values of the added bindings.
            * @param $dt Delta time.
            */
            public TakeSnapshot ($dt: number) : void
            /** Saves recorded animation to a destination clip.
            * @param $clip The destination clip. If this clip has animation curves, they will be removed.
            * @param $fps The frames per second (FPS) for the clip. If no value is specified, by default, this method uses 60 FPS.
            * @param $filterOptions The filtering options for processing the animation curves when saved to the destination clip. If no options are specified, by default, this method filters out irrelevant keys by applying a light compression of 0.5 for positionError, rotationError, scaleError and floatError.
            */
            public SaveToClip ($clip: UnityEngine.AnimationClip) : void
            /** Saves recorded animation to a destination clip.
            * @param $clip The destination clip. If this clip has animation curves, they will be removed.
            * @param $fps The frames per second (FPS) for the clip. If no value is specified, by default, this method uses 60 FPS.
            * @param $filterOptions The filtering options for processing the animation curves when saved to the destination clip. If no options are specified, by default, this method filters out irrelevant keys by applying a light compression of 0.5 for positionError, rotationError, scaleError and floatError.
            */
            public SaveToClip ($clip: UnityEngine.AnimationClip, $fps: number) : void
            /** Saves recorded animation to a destination clip.
            * @param $clip The destination clip. If this clip has animation curves, they will be removed.
            * @param $fps The frames per second (FPS) for the clip. If no value is specified, by default, this method uses 60 FPS.
            * @param $filterOptions The filtering options for processing the animation curves when saved to the destination clip. If no options are specified, by default, this method filters out irrelevant keys by applying a light compression of 0.5 for positionError, rotationError, scaleError and floatError.
            */
            public SaveToClip ($clip: UnityEngine.AnimationClip, $fps: number, $filterOptions: UnityEditor.Animations.CurveFilterOptions) : void
            /** Reset the recording.
            */
            public ResetRecording () : void
            public constructor ($root: UnityEngine.GameObject)
        }
        /** Base class for animator transitions. Transitions define when and how the state machine switches from one state to another.
        */
        class AnimatorTransitionBase extends UnityEngine.Object
        {
            protected [__keep_incompatibility]: never;
            /** Mutes all other transitions in the source state.
            */
            public get solo(): boolean;
            public set solo(value: boolean);
            /** Mutes the transition. The transition will never occur.
            */
            public get mute(): boolean;
            public set mute(value: boolean);
            /** Is the transition destination the exit of the current state machine.
            */
            public get isExit(): boolean;
            public set isExit(value: boolean);
            /** The destination state machine of the transition.
            */
            public get destinationStateMachine(): UnityEditor.Animations.AnimatorStateMachine;
            public set destinationStateMachine(value: UnityEditor.Animations.AnimatorStateMachine);
            /** The destination state of the transition.
            */
            public get destinationState(): UnityEditor.Animations.AnimatorState;
            public set destinationState(value: UnityEditor.Animations.AnimatorState);
            /** Animations.AnimatorCondition conditions that need to be met for a transition to happen.
            */
            public get conditions(): System.Array$1<UnityEditor.Animations.AnimatorCondition>;
            public set conditions(value: System.Array$1<UnityEditor.Animations.AnimatorCondition>);
            /** Utility function to add a condition to a transition.
            * @param $mode The Animations.AnimatorCondition mode of the condition.
            * @param $threshold The threshold value of the condition.
            * @param $parameter The name of the parameter.
            */
            public AddCondition ($mode: UnityEditor.Animations.AnimatorConditionMode, $threshold: number, $parameter: string) : void
            /** Utility function to remove a condition from the transition.
            * @param $condition The condition to remove.
            */
            public RemoveCondition ($condition: UnityEditor.Animations.AnimatorCondition) : void
            public GetDisplayName ($source: UnityEngine.Object) : string
        }
        /** The mode of the condition.
        */
        enum AnimatorConditionMode
        { If = 1, IfNot = 2, Greater = 3, Less = 4, Equals = 6, NotEqual = 7 }
        /** Condition that is used to determine if a transition must be taken.
        */
        class AnimatorCondition extends System.ValueType
        {
            protected [__keep_incompatibility]: never;
            /** The mode of the condition.
            */
            public get mode(): UnityEditor.Animations.AnimatorConditionMode;
            public set mode(value: UnityEditor.Animations.AnimatorConditionMode);
            /** The name of the parameter used in the condition.
            */
            public get parameter(): string;
            public set parameter(value: string);
            /** The AnimatorParameter's threshold value for the condition to be true.
            */
            public get threshold(): number;
            public set threshold(value: number);
        }
        /** Transitions define when and how the state machine switch from one state to another. AnimatorStateTransition always originate from an Animator State (or AnyState) and have timing parameters.
        */
        class AnimatorStateTransition extends UnityEditor.Animations.AnimatorTransitionBase
        {
            protected [__keep_incompatibility]: never;
            /** The duration of the transition.
            */
            public get duration(): number;
            public set duration(value: number);
            /** The time at which the destination state will start.
            */
            public get offset(): number;
            public set offset(value: number);
            /** Which AnimatorState transitions can interrupt the Transition.
            */
            public get interruptionSource(): UnityEditor.Animations.TransitionInterruptionSource;
            public set interruptionSource(value: UnityEditor.Animations.TransitionInterruptionSource);
            /** The Transition can be interrupted by a transition that has a higher priority.
            */
            public get orderedInterruption(): boolean;
            public set orderedInterruption(value: boolean);
            /** If AnimatorStateTransition.hasExitTime is true, exitTime represents the exact time at which the transition can take effect.
            This is represented in normalized time, so for example an exit time of 0.75 means that on the first frame where 75% of the animation has played, the Exit Time condition will be true. On the next frame, the condition will be false.
            For looped animations, transitions with exit times smaller than 1 will be evaluated every loop, so you can use this to time your transition with the proper timing in the animation, every loop.
            Transitions with exit times greater than one will be evaluated only once, so they can be used to exit at a specific time, after a fixed number of loops. For example, a transition with an exit time of 3.5 will be evaluated once, after three and a half loops.
            */
            public get exitTime(): number;
            public set exitTime(value: number);
            /** When active the transition will have an exit time condition.
            */
            public get hasExitTime(): boolean;
            public set hasExitTime(value: boolean);
            /** Determines whether the duration of the transition is reported in a fixed duration in seconds or as a normalized time.
            */
            public get hasFixedDuration(): boolean;
            public set hasFixedDuration(value: boolean);
            /** Set to true to allow or disallow transition to self during AnyState transition.
            */
            public get canTransitionToSelf(): boolean;
            public set canTransitionToSelf(value: boolean);
            public constructor ()
        }
        /** Transitions define when and how the state machine switch from on state to another. AnimatorTransition always originate from a StateMachine or a StateMachine entry. They do not define timing parameters.
        */
        class AnimatorTransition extends UnityEditor.Animations.AnimatorTransitionBase
        {
            protected [__keep_incompatibility]: never;
            public constructor ()
        }
        /** Structure that represents a state in the context of its parent state machine.
        */
        class ChildAnimatorState extends System.ValueType
        {
            protected [__keep_incompatibility]: never;
            /** The state.
            */
            public get state(): UnityEditor.Animations.AnimatorState;
            public set state(value: UnityEditor.Animations.AnimatorState);
            /** The position the the state node in the context of its parent state machine.
            */
            public get position(): UnityEngine.Vector3;
            public set position(value: UnityEngine.Vector3);
        }
        /** Structure that represents a state machine in the context of its parent state machine.
        */
        class ChildAnimatorStateMachine extends System.ValueType
        {
            protected [__keep_incompatibility]: never;
            /** The state machine.
            */
            public get stateMachine(): UnityEditor.Animations.AnimatorStateMachine;
            public set stateMachine(value: UnityEditor.Animations.AnimatorStateMachine);
            /** The position of the state machine node in the context of its parent state machine.
            */
            public get position(): UnityEngine.Vector3;
            public set position(value: UnityEngine.Vector3);
        }
        /** Specifies how the layer is blended with the previous layers.
        */
        enum AnimatorLayerBlendingMode
        { Override = 0, Additive = 1 }
        /** Which AnimatorState transitions can interrupt the Transition.
        */
        enum TransitionInterruptionSource
        { None = 0, Source = 1, Destination = 2, SourceThenDestination = 3, DestinationThenSource = 4 }
    }
    namespace UnityEditor.PluginImporter {
        interface IncludeInBuildDelegate
        { 
        (path: string) : boolean; 
        Invoke?: (path: string) => boolean;
        }
        var IncludeInBuildDelegate: { new (func: (path: string) => boolean): IncludeInBuildDelegate; }
    }
    namespace UnityEditor.Profiling.ProfilerModulesDropdownWindow {
        interface IResponder
        {
        }
    }
    namespace Unity.Profiling.Editor.UI.BottlenecksChartViewController {
        interface IResponder
        {
        }
    }
    namespace UnityEditor.MPE {
        /** ChannelClient is a WebSocket client that connects to Unity's ChannelService, which is a WebSocket server.
        */
        class ChannelClient extends System.Object
        {
            protected [__keep_incompatibility]: never;
            /** The channel ID, which essentially a hash of the channel name. See ChannelService.ChannelNameToId.
            */
            public get clientId(): number;
            /** The name of the channel this ChannelClient is connected to. The name matches the route of the URL used to connect to Unity's ChannelService. For example, 127.0.0.1:8928/<my Channel Name>.
            */
            public get channelName(): string;
            /** Specifies whether Unity processes (ticks) this ChannelClient's incoming and outgoing messages automatically, or the user processes (ticks) them manually, either in the main thread or a dedicated thread.
            */
            public get isAutoTick(): boolean;
            /** Checks whether the ChannelClient connected to a ChannelService.
            * @returns Return true if connected, and false otherwise. 
            */
            public IsConnected () : boolean
            /** Starts an existing ChannelClient so it listens to incoming and outgoing messages.
            * @param $autoTick Specifies whether Unity processes (ticks) this ChannelClient's incoming and outgoing messages automatically, or the user processes (ticks) them manually, either in the main thread or a dedicated thread.
            */
            public Start ($autoTick: boolean) : void
            /** Stops a specific ChannelClient from listening for new messages. This is different than ChannelClient.Close because you can restart the channel client using ChannelClient.Start.
            */
            public Stop () : void
            /** Closes the ChannelClient. This closes the WebSocket client but not the Channel in the ChannelService. Other ChannelClients can still connect on the same Channel.
            * @param $channelName The name of the channel to close.
            */
            public Close () : void
            /** Ticks the ChannelClient. When you call this method, it checks whether any incoming messages from the server need to be processed, and whether any outgoing messages need to be sent to the server.
            */
            public Tick () : void
            /** Sends an ASCII or binary message to the ChannelService. Depending on how the channel's handler processes the message, it may also be sent to other connections.
            * @param $data Data to send.
            * @param $connectionId The connection ID of the client sending the data.
            */
            public Send ($data: string) : void
            /** Sends an ASCII or binary message to the ChannelService. Depending on how the channel's handler processes the message, it may also be sent to other connections.
            * @param $data Data to send.
            * @param $connectionId The connection ID of the client sending the data.
            */
            public Send ($data: System.Array$1<number>) : void
            public RegisterMessageHandler ($handler: System.Action$1<string>) : System.Action
            public UnregisterMessageHandler ($handler: System.Action$1<string>) : void
            public RegisterMessageHandler ($handler: System.Action$1<System.Array$1<number>>) : System.Action
            public UnregisterMessageHandler ($handler: System.Action$1<System.Array$1<number>>) : void
            /** Creates a unique request ID for this ChannelClient in this instance of Unity. For more information about requests, see ChannelClient.Request.
            * @param $clientId The ChannelClient ID to generate the request from.
            * @returns The request ID. 
            */
            public NewRequestId () : number
            /** Gets the ChannelClientInfo for a specific channel.
            * @param $channelName The name of the channel to get information about.
            * @param $clientId The ID of the channel to get information about.
            * @returns A structure that describes the channel. 
            */
            public GetChannelClientInfo () : UnityEditor.MPE.ChannelClientInfo
            /** Sends an ASCII or binary message to the ChannelService. Depending on how the channel's handler processes the message, it may also be sent to other connections.
            * @param $data Data to send.
            * @param $connectionId The connection ID of the client sending the data.
            */
            public static Send ($connectionId: number, $data: System.Array$1<number>) : void
            /** Closes the ChannelClient. This closes the WebSocket client but not the Channel in the ChannelService. Other ChannelClients can still connect on the same Channel.
            * @param $channelName The name of the channel to close.
            */
            public static Close ($channelName: string) : void
            /** Creates a new ChannelClient on a specific channel. If a client already exists, this method gets the client.
            * @param $channelName The name of the channel to open. This matches the last part of a WebSocket URL. For example, "127.0.0.1:9090/<channelName>".
            * @returns Instance of the newly-created or existing ChannelClient. 
            */
            public static GetOrCreateClient ($channelName: string) : UnityEditor.MPE.ChannelClient
            /** Closes all ChannelClients in this instance of Unity.
            */
            public static Shutdown () : void
            /** Gets the ChannelClientInfo for a specific channel.
            * @param $channelName The name of the channel to get information about.
            * @param $clientId The ID of the channel to get information about.
            * @returns A structure that describes the channel. 
            */
            public static GetChannelClientInfo ($channelName: string) : UnityEditor.MPE.ChannelClientInfo
            /** Creates a unique request ID for this ChannelClient in this instance of Unity. For more information about requests, see ChannelClient.Request.
            * @param $clientId The ChannelClient ID to generate the request from.
            * @returns The request ID. 
            */
            public static NewRequestId ($clientId: number) : number
            /** Gets the ChannelClientInfo for a specific channel.
            * @param $channelName The name of the channel to get information about.
            * @param $clientId The ID of the channel to get information about.
            * @returns A structure that describes the channel. 
            */
            public static GetChannelClientInfo ($clientId: number) : UnityEditor.MPE.ChannelClientInfo
            /** Gets information for all ChannelClients running on a single instance of Unity.
            * @returns A list of ChannelClientInfo for all clients. 
            */
            public static GetChannelClientList () : System.Array$1<UnityEditor.MPE.ChannelClientInfo>
        }
        /** A structure that contains all of a ChannelClient's connection data.
        */
        class ChannelClientInfo extends System.ValueType implements System.IEquatable$1<UnityEditor.MPE.ChannelClientInfo>
        {
            protected [__keep_incompatibility]: never;
            public static invalidClient : UnityEditor.MPE.ChannelClientInfo
            /** The ChannelClient's name (see ChannelClient.channelName. This matches the route of the URL connecting to the ChannelService. For example, "127.0.0.1:9292/<channelName>".
            */
            public get name(): string;
            /** The channel's channel ID (see ChannelClient.clientId).
            */
            public get clientId(): number;
            /** The ChannelClient's connection ID.
            */
            public get connectionId(): number;
            public Equals ($obj: UnityEditor.MPE.ChannelClientInfo) : boolean
            public Equals ($obj: any) : boolean
            public static op_Equality ($x: UnityEditor.MPE.ChannelClientInfo, $y: UnityEditor.MPE.ChannelClientInfo) : boolean
            public static op_Inequality ($x: UnityEditor.MPE.ChannelClientInfo, $y: UnityEditor.MPE.ChannelClientInfo) : boolean
        }
        /** Scope that can be use to open a channel client on a specific channel and close the channel when the scope ends.
        */
        class ChannelClientScope extends System.ValueType implements System.IDisposable
        {
            protected [__keep_incompatibility]: never;
            /** Get the Chanel client of this scope.
            */
            public get client(): UnityEditor.MPE.ChannelClient;
            public Dispose () : void
            public constructor ($autoTick: boolean, $channelName: string, $handler: System.Action$1<string>, $closeClientOnExit?: boolean)
            public constructor ($autoTick: boolean, $channelName: string, $handler: System.Action$1<System.Array$1<number>>, $closeClientOnExit?: boolean)
        }
        /** The ChannelService encapsulates a WebSocket server running in Unity.
        */
        class ChannelService extends System.Object
        {
            protected [__keep_incompatibility]: never;
            public static GetOrCreateChannel ($channelName: string, $handler: System.Action$2<number, System.Array$1<number>>) : System.Action
            public static RegisterMessageHandler ($channelName: string, $handler: System.Action$2<number, System.Array$1<number>>) : System.Action
            public static UnregisterMessageHandler ($channelName: string, $handler: System.Action$2<number, System.Array$1<number>>) : void
            /** Closes a specific channel and all connections to that channel.
            * @param $channelName The name of the channel to close.
            */
            public static CloseChannel ($channelName: string) : void
            /** Sends a message to all  of a specific channel's ChannelClient connections.
            * @param $channelId The ID of the channel to send the message to.
            * @param $data The message to send. It can be binary or UTF8.
            */
            public static Broadcast ($channelId: number, $data: System.Array$1<number>) : void
            /** Sends a message to a specific connection. The message can be binary or UTF8.
            * @param $connectionId The connection ID. This matches ChannelClientInfo.channelClientId.
            * @param $data Data to send to the connected client.
            */
            public static Send ($connectionId: number, $data: System.Array$1<number>) : void
            /** Gets the address of the ChannelService. This is always a local address. For example, 127.0.0.1.
            * @returns The address where the ChannelService listens to new connections. 
            */
            public static GetAddress () : string
            /** Retrieves the port where the ChannelService runs. This port is chosen randomly when the ChannelService first starts. Alternatively you can specify the port from the command line, using the --ump-channel-service-port <portNumber> switch.
            * @returns The port number of the ChannelService. 
            */
            public static GetPort () : number
            /** Dispatches any messages that have been received since the last dispatch. This happens automatically every editor tick, but this method can be used to force dispatching to occur during thread-blocking operations.
            */
            public static DispatchMessages () : void
            /** Starts the ChannelService. After you start the ChannelService it listens to connection at the URL provided by: <ChannelService Address>:<ChannelServicePort><channelName>, for example, 127.0.0.1:9976events. See ChannelService.GetAddress and ChannnelService.GetPort.
            */
            public static Start () : void
            /** Stops the ChannelService from listening to connections, and closes any already established connections.
            */
            public static Stop () : void
            /** Checks whether the ChannelService is running and listening to new connections..
            * @returns True if the service has started and false if it hasn't. 
            */
            public static IsRunning () : boolean
            /** Gets a list of channels open in the ChannelService. By default the ChannelService always has a "status" channel and an "events" channel.
            * @returns A list that contains the ChannelInfo for every open channel. 
            */
            public static GetChannelList () : System.Array$1<UnityEditor.MPE.ChannelInfo>
            /** Gets a list of all channel clients connected to the ChannelService.
            * @returns A list that contains the ChannelInfo for every channel client. 
            */
            public static GetChannelClientList () : System.Array$1<UnityEditor.MPE.ChannelClientInfo>
            /** Sends a message to all  of a specific channel's ChannelClient connections.
            * @param $channelId The ID of the channel to send the message to.
            * @param $data The message to send. It can be binary or UTF8.
            */
            public static Broadcast ($channelId: number, $data: string) : void
            /** Sends a message to all  of a specific channel's ChannelClient connections.
            * @param $channelId The ID of the channel to send the message to.
            * @param $data The binary data to send.
            */
            public static BroadcastBinary ($channelId: number, $data: System.Array$1<number>) : void
            /** Sends a message to a specific connection. The message can be binary or UTF8.
            * @param $connectionId The connection ID. This matches ChannelClientInfo.channelClientId.
            * @param $data Data to send to the connected client.
            */
            public static Send ($connectionId: number, $data: string) : void
            /** Closes a specific channel and all connections to that channel.
            * @param $channelName The ChannelName.
            * @returns The ChannelId. 
            */
            public static ChannelNameToId ($channelName: string) : number
        }
        /** A structure that contains the connection information of a Channel in ChannelService.
        */
        class ChannelInfo extends System.ValueType implements System.IEquatable$1<UnityEditor.MPE.ChannelInfo>
        {
            protected [__keep_incompatibility]: never;
            public static invalidChannel : UnityEditor.MPE.ChannelInfo
            /** The name of the channel. This matches the route of the URL that connects to the ChannelService. For example, "127.0.0.1:9292/<channelName>".
            */
            public get name(): string;
            /** The ID of a specific channel. Normally this is the hash of the channel name.
            */
            public get id(): number;
            public Equals ($obj: UnityEditor.MPE.ChannelInfo) : boolean
            public Equals ($obj: any) : boolean
            public static op_Equality ($x: UnityEditor.MPE.ChannelInfo, $y: UnityEditor.MPE.ChannelInfo) : boolean
            public static op_Inequality ($x: UnityEditor.MPE.ChannelInfo, $y: UnityEditor.MPE.ChannelInfo) : boolean
        }
        /** Scope that cna be use to open a channel and that will close the channel when the scope ends.
        */
        class ChannelScope extends System.ValueType implements System.IDisposable
        {
            protected [__keep_incompatibility]: never;
            public Dispose () : void
            public constructor ($channelName: string, $handler: System.Action$2<number, System.Array$1<number>>, $closeChannelOnExit?: boolean)
        }
        /** The Serialization type for sending a message, with arguments, using the EventService. For more information about argument serialization, see ChannelService.Broadcast and ChannelService.Emit.
        */
        enum EventDataSerialization
        { StandardJson = 0, JsonUtility = 1 }
        /** The EventService is a singleton implementation of a ChannelClient that runs on all instances of Unity. It is connected to the "events" channel and allows a Unity instance to send JSON messages to other EventServices in external process, or other instances of Unity.
        */
        class EventService extends System.Object
        {
            protected [__keep_incompatibility]: never;
            /** The EventService connected to the ChannelService's "events" channel.
            */
            public static get isConnected(): boolean;
            /** Starts the EventService so it listens to new messages.
            */
            public static Start () : void
            /** Closes the EventService, terminates connections to the ChannelService, and ensures that no more handlers are processed.
            */
            public static Close () : void
            public static RegisterEventHandler ($eventType: string, $handler: System.Action$2<string, System.Array$1<any>>) : System.Action
            public static RegisterEventHandler ($eventType: string, $handler: System.Func$3<string, System.Array$1<any>, any>) : System.Action
            public static UnregisterEventHandler ($eventType: string, $handler: System.Func$3<string, System.Array$1<any>, any>) : void
            /** Clear all pending Requests.
            */
            public static Clear () : void
            /** Sends a fire-and-forget message to all ChannelClients connected to the "events" route.
            * @param $eventType The message's type name.
            * @param $args The arguments sent with the message.
            * @param $targetId When you send the event to a specific connection, this is the connection ID. By default it is set to -1, which sends the message to all other EventServices.
            * @param $eventDataSerialization Specifies how to serialize the request's arguments. This can be standard JSON, or JSON annotated with JsonUtility. You can use the latter to convert the argument to a concrete Unity object that supports JsonUtility.FromJson.
            */
            public static Emit ($eventType: string, $args?: any, $targetId?: number, $eventDataSerialization?: UnityEditor.MPE.EventDataSerialization) : void
            /** Sends a fire-and-forget message to all ChannelClients connected to the "events" route.
            * @param $eventType The message's type name.
            * @param $args The arguments sent with the message.
            * @param $targetId When you send the event to a specific connection, this is the connection ID. By default it is set to -1, which sends the message to all other EventServices.
            * @param $eventDataSerialization Specifies how to serialize the request's arguments. This can be standard JSON, or JSON annotated with JsonUtility. You can use the latter to convert the argument to a concrete Unity object that supports JsonUtility.FromJson.
            */
            public static Emit ($eventType: string, $args: System.Array$1<any>, $targetId?: number, $eventDataSerialization?: UnityEditor.MPE.EventDataSerialization) : void
            /** Checks whether a request is pending on a specific event. For more information about Request, see EventService.Request.
            * @param $eventType Event type name.
            * @returns True if there is a pending request for this event. False otherwise. 
            */
            public static IsRequestPending ($eventType: string) : boolean
            /** Checks whether there is a pending request for a specific event and, if there is, cancels it. See EventService.Request for more details on Request.
            * @param $eventType The event to cancel.
            * @param $message The error message sent to the pending request.
            * @returns Returns true if a pending request was found and cancelled false otherwise. 
            */
            public static CancelRequest ($eventType: string, $message?: string) : boolean
            public static Request ($eventType: string, $promiseHandler: System.Action$2<System.Exception, System.Array$1<any>>, $args?: any, $timeoutInMs?: bigint, $eventDataSerialization?: UnityEditor.MPE.EventDataSerialization) : void
            public static Request ($eventType: string, $promiseHandler: System.Action$2<System.Exception, System.Array$1<any>>, $args: System.Array$1<any>, $timeoutInMs?: bigint, $eventDataSerialization?: UnityEditor.MPE.EventDataSerialization) : void
            /** Sends a log message to the ChannelService. Log messages are printed to the Console window.
            * @param $msg The message to send.
            * @param $logType The type of the message (i.e. Info, Warning or Error).
            */
            public static Log ($msg: string) : void
            /** Sends a log message to the ChannelService. Log messages are printed to the Console window.
            * @param $msg The message to send.
            * @param $logType The type of the message (i.e. Info, Warning or Error).
            */
            public static Log ($msg: string, $logType: UnityEngine.LogType) : void
            /** Ticks the EventService. This processes all incoming and outgoing messages. By default, the EventService is ticked on each EditorApplication.update.
            */
            public static Tick () : void
        }
        /** An attribute used to decorate function that defines how a slave process can interact with a main instance of Unity.
        */
        class RoleProviderAttribute extends System.Attribute implements System.Runtime.InteropServices._Attribute
        {
            protected [__keep_incompatibility]: never;
            /** The name of the RoleProvider. For example, StandaloneProfiler.
            */
            public name : string
            /** The event that the process triggered.
            */
            public eventType : UnityEditor.MPE.ProcessEvent
            /** The process level (either master or slave) that the handler is registered on.
            */
            public level : UnityEditor.MPE.ProcessLevel
            public constructor ($name: string, $eventType: UnityEditor.MPE.ProcessEvent)
            public constructor ($level: UnityEditor.MPE.ProcessLevel, $eventType: UnityEditor.MPE.ProcessEvent)
        }
        /** Enum that represents the events a RoleProvider can receive.
        */
        enum ProcessEvent
        { UMP_EVENT_UNDEFINED = 0, Undefined = 0, UMP_EVENT_CREATE = 1, Create = 1, UMP_EVENT_INITIALIZE = 2, Initialize = 2, UMP_EVENT_AFTER_DOMAIN_RELOAD = 3, AfterDomainReload = 3, UMP_EVENT_SHUTDOWN = 4, Shutdown = 4 }
        /** The type of the current process. It can be a Unity master instance, or a secondary instance connected to the master.
        */
        enum ProcessLevel
        { UMP_UNDEFINED = 0, Undefined = 0, UMP_MASTER = 1, Main = 1, UMP_SLAVE = 2, Slave = 2, Secondary = 2 }
        /** Describes the state of a specifc UnityEditor process.
        */
        enum ProcessState
        { UMP_UNKNOWN_PROCESS = 0, UnknownProcess = 0, UMP_FINISHED_SUCCESSFULLY = 1, FinishedSuccessfully = 1, UMP_FINISHED_WITH_ERROR = 2, FinishedWithError = 2, UMP_RUNNING = 3, Running = 3 }
        /** *This is an experimental feature.* The ProcessService allows you to start slave instance of UnityEditor, opened to the same Project as the master instance, with a specific RoleProviderAttribute.
        */
        class ProcessService extends System.Object
        {
            protected [__keep_incompatibility]: never;
            /** The ProcessLevel of the running instance of UnityEditor.
            */
            public static get level(): UnityEditor.MPE.ProcessLevel;
            /** The role name of the running UnityEditor process. For more information about how to register handlers for a specific process role, see RoleProviderAttribute. For a UnityEditor process of ProcessLevel Master, the roleName is always empty.
            */
            public static get roleName(): string;
            /** Checks whether the ChannelService is already started.
            * @returns True if the ChannelService is started. False otherwise. 
            */
            public static IsChannelServiceStarted () : boolean
            /** A utility function to read command line arguments passed to the current process.
            * @param $paramName Specific name of a command line parameter.
            * @returns The parameter value. If empty, the parameter wasn't used on the command line. 
            */
            public static ReadParameter ($paramName: string) : string
            /** Launches a secondary instance of UnityEditor on the same project as the master instance.
            * @param $roleName The name that corresponds to the RoleProviderAttribute of the process to start.
            * @param $keyValuePairs Arguments passed to the slave process.
            * @returns The process ID of the slave process. A value of 0 means the slave process could not be started. 
            */
            public static Launch ($roleName: string, ...keyValuePairs: string[]) : number
            /** Terminates an editor process.
            * @param $pid The process ID of the process to terminate.
            */
            public static Terminate ($pid: number) : void
            /** Gets the ProcessState of a given instance of UnityEditor.
            * @param $pid The process ID.
            * @returns The state of the queried process. 
            */
            public static GetProcessState ($pid: number) : UnityEditor.MPE.ProcessState
            /** Checks whether the current process has a given capability.
            * @param $capName The capability name.
            * @returns True if the process has the capability. False otherwise. 
            */
            public static HasCapability ($capName: string) : boolean
            public static ApplyPropertyModifications ($modifications: System.Array$1<UnityEditor.PropertyModification>) : void
            public static SerializeObject ($instanceId: number) : System.Array$1<number>
            public static DeserializeObject ($bytes: System.Array$1<number>) : UnityEngine.Object
            /** Enables a connection to the Profiler. The standalone Profiler uses this method.
            * @param $dataPath Where to save profiling data. Normally this is set to Application.dataPath.
            * @returns Greater than 0 if successful. 
            */
            public static EnableProfileConnection ($dataPath: string) : number
            /** Closes the Profiler connection.
            */
            public static DisableProfileConnection () : void
            public static add_SlaveProcessExitedEvent ($value: System.Action$2<number, UnityEditor.MPE.ProcessState>) : void
            public static remove_SlaveProcessExitedEvent ($value: System.Action$2<number, UnityEditor.MPE.ProcessState>) : void
            public static add_ProcessExitedEvent ($value: System.Action$2<number, UnityEditor.MPE.ProcessState>) : void
            public static remove_ProcessExitedEvent ($value: System.Action$2<number, UnityEditor.MPE.ProcessState>) : void
            public constructor ()
        }
    }
    namespace UnityEditor.ShortcutManagement {
        /** Represents a combination of a non-modifier key and zero or more modifier keys.
        */
        class KeyCombination extends System.ValueType implements System.IEquatable$1<UnityEditor.ShortcutManagement.KeyCombination>
        {
            protected [__keep_incompatibility]: never;
            /** Key code representing non-modifier key of key combination.
            */
            public get keyCode(): UnityEngine.KeyCode;
            /** Modifier keys of key combination.
            */
            public get modifiers(): UnityEditor.ShortcutManagement.ShortcutModifiers;
            /** Is the Alt key (or Option key on macOS) modifier part of the key combination?
            */
            public get alt(): boolean;
            /** Is the action key modifier part of the key combination? The action key represents the Control key on Windows and Linux, and the Command key on macOS.
            */
            public get action(): boolean;
            /** Is the Shift key modifier part of key combination?
            */
            public get shift(): boolean;
            /** Determines if the Control key modifier is part of the key combination. Represents the Control key on Windows, macOS, and Linux.
            */
            public get control(): boolean;
            public Equals ($other: UnityEditor.ShortcutManagement.KeyCombination) : boolean
            public Equals ($obj: any) : boolean
            public constructor ($keyCode: UnityEngine.KeyCode, $shortcutModifiers?: UnityEditor.ShortcutManagement.ShortcutModifiers)
        }
        /** Represents modifier keys for use in a shortcut binding.
        */
        enum ShortcutModifiers
        { None = 0, Alt = 1, Action = 2, Shift = 4, Control = 8 }
        /** Provides an attribute that reserves one or multiple modifiers for a specific shortcut.
        */
        class ReserveModifiersAttribute extends System.Attribute implements System.Runtime.InteropServices._Attribute
        {
            protected [__keep_incompatibility]: never;
            /** One or more modifiers to reserve.
            */
            public get Modifiers(): UnityEditor.ShortcutManagement.ShortcutModifiers;
            public constructor ($modifiers: UnityEditor.ShortcutManagement.ShortcutModifiers)
        }
        /** Abstract base class for ShortcutManagement.ShortcutAttribute and ShortcutManagement.ClutchShortcutAttribute.
        */
        class ShortcutBaseAttribute extends System.Attribute implements System.Runtime.InteropServices._Attribute
        {
            protected [__keep_incompatibility]: never;
        }
        /** Registers a static method as the action for an action shortcut.
        */
        class ShortcutAttribute extends UnityEditor.ShortcutManagement.ShortcutBaseAttribute implements System.Runtime.InteropServices._Attribute
        {
            protected [__keep_incompatibility]: never;
            /** Optional override of the Shortcut ID when listing the Shortcut in the configuration interface.
            */
            public get displayName(): string;
            public set displayName(value: string);
            public constructor ($id: string, $context?: System.Type)
            public constructor ($id: string, $context: System.Type, $defaultKeyCode: UnityEngine.KeyCode, $defaultShortcutModifiers?: UnityEditor.ShortcutManagement.ShortcutModifiers)
            public constructor ($id: string, $context: System.Type, $tag: string, $defaultKeyCode: UnityEngine.KeyCode, $defaultShortcutModifiers?: UnityEditor.ShortcutManagement.ShortcutModifiers)
            public constructor ($id: string, $context: System.Type, $tag: string, $defaultKeyCode: UnityEngine.KeyCode, $defaultShortcutModifiers: UnityEditor.ShortcutManagement.ShortcutModifiers, $priority: number)
            public constructor ($id: string, $defaultKeyCode: UnityEngine.KeyCode, $defaultShortcutModifiers?: UnityEditor.ShortcutManagement.ShortcutModifiers)
        }
        /** Registers a static method as the action for a clutch shortcut.
        */
        class ClutchShortcutAttribute extends UnityEditor.ShortcutManagement.ShortcutAttribute implements System.Runtime.InteropServices._Attribute
        {
            protected [__keep_incompatibility]: never;
            public constructor ($id: string, $context?: System.Type)
            public constructor ($id: string, $context: System.Type, $defaultKeyCode: UnityEngine.KeyCode, $defaultShortcutModifiers?: UnityEditor.ShortcutManagement.ShortcutModifiers)
            public constructor ($id: string, $context: System.Type, $tag: string, $defaultKeyCode: UnityEngine.KeyCode, $defaultShortcutModifiers?: UnityEditor.ShortcutManagement.ShortcutModifiers)
            public constructor ($id: string, $context: System.Type, $tag: string, $defaultKeyCode: UnityEngine.KeyCode, $defaultShortcutModifiers: UnityEditor.ShortcutManagement.ShortcutModifiers, $priority: number)
            public constructor ($id: string, $defaultKeyCode: UnityEngine.KeyCode, $defaultShortcutModifiers?: UnityEditor.ShortcutManagement.ShortcutModifiers)
        }
        /** Represents a key binding used to trigger a shortcut.
        */
        class ShortcutBinding extends System.ValueType implements System.IEquatable$1<UnityEditor.ShortcutManagement.ShortcutBinding>
        {
            protected [__keep_incompatibility]: never;
            /** A key combination representing the empty binding.
            */
            public static get empty(): UnityEditor.ShortcutManagement.ShortcutBinding;
            /** The sequence of key combinations required to trigger a shortcut with this binding.
            */
            public get keyCombinationSequence(): System.Collections.Generic.IEnumerable$1<UnityEditor.ShortcutManagement.KeyCombination>;
            /** Determines whether this instance and another specified ShortcutBinding instance have the same value.
            * @param $other The ShortcutBinding to compare to this instance.
            * @returns true if the value of the other parameter is the same as the value of this instance; otherwise, false. 
            */
            public Equals ($other: UnityEditor.ShortcutManagement.ShortcutBinding) : boolean
            /** Determines whether this instance and a specified object, which must also be a [[ShortcutBinding}} object, have the same value.
            * @param $obj The ShortcutBinding to compare to this instance.
            * @returns true if obj is a ShortcutBinding and its value is the same as this instance; otherwise, false. If obj is null, the method returns false. 
            */
            public Equals ($obj: any) : boolean
            public constructor ($keyCombination: UnityEditor.ShortcutManagement.KeyCombination)
        }
        /** Represents the stage at which a shortcut action was invoked.
        */
        enum ShortcutStage
        { Begin = 0, End = 1 }
        /** Provides data for shortcut action methods invoked by the shortcut system.
        */
        class ShortcutArguments extends System.ValueType
        {
            protected [__keep_incompatibility]: never;
            /** Instance of the context in which the shortcut was triggered.
            */
            public context : any
            /** The stage at which a shortcut action was invoked.
            */
            public stage : UnityEditor.ShortcutManagement.ShortcutStage
        }
        interface IShortcutManager
        {
            /** Gets or sets the ID of the currently active profile.
            */
            activeProfileId : string
            add_activeProfileChanged ($value: System.Action$1<UnityEditor.ShortcutManagement.ActiveProfileChangedEventArgs>) : void
            remove_activeProfileChanged ($value: System.Action$1<UnityEditor.ShortcutManagement.ActiveProfileChangedEventArgs>) : void
            /** Returns an enumeration of all of avaliable profile IDs.
            * @returns Enumerable of available profile IDs. 
            */
            GetAvailableProfileIds () : System.Collections.Generic.IEnumerable$1<string>
            /** Checks that the profile ID is valid.
            * @param $profileId The profile ID to be checked. If a null string is specified, the method throws an ArgumentNullException error.
            * @returns Returns true if the profile ID is valid. Returns false if the profile ID is empty or equals ShortcutManager.defaultProfileId. 
            */
            IsProfileIdValid ($profileId: string) : boolean
            /** Is the profile for the given profile ID read-only?
            * @param $profileId ID of profile to determine read-only status for.
            * @returns true if the profile with ID profileId is read-only: otherwise, false. 
            */
            IsProfileReadOnly ($profileId: string) : boolean
            /** Creates a new profile with the given profile ID.
            * @param $profileId ID of created profile.
            */
            CreateProfile ($profileId: string) : void
            /** Deletes profile with the given profile ID.
            * @param $profileId ID of profile to delete.
            */
            DeleteProfile ($profileId: string) : void
            /** Renames the ID of a profile.
            * @param $profileId ID of existing profile.
            * @param $newProfileId New ID for profile.
            */
            RenameProfile ($profileId: string, $newProfileId: string) : void
            add_shortcutBindingChanged ($value: System.Action$1<UnityEditor.ShortcutManagement.ShortcutBindingChangedEventArgs>) : void
            remove_shortcutBindingChanged ($value: System.Action$1<UnityEditor.ShortcutManagement.ShortcutBindingChangedEventArgs>) : void
            /** Returns an enumeration of all available shortcut IDs.
            * @returns Enumeration of available shortcut IDs. 
            */
            GetAvailableShortcutIds () : System.Collections.Generic.IEnumerable$1<string>
            /** Returns the active binding for the given shortcut ID.
            * @param $shortcutId ID of shortcut to retrieve binding for.
            * @returns Active binding for shortcut. 
            */
            GetShortcutBinding ($shortcutId: string) : UnityEditor.ShortcutManagement.ShortcutBinding
            /** Rebinds the shortcut for the given shortcut ID to the given binding in the active profile.
            * @param $shortcutId ID of shortcut to rebind.
            * @param $binding New binding of shortcut.
            */
            RebindShortcut ($shortcutId: string, $binding: UnityEditor.ShortcutManagement.ShortcutBinding) : void
            /** Clears the binding for shortcut with given shortcut ID from the active profile.
            * @param $shortcutId ID of shortcut to clear override for.
            */
            ClearShortcutOverride ($shortcutId: string) : void
            /** Does the active profile override the binding for the given shortcut ID?
            * @param $shortcutId ID of shortcut to determine overridden status for.
            * @returns true if the shortcut with ID shortcutId is overridden in the active profile; otherwise, false. 
            */
            IsShortcutOverridden ($shortcutId: string) : boolean
        }
        /** Provides data for the ShortcutManagement.IShortcutManager.activeProfileChanged event.
        */
        class ActiveProfileChangedEventArgs extends System.ValueType
        {
            protected [__keep_incompatibility]: never;
            /** The ID of the previous active profile.
            */
            public get previousActiveProfileId(): string;
            /** The ID of the current active profile.
            */
            public get currentActiveProfileId(): string;
            public constructor ($previousActiveProfileId: string, $currentActiveProfileId: string)
        }
        /** Provides data for the ShortcutManagement.IShortcutManager.shortcutBindingChanged event.
        */
        class ShortcutBindingChangedEventArgs extends System.ValueType
        {
            protected [__keep_incompatibility]: never;
            /** The ID of the shortcut that had its binding changed.
            */
            public get shortcutId(): string;
            /** The old binding for the shortcut that had its binding changed.
            */
            public get oldBinding(): UnityEditor.ShortcutManagement.ShortcutBinding;
            /** The new binding for the shortcut that had its binding changed.
            */
            public get newBinding(): UnityEditor.ShortcutManagement.ShortcutBinding;
            public constructor ($shortcutId: string, $oldBinding: UnityEditor.ShortcutManagement.ShortcutBinding, $newBinding: UnityEditor.ShortcutManagement.ShortcutBinding)
        }
        /** Provides access to an instance of ShortcutManagement.IShortcutManager for managing shortcuts.
        */
        class ShortcutManager extends System.Object
        {
            protected [__keep_incompatibility]: never;
            /** A constant defining the ID of the default shortcut profile. See the documentation for the ShortcutManagement.IShortcutManager.activeProfileId property.
            */
            public static defaultProfileId : string
            /** An instance of the ShortcutManagement.IShortcutManager interface used for managing shortcuts in the editor.
            */
            public static get instance(): UnityEditor.ShortcutManagement.IShortcutManager;
            /** Registers the tag as a custom context used to filter shortcuts after a window context is determined.
            * @param $tag Context string identifier.
            * @param $e Context enum identifier.
            */
            public static RegisterTag ($tag: string) : void
            /** Registers the tag as a custom context used to filter shortcuts after a window context is determined.
            * @param $tag Context string identifier.
            * @param $e Context enum identifier.
            */
            public static RegisterTag ($e: System.Enum) : void
            /** Removes a tag from the custom context list.
            * @param $tag Context string identifier.
            */
            public static UnregisterTag ($tag: string) : void
            public static UnregisterTag ($e: System.Enum) : void
        }
    }
    namespace UnityEditor.MemoryProfiler {
        /** MemorySnapshot is a profiling tool to help diagnose memory usage.
        */
        class MemorySnapshot extends System.Object
        {
            protected [__keep_incompatibility]: never;
            public static add_OnSnapshotReceived ($value: System.Action$1<UnityEditor.MemoryProfiler.PackedMemorySnapshot>) : void
            public static remove_OnSnapshotReceived ($value: System.Action$1<UnityEditor.MemoryProfiler.PackedMemorySnapshot>) : void
        }
        /** PackedMemorySnapshot is a compact representation of a memory snapshot.
        */
        class PackedMemorySnapshot extends System.Object
        {
            protected [__keep_incompatibility]: never;
            /** Descriptions of all the C++ unity types the profiled player knows about.
            */
            public get nativeTypes(): System.Array$1<UnityEditor.MemoryProfiler.PackedNativeType>;
            /** All native C++ objects that were loaded at time of the snapshot.
            */
            public get nativeObjects(): System.Array$1<UnityEditor.MemoryProfiler.PackedNativeUnityEngineObject>;
            /** All GC handles in use in the memorysnapshot.
            */
            public get gcHandles(): System.Array$1<UnityEditor.MemoryProfiler.PackedGCHandle>;
            /** Connections is an array of from,to pairs that describe which things are keeping which other things alive.
            */
            public get connections(): System.Array$1<UnityEditor.MemoryProfiler.Connection>;
            /** Array of actual managed heap memory sections.
            */
            public get managedHeapSections(): System.Array$1<UnityEditor.MemoryProfiler.MemorySection>;
            /** Descriptions of all the managed types that were known to the virtual machine when the snapshot was taken.
            */
            public get typeDescriptions(): System.Array$1<UnityEditor.MemoryProfiler.TypeDescription>;
            /** Information about the virtual machine running executing the managade code inside the player.
            */
            public get virtualMachineInformation(): UnityEditor.MemoryProfiler.VirtualMachineInformation;
            public constructor ($snapshot: UnityEditor.Profiling.Memory.Experimental.PackedMemorySnapshot)
        }
        /** A description of a C++ unity type.
        */
        class PackedNativeType extends System.ValueType
        {
            protected [__keep_incompatibility]: never;
            /** Name of this C++ unity type.
            */
            public get name(): string;
            /** The index used to obtain the native C++ base class description from the PackedMemorySnapshot.nativeTypes array.
            */
            public get nativeBaseTypeArrayIndex(): number;
            public constructor ($name: string, $nativeBaseTypeArrayIndex: number)
        }
        /** Description of a C++ unity object in memory.
        */
        class PackedNativeUnityEngineObject extends System.ValueType
        {
            protected [__keep_incompatibility]: never;
            /** Is this object persistent? (Assets are persistent, objects stored in Scenes and dynamically created objects are not persistent).
            */
            public get isPersistent(): boolean;
            /** Has this object has been marked as DontDestroyOnLoad?
            */
            public get isDontDestroyOnLoad(): boolean;
            /** Is this native object an internal Unity manager object?
            */
            public get isManager(): boolean;
            /** Name of this object.
            */
            public get name(): string;
            /** InstanceId of this object.
            */
            public get instanceId(): number;
            /** Size in bytes of this object.
            */
            public get size(): number;
            /** The index used to obtain the native C++ type description from the PackedMemorySnapshot.nativeTypes array.
            */
            public get nativeTypeArrayIndex(): number;
            /** The hideFlags this native object has.
            */
            public get hideFlags(): UnityEngine.HideFlags;
            /** The memory address of the native C++ object. This matches the "m_CachedPtr" field of UnityEngine.Object.
            */
            public get nativeObjectAddress(): bigint;
            public constructor ($name: string, $instanceId: number, $size: number, $nativeTypeArrayIndex: number, $hideFlags: UnityEngine.HideFlags, $flags: UnityEditor.MemoryProfiler.PackedNativeUnityEngineObject.ObjectFlags, $nativeObjectAddress: bigint)
        }
        /** A description of a GC handle used by the virtual machine.
        */
        class PackedGCHandle extends System.ValueType
        {
            protected [__keep_incompatibility]: never;
            /** The address of the managed object that the GC handle is referencing.
            */
            public get target(): bigint;
            public constructor ($target: bigint)
        }
        /** A pair of from and to indices describing what thing keeps what other thing alive.
        */
        class Connection extends System.ValueType
        {
            protected [__keep_incompatibility]: never;
            /** Index into a virtual list of all GC handles, followed by all native objects.
            */
            public get from(): number;
            public set from(value: number);
            /** Index into a virtual list of all GC handles, followed by all native objects.
            */
            public get to(): number;
            public set to(value: number);
            public constructor ($from: number, $to: number)
        }
        /** A dump of a piece of memory from the player that's being profiled.
        */
        class MemorySection extends System.ValueType
        {
            protected [__keep_incompatibility]: never;
            /** The actual bytes of the memory dump.
            */
            public get bytes(): System.Array$1<number>;
            /** The start address of this piece of memory.
            */
            public get startAddress(): bigint;
            public constructor ($bytes: System.Array$1<number>, $startAddress: bigint)
        }
        /** Description of a managed type.
        */
        class TypeDescription extends System.ValueType
        {
            protected [__keep_incompatibility]: never;
            /** Is this type a value type? (if it's not a value type, it's a reference type)
            */
            public get isValueType(): boolean;
            /** Is this type an array?
            */
            public get isArray(): boolean;
            /** If this is an arrayType, this will return the rank of the array. (1 for a 1-dimensional array, 2 for a 2-dimensional array, etc)
            */
            public get arrayRank(): number;
            /** Name of this type.
            */
            public get name(): string;
            /** Name of the assembly this type was loaded from.
            */
            public get assembly(): string;
            /** An array containing descriptions of all fields of this type.
            */
            public get fields(): System.Array$1<UnityEditor.MemoryProfiler.FieldDescription>;
            /** The actual contents of the bytes that store this types static fields, at the point of time when the snapshot was taken.
            */
            public get staticFieldBytes(): System.Array$1<number>;
            /** The base type for this type, pointed to by an index into PackedMemorySnapshot.typeDescriptions.
            */
            public get baseOrElementTypeIndex(): number;
            /** Size in bytes of an instance of this type. If this type is an arraytype, this describes the amount of bytes a single element in the array will take up.
            */
            public get size(): number;
            /** The address in memory that contains the description of this type inside the virtual machine. This can be used to match managed objects in the heap to their corresponding TypeDescription,  as the first pointer of a managed object points to its type description.
            */
            public get typeInfoAddress(): bigint;
            /** The typeIndex of this type.  This index is an index into the PackedMemorySnapshot.typeDescriptions array.
            */
            public get typeIndex(): number;
            public constructor ($name: string, $assembly: string, $fields: System.Array$1<UnityEditor.MemoryProfiler.FieldDescription>, $staticFieldBytes: System.Array$1<number>, $baseOrElementTypeIndes: number, $size: number, $typeInfoAddress: bigint, $typeIndex: number, $flags: UnityEditor.MemoryProfiler.TypeDescription.TypeFlags)
        }
        /** Information about the virtual machine running executing the managed code inside the player.
        */
        class VirtualMachineInformation extends System.ValueType
        {
            protected [__keep_incompatibility]: never;
            /** Size in bytes of a pointer.
            */
            public get pointerSize(): number;
            /** Size in bytes of the header of each managed object.
            */
            public get objectHeaderSize(): number;
            /** Size in bytes of the header of an array object.
            */
            public get arrayHeaderSize(): number;
            /** Offset in bytes inside the object header of an array object where the bounds of the array is stored.
            */
            public get arrayBoundsOffsetInHeader(): number;
            /** Offset in bytes inside the object header of an array object where the size of the array is stored.
            */
            public get arraySizeOffsetInHeader(): number;
            /** Allocation granularity in bytes used by the virtual machine allocator.
            */
            public get allocationGranularity(): number;
            /** A version number that will change when the object layout inside the managed heap will change.
            */
            public get heapFormatVersion(): number;
        }
        /** Description of a field of a managed type.
        */
        class FieldDescription extends System.ValueType
        {
            protected [__keep_incompatibility]: never;
            /** Name of this field.
            */
            public get name(): string;
            /** Offset of this field.
            */
            public get offset(): number;
            /** The typeindex into PackedMemorySnapshot.typeDescriptions of the type this field belongs to.
            */
            public get typeIndex(): number;
            /** Is this field static?
            */
            public get isStatic(): boolean;
            public constructor ($name: string, $offset: number, $typeIndex: number, $isStatic: boolean)
        }
    }
    namespace UnityEditor.Profiling.Memory.Experimental {
        /** PackedMemorySnapshot is a compact representation of a memory snapshot that a player has sent through the profiler connection.
        */
        class PackedMemorySnapshot extends System.Object implements System.IDisposable
        {
            protected [__keep_incompatibility]: never;
            /** Connections is an array of from,to pairs that describe which things are keeping which other things alive.
            */
            public get connections(): UnityEditor.Profiling.Memory.Experimental.ConnectionEntries;
            /** Array of Field Descriptions, referenced by Type Description entries by array index.
            */
            public get fieldDescriptions(): UnityEditor.Profiling.Memory.Experimental.FieldDescriptionEntries;
            /** All GC handles in use in the memorysnapshot.
            */
            public get gcHandles(): UnityEditor.Profiling.Memory.Experimental.GCHandleEntries;
            /** Array of actual managed heap memory sections.
            */
            public get managedHeapSections(): UnityEditor.Profiling.Memory.Experimental.ManagedMemorySectionEntries;
            /** Array of managed stacks in a memory snapshot.
            */
            public get managedStacks(): UnityEditor.Profiling.Memory.Experimental.ManagedMemorySectionEntries;
            /** Array of native allocation data, captured in C++.
            */
            public get nativeAllocations(): UnityEditor.Profiling.Memory.Experimental.NativeAllocationEntries;
            /** Array of native allocation site data, captured in C++.
            */
            public get nativeAllocationSites(): UnityEditor.Profiling.Memory.Experimental.NativeAllocationSiteEntries;
            /** Array of callstack symbols, used by native allocation site data.
            */
            public get nativeCallstackSymbols(): UnityEditor.Profiling.Memory.Experimental.NativeCallstackSymbolEntries;
            /** Array of memory labels, used by native allocation site data.
            */
            public get nativeMemoryLabels(): UnityEditor.Profiling.Memory.Experimental.NativeMemoryLabelEntries;
            /** Array of native memory regions, which houses native allocations.
            */
            public get nativeMemoryRegions(): UnityEditor.Profiling.Memory.Experimental.NativeMemoryRegionEntries;
            /** All native C++ objects that were loaded at time of the snapshot.
            */
            public get nativeObjects(): UnityEditor.Profiling.Memory.Experimental.NativeObjectEntries;
            /** Array of native root references, which represent ownership of native allocation data.
            */
            public get nativeRootReferences(): UnityEditor.Profiling.Memory.Experimental.NativeRootReferenceEntries;
            /** Descriptions of all the C++ unity types the profiled player knows about.
            */
            public get nativeTypes(): UnityEditor.Profiling.Memory.Experimental.NativeTypeEntries;
            /** An array of indexes into PackedMemorySnapshot.typeDescriptions indetifying the type this field belongs to.
            */
            public get typeDescriptions(): UnityEditor.Profiling.Memory.Experimental.TypeDescriptionEntries;
            /** The current snapshot format version.
            */
            public get version(): number;
            /** Path to the memory snapshot file.
            */
            public get filePath(): string;
            /** The time and date at which the snapshot was recorded.
            */
            public get recordDate(): System.DateTime;
            /** Flags corresponding to the fields present in a returned memory snapshot.
            */
            public get captureFlags(): Unity.Profiling.Memory.CaptureFlags;
            /** Information about the virtual machine running executing the managed code inside the player.
            */
            public get virtualMachineInformation(): UnityEditor.Profiling.Memory.Experimental.VirtualMachineInformation;
            /** Load memory snapshot from given file path.
            * @param $path An absolute file path to load a snapshot file from.
            * @returns Memory snapshot. 
            */
            public static Load ($path: string) : UnityEditor.Profiling.Memory.Experimental.PackedMemorySnapshot
            /** Converts the specified old format MemoryProfiler.PackedMemorySnapshot object to a new PackedMemorySnapshot format object and writes it to the location and file name specified the the write path.
            * @param $snapshot The old format snapshot object.
            * @param $writePath Destination path and file name for the file containing the converted snapshot.
            * @returns True if the conversion was successful; otherwise false. 
            */
            public static Convert ($snapshot: UnityEditor.MemoryProfiler.PackedMemorySnapshot, $writePath: string) : boolean
            /** Copy the memory snapshot file to the given file path.
            * @param $snapshot Source memory snapshot.
            * @param $writePath Where to create copy of memory snapshot.
            */
            public static Save ($snapshot: UnityEditor.Profiling.Memory.Experimental.PackedMemorySnapshot, $writePath: string) : void
            /** Disposes of an existing PackedMemorySnapshot object and closes the file reader.
            */
            public Dispose () : void
        }
        class ArrayEntries$1<T> extends System.Object
        {
            protected [__keep_incompatibility]: never;
            public GetNumEntries () : number
            public GetEntries ($indexStart: number, $numEntries: number, $dataOut: $Ref<System.Array$1<T>>) : void
        }
        /** A class that houses data entries related to Connection data, returned by PackedMemorySnapshot.connections.
        */
        class ConnectionEntries extends System.Object
        {
            protected [__keep_incompatibility]: never;
            /** An array of indexes into the object array of GC handles referenced by the to property.
            */
            public get from(): UnityEditor.Profiling.Memory.Experimental.ArrayEntries$1<number>;
            /** An array of GC handle objects.
            */
            public get to(): UnityEditor.Profiling.Memory.Experimental.ArrayEntries$1<number>;
            /** Gets the number of connection entries.
            * @returns The number of entries. 
            */
            public GetNumEntries () : number
        }
        /** A class that houses GCHandle data. Returned by PackedMemorySnapshot.gcHandles.
        */
        class GCHandleEntries extends System.Object
        {
            protected [__keep_incompatibility]: never;
            /** An array of addresses for the managed objects that the GC handles are referencing.
            */
            public get target(): UnityEditor.Profiling.Memory.Experimental.ArrayEntries$1<bigint>;
            /** Gets the number of GCHandle entries.
            * @returns The number of entries. 
            */
            public GetNumEntries () : number
        }
        /** A class that houses MemorySection data, returned by PackedMemorySnapshot.managedHeapSections and PackedMemorySnapshot.managedStacks.
        */
        class ManagedMemorySectionEntries extends System.Object
        {
            protected [__keep_incompatibility]: never;
            /** An array of byte arrays that contain memory dumps.
            */
            public get bytes(): UnityEditor.Profiling.Memory.Experimental.ArrayEntries$1<System.Array$1<number>>;
            /** An array of addresses of the start location in memory of the memory dumps referenced by the startAddress property.
            */
            public get startAddress(): UnityEditor.Profiling.Memory.Experimental.ArrayEntries$1<bigint>;
            /** Gets the number of managed memory section entries.
            * @returns The number of entries. 
            */
            public GetNumEntries () : number
        }
        /** A class that houses native object data, returned by PackedMemorySnapshot.nativeObjects.
        */
        class NativeObjectEntries extends System.Object
        {
            protected [__keep_incompatibility]: never;
            /** An array containing the names of the native objects.
            */
            public get objectName(): UnityEditor.Profiling.Memory.Experimental.ArrayEntries$1<string>;
            /** The instance id of this native object.
            */
            public get instanceId(): UnityEditor.Profiling.Memory.Experimental.ArrayEntries$1<number>;
            /** The size in bytes of this object.
            */
            public get size(): UnityEditor.Profiling.Memory.Experimental.ArrayEntries$1<bigint>;
            /** An array of indexes into the PackedMemorySnapshot.nativeTypes array used to retrieve the the native C++ type description.
            */
            public get nativeTypeArrayIndex(): UnityEditor.Profiling.Memory.Experimental.ArrayEntries$1<number>;
            /** The hide flags attached to this native object.
            */
            public get hideFlags(): UnityEditor.Profiling.Memory.Experimental.ArrayEntries$1<UnityEngine.HideFlags>;
            /** An array the contains the flags attached to the native memory objects referenced in the NativeObjectEntries.nativeObjectAddress array.
            */
            public get flags(): UnityEditor.Profiling.Memory.Experimental.ArrayEntries$1<UnityEditor.Profiling.Memory.Experimental.ObjectFlags>;
            /** An array of memory addresses that point to native C++ objects. This matches the "m_CachePtr" field of a UnityEngine.Object.
            */
            public get nativeObjectAddress(): UnityEditor.Profiling.Memory.Experimental.ArrayEntries$1<bigint>;
            /** An array containing the root reference ids of the native objects. Corresponds to entries in NativeRootReferenceEntries.id array.
            */
            public get rootReferenceId(): UnityEditor.Profiling.Memory.Experimental.ArrayEntries$1<bigint>;
            /** Index of a handle inside the PackedMemorySnapshot.gcHandles array.
            */
            public get gcHandleIndex(): UnityEditor.Profiling.Memory.Experimental.ArrayEntries$1<number>;
            /** Gets the number of native object entries.
            * @returns The number of entries. 
            */
            public GetNumEntries () : number
        }
        /** Flags that can be set on a Native Object.
        */
        enum ObjectFlags
        { IsDontDestroyOnLoad = 1, IsPersistent = 2, IsManager = 4 }
        /** A class that houses native type entries, returned by PackedMemorySnapshot.nativeTypes.
        */
        class NativeTypeEntries extends System.Object
        {
            protected [__keep_incompatibility]: never;
            /** An array of names of the C++ unity type.
            */
            public get typeName(): UnityEditor.Profiling.Memory.Experimental.ArrayEntries$1<string>;
            /** An array of indexes into the PackedMemorySnapshot.nativeTypes array used to retrieve native C++ base class description.
            */
            public get nativeBaseTypeArrayIndex(): UnityEditor.Profiling.Memory.Experimental.ArrayEntries$1<number>;
            /** Gets the number of native type entries.
            * @returns The number of entries. 
            */
            public GetNumEntries () : number
        }
        /** A class that houses type description entries, returned from PackedMemorySnapshot.typeDescriptions.
        */
        class TypeDescriptionEntries extends System.Object
        {
            protected [__keep_incompatibility]: never;
            /** Flags set for this type description, that define whether this type is an array or a value type, and the array rank of the type.
            */
            public get flags(): UnityEditor.Profiling.Memory.Experimental.ArrayEntries$1<UnityEditor.Profiling.Memory.Experimental.TypeFlags>;
            /** The name of this type.
            */
            public get typeDescriptionName(): UnityEditor.Profiling.Memory.Experimental.ArrayEntries$1<string>;
            /** Name of the assembly this type was loaded from.
            */
            public get assembly(): UnityEditor.Profiling.Memory.Experimental.ArrayEntries$1<string>;
            /** An array containing indices pointing to descriptions of all fields of this type, accessible from PackedMemorySnapshot.fieldDescriptions.
            */
            public get fieldIndices(): UnityEditor.Profiling.Memory.Experimental.ArrayEntries$1<System.Array$1<number>>;
            /** The actual contents of the bytes that store this types static fields, at the point of time when the snapshot was taken.
            */
            public get staticFieldBytes(): UnityEditor.Profiling.Memory.Experimental.ArrayEntries$1<System.Array$1<number>>;
            /** The base type for this type, pointed to by an index into PackedMemorySnapshot.typeDescriptions.
            */
            public get baseOrElementTypeIndex(): UnityEditor.Profiling.Memory.Experimental.ArrayEntries$1<number>;
            /** Size in bytes of an instance of this type. If this type is an array type, this describes the amount of bytes a single element in the array will take up.
            */
            public get size(): UnityEditor.Profiling.Memory.Experimental.ArrayEntries$1<number>;
            /** The address in memory that contains the description of this type inside the virtual machine. This can be used to match managed objects in the heap to their corresponding TypeDescription, as the first pointer of a managed object points to its type description.
            */
            public get typeInfoAddress(): UnityEditor.Profiling.Memory.Experimental.ArrayEntries$1<bigint>;
            /** The type index of this type. This index is an index into the PackedMemorySnapshot.typeDescriptions array.
            */
            public get typeIndex(): UnityEditor.Profiling.Memory.Experimental.ArrayEntries$1<number>;
            /** The number of type description entries.
            * @returns The number of entries. 
            */
            public GetNumEntries () : number
        }
        /** An enum encoding information for a type description about whether it is a value type or an array type, and the rank of the array if the type is an array. Returned by TypeDescriptionEntries.flags.
        */
        enum TypeFlags
        { kNone = 0, kValueType = 1, kArray = 2, kArrayRankMask = -65536 }
        /** A class that houses Field Description entry data, returned by PackedMemorySnapshot.fieldDescriptions.
        */
        class FieldDescriptionEntries extends System.Object
        {
            protected [__keep_incompatibility]: never;
            /** An array of field names.
            */
            public get fieldDescriptionName(): UnityEditor.Profiling.Memory.Experimental.ArrayEntries$1<string>;
            /** An array of offset values from the start of the class for the fields referenced by the fieldDescriptionName property.
            */
            public get offset(): UnityEditor.Profiling.Memory.Experimental.ArrayEntries$1<number>;
            /** The typeIndex into PackedMemorySnapshot.typeDescriptions of the type this field belongs to.
            */
            public get typeIndex(): UnityEditor.Profiling.Memory.Experimental.ArrayEntries$1<number>;
            /** True if this field is static; otherwise false.
            */
            public get isStatic(): UnityEditor.Profiling.Memory.Experimental.ArrayEntries$1<boolean>;
            /** Gets the number of field description entries.
            * @returns The number of entries. 
            */
            public GetNumEntries () : number
        }
        /** A class that houses native memory label data, returned by PackedMemorySnapshot.nativeMemoryLabels.
        */
        class NativeMemoryLabelEntries extends System.Object
        {
            protected [__keep_incompatibility]: never;
            /** An array containing the names of the memory labels.
            */
            public get memoryLabelName(): UnityEditor.Profiling.Memory.Experimental.ArrayEntries$1<string>;
            /** Gets the number of memory label entries.
            * @returns The number of entries. 
            */
            public GetNumEntries () : number
        }
        /** A class that houses native root reference data, returned by PackedMemorySnapshot.rootReferences.
        */
        class NativeRootReferenceEntries extends System.Object
        {
            protected [__keep_incompatibility]: never;
            /** An array that contains the IDs of the root references.
            */
            public get id(): UnityEditor.Profiling.Memory.Experimental.ArrayEntries$1<bigint>;
            /** An array that contains the area names of the root references.
            */
            public get areaName(): UnityEditor.Profiling.Memory.Experimental.ArrayEntries$1<string>;
            /** An array containing the object names of the root references.
            */
            public get objectName(): UnityEditor.Profiling.Memory.Experimental.ArrayEntries$1<string>;
            /** An array that contains the accumulated sizes of all allocations registered for the root references.
            */
            public get accumulatedSize(): UnityEditor.Profiling.Memory.Experimental.ArrayEntries$1<bigint>;
            /** Gets the number of root reference entries.
            * @returns The number of entries. 
            */
            public GetNumEntries () : number
        }
        /** A class that houses native allocation entry data, returned by PackedMemorySnapshot.nativeAllocations.
        */
        class NativeAllocationEntries extends System.Object
        {
            protected [__keep_incompatibility]: never;
            /** An array of indexes that indicate which memory region, beginning region, inside region, or end region, that the memory allocation represents.
            */
            public get memoryRegionIndex(): UnityEditor.Profiling.Memory.Experimental.ArrayEntries$1<number>;
            /** An array of root reference IDs for the allocation. Corresponds to entries in NativeRootReferenceEntries.id array.
            */
            public get rootReferenceId(): UnityEditor.Profiling.Memory.Experimental.ArrayEntries$1<bigint>;
            /** The allocation site id of the allocation, used by NativeAllocationSiteEntries.id.
            */
            public get allocationSiteId(): UnityEditor.Profiling.Memory.Experimental.ArrayEntries$1<bigint>;
            /** An array that contains addresses of native memory allocations.
            */
            public get address(): UnityEditor.Profiling.Memory.Experimental.ArrayEntries$1<bigint>;
            /** An array containing the total size, in bytes, of the native allocation.
            */
            public get size(): UnityEditor.Profiling.Memory.Experimental.ArrayEntries$1<bigint>;
            /** An array that specifies, in bytes, how much of the memory in the returned native allocation is not part of your request. The overhead memory is used for allocation headers and other metadata describing the allocation.
            */
            public get overheadSize(): UnityEditor.Profiling.Memory.Experimental.ArrayEntries$1<number>;
            /** An array specifying, in bytes, the amount of padding used to align the returned native allocation.
            */
            public get paddingSize(): UnityEditor.Profiling.Memory.Experimental.ArrayEntries$1<number>;
            /** Gets the number allocation entries.
            * @returns The number of entries. 
            */
            public GetNumEntries () : number
        }
        /** A class housing native memory region data, returned by PackedMemorySnapshot.nativeMemoryRegions.
        */
        class NativeMemoryRegionEntries extends System.Object
        {
            protected [__keep_incompatibility]: never;
            /** An array containing the names of the memory regions.
            */
            public get memoryRegionName(): UnityEditor.Profiling.Memory.Experimental.ArrayEntries$1<string>;
            /** The parent of this memory region, referenced by index into this entry array. The root memory region contains parent index of -1.
            */
            public get parentIndex(): UnityEditor.Profiling.Memory.Experimental.ArrayEntries$1<number>;
            /** An array containing addresses of the memory regions. Non-leaf entries containing child memory regions are set to 0.
            */
            public get addressBase(): UnityEditor.Profiling.Memory.Experimental.ArrayEntries$1<bigint>;
            /** An array that contains the accumulated size, in bytes, including all of its children, of the memory region.
            */
            public get addressSize(): UnityEditor.Profiling.Memory.Experimental.ArrayEntries$1<bigint>;
            /** An array that contains indexes into the PackedMemorySnapshot.nativeAllocations array that identify the first allocation that the memory region contains.
            */
            public get firstAllocationIndex(): UnityEditor.Profiling.Memory.Experimental.ArrayEntries$1<number>;
            /** An array that contains the number of allocations, including children, that the memory regions contain.
            */
            public get numAllocations(): UnityEditor.Profiling.Memory.Experimental.ArrayEntries$1<number>;
            /** Gets the number of memory region entries.
            * @returns The number of entries. 
            */
            public GetNumEntries () : number
        }
        /** A class that houses native allocation site entries, returned by PackedMemorySnapshot.nativeAllocationSites.
        */
        class NativeAllocationSiteEntries extends System.Object
        {
            protected [__keep_incompatibility]: never;
            /** An array containing allocation site IDs.
            */
            public get id(): UnityEditor.Profiling.Memory.Experimental.ArrayEntries$1<bigint>;
            /** An array containing memory labels attached to allocation sites. Referenced by index into PackedMemorySnapshot.nativeMemoryLabels.
            */
            public get memoryLabelIndex(): UnityEditor.Profiling.Memory.Experimental.ArrayEntries$1<number>;
            /** An array of callstack symbols corresponding to this allocation site, referring to NativeCallstackSymbolEntries.symbol.
            */
            public get callstackSymbols(): UnityEditor.Profiling.Memory.Experimental.ArrayEntries$1<System.Array$1<bigint>>;
            /** Gets the number of native allocation site entries.
            * @returns The number of entries. 
            */
            public GetNumEntries () : number
        }
        /** A class housing native callstack symbol data, returned by PackedMemorySnapshot.nativeCallstackSymbols.
        */
        class NativeCallstackSymbolEntries extends System.Object
        {
            protected [__keep_incompatibility]: never;
            /** An array of addresses to the callback symbols, referenced by the NativeAllocationSiteEntries.callstackSymbols property.
            */
            public get symbol(): UnityEditor.Profiling.Memory.Experimental.ArrayEntries$1<bigint>;
            /** An array of readable stack traces of the callback symbols.
            */
            public get readableStackTrace(): UnityEditor.Profiling.Memory.Experimental.ArrayEntries$1<string>;
            /** Gets the number of callstack symbol entries.
            * @returns The number of entries. 
            */
            public GetNumEntries () : number
        }
        /** Information about a virtual machine that provided a memory snapshot.
        */
        class VirtualMachineInformation extends System.ValueType
        {
            protected [__keep_incompatibility]: never;
            /** Size in bytes of a pointer.
            */
            public get pointerSize(): number;
            /** Size in bytes of the header of each managed object.
            */
            public get objectHeaderSize(): number;
            /** Size in bytes of the header of an array object.
            */
            public get arrayHeaderSize(): number;
            /** Offset in bytes inside the object header of an array object where the bounds of the array is stored.
            */
            public get arrayBoundsOffsetInHeader(): number;
            /** Offset in bytes inside the object header of an array object where the size of the array is stored.
            */
            public get arraySizeOffsetInHeader(): number;
            /** Allocation granularity in bytes used by the virtual machine allocator.
            */
            public get allocationGranularity(): number;
        }
        /** An extension class that contains member functions to ObjectFlags.
        */
        class ObjectFlagsExtensions extends System.Object
        {
            protected [__keep_incompatibility]: never;
            /** True if the object is marked as DontDestroyOnLoad; otherwise false.
            * @param $flags The ObjectFlags to compute from (accessible via this).
            * @returns Returns true if the object associated with this ObjectFlags is marked as DontDestroyOnLoad. 
            */
            public static IsDontDestroyOnLoad ($flags: UnityEditor.Profiling.Memory.Experimental.ObjectFlags) : boolean
            /** True if the object is marked as Persistent, otherwise false.
            * @param $flags The ObjectFlags to operate on (accessible via this).
            * @returns Returns true if the object associated with this ObjectFlags is marked as Persistent. 
            */
            public static IsPersistent ($flags: UnityEditor.Profiling.Memory.Experimental.ObjectFlags) : boolean
            /** True if the object is a manager, otherwise false.
            * @param $flags The ObjectFlags to compute from (accessible via this).
            * @returns Returns true if the object associated with this ObjectFlags is a manager. 
            */
            public static IsManager ($flags: UnityEditor.Profiling.Memory.Experimental.ObjectFlags) : boolean
        }
        /** An extension class that contains member functions to TypeFlags.
        */
        class TypeFlagsExtensions extends System.Object
        {
            protected [__keep_incompatibility]: never;
            /** Returns whether the type describes a value type.
            * @param $flags The TypeFlags to compute from (accessible via this).
            * @returns Returns true if the type associated with this TypeFlags is a value type (as opposed to a reference type). 
            */
            public static IsValueType ($flags: UnityEditor.Profiling.Memory.Experimental.TypeFlags) : boolean
            /** Returns whether the flag describes an array type.
            * @param $flags The TypeFlags to compute from (accessible via this).
            * @returns Returns true if the Type associated with this TypeFlags is an array. 
            */
            public static IsArray ($flags: UnityEditor.Profiling.Memory.Experimental.TypeFlags) : boolean
            /** If the type is an array type, retrieves the array rank of the type flags.
            * @param $flags The TypeFlags to compute the array rank of (assessible via this).
            * @returns The array rank encoded in the Type Flags. 
            */
            public static ArrayRank ($flags: UnityEditor.Profiling.Memory.Experimental.TypeFlags) : number
        }
    }
    namespace UnityEditor.MemoryProfiler.PackedNativeUnityEngineObject {
        enum ObjectFlags
        { IsDontDestroyOnLoad = 1, IsPersistent = 2, IsManager = 4 }
    }
    namespace UnityEditor.MemoryProfiler.TypeDescription {
        enum TypeFlags
        { kNone = 0, kValueType = 1, kArray = 2, kArrayRankMask = -65536 }
    }
    namespace UnityEditor.Presets {
        /** A Preset contains default values for an Object.
        */
        class Preset extends UnityEngine.Object
        {
            protected [__keep_incompatibility]: never;
            /** Returns a copy of the PropertyModification array owned by this Preset.
            */
            public get PropertyModifications(): System.Array$1<UnityEditor.PropertyModification>;
            /** List of properties to ignore when applying the Preset to an object.
            */
            public get excludedProperties(): System.Array$1<string>;
            public set excludedProperties(value: System.Array$1<string>);
            /** Applies this Preset to the target object.
            * @param $target The target object that will be updated with the Preset serialized values.
            * @param $selectedPropertyPaths Optional list of property names that are applied to the target.
            * @returns Returns true if the target object was successfully updated by the Preset, false otherwise. 
            */
            public ApplyTo ($target: UnityEngine.Object) : boolean
            /** Applies this Preset to the target object.
            * @param $target The target object that will be updated with the Preset serialized values.
            * @param $selectedPropertyPaths Optional list of property names that are applied to the target.
            * @returns Returns true if the target object was successfully updated by the Preset, false otherwise. 
            */
            public ApplyTo ($target: UnityEngine.Object, $selectedPropertyPaths: System.Array$1<string>) : boolean
            /** Determines if the target object has the same serialized values as the Preset.
            * @param $target The target object to be compared against the Preset.
            * @returns Returns true when the target object has the same serialized values as the Preset. Otherwise, returns false. 
            */
            public DataEquals ($target: UnityEngine.Object) : boolean
            /** Updates this Preset's properties from the given Object's values. The given Object's type must match this Preset's type.
            * @param $source Used by the Preset to get its new serialized values.
            * @returns Returns true if the Preset was updated, false otherwise. 
            */
            public UpdateProperties ($source: UnityEngine.Object) : boolean
            /** Returns the PresetType of this Preset.
            */
            public GetPresetType () : UnityEditor.Presets.PresetType
            /** Returns a human readable string of this Preset's target fulltype, including namespace.
            * @returns Fullname of the Preset's target type. 
            */
            public GetTargetFullTypeName () : string
            /** Returns a human readable string of this Preset's target type.
            * @returns Fullname of the Preset's target type. 
            */
            public GetTargetTypeName () : string
            /** Returns true if the Preset type of this Preset is valid.
            */
            public IsValid () : boolean
            /** Returns true if this Preset can be applied to the target Object.
            */
            public CanBeAppliedTo ($target: UnityEngine.Object) : boolean
            /** Gets the ordered list of Presets that set its default values when applied to the target.
            * @param $target The object instance tested against each DefaultPreset.m_Filter search filter.
            * @returns Returns an ordered list of Presets that match the specified target. 
            */
            public static GetDefaultPresetsForObject ($target: UnityEngine.Object) : System.Array$1<UnityEditor.Presets.Preset>
            /** Returns all the PresetType that have at least one DefaultPreset entry in the default Presets list.
            */
            public static GetAllDefaultTypes () : System.Array$1<UnityEditor.Presets.PresetType>
            /** Gets an ordered list of DefaultPreset based on the specified PresetType.
            * @param $type A valid default PresetType.
            * @returns Returns a list of DefaultPreset from the PresetManager that match the specified PresetType. 
            */
            public static GetDefaultPresetsForType ($type: UnityEditor.Presets.PresetType) : System.Array$1<UnityEditor.Presets.DefaultPreset>
            /** Sets a default list of Presets with a filter for a specific PresetType.
            * @param $type A valid default PresetType.
            * @param $presets An ordered list of DefaultPreset.
            * @returns Returns true if the list was set as default. Returns false otherwise. 
            */
            public static SetDefaultPresetsForType ($type: UnityEditor.Presets.PresetType, $presets: System.Array$1<UnityEditor.Presets.DefaultPreset>) : boolean
            /** Remove the Preset type from having default values in the project.
            */
            public static RemoveFromDefault ($preset: UnityEditor.Presets.Preset) : void
            /** Returns true if the given target is a temporary UnityEngine.Object instance created from inside a PresetEditor.
            */
            public static IsEditorTargetAPreset ($target: UnityEngine.Object) : boolean
            public constructor ($source: UnityEngine.Object)
        }
        /** Stores a type to which a Preset can be applied.
        */
        class PresetType extends System.ValueType implements System.IEquatable$1<UnityEditor.Presets.PresetType>
        {
            protected [__keep_incompatibility]: never;
            public Equals ($obj: any) : boolean
            public static op_Equality ($a: UnityEditor.Presets.PresetType, $b: UnityEditor.Presets.PresetType) : boolean
            public static op_Inequality ($a: UnityEditor.Presets.PresetType, $b: UnityEditor.Presets.PresetType) : boolean
            /** Checks whether a PresetType corresponds with a valid native or managed class.
            * @returns Returns true if the PresetType is valid. Returns false otherwise. 
            */
            public IsValid () : boolean
            /** Checks whether a PresetType can be used within the DefaultPreset system.
            * @returns Returns true if the PresetType is a valid default type. Returns false otherwise. 
            */
            public IsValidDefault () : boolean
            /** Retrieves a human readable namespace and the name of the target class, regardless of whether it's a managed C# class or a native C++ class.
            * @returns Returns the full namespace and type of the target class. 
            */
            public GetManagedTypeName () : string
            public Equals ($other: UnityEditor.Presets.PresetType) : boolean
            public constructor ($o: UnityEngine.Object)
        }
        /** This structure defines a default Preset.
        See Preset.GetDefaultListForType and Preset.SetDefaultListForType for usage.
        */
        class DefaultPreset extends System.ValueType
        {
            protected [__keep_incompatibility]: never;
            /** The search filter that is compared against the object instance. The DefaultPreset.m_Preset is applied to the object instance if it matches the search filter.
            */
            public get filter(): string;
            public set filter(value: string);
            /** The Preset applied to an object instance when it matches the search filter defined by DefaultPreset.m_Filter.
            */
            public get preset(): UnityEditor.Presets.Preset;
            public set preset(value: UnityEditor.Presets.Preset);
            /** Set this value to false to disable this DefaultPreset setting from the default preset list without removing it.
            */
            public get enabled(): boolean;
            public set enabled(value: boolean);
            public constructor ($filter: string, $preset: UnityEditor.Presets.Preset)
            public constructor ($filter: string, $preset: UnityEditor.Presets.Preset, $enabled: boolean)
        }
    }
    namespace UnityEditor.PackageManager {
        /** Identifies the author of a package.
        */
        class AuthorInfo extends System.Object
        {
            protected [__keep_incompatibility]: never;
            /** The name of the author.
            */
            public get name(): string;
            /** The email address of the author (optional).
            */
            public get email(): string;
            /** The url address of the author (optional).
            */
            public get url(): string;
        }
        /** Utility class that allows packages to register build callbacks with the Unity Package Manager.
        */
        class BuildUtilities extends System.Object
        {
            protected [__keep_incompatibility]: never;
            /** Registers a callback object for a package.
            * @param $cb Object of a class that implements the IShouldIncludeInBuildCallback interface.
            */
            public static RegisterShouldIncludeInBuildCallback ($cb: UnityEditor.PackageManager.IShouldIncludeInBuildCallback) : void
        }
        interface IShouldIncludeInBuildCallback
        {
            /** The package name.
            */
            PackageName : string
            /** Determines whether to include a managed plugin in a build.
            * @param $path The absolute path of the managed plugin to include or exclude.
            * @returns Returns true to include the plugin identified by path in the build; otherwise, returns false. 
            */
            ShouldIncludeInBuild ($path: string) : boolean
        }
        /** Use the Unity Package Manager Client class to manage the packages used in a project.
        */
        class Client extends System.Object
        {
            protected [__keep_incompatibility]: never;
            /** Gets or sets the log level that the Package Manager uses when logging to the Editor.log and upm.log files. Defaults to LogLevel.Info.
            */
            public static get LogLevel(): UnityEditor.PackageManager.LogLevel;
            public static set LogLevel(value: UnityEditor.PackageManager.LogLevel);
            /** Lists the packages the project depends on.
            * @param $offlineMode Specifies whether or not the Package Manager requests the latest information about the project's packages from the remote Unity package registry. When offlineMode is true, the PackageManager.PackageInfo objects in the PackageCollection returned by the Package Manager contain information obtained from the local package cache, which could be out of date.
            * @param $includeIndirectDependencies Set to true to include indirect dependencies in the PackageCollection returned by the Package Manager. Indirect dependencies include packages referenced in the manifests of project packages or in the manifests of other indirect dependencies. Set to false to include only the packages listed directly in the project manifest.
            Note: The version reported might not match the version requested in the project manifest. For more information, see.
            * @returns A ListRequest instance, which you can use to get the PackageCollection representing the packages used in the project from the ListRequest.Result property. 
            */
            public static List ($offlineMode: boolean, $includeIndirectDependencies: boolean) : UnityEditor.PackageManager.Requests.ListRequest
            /** Lists the packages the project depends on.
            * @param $offlineMode Specifies whether or not the Package Manager requests the latest information about the project's packages from the remote Unity package registry. When offlineMode is true, the PackageManager.PackageInfo objects in the PackageCollection returned by the Package Manager contain information obtained from the local package cache, which could be out of date.
            * @param $includeIndirectDependencies Set to true to include indirect dependencies in the PackageCollection returned by the Package Manager. Indirect dependencies include packages referenced in the manifests of project packages or in the manifests of other indirect dependencies. Set to false to include only the packages listed directly in the project manifest.
            Note: The version reported might not match the version requested in the project manifest. For more information, see.
            * @returns A ListRequest instance, which you can use to get the PackageCollection representing the packages used in the project from the ListRequest.Result property. 
            */
            public static List ($offlineMode: boolean) : UnityEditor.PackageManager.Requests.ListRequest
            /** Lists the packages the project depends on.
            * @param $offlineMode Specifies whether or not the Package Manager requests the latest information about the project's packages from the remote Unity package registry. When offlineMode is true, the PackageManager.PackageInfo objects in the PackageCollection returned by the Package Manager contain information obtained from the local package cache, which could be out of date.
            * @param $includeIndirectDependencies Set to true to include indirect dependencies in the PackageCollection returned by the Package Manager. Indirect dependencies include packages referenced in the manifests of project packages or in the manifests of other indirect dependencies. Set to false to include only the packages listed directly in the project manifest.
            Note: The version reported might not match the version requested in the project manifest. For more information, see.
            * @returns A ListRequest instance, which you can use to get the PackageCollection representing the packages used in the project from the ListRequest.Result property. 
            */
            public static List () : UnityEditor.PackageManager.Requests.ListRequest
            /** Adds a package dependency to the project. Requesting a new or different dependency often leads to changing installed packages, but only after the Package Manager constructs a dependency graph to solve any version conflicts. For more information, see.
            * @param $identifier A string representing the package to be added:
            - To install a specific version of a package, use a package identifier ("name@version"). This is the only way to install a version.
            - To install the latest compatible (.
            - To install a git package, specify a.
            - To install a package, specify a value in the format "file:pathtopackagefolder".
            - To install a package, specify a value in the format "file:pathto/package-file.tgz".
            ArgumentException is thrown if identifier is null or empty.
            * @returns An AddRequest instance, which you can use to get the PackageManager.PackageInfo representing the package that was added to the project from the AddRequest.Result property. 
            */
            public static Add ($identifier: string) : UnityEditor.PackageManager.Requests.AddRequest
            /** Adds package dependencies to the project and removes package dependencies from the project. Requesting different dependencies often leads to changing installed packages, but only after the Package Manager constructs a dependency graph to solve any version conflicts. For more information, see.
            Calling this function is much more efficient than calling the Add and Remove functions several times because for this function, the Package Manager only has to solve the dependency list once, instead of constructing a new dependency graph after each call.
            * @param $packagesToAdd An array of strings representing the package(s) to be added:
            - To install a specific version of a package, use a package identifier ("name@version"). This is the only way to install a version.
            - To install the latest compatible (.
            - To install a git package, specify a.
            - To install a package, specify a value in the format "file:pathtopackagefolder".
            - To install a package, specify a value in the format "file:pathto/package-file.tgz".
            ArgumentException is thrown if packagesToAdd contains null or empty values.
            * @param $packagesToRemove An array of strings representing the names of package(s) to be removed.
            ArgumentException is thrown if packagesToRemove contains null or empty values.
            * @returns An AddAndRemoveRequest instance, which you can use to get the PackageCollection representing the package that were added and removed from the project from the AddAndRemoveRequest.Result property. 
            */
            public static AddAndRemove ($packagesToAdd?: System.Array$1<string>, $packagesToRemove?: System.Array$1<string>) : UnityEditor.PackageManager.Requests.AddAndRemoveRequest
            /** Empties the package cache.
            * @returns A ClearCacheRequest instance, which you can use to get the StatusCode to know if the operation completed successfully. 
            */
            public static ClearCache () : UnityEditor.PackageManager.Requests.ClearCacheRequest
            /**  a package inside the project.
            * @param $packageName The name of the package to embed. This package must be a direct dependency of the project. ArgumentException is thrown if packageName is null or empty.
            * @returns An EmbedRequest instance, which you can use to get the PackageManager.PackageInfo representing the embedded package from the EmbedRequest.Result property. 
            */
            public static Embed ($packageName: string) : UnityEditor.PackageManager.Requests.EmbedRequest
            /** Removes a package dependency from the project. Removing a dependency often leads to changing installed packages, but only after the Package Manager constructs a dependency graph to solve any version conflicts. For more information, see.
            * @param $packageName The name of the package to remove from the project.  ArgumentException is thrown if packageName is null or empty.
            * @returns A RemoveRequest instance, which you can use to get the success or failure of the Remove operation. 
            */
            public static Remove ($packageName: string) : UnityEditor.PackageManager.Requests.RemoveRequest
            /** Searches for the given package.
            * @param $packageIdOrName The or ID of the package. ArgumentException is thrown if packageIdOrName is null or empty.
            * @param $offlineMode Specifies whether or not the Package Manager requests the latest information about the project's packages from the remote Unity package registry. When offlineMode is true, the PackageManager.PackageInfo object returned by the Package Manager contains information obtained from the local package cache, which could be out of date.
            * @returns A SearchRequest instance, which you can use to get the array of PackageManager.PackageInfo objects representing the packages matching the search criteria from the SearchRequest.Result property. 
            */
            public static Search ($packageIdOrName: string, $offlineMode: boolean) : UnityEditor.PackageManager.Requests.SearchRequest
            /** Searches for the given package.
            * @param $packageIdOrName The or ID of the package. ArgumentException is thrown if packageIdOrName is null or empty.
            * @param $offlineMode Specifies whether or not the Package Manager requests the latest information about the project's packages from the remote Unity package registry. When offlineMode is true, the PackageManager.PackageInfo object returned by the Package Manager contains information obtained from the local package cache, which could be out of date.
            * @returns A SearchRequest instance, which you can use to get the array of PackageManager.PackageInfo objects representing the packages matching the search criteria from the SearchRequest.Result property. 
            */
            public static Search ($packageIdOrName: string) : UnityEditor.PackageManager.Requests.SearchRequest
            /** Searches for all discoverable packages compatible with the current Unity version.
            * @param $offlineMode Specifies whether or not the Package Manager requests the latest information about the project's packages from the remote Unity package registry. When offlineMode is true, the PackageManager.PackageInfo objects returned by the Package Manager contain information obtained from the local package cache, which could be out of date.
            * @returns A SearchRequest instance, which you can use to get the array of PackageManager.PackageInfo objects representing the packages matching the search criteria from the SearchRequest.Result property. 
            */
            public static SearchAll ($offlineMode: boolean) : UnityEditor.PackageManager.Requests.SearchRequest
            /** Searches for all discoverable packages compatible with the current Unity version.
            * @param $offlineMode Specifies whether or not the Package Manager requests the latest information about the project's packages from the remote Unity package registry. When offlineMode is true, the PackageManager.PackageInfo objects returned by the Package Manager contain information obtained from the local package cache, which could be out of date.
            * @returns A SearchRequest instance, which you can use to get the array of PackageManager.PackageInfo objects representing the packages matching the search criteria from the SearchRequest.Result property. 
            */
            public static SearchAll () : UnityEditor.PackageManager.Requests.SearchRequest
            /** Creates a GZip tarball file from a package folder. The format and content of the file is the same as if the package was published to a package registry.
            * @param $packageFolder Folder containing the package. ArgumentException is thrown if packageFolder is null or empty.
            * @param $targetFolder Folder where the Package Manager will write the GZip tarball file. The Package Manager will create this folder if it does not already exist. ArgumentException is thrown if targetFolder is null or empty.
            * @returns A PackRequest instance, which you can use to get the PackOperationResult representing the path of the generated tarball from the PackRequest.Result property. 
            */
            public static Pack ($packageFolder: string, $targetFolder: string) : UnityEditor.PackageManager.Requests.PackRequest
            /** Forces the Package Manager to resolve the project's packages, reinstalling any altered or missing package and removing extraneous packages.
            */
            public static Resolve () : void
        }
        /** A collection of PackageManager.PackageInfo objects that you can iterate over.
        */
        class PackageCollection extends System.Object implements System.Collections.Generic.IEnumerable$1<UnityEditor.PackageManager.PackageInfo>, System.Collections.IEnumerable
        {
            protected [__keep_incompatibility]: never;
            /** The error associated with the package collection.
            */
            public get error(): UnityEditor.PackageManager.Error;
        }
        /** Structure describing a Unity Package.
        */
        class PackageInfo extends System.Object
        {
            protected [__keep_incompatibility]: never;
            /** Identifier of the package.
            */
            public get packageId(): string;
            /** If the package is a direct dependency of the project.
            */
            public get isDirectDependency(): boolean;
            /** Version of the package.
            */
            public get version(): string;
            /** Source of the package contents.
            */
            public get source(): UnityEditor.PackageManager.PackageSource;
            /** The local path of the project on disk.
            */
            public get resolvedPath(): string;
            /** The asset path of the package in the AssetDatabase.
            */
            public get assetPath(): string;
            /** Unique name of the package.
            */
            public get name(): string;
            /** Friendly display name of the package.
            */
            public get displayName(): string;
            /** Category of the package.
            */
            public get category(): string;
            /** Type of the package.
            */
            public get type(): string;
            /** Detailed description of the package.
            */
            public get description(): string;
            /** The errors associated with the package.
            */
            public get errors(): System.Array$1<UnityEditor.PackageManager.Error>;
            /** A VersionsInfo instance containing information about the available versions of the package.
            */
            public get versions(): UnityEditor.PackageManager.VersionsInfo;
            /** An array of DependencyInfos listing all the packages this package directly depends on.
            */
            public get dependencies(): System.Array$1<UnityEditor.PackageManager.DependencyInfo>;
            /** An array of DependencyInfo instances listing all the packages this package directly or indirectly depends on and the versions they resolved to.
            */
            public get resolvedDependencies(): System.Array$1<UnityEditor.PackageManager.DependencyInfo>;
            /** An array of keywords associated with the package.
            */
            public get keywords(): System.Array$1<string>;
            /** An AuthorInfo instance of the author of the package.
            */
            public get author(): UnityEditor.PackageManager.AuthorInfo;
            /** The custom URL for documentation for the package.
            */
            public get documentationUrl(): string;
            /** The custom URL for the changelog for the package.
            */
            public get changelogUrl(): string;
            /** The custom URL for the licenses of a package.
            */
            public get licensesUrl(): string;
            /** The registry where the Package Manager might find this package.
            */
            public get registry(): UnityEditor.PackageManager.RegistryInfo;
            /** Set to `true` if the package version that this instance represents is deprecated.
            */
            public get isDeprecated(): boolean;
            /** Deprecation message for the version that this instance represents.
            */
            public get deprecationMessage(): string;
            /** The date and time at which the package was published.
            */
            public get datePublished(): System.DateTime | null;
            /** A GitInfo instance providing detailed information for a Git package.
            */
            public get git(): UnityEditor.PackageManager.GitInfo;
            /** A RepositoryInfo instance containing information the repository that the package is hosted on.
            */
            public get repository(): UnityEditor.PackageManager.RepositoryInfo;
            /** Retrieves information about the package containing an asset based on the path of that asset.
            * @param $assetPath The file path of the asset.
            * @returns The PackageManager.PackageInfo instance describing the package, or null if the asset is not in a package. 
            */
            public static FindForAssetPath ($assetPath: string) : UnityEditor.PackageManager.PackageInfo
            /** Retrieves information about the package based on the name of that package.
            * @param $name The package name to look for.
            * @returns The PackageManager.PackageInfo instance describing the package, or null if there is no registered package with the given name. 
            */
            public static FindForPackageName ($name: string) : UnityEditor.PackageManager.PackageInfo
            /** Retrieves information about the package containing an assembly, or the assembly definition used to build that assembly.
            * @param $assembly The assembly.
            * @returns The PackageManager.PackageInfo instance describing the package, or null if the assembly or its assembly definition is not in a package. 
            */
            public static FindForAssembly ($assembly: System.Reflection.Assembly) : UnityEditor.PackageManager.PackageInfo
            /** Retrieves information about all packages that are currently loaded.
            * @returns The array of PackageManager.PackageInfo instances describing each package. 
            */
            public static GetAllRegisteredPackages () : System.Array$1<UnityEditor.PackageManager.PackageInfo>
            /** Checks if a specific package is registered with the UnityEditor.AssetDatabase.
            * @param $name The name of the package to look for.
            * @returns Returns true if the named package is registered. 
            */
            public static IsPackageRegistered ($name: string) : boolean
        }
        /** Structure describing the result of a Client.Pack operation.
        */
        class PackOperationResult extends System.Object
        {
            protected [__keep_incompatibility]: never;
            /** The path to the file created by the Client.Pack operation.
            */
            public get tarballPath(): string;
        }
        /** Describes different levels of log information the Package Manager supports.
        */
        enum LogLevel
        { Error = 0, Warn = 1, Info = 2, Verbose = 3, Debug = 4, Silly = 5 }
        /** Structure describing dependencies to other packages in PackageInfo.
        */
        class DependencyInfo extends System.ValueType
        {
            protected [__keep_incompatibility]: never;
            /** The version of the dependency.
            */
            public get version(): string;
            /** The name of the dependency.
            */
            public get name(): string;
        }
        /** Structure describing the error of a package operation.
        */
        class Error extends System.Object
        {
            protected [__keep_incompatibility]: never;
            /** Numerical error code.
            */
            public get errorCode(): UnityEditor.PackageManager.ErrorCode;
            /** Error message or description.
            */
            public get message(): string;
        }
        /** Package operation Error.
        */
        enum ErrorCode
        { Unknown = 0, NotFound = 1, Forbidden = 2, InvalidParameter = 3, Conflict = 4, AggregateError = 5 }
        /** An Interface for accessing the package manager events.
        */
        class Events extends System.Object
        {
            protected [__keep_incompatibility]: never;
            public static add_registeringPackages ($value: System.Action$1<UnityEditor.PackageManager.PackageRegistrationEventArgs>) : void
            public static remove_registeringPackages ($value: System.Action$1<UnityEditor.PackageManager.PackageRegistrationEventArgs>) : void
            public static add_registeredPackages ($value: System.Action$1<UnityEditor.PackageManager.PackageRegistrationEventArgs>) : void
            public static remove_registeredPackages ($value: System.Action$1<UnityEditor.PackageManager.PackageRegistrationEventArgs>) : void
        }
        /** Structure describing the PackageManager.PackageInfo entries to register or unregister during the Package Manager registration process.
        */
        class PackageRegistrationEventArgs extends System.Object
        {
            protected [__keep_incompatibility]: never;
            /** A collection of PackageManager.PackageInfo entries to add during the Package Manager registration process.
            */
            public get added(): System.Collections.ObjectModel.ReadOnlyCollection$1<UnityEditor.PackageManager.PackageInfo>;
            /** A collection of PackageManager.PackageInfo entries to remove during the Package Manager registration process.
            */
            public get removed(): System.Collections.ObjectModel.ReadOnlyCollection$1<UnityEditor.PackageManager.PackageInfo>;
            /** A collection of PackageManager.PackageInfo entries describing packages to be overridden by another version during the Package Manager registration process.
            */
            public get changedFrom(): System.Collections.ObjectModel.ReadOnlyCollection$1<UnityEditor.PackageManager.PackageInfo>;
            /** A collection of PackageManager.PackageInfo entries describing packages that will override a previously registered version during the Package Manager registration process.
            */
            public get changedTo(): System.Collections.ObjectModel.ReadOnlyCollection$1<UnityEditor.PackageManager.PackageInfo>;
        }
        /** Identifies a specific revision for a using a Git commit hash.
        */
        class GitInfo extends System.Object
        {
            protected [__keep_incompatibility]: never;
            /** Returns the resolved Git commit hash for the requested revision for this package.
            */
            public get hash(): string;
            /** Returns the requested Git revision for the Git package.
            */
            public get revision(): string;
        }
        /** Source of packages.
        */
        enum PackageSource
        { Unknown = 0, Registry = 1, BuiltIn = 2, Embedded = 3, Local = 4, Git = 5, LocalTarball = 6 }
        /** Identifies the available versions of a package and which are the compatible, latest, and recommended versions.
        */
        class VersionsInfo extends System.Object
        {
            protected [__keep_incompatibility]: never;
            /** All available versions of the package.
            */
            public get all(): System.Array$1<string>;
            /** Versions of the package compatible with the current version of Unity.
            */
            public get compatible(): System.Array$1<string>;
            /** A version of the package recommended to use with the current version of Unity. If there is no recommended version, then this property is an empty string.
            */
            public get recommended(): string;
            /** Versions of the package that are deprecated.
            */
            public get deprecated(): System.Array$1<string>;
            /** Latest version of the package.
            */
            public get latest(): string;
            /** Latest version of the package compatible with the current version of Unity.
            */
            public get latestCompatible(): string;
        }
        /** Provides information about a package registry.
        */
        class RegistryInfo extends System.Object
        {
            protected [__keep_incompatibility]: never;
            /** The registry name.
            */
            public get name(): string;
            /** The registry URL.
            */
            public get url(): string;
            /** Whether this is the default, Unity registry or one of the scoped registries configured in the project manifest.
            */
            public get isDefault(): boolean;
        }
        /** Includes information about the repository that hosts the package.
        */
        class RepositoryInfo extends System.Object
        {
            protected [__keep_incompatibility]: never;
            /** The type of the repository, e.g. git.
            */
            public get type(): string;
            /** The url to the source code repository.
            */
            public get url(): string;
            /** The revision id corresponding to the package version.
            */
            public get revision(): string;
            /** The relative path to the package root in the repository, if it is different from the repository root.
            */
            public get path(): string;
        }
        /** Unity Package Manager operation status.
        */
        enum StatusCode
        { InProgress = 0, Success = 1, Failure = 2 }
    }
    namespace UnityEditor.PackageManager.Requests {
        /** Tracks the state of an asynchronous Unity Package Manager (Upm) server operation.
        */
        class Request extends System.Object implements UnityEngine.ISerializationCallbackReceiver
        {
            protected [__keep_incompatibility]: never;
            /** The request status.
            */
            public get Status(): UnityEditor.PackageManager.StatusCode;
            /** Whether the request is complete.
            */
            public get IsCompleted(): boolean;
            /** The error returned by the request, if any.
            */
            public get Error(): UnityEditor.PackageManager.Error;
        }
        class Request$1<T> extends UnityEditor.PackageManager.Requests.Request implements UnityEngine.ISerializationCallbackReceiver
        {
            protected [__keep_incompatibility]: never;
            public get Result(): T;
        }
        /** Represents an asynchronous request to list the packages in the project.
        */
        class ListRequest extends UnityEditor.PackageManager.Requests.Request$1<UnityEditor.PackageManager.PackageCollection> implements UnityEngine.ISerializationCallbackReceiver
        {
            protected [__keep_incompatibility]: never;
        }
        /** Represents an asynchronous request to add a package to the project.
        */
        class AddRequest extends UnityEditor.PackageManager.Requests.Request$1<UnityEditor.PackageManager.PackageInfo> implements UnityEngine.ISerializationCallbackReceiver
        {
            protected [__keep_incompatibility]: never;
        }
        /** Represents an asynchronous request to add package dependencies to the project and/or remove package dependencies from the project.
        */
        class AddAndRemoveRequest extends UnityEditor.PackageManager.Requests.Request$1<UnityEditor.PackageManager.PackageCollection> implements UnityEngine.ISerializationCallbackReceiver
        {
            protected [__keep_incompatibility]: never;
        }
        /** Represents an asynchronous request to clear the global package cache on the disk.
        */
        class ClearCacheRequest extends UnityEditor.PackageManager.Requests.Request implements UnityEngine.ISerializationCallbackReceiver
        {
            protected [__keep_incompatibility]: never;
        }
        /** Represents an asynchronous request to embed a package inside a project.
        */
        class EmbedRequest extends UnityEditor.PackageManager.Requests.Request$1<UnityEditor.PackageManager.PackageInfo> implements UnityEngine.ISerializationCallbackReceiver
        {
            protected [__keep_incompatibility]: never;
        }
        /** Represents an asynchronous request to remove a package from the project.
        */
        class RemoveRequest extends UnityEditor.PackageManager.Requests.Request implements UnityEngine.ISerializationCallbackReceiver
        {
            protected [__keep_incompatibility]: never;
            /** The package being removed by this request.
            */
            public get PackageIdOrName(): string;
        }
        /** Represents an asynchronous request to find a package.
        */
        class SearchRequest extends UnityEditor.PackageManager.Requests.Request$1<System.Array$1<UnityEditor.PackageManager.PackageInfo>> implements UnityEngine.ISerializationCallbackReceiver
        {
            protected [__keep_incompatibility]: never;
            /** The package id or name used in this search operation.
            */
            public get PackageIdOrName(): string;
        }
        /** Represents an asynchronous request to reset the project packages to the current Editor default configuration.
        */
        class ResetToEditorDefaultsRequest extends UnityEditor.PackageManager.Requests.Request implements UnityEngine.ISerializationCallbackReceiver
        {
            protected [__keep_incompatibility]: never;
        }
        /** Represents an asynchronous request to pack a package folder.
        */
        class PackRequest extends UnityEditor.PackageManager.Requests.Request$1<UnityEditor.PackageManager.PackOperationResult> implements UnityEngine.ISerializationCallbackReceiver
        {
            protected [__keep_incompatibility]: never;
        }
    }
    namespace UnityEditor.PackageManager.UI {
        /** Struct for Package Sample.
        */
        class Sample extends System.ValueType
        {
            protected [__keep_incompatibility]: never;
            /** The display name of the package sample.
            */
            public get displayName(): string;
            /** The description of the package sample.
            */
            public get description(): string;
            /** The full path to where the sample is on disk, inside the package that contains the sample.
            */
            public get resolvedPath(): string;
            /** The full path to where the sample will be imported, under the project assets folder.
            */
            public get importPath(): string;
            /** Indicates whether to show the import window when importing a sample that is an asset package (a .unitypackage file).
            */
            public get interactiveImport(): boolean;
            /** Indicates if the sample has already been imported.
            */
            public get isImported(): boolean;
            /** Finds a list of samples in a package based on a specific version.
            * @param $packageName The name of the package.
            * @param $packageVersion The version of the package.
            * @returns Returns a list of found samples. Returns an empty list if no samples were found. 
            */
            public static FindByPackage ($packageName: string, $packageVersion: string) : System.Collections.Generic.IEnumerable$1<UnityEditor.PackageManager.UI.Sample>
            public Import ($options?: UnityEditor.PackageManager.UI.Sample.ImportOptions) : boolean
        }
        interface IPackageManagerExtension
        {
            /** Creates the extension UI visual element.
            * @returns A visual element that represents the UI or null if none. 
            */
            CreateExtensionUI () : UnityEngine.UIElements.VisualElement
            /** Called by the Package Manager UI when the package selection changed.
            * @param $packageInfo The newly selected package information (can be null).
            */
            OnPackageSelectionChange ($packageInfo: UnityEditor.PackageManager.PackageInfo) : void
            /** Called by the Package Manager UI when a package is added or updated.
            * @param $packageInfo The package information.
            */
            OnPackageAddedOrUpdated ($packageInfo: UnityEditor.PackageManager.PackageInfo) : void
            /** Called by the Package Manager UI when a package is removed.
            * @param $packageInfo The package information.
            */
            OnPackageRemoved ($packageInfo: UnityEditor.PackageManager.PackageInfo) : void
        }
        /** Package Manager UI Extensions.
        */
        class PackageManagerExtensions extends System.Object
        {
            protected [__keep_incompatibility]: never;
            /** Registers a new Package Manager UI extension.
            * @param $extension A Package Manager UI extension.
            */
            public static RegisterExtension ($extension: UnityEditor.PackageManager.UI.IPackageManagerExtension) : void
        }
        class Window extends System.Object
        {
            protected [__keep_incompatibility]: never;
            public static Open ($packageToSelect: string) : void
        }
    }
    namespace UnityEditor.PackageManager.UI.Sample {
        enum ImportOptions
        { None = 0, OverridePreviousImports = 1, HideImportWindow = 2 }
    }
    namespace UnityEditor.Localization.Editor {
        class LocalizationAttribute extends System.Attribute implements System.Runtime.InteropServices._Attribute
        {
            protected [__keep_incompatibility]: never;
            public constructor ($locGroupName?: string)
        }
        class Localization extends System.Object
        {
            protected [__keep_incompatibility]: never;
        }
        /** While the instance alive, Localization System uses the dictionary for localization.
        */
        class LocalizationGroup extends System.Object implements System.IDisposable
        {
            protected [__keep_incompatibility]: never;
            /** Accessor of the current group name.
            */
            public get locGroupName(): string;
            /** Since the LocalizationGroup is IDisposable, Dispose can be called explicitly.
            */
            public Dispose () : void
            public constructor ()
            public constructor ($behaviour: UnityEngine.Behaviour)
            public constructor ($type: System.Type)
            public constructor ($obj: any)
        }
    }
    namespace UnityEditor.Purchasing {
        /** Editor API for the Unity Services editor feature. Normally Purchasing is enabled from the Services window, but if writing your own editor extension, this API can be used.
        */
        class PurchasingSettings extends System.Object
        {
            protected [__keep_incompatibility]: never;
            /** This Boolean field will cause the Purchasing feature in Unity to be enabled if true, or disabled if false.
            */
            public static get enabled(): boolean;
            public static set enabled(value: boolean);
        }
    }
    namespace UnityEditor.CrashReporting {
        /** Editor API for the Unity Services editor feature. Normally CrashReporting is enabled from the Services window, but if writing your own editor extension, this API can be used.
        */
        class CrashReportingSettings extends System.Object
        {
            protected [__keep_incompatibility]: never;
            /** This Boolean field will cause the CrashReporting feature in Unity to be enabled if true, or disabled if false.
            */
            public static get enabled(): boolean;
            public static set enabled(value: boolean);
            /** This Boolean field will cause the CrashReporting feature in Unity to capture exceptions that occur in the editor while running in Play mode if true, or ignore those errors if false.
            */
            public static get captureEditorExceptions(): boolean;
            public static set captureEditorExceptions(value: boolean);
            /** The Performance Reporting service will keep a buffer of up to the last X log messages (Debug.Log, etc) to send along with crash reports.  The default is 10 log messages, the max is 50. Set this to 0 to disable capture of logs with your crash reports.
            */
            public static get logBufferSize(): number;
            public static set logBufferSize(value: number);
        }
    }
    namespace UnityEditor.Analytics {
        /** Editor API for the Unity Services editor feature. Normally Analytics is enabled from the Services window, but if writing your own editor extension, this API can be used.
        */
        class AnalyticsSettings extends System.Object
        {
            protected [__keep_incompatibility]: never;
            /** If set to true, this Boolean field enables the Analytics feature in Unity. It disables the feature if it is set to false.
            */
            public static get enabled(): boolean;
            public static set enabled(value: boolean);
            /** Set to true for testing Analytics integration only within the Editor.
            */
            public static get testMode(): boolean;
            public static set testMode(value: boolean);
            /** Controls whether Unity initializes Analytics immediately on startup.
            */
            public static get initializeOnStartup(): boolean;
            public static set initializeOnStartup(value: boolean);
            /** Reports whether device stats are enabled at runtime.
            */
            public static get deviceStatsEnabledInBuild(): boolean;
            public static get packageRequiringCoreStatsPresent(): boolean;
            public static set packageRequiringCoreStatsPresent(value: boolean);
            /** Set the Analytics event end point.
            */
            public static get eventUrl(): string;
            public static set eventUrl(value: string);
            /** Set the Analytics config end point.
            */
            public static get configUrl(): string;
            public static set configUrl(value: string);
            /** Get the Analytics dashboard endpoint.
            */
            public static get dashboardUrl(): string;
            public static set dashboardUrl(value: string);
            public static add_OnRequireInBuildHandler ($value: UnityEditor.Analytics.AnalyticsSettings.RequireInBuildDelegate) : void
            public static remove_OnRequireInBuildHandler ($value: UnityEditor.Analytics.AnalyticsSettings.RequireInBuildDelegate) : void
        }
        /** Normally performance reporting is enabled from the Services window, but if writing your own editor extension, this API can be used.
        */
        class PerformanceReportingSettings extends System.Object
        {
            protected [__keep_incompatibility]: never;
            /** This Boolean field causes the performance reporting feature in Unity to be enabled if true, or disabled if false.
            */
            public static get enabled(): boolean;
            public static set enabled(value: boolean);
        }
    }
    namespace UnityEditor.Analytics.AnalyticsSettings {
        interface RequireInBuildDelegate
        { 
        () : boolean; 
        Invoke?: () => boolean;
        }
        var RequireInBuildDelegate: { new (func: () => boolean): RequireInBuildDelegate; }
    }
    namespace UnityEditor.Advertisements {
        /** Editor API for the Unity Services editor feature. Normally UnityAds is enabled from the Services window, but if writing your own editor extension, this API can be used.
        */
        class AdvertisementSettings extends System.Object
        {
            protected [__keep_incompatibility]: never;
            /** Global boolean for enabling or disabling the advertisement feature.
            */
            public static get enabled(): boolean;
            public static set enabled(value: boolean);
            /** Controls if testing advertisements are used instead of production advertisements.
            */
            public static get testMode(): boolean;
            public static set testMode(value: boolean);
            /** Controls if the advertisement system should be initialized immediately on startup.
            */
            public static get initializeOnStartup(): boolean;
            public static set initializeOnStartup(value: boolean);
            /** Gets the game identifier specified for a runtime platform.
            * @returns The platform specific game identifier. 
            */
            public static GetGameId ($platform: UnityEngine.RuntimePlatform) : string
            /** Sets the game identifier for the specified platform.
            */
            public static SetGameId ($platform: UnityEngine.RuntimePlatform, $gameId: string) : void
            /** Gets the game identifier specified for a runtime platform.
            * @returns The platform specific game identifier. 
            */
            public static GetPlatformGameId ($platformName: string) : string
            /** Sets the game identifier for the specified platform.
            */
            public static SetPlatformGameId ($platformName: string, $gameId: string) : void
        }
    }
    namespace UnityEditor.VersionControl.Asset {
        enum States
        { None = 0, Local = 1, Synced = 2, OutOfSync = 4, Missing = 8, CheckedOutLocal = 16, CheckedOutRemote = 32, DeletedLocal = 64, DeletedRemote = 128, AddedLocal = 256, AddedRemote = 512, Conflicted = 1024, LockedLocal = 2048, LockedRemote = 4096, Updating = 8192, ReadOnly = 16384, MetaFile = 32768, MovedLocal = 65536, MovedRemote = 131072, Unversioned = 262144, Exclusive = 524288 }
    }
    namespace UnityEditor.VersionControl.Message {
        enum Severity
        { Data = 0, Verbose = 1, Info = 2, Warning = 3, Error = 4 }
    }
    namespace UnityEditor.VersionControl.Provider {
        interface PreSubmitCallback
        { 
        (list: UnityEditor.VersionControl.AssetList, changesetID: $Ref<string>, changesetDescription: $Ref<string>) : boolean; 
        Invoke?: (list: UnityEditor.VersionControl.AssetList, changesetID: $Ref<string>, changesetDescription: $Ref<string>) => boolean;
        }
        var PreSubmitCallback: { new (func: (list: UnityEditor.VersionControl.AssetList, changesetID: $Ref<string>, changesetDescription: $Ref<string>) => boolean): PreSubmitCallback; }
        interface PreCheckoutCallback
        { 
        (list: UnityEditor.VersionControl.AssetList, changesetID: $Ref<string>, changesetDescription: $Ref<string>) : boolean; 
        Invoke?: (list: UnityEditor.VersionControl.AssetList, changesetID: $Ref<string>, changesetDescription: $Ref<string>) => boolean;
        }
        var PreCheckoutCallback: { new (func: (list: UnityEditor.VersionControl.AssetList, changesetID: $Ref<string>, changesetDescription: $Ref<string>) => boolean): PreCheckoutCallback; }
    }
    namespace UnityEditor.Events {
        /** Editor tools for working with persistent UnityEvents.
        */
        class UnityEventTools extends System.Object
        {
            protected [__keep_incompatibility]: never;
            /** Adds a persistent call to the listener. Will be invoked with the arguments as defined by the Event and sent from the call location.
            * @param $unityEvent Event to modify.
            * @param $call Function to call.
            */
            public static AddPersistentListener ($unityEvent: UnityEngine.Events.UnityEventBase) : void
            /** Removes the given function from the event.
            * @param $unityEvent Event to modify.
            * @param $index Index to remove (if specified).
            * @param $call Function to remove (if specified).
            */
            public static RemovePersistentListener ($unityEvent: UnityEngine.Events.UnityEventBase, $index: number) : void
            /** Adds a persistent call to the listener. Will be invoked with the arguments as defined by the Event and sent from the call location.
            * @param $unityEvent Event to modify.
            * @param $call Function to call.
            */
            public static AddPersistentListener ($unityEvent: UnityEngine.Events.UnityEvent, $call: UnityEngine.Events.UnityAction) : void
            /** Modifies the event at the given index.
            * @param $unityEvent Event to modify.
            * @param $index Index to modify.
            * @param $call Function to call.
            */
            public static RegisterPersistentListener ($unityEvent: UnityEngine.Events.UnityEvent, $index: number, $call: UnityEngine.Events.UnityAction) : void
            /** Removes the given function from the event.
            * @param $unityEvent Event to modify.
            * @param $index Index to remove (if specified).
            * @param $call Function to remove (if specified).
            */
            public static RemovePersistentListener ($unityEvent: UnityEngine.Events.UnityEventBase, $call: UnityEngine.Events.UnityAction) : void
            /** Unregisters the given listener at the specified index.
            * @param $unityEvent Event to modify.
            * @param $index Index to unregister.
            */
            public static UnregisterPersistentListener ($unityEvent: UnityEngine.Events.UnityEventBase, $index: number) : void
            /** Adds a persistent, preset call to the listener.
            * @param $unityEvent Event to modify.
            * @param $call Function to call.
            */
            public static AddVoidPersistentListener ($unityEvent: UnityEngine.Events.UnityEventBase, $call: UnityEngine.Events.UnityAction) : void
            /** Modifies the event at the given index.
            * @param $unityEvent Event to modify.
            * @param $index Index to modify.
            * @param $call Function to call.
            */
            public static RegisterVoidPersistentListener ($unityEvent: UnityEngine.Events.UnityEventBase, $index: number, $call: UnityEngine.Events.UnityAction) : void
            public static AddIntPersistentListener ($unityEvent: UnityEngine.Events.UnityEventBase, $call: UnityEngine.Events.UnityAction$1<number>, $argument: number) : void
            public static RegisterIntPersistentListener ($unityEvent: UnityEngine.Events.UnityEventBase, $index: number, $call: UnityEngine.Events.UnityAction$1<number>, $argument: number) : void
            public static AddFloatPersistentListener ($unityEvent: UnityEngine.Events.UnityEventBase, $call: UnityEngine.Events.UnityAction$1<number>, $argument: number) : void
            public static RegisterFloatPersistentListener ($unityEvent: UnityEngine.Events.UnityEventBase, $index: number, $call: UnityEngine.Events.UnityAction$1<number>, $argument: number) : void
            public static AddBoolPersistentListener ($unityEvent: UnityEngine.Events.UnityEventBase, $call: UnityEngine.Events.UnityAction$1<boolean>, $argument: boolean) : void
            public static RegisterBoolPersistentListener ($unityEvent: UnityEngine.Events.UnityEventBase, $index: number, $call: UnityEngine.Events.UnityAction$1<boolean>, $argument: boolean) : void
            public static AddStringPersistentListener ($unityEvent: UnityEngine.Events.UnityEventBase, $call: UnityEngine.Events.UnityAction$1<string>, $argument: string) : void
            public static RegisterStringPersistentListener ($unityEvent: UnityEngine.Events.UnityEventBase, $index: number, $call: UnityEngine.Events.UnityAction$1<string>, $argument: string) : void
            public static AddObjectPersistentListener ($unityEvent: UnityEngine.Events.UnityEventBase, $call: UnityEngine.Events.UnityAction$1<UnityEngine.Object>, $argument: UnityEngine.Object) : void
            public static RegisterObjectPersistentListener ($unityEvent: UnityEngine.Events.UnityEventBase, $index: number, $call: UnityEngine.Events.UnityAction$1<UnityEngine.Object>, $argument: UnityEngine.Object) : void
        }
    }
    namespace UnityEditor.Connect {
        class UnityOAuth extends System.Object
        {
            protected [__keep_incompatibility]: never;
            public static add_UserLoggedIn ($value: System.Action) : void
            public static remove_UserLoggedIn ($value: System.Action) : void
            public static add_UserLoggedOut ($value: System.Action) : void
            public static remove_UserLoggedOut ($value: System.Action) : void
            public static GetAuthorizationCodeAsync ($clientId: string, $callback: System.Action$1<UnityEditor.Connect.UnityOAuth.AuthCodeResponse>) : void
        }
    }
    namespace UnityEditor.Connect.UnityOAuth {
        class AuthCodeResponse extends System.ValueType
        {
            protected [__keep_incompatibility]: never;
            public get AuthCode(): string;
            public set AuthCode(value: string);
            public get Exception(): System.Exception;
            public set Exception(value: System.Exception);
        }
    }
    namespace UnityEditor.Sprites {
        /** Describes the final atlas texture.
        */
        class AtlasSettings extends System.ValueType
        {
            protected [__keep_incompatibility]: never;
            /** The format of the atlas texture.
            */
            public format : UnityEngine.TextureFormat
            /** Desired color space of the atlas.
            */
            public colorSpace : UnityEngine.ColorSpace
            /** Quality of atlas texture compression in the range [0..100].
            */
            public compressionQuality : number
            /** Filtering mode of the atlas texture.
            */
            public filterMode : UnityEngine.FilterMode
            /** Maximum width of the atlas texture.
            */
            public maxWidth : number
            /** Maximum height of the atlas texture.
            */
            public maxHeight : number
            /** The amount of extra padding between packed sprites.
            */
            public paddingPower : number
            /** Anisotropic filtering level of the atlas texture.
            */
            public anisoLevel : number
            /** Detemines if sprite atlas textures generate mipmaps.
            */
            public generateMipMaps : boolean
            /** Allows Sprite Packer to rotate/flip the Sprite to ensure optimal Packing.
            */
            public enableRotation : boolean
            /** Marks this atlas so that it contains textures that have been flagged for Alpha splitting when needed (for example ETC1 compression for textures with transparency).
            */
            public allowsAlphaSplitting : boolean
        }
        /** Current Sprite Packer job definition.
        */
        class PackerJob extends System.Object
        {
            protected [__keep_incompatibility]: never;
            /** Registers a new atlas.
            */
            public AddAtlas ($atlasName: string, $settings: UnityEditor.Sprites.AtlasSettings) : void
            /** Assigns a Sprite to an already registered atlas.
            */
            public AssignToAtlas ($atlasName: string, $sprite: UnityEngine.Sprite, $packingMode: UnityEngine.SpritePackingMode, $packingRotation: UnityEngine.SpritePackingRotation) : void
        }
        /** Sprite Packer helpers.
        */
        class Packer extends System.Object
        {
            protected [__keep_incompatibility]: never;
            /** Array of Sprite atlas names found in the current atlas cache.
            */
            public static get atlasNames(): System.Array$1<string>;
            /** Returns all atlas textures generated for the specified atlas.
            * @param $atlasName Atlas name.
            */
            public static GetTexturesForAtlas ($atlasName: string) : System.Array$1<UnityEngine.Texture2D>
            /** Returns all alpha atlas textures generated for the specified atlas.
            * @param $atlasName Name of the atlas.
            */
            public static GetAlphaTexturesForAtlas ($atlasName: string) : System.Array$1<UnityEngine.Texture2D>
            /** Returns atlasing data for the specified Sprite.
            * @param $sprite Sprite to query.
            * @param $atlasName Gets set to the name of the atlas containing the specified Sprite.
            * @param $atlasTexture Gets set to the Texture containing the specified Sprite.
            */
            public static GetAtlasDataForSprite ($sprite: UnityEngine.Sprite, $atlasName: $Ref<string>, $atlasTexture: $Ref<UnityEngine.Texture2D>) : void
            public constructor ()
        }
        /** Helper utilities for accessing Sprite data.
        */
        class SpriteUtility extends System.Object
        {
            protected [__keep_incompatibility]: never;
            /** Returns the generated Sprite texture. If Sprite is packed, it is possible to query for both source and atlas textures.
            * @param $getAtlasData If Sprite is packed, it is possible to access data as if it was on the atlas texture.
            */
            public static GetSpriteTexture ($sprite: UnityEngine.Sprite, $getAtlasData: boolean) : UnityEngine.Texture2D
            /** Returns the generated Sprite mesh uvs.
            * @param $sprite If Sprite is packed, it is possible to access data as if it was on the atlas texture.
            */
            public static GetSpriteUVs ($sprite: UnityEngine.Sprite, $getAtlasData: boolean) : System.Array$1<UnityEngine.Vector2>
            public constructor ()
        }
        class DataUtility extends System.Object
        {
            protected [__keep_incompatibility]: never;
            public constructor ()
        }
    }
    namespace UnityEditor.ShaderKeywordFilter {
        /** Whether shader keyword filter attributes include the keywords, remove the keywords or do nothing, based on the attribute condition evaluation.
        */
        enum FilterAction
        { Select = 0, Remove = 1, SelectOrRemove = 2 }
        /** Tell the shader system which shader keywords to include or remove from the build, based on the data field underneath.
        */
        class FilterAttribute extends System.Attribute implements System.Runtime.InteropServices._Attribute
        {
            protected [__keep_incompatibility]: never;
            public constructor ($action: UnityEditor.ShaderKeywordFilter.FilterAction, $precedence: UnityEditor.ShaderKeywordFilter.FilterAttribute.Precedence, $evaluationMode: UnityEditor.ShaderKeywordFilter.FilterAttribute.EvaluationMode, $condition: any, $fileName: string, $lineNumber: number, ...keywordNames: string[])
        }
        /** Include only the specified shader keywords in the build if the data field matches the condition.
        */
        class SelectIfAttribute extends UnityEditor.ShaderKeywordFilter.FilterAttribute implements System.Runtime.InteropServices._Attribute
        {
            protected [__keep_incompatibility]: never;
            public constructor ($condition: any, $overridePriority?: boolean, $filePath?: string, $lineNumber?: number, ...keywordNames: string[])
            public constructor ($action: UnityEditor.ShaderKeywordFilter.FilterAction, $precedence: UnityEditor.ShaderKeywordFilter.FilterAttribute.Precedence, $evaluationMode: UnityEditor.ShaderKeywordFilter.FilterAttribute.EvaluationMode, $condition: any, $fileName: string, $lineNumber: number, ...keywordNames: string[])
        }
        /** Remove the specified shader keywords from the build if the data field matches the condition.
        */
        class RemoveIfAttribute extends UnityEditor.ShaderKeywordFilter.FilterAttribute implements System.Runtime.InteropServices._Attribute
        {
            protected [__keep_incompatibility]: never;
            public constructor ($condition: any, $overridePriority?: boolean, $filePath?: string, $lineNumber?: number, ...keywordNames: string[])
            public constructor ($action: UnityEditor.ShaderKeywordFilter.FilterAction, $precedence: UnityEditor.ShaderKeywordFilter.FilterAttribute.Precedence, $evaluationMode: UnityEditor.ShaderKeywordFilter.FilterAttribute.EvaluationMode, $condition: any, $fileName: string, $lineNumber: number, ...keywordNames: string[])
        }
        /** Either include or remove the specified shader keywords in the build, depending on the data field underneath.
        */
        class SelectOrRemoveAttribute extends UnityEditor.ShaderKeywordFilter.FilterAttribute implements System.Runtime.InteropServices._Attribute
        {
            protected [__keep_incompatibility]: never;
            public constructor ($condition: any, $overridePriority?: boolean, $filePath?: string, $lineNumber?: number, ...keywordNames: string[])
            public constructor ($action: UnityEditor.ShaderKeywordFilter.FilterAction, $precedence: UnityEditor.ShaderKeywordFilter.FilterAttribute.Precedence, $evaluationMode: UnityEditor.ShaderKeywordFilter.FilterAttribute.EvaluationMode, $condition: any, $fileName: string, $lineNumber: number, ...keywordNames: string[])
        }
        /** Include only the specified shader keywords in the build if the data field doesn't match the condition.
        */
        class SelectIfNotAttribute extends UnityEditor.ShaderKeywordFilter.FilterAttribute implements System.Runtime.InteropServices._Attribute
        {
            protected [__keep_incompatibility]: never;
            public constructor ($condition: any, $overridePriority?: boolean, $filePath?: string, $lineNumber?: number, ...keywordNames: string[])
            public constructor ($action: UnityEditor.ShaderKeywordFilter.FilterAction, $precedence: UnityEditor.ShaderKeywordFilter.FilterAttribute.Precedence, $evaluationMode: UnityEditor.ShaderKeywordFilter.FilterAttribute.EvaluationMode, $condition: any, $fileName: string, $lineNumber: number, ...keywordNames: string[])
        }
        /** Remove the specified shader keywords from the build if the data field doesn't match the condition.
        */
        class RemoveIfNotAttribute extends UnityEditor.ShaderKeywordFilter.FilterAttribute implements System.Runtime.InteropServices._Attribute
        {
            protected [__keep_incompatibility]: never;
            public constructor ($condition: any, $overridePriority?: boolean, $filePath?: string, $lineNumber?: number, ...keywordNames: string[])
            public constructor ($action: UnityEditor.ShaderKeywordFilter.FilterAction, $precedence: UnityEditor.ShaderKeywordFilter.FilterAttribute.Precedence, $evaluationMode: UnityEditor.ShaderKeywordFilter.FilterAttribute.EvaluationMode, $condition: any, $fileName: string, $lineNumber: number, ...keywordNames: string[])
        }
        /** Either remove or include the specified shader keywords in the build, depending on the data field underneath.
        */
        class RemoveOrSelectAttribute extends UnityEditor.ShaderKeywordFilter.FilterAttribute implements System.Runtime.InteropServices._Attribute
        {
            protected [__keep_incompatibility]: never;
            public constructor ($condition: any, $overridePriority?: boolean, $filePath?: string, $lineNumber?: number, ...keywordNames: string[])
            public constructor ($action: UnityEditor.ShaderKeywordFilter.FilterAction, $precedence: UnityEditor.ShaderKeywordFilter.FilterAttribute.Precedence, $evaluationMode: UnityEditor.ShaderKeywordFilter.FilterAttribute.EvaluationMode, $condition: any, $fileName: string, $lineNumber: number, ...keywordNames: string[])
        }
        /** Enable or disable shader keyword filter attributes based on shader tags.
        */
        class TagConstraintAttribute extends System.Attribute implements System.Runtime.InteropServices._Attribute
        {
            protected [__keep_incompatibility]: never;
            public constructor ($negate: boolean, ...tags: string[])
        }
        /** Enable or disable shader keyword filter attributes based on shader tags.
        */
        class ApplyRulesIfTagsEqualAttribute extends UnityEditor.ShaderKeywordFilter.TagConstraintAttribute implements System.Runtime.InteropServices._Attribute
        {
            protected [__keep_incompatibility]: never;
            public constructor (...tags: string[])
            public constructor ($negate: boolean, ...tags: string[])
        }
        /** Enable or disable shader keyword filter attributes based on shader tags.
        */
        class ApplyRulesIfTagsNotEqualAttribute extends UnityEditor.ShaderKeywordFilter.TagConstraintAttribute implements System.Runtime.InteropServices._Attribute
        {
            protected [__keep_incompatibility]: never;
            public constructor (...tags: string[])
            public constructor ($negate: boolean, ...tags: string[])
        }
        /** Enable or disable shader keyword filter attributes based on the graphics API.
        */
        class GraphicsAPIConstraintAttribute extends System.Attribute implements System.Runtime.InteropServices._Attribute
        {
            protected [__keep_incompatibility]: never;
            public constructor ($negate: boolean, ...graphicsDeviceTypes: UnityEngine.Rendering.GraphicsDeviceType[])
        }
        /** Enable or disable shader keyword filter attributes based on the graphics API.
        */
        class ApplyRulesIfGraphicsAPIAttribute extends UnityEditor.ShaderKeywordFilter.GraphicsAPIConstraintAttribute implements System.Runtime.InteropServices._Attribute
        {
            protected [__keep_incompatibility]: never;
            public constructor (...graphicsDeviceTypes: UnityEngine.Rendering.GraphicsDeviceType[])
            public constructor ($negate: boolean, ...graphicsDeviceTypes: UnityEngine.Rendering.GraphicsDeviceType[])
        }
        /** Enable or disable shader keyword filter attributes based on the graphics API.
        */
        class ApplyRulesIfNotGraphicsAPIAttribute extends UnityEditor.ShaderKeywordFilter.GraphicsAPIConstraintAttribute implements System.Runtime.InteropServices._Attribute
        {
            protected [__keep_incompatibility]: never;
            public constructor (...graphicsDeviceTypes: UnityEngine.Rendering.GraphicsDeviceType[])
            public constructor ($negate: boolean, ...graphicsDeviceTypes: UnityEngine.Rendering.GraphicsDeviceType[])
        }
    }
    namespace UnityEditor.ShaderKeywordFilter.FilterAttribute {
        enum Precedence
        { Normal = 0, Override = 1 }
        enum EvaluationMode
        { Normal = 0, Negated = 1 }
    }
    namespace UnityEditor.SearchService {
        /** This attribute lets you register a custom advanced object selector.
        */
        class AdvancedObjectSelectorAttribute extends System.Attribute implements System.Runtime.InteropServices._Attribute, UnityEditor.SearchService.IAdvancedObjectSelectorAttribute
        {
            protected [__keep_incompatibility]: never;
            public constructor ($id: string, $displayName: string, $defaultPriority: number, $defaultActive?: boolean)
            public constructor ($id: string, $defaultPriority: number, $defaultActive?: boolean)
        }
        interface IAdvancedObjectSelectorAttribute
        {
        }
        /** This attribute lets you register a custom advanced object selector validator.
        */
        class AdvancedObjectSelectorValidatorAttribute extends System.Attribute implements System.Runtime.InteropServices._Attribute, UnityEditor.SearchService.IAdvancedObjectSelectorAttribute
        {
            protected [__keep_incompatibility]: never;
            public constructor ($id: string)
        }
        /** Struct containing the different parameters passed to the advanced object selector.
        */
        class AdvancedObjectSelectorParameters extends System.ValueType
        {
            protected [__keep_incompatibility]: never;
            /** The search context.
            */
            public get context(): UnityEditor.SearchService.ObjectSelectorSearchContext;
            /** Function to call when the advanced Object Selector is closed. Only available during SearchService.AdvancedObjectSelectorEventType.OpenAndSearch|AdvancedObjectSelectorEventType.OpenAndSearch.
            */
            public get selectorClosedHandler(): System.Action$2<UnityEngine.Object, boolean>;
            /** Function to call when tracking the selection in the advanced Object Selector. Only available during SearchService.AdvancedObjectSelectorEventType.OpenAndSearch|AdvancedObjectSelectorEventType.OpenAndSearch.
            */
            public get trackingHandler(): System.Action$1<UnityEngine.Object>;
            /** Search filter to use. Only available during SearchService.AdvancedObjectSelectorEventType.SetSearchFilter|AdvancedObjectSelectorEventType.SetSearchFilter.
            */
            public get searchFilter(): string;
        }
        /** A search context implementation for ObjectSelector search engines. All methods that are called on an ObjectSelector search engine, and expect a SearchService.ISearchContext, receive an object of this type.
        */
        class ObjectSelectorSearchContext extends System.Object implements UnityEditor.SearchService.ISearchContext
        {
            protected [__keep_incompatibility]: never;
            /** A unique identifier for this search context.
            */
            public get guid(): System.Guid;
            /** An enum that identifies the scope of the current search. This property is automatically set to SearchService.ObjectSelector.EngineScope.
            */
            public get engineScope(): UnityEditor.SearchService.SearchEngineScope;
            /** Identifies the currently selected object.
            */
            public get currentObject(): UnityEngine.Object;
            public set currentObject(value: UnityEngine.Object);
            /** When the object selector is opened from an Inspector, this property indicates which objects are currently being edited.
            */
            public get editedObjects(): System.Array$1<UnityEngine.Object>;
            public set editedObjects(value: System.Array$1<UnityEngine.Object>);
            /** An IEnumerable of types that contains the type constraints for this search.
            */
            public get requiredTypes(): System.Collections.Generic.IEnumerable$1<System.Type>;
            public set requiredTypes(value: System.Collections.Generic.IEnumerable$1<System.Type>);
            /** An IEnumerable of strings that contains the type name constraints for this search.
            */
            public get requiredTypeNames(): System.Collections.Generic.IEnumerable$1<string>;
            public set requiredTypeNames(value: System.Collections.Generic.IEnumerable$1<string>);
            /** Indicates which categories of objects are visible in the window. For example, GameObjects, Assets, or both.
            */
            public get visibleObjects(): UnityEditor.SearchService.VisibleObjects;
            public set visibleObjects(value: UnityEditor.SearchService.VisibleObjects);
            /** IEnumerable of integers that contains the instanceIds of objects that the search can include in its results.
            */
            public get allowedInstanceIds(): System.Collections.Generic.IEnumerable$1<number>;
            public set allowedInstanceIds(value: System.Collections.Generic.IEnumerable$1<number>);
            public constructor ()
        }
        interface ISearchContext
        {
            /** A unique identifier for this search context.
            */
            guid : System.Guid
            /** An enum that identifies the current search scope.
            */
            engineScope : UnityEditor.SearchService.SearchEngineScope
            /** IEnumerable of types that contains the type constraints for this search.
            */
            requiredTypes : System.Collections.Generic.IEnumerable$1<System.Type>
            /** An IEnumerable of strings that contains the type name constraints for this search.
            */
            requiredTypeNames : System.Collections.Generic.IEnumerable$1<string>
        }
        /** Enum that defines the type of events that are possible when calling a custom advanced object selector.
        */
        enum AdvancedObjectSelectorEventType
        { BeginSession = 0, EndSession = 1, OpenAndSearch = 2, SetSearchFilter = 3 }
        /** Use this API to select objects. Engines for this type of search implement the SearchService.IObjectSelectorEngine interface.
        */
        class ObjectSelector extends System.Object
        {
            protected [__keep_incompatibility]: never;
            /** A enum that indicates the search scope of ObjectSelector engines. Used by ObjectSelectorSearchContext.
            */
            public static EngineScope : UnityEditor.SearchService.SearchEngineScope
            /** Registers an ObjectSelector search engine dynamically.
            * @param $engine The ObjectSelector search engine to register.
            */
            public static RegisterEngine ($engine: UnityEditor.SearchService.IObjectSelectorEngine) : void
            /** Unregisters a dynamically registered engine.
            * @param $engine The ObjectSelector search engine to unregister.
            */
            public static UnregisterEngine ($engine: UnityEditor.SearchService.IObjectSelectorEngine) : void
        }
        /** An enumeration that contains the available search engine scopes.
        */
        enum SearchEngineScope
        { Scene = 0, Project = 1, ObjectSelector = 2 }
        interface IObjectSelectorEngine extends UnityEditor.SearchService.ISearchEngineBase, UnityEditor.SearchService.ISelectorEngine
        {
            /** The name displayed in the Preferences window in the Unity Editor. This name is used to store the active engine in the preferences.
            */
            name : string
            /** A function called at the beginning of a search session.
            * @param $context The search context.
            */
            BeginSession ($context: UnityEditor.SearchService.ISearchContext) : void
            /** A function called at the end of a search session.
            * @param $context The search context.
            */
            EndSession ($context: UnityEditor.SearchService.ISearchContext) : void
            /** A function called at the beginning of each search.
            * @param $context The search context.
            * @param $query The query string used for the search.
            */
            BeginSearch ($context: UnityEditor.SearchService.ISearchContext, $query: string) : void
            /** A function called at the end of a search.
            * @param $context The search context.
            */
            EndSearch ($context: UnityEditor.SearchService.ISearchContext) : void
            SelectObject ($context: UnityEditor.SearchService.ISearchContext, $onObjectSelectorClosed: System.Action$2<UnityEngine.Object, boolean>, $onObjectSelectedUpdated: System.Action$1<UnityEngine.Object>) : boolean
            /** This function is called when the initial search text for the object selector window is set.
            * @param $context The search context.
            * @param $searchFilter The search filter to set on the object selector window.
            */
            SetSearchFilter ($context: UnityEditor.SearchService.ISearchContext, $searchFilter: string) : void
        }
        interface ISearchEngineBase
        {
            /** The name displayed in the Preferences window in the Unity Editor. This name is used to store the active engine in the preferences.
            */
            name : string
            /** A function called at the beginning of a search session.
            * @param $context The search context.
            */
            BeginSession ($context: UnityEditor.SearchService.ISearchContext) : void
            /** A function called at the end of a search session.
            * @param $context The search context.
            */
            EndSession ($context: UnityEditor.SearchService.ISearchContext) : void
            /** A function called at the beginning of each search.
            * @param $context The search context.
            * @param $query The query string used for the search.
            */
            BeginSearch ($context: UnityEditor.SearchService.ISearchContext, $query: string) : void
            /** A function called at the end of a search.
            * @param $context The search context.
            */
            EndSearch ($context: UnityEditor.SearchService.ISearchContext) : void
        }
        interface ISelectorEngine extends UnityEditor.SearchService.ISearchEngineBase
        {
            /** The name displayed in the Preferences window in the Unity Editor. This name is used to store the active engine in the preferences.
            */
            name : string
            SelectObject ($context: UnityEditor.SearchService.ISearchContext, $onObjectSelectorClosed: System.Action$2<UnityEngine.Object, boolean>, $onObjectSelectedUpdated: System.Action$1<UnityEngine.Object>) : boolean
            /** This function is called when the initial search text for the object selector window is set.
            * @param $context The search context.
            * @param $searchFilter The search filter to set on the object selector window.
            */
            SetSearchFilter ($context: UnityEditor.SearchService.ISearchContext, $searchFilter: string) : void
            /** A function called at the beginning of a search session.
            * @param $context The search context.
            */
            BeginSession ($context: UnityEditor.SearchService.ISearchContext) : void
            /** A function called at the end of a search session.
            * @param $context The search context.
            */
            EndSession ($context: UnityEditor.SearchService.ISearchContext) : void
            /** A function called at the beginning of each search.
            * @param $context The search context.
            * @param $query The query string used for the search.
            */
            BeginSearch ($context: UnityEditor.SearchService.ISearchContext, $query: string) : void
            /** A function called at the end of a search.
            * @param $context The search context.
            */
            EndSearch ($context: UnityEditor.SearchService.ISearchContext) : void
        }
        /** A class attribute that allows you to define dynamic constraint on a MonoBehavior or ScriptableObject's field for the object selector.
        */
        class ObjectSelectorHandlerAttribute extends System.Attribute implements System.Runtime.InteropServices._Attribute
        {
            protected [__keep_incompatibility]: never;
            /** The attribute type.
            */
            public get attributeType(): System.Type;
            public constructor ($attributeType: System.Type)
        }
        /** A structure that contains information about an item that is about to be shown.
        */
        class ObjectSelectorTargetInfo extends System.ValueType
        {
            protected [__keep_incompatibility]: never;
            /** The object's global identifier. It is always valid.
            */
            public get globalObjectId(): UnityEditor.GlobalObjectId;
            /** If the object is already loaded in Unity, this is its instance. The instance can be null.
            */
            public get targetObject(): UnityEngine.Object;
            /** If the object is currently loaded in Unity, this is its underlying type. The type can be null.
            */
            public get type(): System.Type;
            /** Loads an object instance if it is not already loaded in Unity. This can return null if the object is part of a Scene or Prefab that is not loaded.
            * @returns The object instance. 
            */
            public LoadObject () : UnityEngine.Object
            public constructor ($globalObjectId: UnityEditor.GlobalObjectId, $targetObject?: UnityEngine.Object, $type?: System.Type)
        }
        /** A bit field that contains the different categories of object that the object selector window can display.
        */
        enum VisibleObjects
        { None = 0, Assets = 1, Scene = 2, All = 3 }
        /** Use this class attribute to register ObjectSelector search engines automatically. Search engines with this attribute must implement the SearchService.IObjectSelectorEngine interface.
        */
        class ObjectSelectorEngineAttribute extends System.Attribute implements System.Runtime.InteropServices._Attribute
        {
            protected [__keep_incompatibility]: never;
            public constructor ()
        }
        /** Use this API to select objects. Engines for this type of search implement the SearchService.IObjectSelectorEngine interface.
        */
        class ObjectSelectorSearch extends System.Object
        {
            protected [__keep_incompatibility]: never;
            /** A enum that indicates the search scope of ObjectSelectorSearch engines. Used by ObjectSelectorSearchContext.
            */
            public static EngineScope : UnityEditor.SearchService.SearchEngineScope
            /** Registers an ObjectSelector search engine dynamically.
            * @param $engine The ObjectSelector search engine to register.
            */
            public static RegisterEngine ($engine: UnityEditor.SearchService.IObjectSelectorEngine) : void
            /** Unregisters a dynamically registered engine.
            * @param $engine The ObjectSelector search engine to unregister.
            */
            public static UnregisterEngine ($engine: UnityEditor.SearchService.IObjectSelectorEngine) : void
        }
        /** Use this API to perform searches in the Project. Engines for this type of search implement the SearchService.IProjectSearchEngine interface.
        */
        class Project extends System.Object
        {
            protected [__keep_incompatibility]: never;
            /** A enum that indicates the search scope for Project engines. It is used by ProjectSearchContext.
            */
            public static EngineScope : UnityEditor.SearchService.SearchEngineScope
            /** Registers a Project search engine dynamically.
            * @param $engine The Project search engine to register.
            */
            public static RegisterEngine ($engine: UnityEditor.SearchService.IProjectSearchEngine) : void
            /** Unregisters a dynamically registered engine.
            * @param $engine The Project search engine to unregister.
            */
            public static UnregisterEngine ($engine: UnityEditor.SearchService.IProjectSearchEngine) : void
        }
        interface IProjectSearchEngine extends UnityEditor.SearchService.ISearchEngineBase, UnityEditor.SearchService.ISearchEngine$1<string>
        {
            /** The name displayed in the Preferences window in the Unity Editor. This name is used to store the active engine in the preferences.
            */
            name : string
            /** A function called at the beginning of a search session.
            * @param $context The search context.
            */
            BeginSession ($context: UnityEditor.SearchService.ISearchContext) : void
            /** A function called at the end of a search session.
            * @param $context The search context.
            */
            EndSession ($context: UnityEditor.SearchService.ISearchContext) : void
            /** A function called at the beginning of each search.
            * @param $context The search context.
            * @param $query The query string used for the search.
            */
            BeginSearch ($context: UnityEditor.SearchService.ISearchContext, $query: string) : void
            /** A function called at the end of a search.
            * @param $context The search context.
            */
            EndSearch ($context: UnityEditor.SearchService.ISearchContext) : void
        }
        interface ISearchEngine$1<T> extends UnityEditor.SearchService.ISearchEngineBase
        {
            /** The name displayed in the Preferences window in the Unity Editor. This name is used to store the active engine in the preferences.
            */
            name : string
            Search ($context: UnityEditor.SearchService.ISearchContext, $query: string, $asyncItemsReceived: System.Action$1<System.Collections.Generic.IEnumerable$1<T>>) : System.Collections.Generic.IEnumerable$1<T>
            /** A function called at the beginning of a search session.
            * @param $context The search context.
            */
            BeginSession ($context: UnityEditor.SearchService.ISearchContext) : void
            /** A function called at the end of a search session.
            * @param $context The search context.
            */
            EndSession ($context: UnityEditor.SearchService.ISearchContext) : void
            /** A function called at the beginning of each search.
            * @param $context The search context.
            * @param $query The query string used for the search.
            */
            BeginSearch ($context: UnityEditor.SearchService.ISearchContext, $query: string) : void
            /** A function called at the end of a search.
            * @param $context The search context.
            */
            EndSearch ($context: UnityEditor.SearchService.ISearchContext) : void
        }
        /** A class attribute that registers Project search engines automatically. Search engines with this attribute must implement the SearchService.IProjectSearchEngine interface.
        */
        class ProjectSearchEngineAttribute extends System.Attribute implements System.Runtime.InteropServices._Attribute
        {
            protected [__keep_incompatibility]: never;
            public constructor ()
        }
        /** A search context implementation for Project search engines. All methods that are called on a Project search engine, and expect a SearchService.ISearchContext, receive an object of this type.
        */
        class ProjectSearchContext extends System.Object implements UnityEditor.SearchService.ISearchContext
        {
            protected [__keep_incompatibility]: never;
            /** A unique identifier for this search context.
            */
            public get guid(): System.Guid;
            /** An enum that identifies the scope of the current search. This property is automatically set to SearchService.Project.EngineScope.
            */
            public get engineScope(): UnityEditor.SearchService.SearchEngineScope;
            /** An IEnumerable of types that contains the type constraints for this search.
            */
            public get requiredTypes(): System.Collections.Generic.IEnumerable$1<System.Type>;
            public set requiredTypes(value: System.Collections.Generic.IEnumerable$1<System.Type>);
            /** An IEnumerable of strings that contains the type name constraints for this search.
            */
            public get requiredTypeNames(): System.Collections.Generic.IEnumerable$1<string>;
            public set requiredTypeNames(value: System.Collections.Generic.IEnumerable$1<string>);
            public constructor ()
        }
        /** Use this API to perform searches in the Project. Engines for this type of search implement the SearchService.IProjectSearchEngine interface.
        */
        class ProjectSearch extends System.Object
        {
            protected [__keep_incompatibility]: never;
            /** A enum that indicates the search scope for ProjectSearch engines. It is used by ProjectSearchContext.
            */
            public static EngineScope : UnityEditor.SearchService.SearchEngineScope
            /** Registers a Project search engine dynamically.
            * @param $engine The Project search engine to register.
            */
            public static RegisterEngine ($engine: UnityEditor.SearchService.IProjectSearchEngine) : void
            /** Unregisters a dynamically registered engine.
            * @param $engine The Project search engine to unregister.
            */
            public static UnregisterEngine ($engine: UnityEditor.SearchService.IProjectSearchEngine) : void
        }
        /** Use this API to perform searches in the Scene. Engines for this type of search implement the SearchService.ISceneSearchEngine interface.
        */
        class Scene extends System.Object
        {
            protected [__keep_incompatibility]: never;
            /** A enum that indicates the search scope for Scene engines. It is used by SceneSearchContext.
            */
            public static EngineScope : UnityEditor.SearchService.SearchEngineScope
            /** Registers a Scene search engine dynamically.
            * @param $engine The Scene search engine to register.
            */
            public static RegisterEngine ($engine: UnityEditor.SearchService.ISceneSearchEngine) : void
            /** Unregisters a dynamically registered engine.
            * @param $engine The Scene search engine to unregister.
            */
            public static UnregisterEngine ($engine: UnityEditor.SearchService.ISceneSearchEngine) : void
        }
        interface ISceneSearchEngine extends UnityEditor.SearchService.ISearchEngineBase, UnityEditor.SearchService.IFilterEngine$1<UnityEditor.HierarchyProperty>
        {
            /** The name displayed in the Preferences window in the Unity Editor. This name is used to store the active engine in the preferences.
            */
            name : string
            /** A function called at the beginning of a search session.
            * @param $context The search context.
            */
            BeginSession ($context: UnityEditor.SearchService.ISearchContext) : void
            /** A function called at the end of a search session.
            * @param $context The search context.
            */
            EndSession ($context: UnityEditor.SearchService.ISearchContext) : void
            /** A function called at the beginning of each search.
            * @param $context The search context.
            * @param $query The query string used for the search.
            */
            BeginSearch ($context: UnityEditor.SearchService.ISearchContext, $query: string) : void
            /** A function called at the end of a search.
            * @param $context The search context.
            */
            EndSearch ($context: UnityEditor.SearchService.ISearchContext) : void
        }
        interface IFilterEngine$1<T> extends UnityEditor.SearchService.ISearchEngineBase
        {
            /** The name displayed in the Preferences window in the Unity Editor. This name is used to store the active engine in the preferences.
            */
            name : string
            Filter ($context: UnityEditor.SearchService.ISearchContext, $query: string, $objectToFilter: T) : boolean
            /** A function called at the beginning of a search session.
            * @param $context The search context.
            */
            BeginSession ($context: UnityEditor.SearchService.ISearchContext) : void
            /** A function called at the end of a search session.
            * @param $context The search context.
            */
            EndSession ($context: UnityEditor.SearchService.ISearchContext) : void
            /** A function called at the beginning of each search.
            * @param $context The search context.
            * @param $query The query string used for the search.
            */
            BeginSearch ($context: UnityEditor.SearchService.ISearchContext, $query: string) : void
            /** A function called at the end of a search.
            * @param $context The search context.
            */
            EndSearch ($context: UnityEditor.SearchService.ISearchContext) : void
        }
        /** A class attribute that registers Scene search engines automatically. Search engines with this attribute must implement the SearchService.ISceneSearchEngine interface.
        */
        class SceneSearchEngineAttribute extends System.Attribute implements System.Runtime.InteropServices._Attribute
        {
            protected [__keep_incompatibility]: never;
            public constructor ()
        }
        /** A search context implementation for Scene search engines. All methods that are called on a Scene search engine, and expect a SearchService.ISearchContext, receive an object of this type.
        */
        class SceneSearchContext extends System.Object implements UnityEditor.SearchService.ISearchContext
        {
            protected [__keep_incompatibility]: never;
            /** A unique identifier for this search context.
            */
            public get guid(): System.Guid;
            /** An enum that identifies the scope of the current search. This property is automatically set to SearchService.Scene.EngineScope.
            */
            public get engineScope(): UnityEditor.SearchService.SearchEngineScope;
            /** An IEnumerable of types that contains the type constraints for this search.
            */
            public get requiredTypes(): System.Collections.Generic.IEnumerable$1<System.Type>;
            public set requiredTypes(value: System.Collections.Generic.IEnumerable$1<System.Type>);
            /** An IEnumerable of strings that contains the type name constraints for this search.
            */
            public get requiredTypeNames(): System.Collections.Generic.IEnumerable$1<string>;
            public set requiredTypeNames(value: System.Collections.Generic.IEnumerable$1<string>);
            /** The root HierarchyProperty on which the search is started.
            */
            public get rootProperty(): UnityEditor.HierarchyProperty;
            public set rootProperty(value: UnityEditor.HierarchyProperty);
            public constructor ()
        }
        /** Use this API to perform searches in the Scene. Engines for this type of search implement the SearchService.ISceneSearchEngine interface.
        */
        class SceneSearch extends System.Object
        {
            protected [__keep_incompatibility]: never;
            /** A enum that indicates the search scope for SceneSearch engines. It is used by SceneSearchContext.
            */
            public static EngineScope : UnityEditor.SearchService.SearchEngineScope
            /** Registers a Scene search engine dynamically.
            * @param $engine The Scene search engine to register.
            */
            public static RegisterEngine ($engine: UnityEditor.SearchService.ISceneSearchEngine) : void
            /** Unregisters a dynamically registered engine.
            * @param $engine The Scene search engine to unregister.
            */
            public static UnregisterEngine ($engine: UnityEditor.SearchService.ISceneSearchEngine) : void
        }
    }
    namespace UnityEditor.Playables {
        /** Editor extensions for all types that implement IPlayableOutput.
        */
        class PlayableOutputEditorExtensions extends System.Object
        {
            protected [__keep_incompatibility]: never;
        }
        /** Editor utility functions for the Playable graph and its nodes.
        */
        class Utility extends System.Object
        {
            protected [__keep_incompatibility]: never;
            public static add_graphCreated ($value: System.Action$1<UnityEngine.Playables.PlayableGraph>) : void
            public static remove_graphCreated ($value: System.Action$1<UnityEngine.Playables.PlayableGraph>) : void
            public static add_destroyingGraph ($value: System.Action$1<UnityEngine.Playables.PlayableGraph>) : void
            public static remove_destroyingGraph ($value: System.Action$1<UnityEngine.Playables.PlayableGraph>) : void
            /** Returns all existing PlayableGraphs.
            */
            public static GetAllGraphs () : System.Array$1<UnityEngine.Playables.PlayableGraph>
        }
    }
    namespace UnityEditor.Profiling.FrameDataView {
        class MarkerMetadataInfo extends System.ValueType
        {
            protected [__keep_incompatibility]: never;
            public type : Unity.Profiling.LowLevel.ProfilerMarkerDataType
            public unit : Unity.Profiling.ProfilerMarkerDataUnit
            public name : string
        }
        class MarkerInfo extends System.ValueType
        {
            protected [__keep_incompatibility]: never;
            public id : number
            public category : number
            public flags : Unity.Profiling.LowLevel.MarkerFlags
            public name : string
            public metadataInfo : System.Array$1<UnityEditor.Profiling.FrameDataView.MarkerMetadataInfo>
        }
        class MethodInfo extends System.ValueType
        {
            protected [__keep_incompatibility]: never;
            public methodName : string
            public sourceFileName : string
            public sourceFileLine : number
        }
        class UnityObjectInfo extends System.ValueType
        {
            protected [__keep_incompatibility]: never;
            public get name(): string;
            public get nativeTypeIndex(): number;
            public get relatedGameObjectInstanceId(): number;
            public get allocationRootId(): bigint;
        }
        class UnityObjectNativeTypeInfo extends System.ValueType
        {
            protected [__keep_incompatibility]: never;
            public get name(): string;
            public get baseNativeTypeIndex(): number;
        }
        class GfxResourceInfo extends System.ValueType
        {
            protected [__keep_incompatibility]: never;
            public get relatedAllocationRootId(): bigint;
            public get relatedInstanceId(): number;
        }
    }
    namespace UnityEditor.Profiling.RawFrameDataView {
        class FlowEvent extends System.ValueType
        {
            protected [__keep_incompatibility]: never;
            public ParentSampleIndex : number
            public FlowId : number
            public FlowEventType : Unity.Profiling.ProfilerFlowEventType
        }
    }
    namespace UnityEditor.Networking.PlayerConnection {
        /** Miscellaneous helper methods for Networking.PlayerConnection.PlayerConnectionGUI.
        */
        class PlayerConnectionGUIUtility extends System.Object
        {
            protected [__keep_incompatibility]: never;
            public static GetConnectionState ($parentWindow: UnityEditor.EditorWindow, $connectedCallback?: System.Action$1<string>) : UnityEngine.Networking.PlayerConnection.IConnectionState
        }
        /** This class contains methods to draw IMGUI Editor UI that relates to the Player Connection.
        */
        class PlayerConnectionGUI extends System.Object
        {
            protected [__keep_incompatibility]: never;
            /** Display a drop-down button and menu for the user to choose and establish a connection to a Player.
            * @param $rect Where to draw the drop-down button.
            * @param $state The state for the connection that is used in the EditorWindow displaying this drop-down. Use Networking.PlayerConnection.PlayerConnectionGUIUtility.GetConnectionState to get a state in OnEnable and remember to dispose of that state in OnDisable.
            * @param $style Define the GUIStyle the drop-down button should be drawn in. A default drop-down button will be drawn if no style is specified.
            */
            public static ConnectionTargetSelectionDropdown ($rect: UnityEngine.Rect, $state: UnityEngine.Networking.PlayerConnection.IConnectionState, $style?: UnityEngine.GUIStyle) : void
        }
        /** This class contains methods to draw and automatically layout IMGUI Editor UI that relates to the Player Connection.
        */
        class PlayerConnectionGUILayout extends System.Object
        {
            protected [__keep_incompatibility]: never;
            public static ConnectionTargetSelectionDropdown ($state: UnityEngine.Networking.PlayerConnection.IConnectionState, $style?: UnityEngine.GUIStyle, $maxWidth?: number) : void
        }
        /** Information of the connected player.
        */
        class ConnectedPlayer extends System.Object
        {
            protected [__keep_incompatibility]: never;
            /** The ID of the player connected.
            */
            public get playerId(): number;
            /** The name of the connected player.
            */
            public get name(): string;
            public constructor ()
            public constructor ($playerId: number)
            public constructor ($playerId: number, $name: string)
        }
        /** Handles the connection from the Editor to the Player.
        */
        class EditorConnection extends UnityEditor.ScriptableSingleton$1<UnityEditor.Networking.PlayerConnection.EditorConnection> implements UnityEngine.Networking.PlayerConnection.IEditorPlayerConnection
        {
            protected [__keep_incompatibility]: never;
            /** A list of the connected Players.
            */
            public get ConnectedPlayers(): System.Collections.Generic.List$1<UnityEditor.Networking.PlayerConnection.ConnectedPlayer>;
            /** Initializes the EditorConnection.
            */
            public Initialize () : void
            public Register ($messageId: System.Guid, $callback: UnityEngine.Events.UnityAction$1<UnityEngine.Networking.PlayerConnection.MessageEventArgs>) : void
            public Unregister ($messageId: System.Guid, $callback: UnityEngine.Events.UnityAction$1<UnityEngine.Networking.PlayerConnection.MessageEventArgs>) : void
            public RegisterConnection ($callback: UnityEngine.Events.UnityAction$1<number>) : void
            public RegisterDisconnection ($callback: UnityEngine.Events.UnityAction$1<number>) : void
            public UnregisterConnection ($callback: UnityEngine.Events.UnityAction$1<number>) : void
            public UnregisterDisconnection ($callback: UnityEngine.Events.UnityAction$1<number>) : void
            /** Sends data to the connected Players.
            * @param $messageId The type ID of the message to send to the connected Players.
            * @param $playerId The ID of the Player that you want to sent this message to. If you want to send it to all Players, set this to 0.
            */
            public Send ($messageId: System.Guid, $data: System.Array$1<number>, $playerId: number) : void
            /** Sends data to the connected Players.
            * @param $messageId The type ID of the message to send to the connected Players.
            * @param $playerId The ID of the Player that you want to sent this message to. If you want to send it to all Players, set this to 0.
            */
            public Send ($messageId: System.Guid, $data: System.Array$1<number>) : void
            /** Attempts to send data from the Editor to the connected Players.
            * @param $messageId The type ID of the message to send to the connected Players.
            * @param $playerId The ID of the Player that you want to sent this message to. If you want to send it to all Players, set this to 0..
            * @returns Returns true when the Editor sends data successfully, and false when there is no space in the socket ring buffer or sending fails. 
            */
            public TrySend ($messageId: System.Guid, $data: System.Array$1<number>, $playerId: number) : boolean
            /** Attempts to send data from the Editor to the connected Players.
            * @param $messageId The type ID of the message to send to the connected Players.
            * @param $playerId The ID of the Player that you want to sent this message to. If you want to send it to all Players, set this to 0..
            * @returns Returns true when the Editor sends data successfully, and false when there is no space in the socket ring buffer or sending fails. 
            */
            public TrySend ($messageId: System.Guid, $data: System.Array$1<number>) : boolean
            /** Disconnects all of the active connections between the Editor and the Players.
            */
            public DisconnectAll () : void
            public constructor ()
        }
    }
    namespace UnityEditor.Media {
        /** Rational number useful for expressing fractions precisely.
        */
        class MediaRational extends System.ValueType
        {
            protected [__keep_incompatibility]: never;
            /** Invalid rational value.
            */
            public static Invalid : UnityEditor.Media.MediaRational
            /** Fraction numerator.
            */
            public numerator : number
            /** Fraction denominator.
            */
            public denominator : number
            /** The inverse of the rational number.
            */
            public get inverse(): UnityEditor.Media.MediaRational;
            /** Whether the rational number is valid.
            */
            public get isValid(): boolean;
            /** Whether the rational number is zero.
            */
            public get isZero(): boolean;
            /** Whether the rational number is negative.
            */
            public get isNegative(): boolean;
            /** Sets the numerator and denominator, performing normalization.
            * @param $numerator New value for the rational numerator.
            * @param $denominator New value for the rational denominator.
            */
            public Set ($numerator: number, $denominator?: number) : void
            public static op_Explicit ($r: UnityEditor.Media.MediaRational) : number
            public constructor ($numerator: number)
            public constructor ($numerator: number, $denominator: number)
        }
        /** Time representation for use with media containers.
        */
        class MediaTime extends System.ValueType
        {
            protected [__keep_incompatibility]: never;
            /** Invalid time value.
            */
            public static Invalid : UnityEditor.Media.MediaTime
            /** The sample count for the time value.
            */
            public get count(): bigint;
            public set count(value: bigint);
            /** The rate used for converting the count into seconds.
            */
            public get rate(): UnityEditor.Media.MediaRational;
            public set rate(value: UnityEditor.Media.MediaRational);
            public static op_Explicit ($t: UnityEditor.Media.MediaTime) : number
            public constructor ($seconds: bigint)
            public constructor ($count: bigint, $rateNumerator: number, $rateDenominator?: number)
        }
        /** Descriptor for H.264 encoder attributes.
        */
        class H264EncoderAttributes extends System.ValueType
        {
            protected [__keep_incompatibility]: never;
            /** The maximum size of a group of pictures, in frames.
            */
            public gopSize : number
            /** The maximum number of consecutive B frames between I and P frames.
            */
            public numConsecutiveBFrames : number
            /** The VideoEncodingProfile for the encoded video.
            */
            public profile : UnityEditor.VideoEncodingProfile
        }
        /** Descriptor for VP8 encoder attributes.
        */
        class VP8EncoderAttributes extends System.ValueType
        {
            protected [__keep_incompatibility]: never;
            /** The maximum distance between I-frames.
            */
            public keyframeDistance : number
        }
        /** Descriptor for video track format.
        */
        class VideoTrackEncoderAttributes extends System.ValueType
        {
            protected [__keep_incompatibility]: never;
            /** The frame rate for the encoded video, in frames per second, expressed as a fraction.
            */
            public frameRate : UnityEditor.Media.MediaRational
            /** The image width in pixels.
            */
            public width : number
            /** The image height in pixels.
            */
            public height : number
            /** The target bit rate for the encoder.
            */
            public targetBitRate : number
            /** The VideoBitrateMode for the encoded video.
            */
            public bitRateMode : UnityEditor.VideoBitrateMode
            /** True if the track is to include the alpha channel found in the texture passed to AddFrame. False otherwise.
            */
            public includeAlpha : boolean
            public constructor ($h264Attrs: UnityEditor.Media.H264EncoderAttributes)
            public constructor ($vp8Attrs: UnityEditor.Media.VP8EncoderAttributes)
        }
        /** Descriptor for audio track format.
        */
        class VideoTrackAttributes extends System.ValueType
        {
            protected [__keep_incompatibility]: never;
            /** Frames per second.
            */
            public frameRate : UnityEditor.Media.MediaRational
            /** Image width in pixels.
            */
            public width : number
            /** Image height in pixels.
            */
            public height : number
            /** True if the track is to include the alpha channel found in the texture passed to AddFrame. False otherwise.
            */
            public includeAlpha : boolean
            /** VideoBitrateMode for the encoded video.
            */
            public bitRateMode : UnityEditor.VideoBitrateMode
        }
        /** Descriptor for audio track format.
        */
        class AudioTrackAttributes extends System.ValueType
        {
            protected [__keep_incompatibility]: never;
            /** Audio sampling rate.
            */
            public sampleRate : UnityEditor.Media.MediaRational
            /** Number of channels.
            */
            public channelCount : number
            /** Dialogue language, if applicable.  Can be empty.
            */
            public language : string
        }
        /** Encodes images and audio samples into an audio or movie file.
        */
        class MediaEncoder extends System.Object implements System.IDisposable
        {
            protected [__keep_incompatibility]: never;
            public AddFrame ($width: number, $height: number, $rowBytes: number, $format: UnityEngine.TextureFormat, $data: Unity.Collections.NativeArray$1<number>) : boolean
            public AddFrame ($width: number, $height: number, $rowBytes: number, $format: UnityEngine.TextureFormat, $data: Unity.Collections.NativeArray$1<number>, $time: UnityEditor.Media.MediaTime) : boolean
            /** Appends a frame to the file's video track.
            * @param $texture Texture containing the pixels to be written into the track for the current frame.
            * @param $time Timestamp for the new frame.
            * @returns True if the operation succeeded. False otherwise. 
            */
            public AddFrame ($texture: UnityEngine.Texture2D) : boolean
            /** Appends a frame to the file's video track.
            * @param $texture Texture containing the pixels to be written into the track for the current frame.
            * @param $time Timestamp for the new frame.
            * @returns True if the operation succeeded. False otherwise. 
            */
            public AddFrame ($texture: UnityEngine.Texture2D, $time: UnityEditor.Media.MediaTime) : boolean
            public AddSamples ($trackIndex: number, $interleavedSamples: Unity.Collections.NativeArray$1<number>) : boolean
            public AddSamples ($interleavedSamples: Unity.Collections.NativeArray$1<number>) : boolean
            /** Finishes writing all tracks and closes the file being written.
            */
            public Dispose () : void
            public constructor ($filePath: string, $videoAttrs: UnityEditor.Media.VideoTrackAttributes, $audioAttrs: System.Array$1<UnityEditor.Media.AudioTrackAttributes>)
            public constructor ($filePath: string, $videoAttrs: UnityEditor.Media.VideoTrackEncoderAttributes, $audioAttrs: System.Array$1<UnityEditor.Media.AudioTrackAttributes>)
            public constructor ($filePath: string, $videoAttrs: UnityEditor.Media.VideoTrackEncoderAttributes, $audioAttrs: UnityEditor.Media.AudioTrackAttributes)
            public constructor ($filePath: string, $videoAttrs: UnityEditor.Media.VideoTrackEncoderAttributes)
            public constructor ($filePath: string, $videoAttrs: UnityEditor.Media.VideoTrackAttributes, $audioAttrs: UnityEditor.Media.AudioTrackAttributes)
            public constructor ($filePath: string, $videoAttrs: UnityEditor.Media.VideoTrackAttributes)
            public constructor ($filePath: string, $audioAttrs: System.Array$1<UnityEditor.Media.AudioTrackAttributes>)
            public constructor ($filePath: string, $audioAttrs: UnityEditor.Media.AudioTrackAttributes)
        }
    }
    namespace UnityEditor.Macros {
        class MacroEvaluator extends System.Object
        {
            protected [__keep_incompatibility]: never;
            public static Eval ($macro: string) : string
        }
        class MethodEvaluator extends System.Object
        {
            protected [__keep_incompatibility]: never;
            public static Eval ($assemblyFile: string, $typeName: string, $methodName: string, $paramTypes: System.Array$1<System.Type>, $args: System.Array$1<any>) : any
            public static ExecuteExternalCode ($parcel: string) : any
        }
    }
    namespace UnityEditor.AI {
        /** NavMesh utility functionality effective only in the Editor.
        */
        class NavMeshEditorHelpers extends System.Object
        {
            protected [__keep_incompatibility]: never;
            public static OpenAgentSettings ($agentTypeID: number) : void
            public static OpenAreaSettings () : void
            public static DrawAgentDiagram ($rect: UnityEngine.Rect, $agentRadius: number, $agentHeight: number, $agentClimb: number, $agentSlope: number) : void
            public static DrawBuildDebug ($navMeshData: UnityEngine.AI.NavMeshData) : void
            /** Displays in the Editor the precise intermediate data used during the build process of the specified NavMesh.
            * @param $navMeshData NavMesh object for which debug data has been deliberately collected during the build process.
            * @param $flags Bitmask that designates the types of data to show at one time.
            */
            public static DrawBuildDebug ($navMeshData: UnityEngine.AI.NavMeshData, $flags: UnityEngine.AI.NavMeshBuildDebugFlags) : void
        }
        /** Navigation mesh builder interface.
        */
        class NavMeshBuilder extends System.Object
        {
            protected [__keep_incompatibility]: never;
            public static get navMeshSettingsObject(): UnityEngine.Object;
            /** Returns true if an asynchronous build is still running. (UnityEditor)
            */
            public static get isRunning(): boolean;
            /** Build the Navmesh. (UnityEditor)
            */
            public static BuildNavMesh () : void
            /** Build the Navmesh Asyncronously. (UnityEditor)
            */
            public static BuildNavMeshAsync () : void
            /** Clear all Navmeshes. (UnityEditor)
            */
            public static ClearAllNavMeshes () : void
            /** Cancel Navmesh construction. (UnityEditor) Additional resources: NavMeshBuilder.BuildNavMeshAsync
            */
            public static Cancel () : void
            /** Builds the combined navmesh for the contents of multiple Scenes. (UnityEditor)
            * @param $paths Array of paths to Scenes that are used for building the navmesh.
            */
            public static BuildNavMeshForMultipleScenes ($paths: System.Array$1<string>) : void
            public static CollectSourcesInStage ($includedWorldBounds: UnityEngine.Bounds, $includedLayerMask: number, $geometry: UnityEngine.AI.NavMeshCollectGeometry, $defaultArea: number, $generateLinksByDefault: boolean, $markups: System.Collections.Generic.List$1<UnityEngine.AI.NavMeshBuildMarkup>, $includeOnlyMarkedObjects: boolean, $stageProxy: UnityEngine.SceneManagement.Scene, $results: System.Collections.Generic.List$1<UnityEngine.AI.NavMeshBuildSource>) : void
            public static CollectSourcesInStage ($includedWorldBounds: UnityEngine.Bounds, $includedLayerMask: number, $geometry: UnityEngine.AI.NavMeshCollectGeometry, $defaultArea: number, $markups: System.Collections.Generic.List$1<UnityEngine.AI.NavMeshBuildMarkup>, $stageProxy: UnityEngine.SceneManagement.Scene, $results: System.Collections.Generic.List$1<UnityEngine.AI.NavMeshBuildSource>) : void
            public static CollectSourcesInStage ($root: UnityEngine.Transform, $includedLayerMask: number, $geometry: UnityEngine.AI.NavMeshCollectGeometry, $defaultArea: number, $generateLinksByDefault: boolean, $markups: System.Collections.Generic.List$1<UnityEngine.AI.NavMeshBuildMarkup>, $includeOnlyMarkedObjects: boolean, $stageProxy: UnityEngine.SceneManagement.Scene, $results: System.Collections.Generic.List$1<UnityEngine.AI.NavMeshBuildSource>) : void
            public static CollectSourcesInStage ($root: UnityEngine.Transform, $includedLayerMask: number, $geometry: UnityEngine.AI.NavMeshCollectGeometry, $defaultArea: number, $markups: System.Collections.Generic.List$1<UnityEngine.AI.NavMeshBuildMarkup>, $stageProxy: UnityEngine.SceneManagement.Scene, $results: System.Collections.Generic.List$1<UnityEngine.AI.NavMeshBuildSource>) : void
            public constructor ()
        }
        /** Represents the visualization state of the navigation debug graphics.
        */
        class NavMeshVisualizationSettings extends System.Object
        {
            protected [__keep_incompatibility]: never;
            public constructor ()
        }
    }
    namespace UnityEditor.Hardware {
        class UsbDevice extends System.ValueType
        {
            protected [__keep_incompatibility]: never;
            public vendorId : number
            public productId : number
            public revision : number
            public udid : string
            public name : string
        }
        class Usb extends System.Object
        {
            protected [__keep_incompatibility]: never;
            public static add_DevicesChanged ($value: UnityEditor.Hardware.Usb.OnDevicesChangedHandler) : void
            public static remove_DevicesChanged ($value: UnityEditor.Hardware.Usb.OnDevicesChangedHandler) : void
            public static OnDevicesChanged ($devices: System.Array$1<UnityEditor.Hardware.UsbDevice>) : void
            public constructor ()
        }
        enum DevDeviceState
        { Disconnected = 0, Connected = 1 }
        enum DevDeviceFeatures
        { None = 0, PlayerConnection = 1, RemoteConnection = 2 }
        class DevDevice extends System.ValueType
        {
            protected [__keep_incompatibility]: never;
            public id : string
            public name : string
            public type : string
            public module : string
            public state : UnityEditor.Hardware.DevDeviceState
            public features : UnityEditor.Hardware.DevDeviceFeatures
            public get isConnected(): boolean;
            public static get none(): UnityEditor.Hardware.DevDevice;
            public constructor ($id: string, $name: string, $type: string, $module: string, $state: UnityEditor.Hardware.DevDeviceState, $features: UnityEditor.Hardware.DevDeviceFeatures)
        }
        class DevDeviceList extends System.Object
        {
            protected [__keep_incompatibility]: never;
            public static add_Changed ($value: UnityEditor.Hardware.DevDeviceList.OnChangedHandler) : void
            public static remove_Changed ($value: UnityEditor.Hardware.DevDeviceList.OnChangedHandler) : void
            public static OnChanged () : void
            public static FindDevice ($deviceId: string, $device: $Ref<UnityEditor.Hardware.DevDevice>) : boolean
            public static GetDevices () : System.Array$1<UnityEditor.Hardware.DevDevice>
            public constructor ()
        }
    }
    namespace UnityEditor.Hardware.Usb {
        interface OnDevicesChangedHandler
        { 
        (devices: System.Array$1<UnityEditor.Hardware.UsbDevice>) : void; 
        Invoke?: (devices: System.Array$1<UnityEditor.Hardware.UsbDevice>) => void;
        }
        var OnDevicesChangedHandler: { new (func: (devices: System.Array$1<UnityEditor.Hardware.UsbDevice>) => void): OnDevicesChangedHandler; }
    }
    namespace UnityEditor.Hardware.DevDeviceList {
        interface OnChangedHandler
        { 
        () : void; 
        Invoke?: () => void;
        }
        var OnChangedHandler: { new (func: () => void): OnChangedHandler; }
    }
    namespace UnityEditor.Toolbars {
        /** The EditorToolbarElement attribute allows you to make available a specific VisualElement for use in an Editor Toolbar.
        */
        class EditorToolbarElementAttribute extends System.Attribute implements System.Runtime.InteropServices._Attribute
        {
            protected [__keep_incompatibility]: never;
            /** Element's ID.
            */
            public get id(): string;
            /** Targeted contexts.
            */
            public get targetWindows(): System.Array$1<System.Type>;
            public constructor ($id: string, ...targetWindows: System.Type[])
        }
        interface IAccessContainerWindow
        {
            /** EditorToolbar's container EditorWindow.
            */
            containerWindow : UnityEditor.EditorWindow
        }
        /** Editor utility functions when working with EditorToolbar.
        */
        class EditorToolbarUtility extends System.Object
        {
            protected [__keep_incompatibility]: never;
            /** Assigns the required USS classes to child elements so that they appear as a single button strip.
            * @param $root Root VisualElement of the button strip.
            */
            public static SetupChildrenAsButtonStrip ($root: UnityEngine.UIElements.VisualElement) : void
        }
    }
    namespace UnityEditor.AnimatedValues {
        class BaseAnimValue$1<T> extends System.Object implements UnityEngine.ISerializationCallbackReceiver
        {
            protected [__keep_incompatibility]: never;
            public speed : number
            public valueChanged : UnityEngine.Events.UnityEvent
            public get isAnimating(): boolean;
            public get target(): T;
            public set target(value: T);
            public get value(): T;
            public set value(value: T);
        }
        class BaseAnimValueNonAlloc$1<T> extends UnityEditor.AnimatedValues.BaseAnimValue$1<T> implements UnityEngine.ISerializationCallbackReceiver
        {
            protected [__keep_incompatibility]: never;
        }
        /** An animated float value.
        */
        class AnimFloat extends UnityEditor.AnimatedValues.BaseAnimValueNonAlloc$1<number> implements UnityEngine.ISerializationCallbackReceiver
        {
            protected [__keep_incompatibility]: never;
            public constructor ($value: number)
            public constructor ($value: number, $callback: UnityEngine.Events.UnityAction)
        }
        /** An animated Vector3 value.
        */
        class AnimVector3 extends UnityEditor.AnimatedValues.BaseAnimValueNonAlloc$1<UnityEngine.Vector3> implements UnityEngine.ISerializationCallbackReceiver
        {
            protected [__keep_incompatibility]: never;
            public constructor ()
            public constructor ($value: UnityEngine.Vector3)
            public constructor ($value: UnityEngine.Vector3, $callback: UnityEngine.Events.UnityAction)
        }
        /** Lerp from 0 - 1.
        */
        class AnimBool extends UnityEditor.AnimatedValues.BaseAnimValueNonAlloc$1<boolean> implements UnityEngine.ISerializationCallbackReceiver
        {
            protected [__keep_incompatibility]: never;
            /** Retuns the float value of the tween.
            */
            public get faded(): number;
            /** Returns a value between from and to depending on the current value of the bools animation.
            * @param $from Value to lerp from.
            * @param $to Value to lerp to.
            */
            public Fade ($from: number, $to: number) : number
            public constructor ()
            public constructor ($value: boolean)
            public constructor ($callback: UnityEngine.Events.UnityAction)
            public constructor ($value: boolean, $callback: UnityEngine.Events.UnityAction)
        }
        /** An animated Quaternion value.
        */
        class AnimQuaternion extends UnityEditor.AnimatedValues.BaseAnimValueNonAlloc$1<UnityEngine.Quaternion> implements UnityEngine.ISerializationCallbackReceiver
        {
            protected [__keep_incompatibility]: never;
            public constructor ($value: UnityEngine.Quaternion)
            public constructor ($value: UnityEngine.Quaternion, $callback: UnityEngine.Events.UnityAction)
        }
    }
    namespace UnityEditor.UIElements {
        class UIElementsEntryPoint extends System.Object
        {
            protected [__keep_incompatibility]: never;
            public static SetAntiAliasing ($window: UnityEditor.EditorWindow, $aa: number) : void
            public static GetAntiAliasing ($window: UnityEditor.EditorWindow) : number
        }
        /** 
        Provides VisualElement extension methods that implement data binding between INotivyValueChanged fields and SerializedObjects.
        */
        class BindingExtensions extends System.Object
        {
            protected [__keep_incompatibility]: never;
            /** 
            USS class added to element when in prefab override mode.
            */
            public static prefabOverrideUssClassName : string
            /** 
            Binds a SerializedObject to fields in the element hierarchy.
            * @param $element Root VisualElement containing IBindable fields.
            * @param $obj Data object.
            */
            public static Bind ($element: UnityEngine.UIElements.VisualElement, $obj: UnityEditor.SerializedObject) : void
            /** 
            Disconnects all properties bound to fields in the element's hierarchy.
            * @param $element Root VisualElement containing IBindable fields.
            */
            public static Unbind ($element: UnityEngine.UIElements.VisualElement) : void
            /** 
            Binds a property to a field and synchronizes their values. This method finds the property using the field's binding path.
            * @param $field VisualElement field editing a property.
            * @param $obj Root SerializedObject containing the bindable property.
            * @returns The serialized object that owns the bound property. 
            */
            public static BindProperty ($field: UnityEngine.UIElements.IBindable, $obj: UnityEditor.SerializedObject) : UnityEditor.SerializedProperty
            /** 
            Binds a property to a field and synchronizes their values.
            * @param $field VisualElement field editing a property.
            * @param $property The SerializedProperty to bind.
            */
            public static BindProperty ($field: UnityEngine.UIElements.IBindable, $property: UnityEditor.SerializedProperty) : void
            public static TrackPropertyValue ($element: UnityEngine.UIElements.VisualElement, $property: UnityEditor.SerializedProperty, $callback?: System.Action$1<UnityEditor.SerializedProperty>) : void
            public static TrackSerializedObjectValue ($element: UnityEngine.UIElements.VisualElement, $obj: UnityEditor.SerializedObject, $callback?: System.Action$1<UnityEditor.SerializedObject>) : void
        }
        /** 
        An event sent when a value in a PropertyField changes.
        */
        class SerializedPropertyChangeEvent extends UnityEngine.UIElements.EventBase$1<UnityEditor.UIElements.SerializedPropertyChangeEvent> implements System.IDisposable
        {
            protected [__keep_incompatibility]: never;
            /** 
            The SerializedProperty whose value changed.
            */
            public get changedProperty(): UnityEditor.SerializedProperty;
            public set changedProperty(value: UnityEditor.SerializedProperty);
            /** 
            Gets an event from the event pool and initializes it with the values provided.
            Use this function instead of creating new events. Events obtained using this method need to be
            released back to the pool. You can use Dispose() to release them.
            * @param $value The SerializedProperty that changed.
            * @returns An initialized event. 
            */
            public static GetPooled ($value: UnityEditor.SerializedProperty) : UnityEditor.UIElements.SerializedPropertyChangeEvent
            public constructor ()
        }
        /** 
        An event sent when any value in a SerializedObject changes
        */
        class SerializedObjectChangeEvent extends UnityEngine.UIElements.EventBase$1<UnityEditor.UIElements.SerializedObjectChangeEvent> implements System.IDisposable
        {
            protected [__keep_incompatibility]: never;
            /** 
            The SerializedObject whose value changed.
            */
            public get changedObject(): UnityEditor.SerializedObject;
            public set changedObject(value: UnityEditor.SerializedObject);
            /** 
            Gets an event from the event pool and initializes it with the values provided. Use this function instead of
            creating new events. Events obtained using this method need to be released back to the pool.
            You can use Dispose() to release them.
            * @param $value The SerializedObject that changed.
            * @returns An initialized event. 
            */
            public static GetPooled ($value: UnityEditor.SerializedObject) : UnityEditor.UIElements.SerializedObjectChangeEvent
            public constructor ()
        }
        /** 
        Makes a field for selecting a color. For more information, refer to.
        */
        class ColorField extends UnityEngine.UIElements.BaseField$1<UnityEngine.Color> implements UnityEngine.UIElements.IStylePropertyAnimations, UnityEngine.UIElements.IVisualElementScheduler, UnityEngine.UIElements.Experimental.ITransitionAnimations, UnityEngine.UIElements.IResolvedStyle, UnityEngine.UIElements.IBindable, UnityEngine.UIElements.IExperimentalFeatures, UnityEngine.UIElements.IMixedValueSupport, UnityEngine.UIElements.INotifyValueChanged$1<UnityEngine.Color>, UnityEngine.UIElements.IPrefixLabel, UnityEngine.UIElements.ITransform, UnityEngine.UIElements.IEventHandler, UnityEngine.UIElements.IEditableElement
        {
            protected [__keep_incompatibility]: never;
            /** 
            USS class name of elements of this type.
            */
            public static ussClassName : string
            /** 
            USS class name of labels in elements of this type.
            */
            public static labelUssClassName : string
            /** 
            USS class name of input elements in elements of this type.
            */
            public static inputUssClassName : string
            /** 
            USS class name of color container elements in elements of this type.
            */
            public static colorContainerUssClassName : string
            /** 
            USS class name of color elements in elements of this type.
            */
            public static colorUssClassName : string
            /** 
            USS class name of color elements in elements of this type when showing mixed values.
            */
            public static mixedValueColorUssClassName : string
            /** 
            USS class name of eyedropper elements in elements of this type.
            */
            public static eyeDropperUssClassName : string
            /** 
            USS class name of hdr label elements in elements of this type.
            */
            public static hdrLabelUssClassName : string
            /** 
            USS class name of gradient container elements in elements of this type.
            */
            public static gradientContainerUssClassName : string
            /** 
            If true, the color picker will show the eyedropper control. If false, the color picker won't show the eyedropper control.
            */
            public get showEyeDropper(): boolean;
            public set showEyeDropper(value: boolean);
            /** 
            If true, allows the user to set an alpha value for the color. If false, hides the alpha component.
            */
            public get showAlpha(): boolean;
            public set showAlpha(value: boolean);
            /** 
            If true, treats the color as an HDR value. If false, treats the color as a standard LDR value.
            */
            public get hdr(): boolean;
            public set hdr(value: boolean);
            public constructor ()
            public constructor ($label: string)
            /** 
            Binds a property to a field and synchronizes their values. This method finds the property using the field's binding path.
            * @param $field VisualElement field editing a property.
            * @param $obj Root SerializedObject containing the bindable property.
            * @returns The serialized object that owns the bound property. 
            */
            public BindProperty ($obj: UnityEditor.SerializedObject) : UnityEditor.SerializedProperty
            /** 
            Binds a property to a field and synchronizes their values.
            * @param $field VisualElement field editing a property.
            * @param $property The SerializedProperty to bind.
            */
            public BindProperty ($property: UnityEditor.SerializedProperty) : void
        }
        /** 
        Makes a field for editing an AnimationCurve. For more information, refer to.
        */
        class CurveField extends UnityEngine.UIElements.BaseField$1<UnityEngine.AnimationCurve> implements UnityEngine.UIElements.IStylePropertyAnimations, UnityEngine.UIElements.IVisualElementScheduler, UnityEngine.UIElements.Experimental.ITransitionAnimations, UnityEngine.UIElements.IResolvedStyle, UnityEngine.UIElements.IBindable, UnityEngine.UIElements.IExperimentalFeatures, UnityEngine.UIElements.IMixedValueSupport, UnityEngine.UIElements.INotifyValueChanged$1<UnityEngine.AnimationCurve>, UnityEngine.UIElements.IPrefixLabel, UnityEngine.UIElements.ITransform, UnityEngine.UIElements.IEventHandler, UnityEngine.UIElements.IEditableElement
        {
            protected [__keep_incompatibility]: never;
            /** 
            USS class name of elements of this type.
            */
            public static ussClassName : string
            /** 
            USS class name of labels in elements of this type.
            */
            public static labelUssClassName : string
            /** 
            USS class name of input elements in elements of this type.
            */
            public static inputUssClassName : string
            /** 
            USS class name of content elements in elements of this type.
            */
            public static contentUssClassName : string
            /** 
            Optional rectangle that the curve is restrained within. If the range width or height is < 0 then CurveField computes an automatic range, which encompasses the whole curve.
            */
            public get ranges(): UnityEngine.Rect;
            public set ranges(value: UnityEngine.Rect);
            /** 
            The RenderMode of CurveField. The default is RenderMode.Default.
            */
            public get renderMode(): UnityEditor.UIElements.CurveField.RenderMode;
            public set renderMode(value: UnityEditor.UIElements.CurveField.RenderMode);
            public get value(): UnityEngine.AnimationCurve;
            public set value(value: UnityEngine.AnimationCurve);
            public constructor ()
            public constructor ($label: string)
            /** 
            Binds a property to a field and synchronizes their values. This method finds the property using the field's binding path.
            * @param $field VisualElement field editing a property.
            * @param $obj Root SerializedObject containing the bindable property.
            * @returns The serialized object that owns the bound property. 
            */
            public BindProperty ($obj: UnityEditor.SerializedObject) : UnityEditor.SerializedProperty
            /** 
            Binds a property to a field and synchronizes their values.
            * @param $field VisualElement field editing a property.
            * @param $property The SerializedProperty to bind.
            */
            public BindProperty ($property: UnityEditor.SerializedProperty) : void
        }
        class BaseMaskField$1<TChoice> extends UnityEngine.UIElements.BasePopupField$2<TChoice, string> implements UnityEngine.UIElements.IStylePropertyAnimations, UnityEngine.UIElements.IVisualElementScheduler, UnityEngine.UIElements.Experimental.ITransitionAnimations, UnityEngine.UIElements.IResolvedStyle, UnityEngine.UIElements.IBindable, UnityEngine.UIElements.IExperimentalFeatures, UnityEngine.UIElements.IMixedValueSupport, UnityEngine.UIElements.INotifyValueChanged$1<TChoice>, UnityEngine.UIElements.IPrefixLabel, UnityEngine.UIElements.ITransform, UnityEngine.UIElements.IEventHandler, UnityEngine.UIElements.IEditableElement
        {
            protected [__keep_incompatibility]: never;
            public get choices(): System.Collections.Generic.List$1<string>;
            public set choices(value: System.Collections.Generic.List$1<string>);
            public get choicesMasks(): System.Collections.Generic.List$1<number>;
            public set choicesMasks(value: System.Collections.Generic.List$1<number>);
            /** 
            Binds a property to a field and synchronizes their values. This method finds the property using the field's binding path.
            * @param $field VisualElement field editing a property.
            * @param $obj Root SerializedObject containing the bindable property.
            * @returns The serialized object that owns the bound property. 
            */
            public BindProperty ($obj: UnityEditor.SerializedObject) : UnityEditor.SerializedProperty
            /** 
            Binds a property to a field and synchronizes their values.
            * @param $field VisualElement field editing a property.
            * @param $property The SerializedProperty to bind.
            */
            public BindProperty ($property: UnityEditor.SerializedProperty) : void
        }
        /** 
        Makes a dropdown for switching between enum flag values that are marked with the Flags attribute.
        */
        class EnumFlagsField extends UnityEditor.UIElements.BaseMaskField$1<System.Enum> implements UnityEngine.UIElements.IStylePropertyAnimations, UnityEngine.UIElements.IVisualElementScheduler, UnityEngine.UIElements.Experimental.ITransitionAnimations, UnityEngine.UIElements.IResolvedStyle, UnityEngine.UIElements.IBindable, UnityEngine.UIElements.IExperimentalFeatures, UnityEngine.UIElements.IMixedValueSupport, UnityEngine.UIElements.INotifyValueChanged$1<System.Enum>, UnityEngine.UIElements.IPrefixLabel, UnityEngine.UIElements.ITransform, UnityEngine.UIElements.IEventHandler, UnityEngine.UIElements.IEditableElement
        {
            protected [__keep_incompatibility]: never;
            /** 
            USS class name for elements of this type.
            */
            public static ussClassName : string
            /** 
            USS class name for labels of this type.
            */
            public static labelUssClassName : string
            /** 
            USS class name for input elements of this type.
            */
            public static inputUssClassName : string
            /** 
            Initializes the EnumFlagsField with a default value, and initializes its underlying type.
            * @param $defaultValue The typed enum value.
            * @param $includeObsoleteValues Set to true to display obsolete values as choices.
            */
            public Init ($defaultValue: System.Enum, $includeObsoleteValues?: boolean) : void
            public constructor ($defaultValue: System.Enum)
            public constructor ($defaultValue: System.Enum, $includeObsoleteValues: boolean)
            public constructor ($label: string, $defaultValue: System.Enum)
            public constructor ()
            public constructor ($label: string, $defaultValue: System.Enum, $includeObsoleteValues: boolean)
            public constructor ($label: string)
            /** 
            Binds a property to a field and synchronizes their values. This method finds the property using the field's binding path.
            * @param $field VisualElement field editing a property.
            * @param $obj Root SerializedObject containing the bindable property.
            * @returns The serialized object that owns the bound property. 
            */
            public BindProperty ($obj: UnityEditor.SerializedObject) : UnityEditor.SerializedProperty
            /** 
            Binds a property to a field and synchronizes their values.
            * @param $field VisualElement field editing a property.
            * @param $property The SerializedProperty to bind.
            */
            public BindProperty ($property: UnityEditor.SerializedProperty) : void
        }
        /** 
        Makes a field for editing an Gradient. For more information, refer to.
        */
        class GradientField extends UnityEngine.UIElements.BaseField$1<UnityEngine.Gradient> implements UnityEngine.UIElements.IStylePropertyAnimations, UnityEngine.UIElements.IVisualElementScheduler, UnityEngine.UIElements.Experimental.ITransitionAnimations, UnityEngine.UIElements.IResolvedStyle, UnityEngine.UIElements.IBindable, UnityEngine.UIElements.IExperimentalFeatures, UnityEngine.UIElements.IMixedValueSupport, UnityEngine.UIElements.INotifyValueChanged$1<UnityEngine.Gradient>, UnityEngine.UIElements.IPrefixLabel, UnityEngine.UIElements.ITransform, UnityEngine.UIElements.IEventHandler, UnityEngine.UIElements.IEditableElement
        {
            protected [__keep_incompatibility]: never;
            /** 
            USS class name for elements of this type.
            */
            public static ussClassName : string
            /** 
            USS class name for labels in elements of this type.
            */
            public static labelUssClassName : string
            /** 
            USS class name for input elements in elements of this type.
            */
            public static inputUssClassName : string
            /** 
            USS class name for the content for the gradient visual in the GradientField element.
            */
            public static contentUssClassName : string
            /** 
            The Gradient currently being exposed by the field.
            */
            public get value(): UnityEngine.Gradient;
            public set value(value: UnityEngine.Gradient);
            /** 
            The color space currently used by the field.
            */
            public get colorSpace(): UnityEngine.ColorSpace;
            public set colorSpace(value: UnityEngine.ColorSpace);
            /** 
            If true, treats the color as an HDR value. If false, treats the color as a standard LDR value.
            */
            public get hdr(): boolean;
            public set hdr(value: boolean);
            public constructor ()
            public constructor ($label: string)
            /** 
            Binds a property to a field and synchronizes their values. This method finds the property using the field's binding path.
            * @param $field VisualElement field editing a property.
            * @param $obj Root SerializedObject containing the bindable property.
            * @returns The serialized object that owns the bound property. 
            */
            public BindProperty ($obj: UnityEditor.SerializedObject) : UnityEditor.SerializedProperty
            /** 
            Binds a property to a field and synchronizes their values.
            * @param $field VisualElement field editing a property.
            * @param $property The SerializedProperty to bind.
            */
            public BindProperty ($property: UnityEditor.SerializedProperty) : void
        }
        /** 
        A LayerField editor. For more information, refer to.
        */
        class LayerField extends UnityEngine.UIElements.PopupField$1<number> implements UnityEngine.UIElements.IStylePropertyAnimations, UnityEngine.UIElements.IVisualElementScheduler, UnityEngine.UIElements.Experimental.ITransitionAnimations, UnityEngine.UIElements.IResolvedStyle, UnityEngine.UIElements.IBindable, UnityEngine.UIElements.IExperimentalFeatures, UnityEngine.UIElements.IMixedValueSupport, UnityEngine.UIElements.INotifyValueChanged$1<number>, UnityEngine.UIElements.IPrefixLabel, UnityEngine.UIElements.ITransform, UnityEngine.UIElements.IEventHandler, UnityEngine.UIElements.IEditableElement
        {
            protected [__keep_incompatibility]: never;
            /** 
            USS class name of elements of this type.
            */
            public static ussClassName : string
            /** 
            USS class name of labels in elements of this type.
            */
            public static labelUssClassName : string
            /** 
            USS class name of input elements in elements of this type.
            */
            public static inputUssClassName : string
            public get value(): number;
            public set value(value: number);
            /** 
            Unsupported.
            */
            public get formatSelectedValueCallback(): System.Func$2<number, string>;
            public set formatSelectedValueCallback(value: System.Func$2<number, string>);
            /** 
            Unsupported.
            */
            public get formatListItemCallback(): System.Func$2<number, string>;
            public set formatListItemCallback(value: System.Func$2<number, string>);
            public constructor ($label: string)
            public constructor ()
            public constructor ($defaultValue: number)
            public constructor ($label: string, $defaultValue: number)
            /** 
            Binds a property to a field and synchronizes their values. This method finds the property using the field's binding path.
            * @param $field VisualElement field editing a property.
            * @param $obj Root SerializedObject containing the bindable property.
            * @returns The serialized object that owns the bound property. 
            */
            public BindProperty ($obj: UnityEditor.SerializedObject) : UnityEditor.SerializedProperty
            /** 
            Binds a property to a field and synchronizes their values.
            * @param $field VisualElement field editing a property.
            * @param $property The SerializedProperty to bind.
            */
            public BindProperty ($property: UnityEditor.SerializedProperty) : void
        }
        /** 
        Make a field for masks.
        */
        class MaskField extends UnityEditor.UIElements.BaseMaskField$1<number> implements UnityEngine.UIElements.IStylePropertyAnimations, UnityEngine.UIElements.IVisualElementScheduler, UnityEngine.UIElements.Experimental.ITransitionAnimations, UnityEngine.UIElements.IResolvedStyle, UnityEngine.UIElements.IBindable, UnityEngine.UIElements.IExperimentalFeatures, UnityEngine.UIElements.IMixedValueSupport, UnityEngine.UIElements.INotifyValueChanged$1<number>, UnityEngine.UIElements.IPrefixLabel, UnityEngine.UIElements.ITransform, UnityEngine.UIElements.IEventHandler, UnityEngine.UIElements.IEditableElement
        {
            protected [__keep_incompatibility]: never;
            /** 
            USS class name of elements of this type.
            */
            public static ussClassName : string
            /** 
            USS class name of labels in elements of this type.
            */
            public static labelUssClassName : string
            /** 
            USS class name of input elements in elements of this type.
            */
            public static inputUssClassName : string
            /** 
            Callback that provides a string representation used to display the selected value.
            */
            public get formatSelectedValueCallback(): System.Func$2<string, string>;
            public set formatSelectedValueCallback(value: System.Func$2<string, string>);
            /** 
            Callback that provides a string representation used to populate the popup menu.
            */
            public get formatListItemCallback(): System.Func$2<string, string>;
            public set formatListItemCallback(value: System.Func$2<string, string>);
            public constructor ($choices: System.Collections.Generic.List$1<string>, $defaultMask: number, $formatSelectedValueCallback?: System.Func$2<string, string>, $formatListItemCallback?: System.Func$2<string, string>)
            public constructor ($label: string, $choices: System.Collections.Generic.List$1<string>, $defaultMask: number, $formatSelectedValueCallback?: System.Func$2<string, string>, $formatListItemCallback?: System.Func$2<string, string>)
            public constructor ()
            public constructor ($label: string)
            /** 
            Binds a property to a field and synchronizes their values. This method finds the property using the field's binding path.
            * @param $field VisualElement field editing a property.
            * @param $obj Root SerializedObject containing the bindable property.
            * @returns The serialized object that owns the bound property. 
            */
            public BindProperty ($obj: UnityEditor.SerializedObject) : UnityEditor.SerializedProperty
            /** 
            Binds a property to a field and synchronizes their values.
            * @param $field VisualElement field editing a property.
            * @param $property The SerializedProperty to bind.
            */
            public BindProperty ($property: UnityEditor.SerializedProperty) : void
        }
        /** 
        A LayerMaskField editor. For more information, refer to.
        */
        class LayerMaskField extends UnityEditor.UIElements.MaskField implements UnityEngine.UIElements.IStylePropertyAnimations, UnityEngine.UIElements.IVisualElementScheduler, UnityEngine.UIElements.Experimental.ITransitionAnimations, UnityEngine.UIElements.IResolvedStyle, UnityEngine.UIElements.IBindable, UnityEngine.UIElements.IExperimentalFeatures, UnityEngine.UIElements.IMixedValueSupport, UnityEngine.UIElements.INotifyValueChanged$1<number>, UnityEngine.UIElements.IPrefixLabel, UnityEngine.UIElements.ITransform, UnityEngine.UIElements.IEventHandler, UnityEngine.UIElements.IEditableElement
        {
            protected [__keep_incompatibility]: never;
            /** 
            USS class name of elements of this type.
            */
            public static ussClassName : string
            /** 
            USS class name of labels in elements of this type.
            */
            public static labelUssClassName : string
            /** 
            USS class name of input elements in elements of this type.
            */
            public static inputUssClassName : string
            /** 
            Unsupported.
            */
            public get formatSelectedValueCallback(): System.Func$2<string, string>;
            public set formatSelectedValueCallback(value: System.Func$2<string, string>);
            /** 
            Unsupported.
            */
            public get formatListItemCallback(): System.Func$2<string, string>;
            public set formatListItemCallback(value: System.Func$2<string, string>);
            public constructor ($defaultMask: number)
            public constructor ($label: string, $defaultMask: number)
            public constructor ()
            public constructor ($label: string)
            public constructor ($choices: System.Collections.Generic.List$1<string>, $defaultMask: number, $formatSelectedValueCallback?: System.Func$2<string, string>, $formatListItemCallback?: System.Func$2<string, string>)
            public constructor ($label: string, $choices: System.Collections.Generic.List$1<string>, $defaultMask: number, $formatSelectedValueCallback?: System.Func$2<string, string>, $formatListItemCallback?: System.Func$2<string, string>)
        }
        /** 
        Makes a field to receive any object type. For more information, refer to.
        */
        class ObjectField extends UnityEngine.UIElements.BaseField$1<UnityEngine.Object> implements UnityEngine.UIElements.IStylePropertyAnimations, UnityEngine.UIElements.IVisualElementScheduler, UnityEngine.UIElements.Experimental.ITransitionAnimations, UnityEngine.UIElements.IResolvedStyle, UnityEngine.UIElements.IBindable, UnityEngine.UIElements.IExperimentalFeatures, UnityEngine.UIElements.IMixedValueSupport, UnityEngine.UIElements.INotifyValueChanged$1<UnityEngine.Object>, UnityEngine.UIElements.IPrefixLabel, UnityEngine.UIElements.ITransform, UnityEngine.UIElements.IEventHandler, UnityEngine.UIElements.IEditableElement
        {
            protected [__keep_incompatibility]: never;
            /** 
            USS class name of elements of this type.
            */
            public static ussClassName : string
            /** 
            USS class name of labels in elements of this type.
            */
            public static labelUssClassName : string
            /** 
            USS class name of input elements in elements of this type.
            */
            public static inputUssClassName : string
            /** 
            USS class name of object elements in elements of this type.
            */
            public static objectUssClassName : string
            /** 
            USS class name of selector elements in elements of this type.
            */
            public static selectorUssClassName : string
            /** 
            The type of the objects that can be assigned.
            */
            public get objectType(): System.Type;
            public set objectType(value: System.Type);
            /** 
            Allows scene objects to be assigned to the field.
            */
            public get allowSceneObjects(): boolean;
            public set allowSceneObjects(value: boolean);
            public constructor ()
            public constructor ($label: string)
            /** 
            Binds a property to a field and synchronizes their values. This method finds the property using the field's binding path.
            * @param $field VisualElement field editing a property.
            * @param $obj Root SerializedObject containing the bindable property.
            * @returns The serialized object that owns the bound property. 
            */
            public BindProperty ($obj: UnityEditor.SerializedObject) : UnityEditor.SerializedProperty
            /** 
            Binds a property to a field and synchronizes their values.
            * @param $field VisualElement field editing a property.
            * @param $property The SerializedProperty to bind.
            */
            public BindProperty ($property: UnityEditor.SerializedProperty) : void
        }
        /** 
        A SerializedProperty wrapper VisualElement that, on Bind(), will generate the correct field elements with the correct binding paths. For more information, refer to.
        */
        class PropertyField extends UnityEngine.UIElements.VisualElement implements UnityEngine.UIElements.IStylePropertyAnimations, UnityEngine.UIElements.IVisualElementScheduler, UnityEngine.UIElements.Experimental.ITransitionAnimations, UnityEngine.UIElements.IResolvedStyle, UnityEngine.UIElements.IBindable, UnityEngine.UIElements.IExperimentalFeatures, UnityEngine.UIElements.ITransform, UnityEngine.UIElements.IEventHandler
        {
            protected [__keep_incompatibility]: never;
            /** 
            USS class name of elements of this type.
            */
            public static ussClassName : string
            /** 
            USS class name of labels in elements of this type.
            */
            public static labelUssClassName : string
            /** 
            USS class name of input elements in elements of this type.
            */
            public static inputUssClassName : string
            /** 
            USS class name of property fields in inspector elements
            */
            public static inspectorElementUssClassName : string
            /** 
            Binding object that will be updated.
            */
            public get binding(): UnityEngine.UIElements.IBinding;
            public set binding(value: UnityEngine.UIElements.IBinding);
            /** 
            Path of the target property to be bound.
            */
            public get bindingPath(): string;
            public set bindingPath(value: string);
            /** 
            Optionally overwrite the label of the generate property field. If no label is provided the string will be taken from the SerializedProperty.
            */
            public get label(): string;
            public set label(value: string);
            public RegisterValueChangeCallback ($callback: UnityEngine.UIElements.EventCallback$1<UnityEditor.UIElements.SerializedPropertyChangeEvent>) : void
            public constructor ()
            public constructor ($property: UnityEditor.SerializedProperty)
            public constructor ($property: UnityEditor.SerializedProperty, $label: string)
            /** 
            Binds a property to a field and synchronizes their values. This method finds the property using the field's binding path.
            * @param $field VisualElement field editing a property.
            * @param $obj Root SerializedObject containing the bindable property.
            * @returns The serialized object that owns the bound property. 
            */
            public BindProperty ($obj: UnityEditor.SerializedObject) : UnityEditor.SerializedProperty
            /** 
            Binds a property to a field and synchronizes their values.
            * @param $field VisualElement field editing a property.
            * @param $property The SerializedProperty to bind.
            */
            public BindProperty ($property: UnityEditor.SerializedProperty) : void
        }
        /** 
        A TagField editor. For more information, refer to.
        */
        class TagField extends UnityEngine.UIElements.PopupField$1<string> implements UnityEngine.UIElements.IStylePropertyAnimations, UnityEngine.UIElements.IVisualElementScheduler, UnityEngine.UIElements.Experimental.ITransitionAnimations, UnityEngine.UIElements.IResolvedStyle, UnityEngine.UIElements.IBindable, UnityEngine.UIElements.IExperimentalFeatures, UnityEngine.UIElements.IMixedValueSupport, UnityEngine.UIElements.INotifyValueChanged$1<string>, UnityEngine.UIElements.IPrefixLabel, UnityEngine.UIElements.ITransform, UnityEngine.UIElements.IEventHandler, UnityEngine.UIElements.IEditableElement
        {
            protected [__keep_incompatibility]: never;
            /** 
            USS class name of elements of this type.
            */
            public static ussClassName : string
            /** 
            USS class name of labels in elements of this type.
            */
            public static labelUssClassName : string
            /** 
            USS class name of input elements in elements of this type.
            */
            public static inputUssClassName : string
            public get value(): string;
            public set value(value: string);
            /** 
            Unsupported.
            */
            public get formatSelectedValueCallback(): System.Func$2<string, string>;
            public set formatSelectedValueCallback(value: System.Func$2<string, string>);
            /** 
            Unsupported.
            */
            public get formatListItemCallback(): System.Func$2<string, string>;
            public set formatListItemCallback(value: System.Func$2<string, string>);
            public constructor ()
            public constructor ($label: string, $defaultValue?: string)
            /** 
            Binds a property to a field and synchronizes their values. This method finds the property using the field's binding path.
            * @param $field VisualElement field editing a property.
            * @param $obj Root SerializedObject containing the bindable property.
            * @returns The serialized object that owns the bound property. 
            */
            public BindProperty ($obj: UnityEditor.SerializedObject) : UnityEditor.SerializedProperty
            /** 
            Binds a property to a field and synchronizes their values.
            * @param $field VisualElement field editing a property.
            * @param $property The SerializedProperty to bind.
            */
            public BindProperty ($property: UnityEditor.SerializedProperty) : void
        }
        interface IToolbarMenuElement
        {
            /** 
            The drop-down menu for the element.
            */
            menu : UnityEngine.UIElements.DropdownMenu
        }
        interface IToolbarMenuElement {
            /** 
            Display the menu for the element.
            * @param $tbe The element that is part of the menu to be displayed.
            */
            ShowMenu () : void;
        }
        /** 
        An extension class that handles menu management for elements that are implemented with the IToolbarMenuElement interface, but are identical to DropdownMenu.
        */
        class ToolbarMenuElementExtensions extends System.Object
        {
            protected [__keep_incompatibility]: never;
            /** 
            Display the menu for the element.
            * @param $tbe The element that is part of the menu to be displayed.
            */
            public static ShowMenu ($tbe: UnityEditor.UIElements.IToolbarMenuElement) : void
        }
        class SearchFieldBase$2<TextInputType, T> extends UnityEngine.UIElements.VisualElement implements UnityEngine.UIElements.IStylePropertyAnimations, UnityEngine.UIElements.IVisualElementScheduler, UnityEngine.UIElements.Experimental.ITransitionAnimations, UnityEngine.UIElements.IResolvedStyle, UnityEngine.UIElements.IExperimentalFeatures, UnityEngine.UIElements.INotifyValueChanged$1<T>, UnityEngine.UIElements.ITransform, UnityEngine.UIElements.IEventHandler
        {
            protected [__keep_incompatibility]: never;
            public static ussClassName : any
            public static textUssClassName : any
            public static textInputUssClassName : any
            public static searchButtonUssClassName : any
            public static cancelButtonUssClassName : any
            public static cancelButtonOffVariantUssClassName : any
            public static popupVariantUssClassName : any
            public get value(): T;
            public set value(value: T);
            public SetValueWithoutNotify ($newValue: T) : void
        }
        /** 
        A toolbar for tool windows. For more information, refer to.
        */
        class Toolbar extends UnityEngine.UIElements.VisualElement implements UnityEngine.UIElements.IStylePropertyAnimations, UnityEngine.UIElements.IVisualElementScheduler, UnityEngine.UIElements.Experimental.ITransitionAnimations, UnityEngine.UIElements.IResolvedStyle, UnityEngine.UIElements.IExperimentalFeatures, UnityEngine.UIElements.ITransform, UnityEngine.UIElements.IEventHandler
        {
            protected [__keep_incompatibility]: never;
            /** 
            USS class name of elements of this type.
            */
            public static ussClassName : string
            public constructor ()
        }
        /** 
        Creates a breadcrumb UI element for the toolbar to help users navigate a hierarchy. For example, the visual scripting breadcrumb toolbar makes it easier to explore scripts because users can jump to any level of the script by clicking a breadcrumb item. For more information, refer to.
        */
        class ToolbarBreadcrumbs extends UnityEngine.UIElements.VisualElement implements UnityEngine.UIElements.IStylePropertyAnimations, UnityEngine.UIElements.IVisualElementScheduler, UnityEngine.UIElements.Experimental.ITransitionAnimations, UnityEngine.UIElements.IResolvedStyle, UnityEngine.UIElements.IExperimentalFeatures, UnityEngine.UIElements.ITransform, UnityEngine.UIElements.IEventHandler
        {
            protected [__keep_incompatibility]: never;
            /** 
            A Unity style sheet (USS) class for the main ToolbarBreadcrumbs container.
            */
            public static ussClassName : string
            /** 
            A Unity style sheet (USS) class for individual items in a breadcrumb toolbar.
            */
            public static itemClassName : string
            /** 
            A Unity style sheet (USS) class for the first element or item in a breadcrumb toolbar.
            */
            public static firstItemClassName : string
            /** 
            Adds an item to the end of the breadcrumbs, which makes that item the deepest item in the hierarchy.
            * @param $label The text to display for the item in the breadcrumb toolbar.
            * @param $clickedEvent The action to perform when the a users clicks the item in the toolbar.
            */
            public PushItem ($label: string, $clickedEvent?: System.Action) : void
            /** 
            Removes the last item in the breadcrumb toolbar, which is the deepest item in the hierarchy.
            */
            public PopItem () : void
            public constructor ()
        }
        /** 
        A button for the toolbar. For more information, refer to.
        */
        class ToolbarButton extends UnityEngine.UIElements.Button implements UnityEngine.UIElements.IStylePropertyAnimations, UnityEngine.UIElements.IVisualElementScheduler, UnityEngine.UIElements.ITextElement, UnityEngine.UIElements.Experimental.ITransitionAnimations, UnityEngine.UIElements.IResolvedStyle, UnityEngine.UIElements.IBindable, UnityEngine.UIElements.IExperimentalFeatures, UnityEngine.UIElements.INotifyValueChanged$1<string>, UnityEngine.UIElements.ITextEdition, UnityEngine.UIElements.ITransform, UnityEngine.UIElements.ITextElementExperimentalFeatures, UnityEngine.UIElements.IEventHandler, UnityEngine.UIElements.ITextSelection
        {
            protected [__keep_incompatibility]: never;
            /** 
            USS class name of elements of this type.
            */
            public static ussClassName : string
            public constructor ($clickEvent: System.Action)
            public constructor ()
        }
        /** 
        A drop-down menu for the toolbar. For more information, refer to.
        */
        class ToolbarMenu extends UnityEngine.UIElements.TextElement implements UnityEngine.UIElements.IStylePropertyAnimations, UnityEngine.UIElements.IVisualElementScheduler, UnityEngine.UIElements.ITextElement, UnityEngine.UIElements.Experimental.ITransitionAnimations, UnityEngine.UIElements.IResolvedStyle, UnityEngine.UIElements.IBindable, UnityEngine.UIElements.IExperimentalFeatures, UnityEngine.UIElements.INotifyValueChanged$1<string>, UnityEngine.UIElements.ITextEdition, UnityEngine.UIElements.ITransform, UnityEngine.UIElements.ITextElementExperimentalFeatures, UnityEngine.UIElements.IEventHandler, UnityEngine.UIElements.ITextSelection, UnityEditor.UIElements.IToolbarMenuElement
        {
            protected [__keep_incompatibility]: never;
            /** 
            USS class name of elements of this type.
            */
            public static ussClassName : string
            /** 
            USS class name of elements of this type, when they are displayed as popup menu.
            */
            public static popupVariantUssClassName : string
            /** 
            USS class name of text elements in elements of this type.
            */
            public static textUssClassName : string
            /** 
            USS class name of arrow indicators in elements of this type.
            */
            public static arrowUssClassName : string
            /** 
            The menu.
            */
            public get menu(): UnityEngine.UIElements.DropdownMenu;
            public get text(): string;
            public set text(value: string);
            /** 
            The display styles that you can use when creating menus.
            */
            public get variant(): UnityEditor.UIElements.ToolbarMenu.Variant;
            public set variant(value: UnityEditor.UIElements.ToolbarMenu.Variant);
            public constructor ()
            /** 
            Display the menu for the element.
            * @param $tbe The element that is part of the menu to be displayed.
            */
            public ShowMenu () : void
        }
        /** 
        A search field for the toolbar. For more information, refer to.
        */
        class ToolbarSearchField extends UnityEditor.UIElements.SearchFieldBase$2<UnityEngine.UIElements.TextField, string> implements UnityEngine.UIElements.IStylePropertyAnimations, UnityEngine.UIElements.IVisualElementScheduler, UnityEngine.UIElements.Experimental.ITransitionAnimations, UnityEngine.UIElements.IResolvedStyle, UnityEngine.UIElements.IExperimentalFeatures, UnityEngine.UIElements.INotifyValueChanged$1<string>, UnityEngine.UIElements.ITransform, UnityEngine.UIElements.IEventHandler
        {
            protected [__keep_incompatibility]: never;
            /** 
            USS class name of text elements in elements of this type.
            */
            public static textUssClassName : string
            /** 
            USS class name of search buttons in elements of this type.
            */
            public static searchButtonUssClassName : string
            /** 
            USS class name of cancel buttons in elements of this type.
            */
            public static cancelButtonUssClassName : string
            /** 
            USS class name of cancel buttons in elements of this type, when they are off.
            */
            public static cancelButtonOffVariantUssClassName : string
            /** 
            USS class name of elements of this type, when they are using a popup menu.
            */
            public static popupVariantUssClassName : string
            /** 
            USS class name of elements of this type.
            */
            public static ussClassName : string
            public constructor ()
        }
        /** 
        The pop-up search field for the toolbar. The search field includes a menu button. For more information, refer to.
        */
        class ToolbarPopupSearchField extends UnityEditor.UIElements.ToolbarSearchField implements UnityEngine.UIElements.IStylePropertyAnimations, UnityEngine.UIElements.IVisualElementScheduler, UnityEngine.UIElements.Experimental.ITransitionAnimations, UnityEngine.UIElements.IResolvedStyle, UnityEngine.UIElements.IExperimentalFeatures, UnityEngine.UIElements.INotifyValueChanged$1<string>, UnityEngine.UIElements.ITransform, UnityEngine.UIElements.IEventHandler, UnityEditor.UIElements.IToolbarMenuElement
        {
            protected [__keep_incompatibility]: never;
            /** 
            The menu used by the pop-up search field element.
            */
            public get menu(): UnityEngine.UIElements.DropdownMenu;
            public constructor ()
            /** 
            Display the menu for the element.
            * @param $tbe The element that is part of the menu to be displayed.
            */
            public ShowMenu () : void
        }
        /** 
        A toolbar spacer of static size. For more information, refer to.
        */
        class ToolbarSpacer extends UnityEngine.UIElements.VisualElement implements UnityEngine.UIElements.IStylePropertyAnimations, UnityEngine.UIElements.IVisualElementScheduler, UnityEngine.UIElements.Experimental.ITransitionAnimations, UnityEngine.UIElements.IResolvedStyle, UnityEngine.UIElements.IExperimentalFeatures, UnityEngine.UIElements.ITransform, UnityEngine.UIElements.IEventHandler
        {
            protected [__keep_incompatibility]: never;
            /** 
            USS class name of elements of this type.
            */
            public static ussClassName : string
            /** 
            USS class name of elements of this type, when they are of flexible size.
            */
            public static flexibleSpacerVariantUssClassName : string
            /** 
            Return true if the spacer stretches or shrinks to occupy available space.
            */
            public get flex(): boolean;
            public set flex(value: boolean);
            public constructor ()
        }
        /** 
        A toggle for the toolbar. For more information, refer to.
        */
        class ToolbarToggle extends UnityEngine.UIElements.Toggle implements UnityEngine.UIElements.IStylePropertyAnimations, UnityEngine.UIElements.IVisualElementScheduler, UnityEngine.UIElements.Experimental.ITransitionAnimations, UnityEngine.UIElements.IResolvedStyle, UnityEngine.UIElements.IBindable, UnityEngine.UIElements.IExperimentalFeatures, UnityEngine.UIElements.IMixedValueSupport, UnityEngine.UIElements.INotifyValueChanged$1<boolean>, UnityEngine.UIElements.IPrefixLabel, UnityEngine.UIElements.ITransform, UnityEngine.UIElements.IEventHandler, UnityEngine.UIElements.IEditableElement
        {
            protected [__keep_incompatibility]: never;
            /** 
            USS class name of elements of this type.
            */
            public static ussClassName : string
            public constructor ()
        }
        /** Options to display a search field at the top of the menu.
        */
        enum DropdownMenuSearch
        { Auto = 0, Never = 1, Always = 2 }
        /** Describes the main attributes of a dropdown menu.
        */
        class DropdownMenuDescriptor extends System.Object
        {
            protected [__keep_incompatibility]: never;
            /** Allows the creation of submenu items.
            */
            public get allowSubmenus(): boolean;
            public set allowSubmenus(value: boolean);
            /** Whether to automatically close a contextual menu when an item action executes.
            */
            public get autoClose(): boolean;
            public set autoClose(value: boolean);
            /** Displays a submenu in a new contextual menu next to the parent item.
            */
            public get expansion(): boolean;
            public set expansion(value: boolean);
            /** Parses menu shortcuts at the end of the item name and displays them as keyboard shortcuts next to item names.
            */
            public get parseShortcuts(): boolean;
            public set parseShortcuts(value: boolean);
            /** Displays a search field at the top of the menu.
            */
            public get search(): UnityEditor.UIElements.DropdownMenuSearch;
            public set search(value: UnityEditor.UIElements.DropdownMenuSearch);
            /** Describes the title of the menu.
            */
            public get title(): string;
            public set title(value: string);
            public constructor ()
        }
        /** Provides methods to extend DropdownMenu with Editor features.
        */
        class EditorMenuExtensions extends System.Object
        {
            protected [__keep_incompatibility]: never;
            /** Displays dropdown menu as a contextual menu.
            * @param $menu Menu to show.
            * @param $rect Position and size of the parent control.
            * @param $triggerEvent Event summoning context menu.
            */
            public static DisplayEditorMenu ($menu: UnityEngine.UIElements.DropdownMenu, $rect: UnityEngine.Rect) : void
            /** Displays dropdown menu as a contextual menu.
            * @param $menu Menu to show.
            * @param $rect Position and size of the parent control.
            * @param $triggerEvent Event summoning context menu.
            */
            public static DisplayEditorMenu ($menu: UnityEngine.UIElements.DropdownMenu, $triggerEvent: UnityEngine.UIElements.EventBase) : void
            /** Adds a descriptor to a dropdown menu.
            * @param $menu The menu to add a descriptor to.
            * @param $descriptor The menu features descriptor to add to a menu.
            */
            public static SetDescriptor ($menu: UnityEngine.UIElements.DropdownMenu, $descriptor: UnityEditor.UIElements.DropdownMenuDescriptor) : void
        }
        /** 
        Create a VisualElement inspector from a SerializedObject.
        */
        class InspectorElement extends UnityEngine.UIElements.BindableElement implements UnityEngine.UIElements.IStylePropertyAnimations, UnityEngine.UIElements.IVisualElementScheduler, UnityEngine.UIElements.Experimental.ITransitionAnimations, UnityEngine.UIElements.IResolvedStyle, UnityEngine.UIElements.IBindable, UnityEngine.UIElements.IExperimentalFeatures, UnityEngine.UIElements.ITransform, UnityEngine.UIElements.IEventHandler
        {
            protected [__keep_incompatibility]: never;
            /** 
            USS class name of elements of this type.
            */
            public static ussClassName : string
            /** 
            USS class name of custom inspector elements in elements of this type.
            */
            public static customInspectorUssClassName : string
            /** 
            USS class name of IMGUI containers in elements of this type.
            */
            public static iMGUIContainerUssClassName : string
            /** 
            USS class name of elements of this type, when they are displayed in IMGUI inspector mode.
            */
            public static iMGUIInspectorVariantUssClassName : string
            /** 
            USS class name of elements of this type, when they are displayed in UIElements inspector mode.
            */
            public static uIEInspectorVariantUssClassName : string
            /** 
            USS class name of elements of this type, when no inspector is found.
            */
            public static noInspectorFoundVariantUssClassName : string
            /** 
            USS class name of elements of this type, when they are displayed in UIElements custom mode.
            */
            public static uIECustomVariantUssClassName : string
            /** 
            USS class name of elements of this type, when they are displayed in IMGUI custom mode.
            */
            public static iMGUICustomVariantUssClassName : string
            /** 
            USS class name of elements of this type, when they are displayed in IMGUI default mode.
            */
            public static iMGUIDefaultVariantUssClassName : string
            /** 
            USS class name of elements of this type, when they are displayed in UIElements default mode.
            */
            public static uIEDefaultVariantUssClassName : string
            /** 
            USS class name of elements of this type, when they are displayed in debug USS mode.
            */
            public static debugVariantUssClassName : string
            /** 
            USS class name of elements of this type, when they are displayed in debug internal mode.
            */
            public static debugInternalVariantUssClassName : string
            /** 
            Adds default inspector property fields under a container VisualElement
            * @param $container The parent VisualElement
            * @param $serializedObject The SerializedObject to inspect
            * @param $editor The editor currently used
            */
            public static FillDefaultInspector ($container: UnityEngine.UIElements.VisualElement, $serializedObject: UnityEditor.SerializedObject, $editor: UnityEditor.Editor) : void
            public constructor ()
            public constructor ($obj: UnityEngine.Object)
            public constructor ($obj: UnityEditor.SerializedObject)
            public constructor ($editor: UnityEditor.Editor)
        }
    }
    namespace UnityEditor.UIElements.ColorField {
        class UxmlSerializedData extends UnityEngine.UIElements.BaseField$1.UxmlSerializedData<UnityEngine.Color>
        {
            protected [__keep_incompatibility]: never;
            public constructor ()
        }
        class UxmlTraits extends UnityEngine.UIElements.BaseFieldTraits$2<UnityEngine.Color, UnityEngine.UIElements.UxmlColorAttributeDescription>
        {
            protected [__keep_incompatibility]: never;
            public constructor ()
        }
        class UxmlFactory extends UnityEngine.UIElements.UxmlFactory$2<UnityEditor.UIElements.ColorField, UnityEditor.UIElements.ColorField.UxmlTraits> implements UnityEngine.UIElements.IBaseUxmlFactory, UnityEngine.UIElements.IUxmlFactory
        {
            protected [__keep_incompatibility]: never;
            public constructor ()
        }
    }
    namespace UnityEditor.UIElements.CurveField {
        enum RenderMode
        { Texture = 0, Mesh = 1, Default = 0 }
        class UxmlSerializedData extends UnityEngine.UIElements.BaseField$1.UxmlSerializedData<UnityEngine.AnimationCurve>
        {
            protected [__keep_incompatibility]: never;
            public constructor ()
        }
        class UxmlTraits extends UnityEngine.UIElements.BaseField$1.UxmlTraits<UnityEngine.AnimationCurve>
        {
            protected [__keep_incompatibility]: never;
            public constructor ()
        }
        class UxmlFactory extends UnityEngine.UIElements.UxmlFactory$2<UnityEditor.UIElements.CurveField, UnityEditor.UIElements.CurveField.UxmlTraits> implements UnityEngine.UIElements.IBaseUxmlFactory, UnityEngine.UIElements.IUxmlFactory
        {
            protected [__keep_incompatibility]: never;
            public constructor ()
        }
    }
    namespace UnityEditor.UIElements.EnumFlagsField {
        class UxmlSerializedData extends UnityEngine.UIElements.BaseField$1.UxmlSerializedData<System.Enum>
        {
            protected [__keep_incompatibility]: never;
            public constructor ()
        }
        class UxmlTraits extends UnityEngine.UIElements.BaseField$1.UxmlTraits<System.Enum>
        {
            protected [__keep_incompatibility]: never;
            public constructor ()
        }
        class UxmlFactory extends UnityEngine.UIElements.UxmlFactory$2<UnityEditor.UIElements.EnumFlagsField, UnityEditor.UIElements.EnumFlagsField.UxmlTraits> implements UnityEngine.UIElements.IBaseUxmlFactory, UnityEngine.UIElements.IUxmlFactory
        {
            protected [__keep_incompatibility]: never;
            public constructor ()
        }
    }
    namespace UnityEditor.UIElements.GradientField {
        class UxmlSerializedData extends UnityEngine.UIElements.BaseField$1.UxmlSerializedData<UnityEngine.Gradient>
        {
            protected [__keep_incompatibility]: never;
            public constructor ()
        }
        class UxmlTraits extends UnityEngine.UIElements.BaseField$1.UxmlTraits<UnityEngine.Gradient>
        {
            protected [__keep_incompatibility]: never;
            public constructor ()
        }
        class UxmlFactory extends UnityEngine.UIElements.UxmlFactory$2<UnityEditor.UIElements.GradientField, UnityEditor.UIElements.GradientField.UxmlTraits> implements UnityEngine.UIElements.IBaseUxmlFactory, UnityEngine.UIElements.IUxmlFactory
        {
            protected [__keep_incompatibility]: never;
            public constructor ()
        }
    }
    namespace UnityEditor.UIElements.LayerField {
        class UxmlSerializedData extends UnityEngine.UIElements.BaseField$1.UxmlSerializedData<number>
        {
            protected [__keep_incompatibility]: never;
            public constructor ()
        }
        class UxmlTraits extends UnityEngine.UIElements.BaseField$1.UxmlTraits<number>
        {
            protected [__keep_incompatibility]: never;
            public constructor ()
        }
        class UxmlFactory extends UnityEngine.UIElements.UxmlFactory$2<UnityEditor.UIElements.LayerField, UnityEditor.UIElements.LayerField.UxmlTraits> implements UnityEngine.UIElements.IBaseUxmlFactory, UnityEngine.UIElements.IUxmlFactory
        {
            protected [__keep_incompatibility]: never;
            public constructor ()
        }
    }
    namespace UnityEditor.UIElements.MaskField {
        class UxmlSerializedData extends UnityEngine.UIElements.BaseField$1.UxmlSerializedData<number>
        {
            protected [__keep_incompatibility]: never;
            public constructor ()
        }
        class UxmlTraits extends UnityEngine.UIElements.BaseField$1.UxmlTraits<number>
        {
            protected [__keep_incompatibility]: never;
            public constructor ()
        }
        class UxmlFactory extends UnityEngine.UIElements.UxmlFactory$2<UnityEditor.UIElements.MaskField, UnityEditor.UIElements.MaskField.UxmlTraits> implements UnityEngine.UIElements.IBaseUxmlFactory, UnityEngine.UIElements.IUxmlFactory
        {
            protected [__keep_incompatibility]: never;
            public constructor ()
        }
    }
    namespace UnityEditor.UIElements.LayerMaskField {
        class UxmlSerializedData extends UnityEditor.UIElements.MaskField.UxmlSerializedData
        {
            protected [__keep_incompatibility]: never;
            public constructor ()
        }
        class UxmlTraits extends UnityEngine.UIElements.BaseField$1.UxmlTraits<number>
        {
            protected [__keep_incompatibility]: never;
            public constructor ()
        }
        class UxmlFactory extends UnityEngine.UIElements.UxmlFactory$2<UnityEditor.UIElements.LayerMaskField, UnityEditor.UIElements.LayerMaskField.UxmlTraits> implements UnityEngine.UIElements.IBaseUxmlFactory, UnityEngine.UIElements.IUxmlFactory
        {
            protected [__keep_incompatibility]: never;
            public constructor ()
        }
    }
    namespace UnityEditor.UIElements.ObjectField {
        class UxmlSerializedData extends UnityEngine.UIElements.BaseField$1.UxmlSerializedData<UnityEngine.Object>
        {
            protected [__keep_incompatibility]: never;
            public constructor ()
        }
        class UxmlTraits extends UnityEngine.UIElements.BaseField$1.UxmlTraits<UnityEngine.Object>
        {
            protected [__keep_incompatibility]: never;
            public constructor ()
        }
        class UxmlFactory extends UnityEngine.UIElements.UxmlFactory$2<UnityEditor.UIElements.ObjectField, UnityEditor.UIElements.ObjectField.UxmlTraits> implements UnityEngine.UIElements.IBaseUxmlFactory, UnityEngine.UIElements.IUxmlFactory
        {
            protected [__keep_incompatibility]: never;
            public constructor ()
        }
    }
    namespace UnityEditor.UIElements.PropertyField {
        class UxmlSerializedData extends UnityEngine.UIElements.VisualElement.UxmlSerializedData implements UnityEngine.UIElements.IUxmlSerializedDataCustomAttributeHandler
        {
            protected [__keep_incompatibility]: never;
            public constructor ()
        }
        class UxmlTraits extends UnityEngine.UIElements.VisualElement.UxmlTraits
        {
            protected [__keep_incompatibility]: never;
            public constructor ()
        }
        class UxmlFactory extends UnityEngine.UIElements.UxmlFactory$2<UnityEditor.UIElements.PropertyField, UnityEditor.UIElements.PropertyField.UxmlTraits> implements UnityEngine.UIElements.IBaseUxmlFactory, UnityEngine.UIElements.IUxmlFactory
        {
            protected [__keep_incompatibility]: never;
            public constructor ()
        }
    }
    namespace UnityEditor.UIElements.TagField {
        class UxmlSerializedData extends UnityEngine.UIElements.BaseField$1.UxmlSerializedData<string>
        {
            protected [__keep_incompatibility]: never;
            public constructor ()
        }
        class UxmlTraits extends UnityEngine.UIElements.BaseField$1.UxmlTraits<string>
        {
            protected [__keep_incompatibility]: never;
            public constructor ()
        }
        class UxmlFactory extends UnityEngine.UIElements.UxmlFactory$2<UnityEditor.UIElements.TagField, UnityEditor.UIElements.TagField.UxmlTraits> implements UnityEngine.UIElements.IBaseUxmlFactory, UnityEngine.UIElements.IUxmlFactory
        {
            protected [__keep_incompatibility]: never;
            public constructor ()
        }
    }
    namespace UnityEditor.UIElements.SearchFieldBase$2 {
        class UxmlTraits<TextInputType, T> extends UnityEngine.UIElements.VisualElement.UxmlTraits
        {
            protected [__keep_incompatibility]: never;
            public constructor ()
        }
    }
    namespace UnityEditor.UIElements.Toolbar {
        class UxmlSerializedData extends UnityEngine.UIElements.VisualElement.UxmlSerializedData
        {
            protected [__keep_incompatibility]: never;
            public constructor ()
        }
        class UxmlFactory extends UnityEngine.UIElements.UxmlFactory$1<UnityEditor.UIElements.Toolbar> implements UnityEngine.UIElements.IBaseUxmlFactory, UnityEngine.UIElements.IUxmlFactory
        {
            protected [__keep_incompatibility]: never;
            public constructor ()
        }
    }
    namespace UnityEditor.UIElements.ToolbarBreadcrumbs {
        class UxmlSerializedData extends UnityEngine.UIElements.VisualElement.UxmlSerializedData
        {
            protected [__keep_incompatibility]: never;
            public constructor ()
        }
        class UxmlFactory extends UnityEngine.UIElements.UxmlFactory$1<UnityEditor.UIElements.ToolbarBreadcrumbs> implements UnityEngine.UIElements.IBaseUxmlFactory, UnityEngine.UIElements.IUxmlFactory
        {
            protected [__keep_incompatibility]: never;
            public constructor ()
        }
    }
    namespace UnityEditor.UIElements.ToolbarButton {
        class UxmlSerializedData extends UnityEngine.UIElements.Button.UxmlSerializedData
        {
            protected [__keep_incompatibility]: never;
            public constructor ()
        }
        class UxmlTraits extends UnityEngine.UIElements.Button.UxmlTraits
        {
            protected [__keep_incompatibility]: never;
            public constructor ()
        }
        class UxmlFactory extends UnityEngine.UIElements.UxmlFactory$2<UnityEditor.UIElements.ToolbarButton, UnityEditor.UIElements.ToolbarButton.UxmlTraits> implements UnityEngine.UIElements.IBaseUxmlFactory, UnityEngine.UIElements.IUxmlFactory
        {
            protected [__keep_incompatibility]: never;
            public constructor ()
        }
    }
    namespace UnityEditor.UIElements.ToolbarMenu {
        enum Variant
        { Default = 0, Popup = 1 }
        class UxmlSerializedData extends UnityEngine.UIElements.TextElement.UxmlSerializedData
        {
            protected [__keep_incompatibility]: never;
            public constructor ()
        }
        class UxmlTraits extends UnityEngine.UIElements.TextElement.UxmlTraits
        {
            protected [__keep_incompatibility]: never;
            public constructor ()
        }
        class UxmlFactory extends UnityEngine.UIElements.UxmlFactory$2<UnityEditor.UIElements.ToolbarMenu, UnityEditor.UIElements.ToolbarMenu.UxmlTraits> implements UnityEngine.UIElements.IBaseUxmlFactory, UnityEngine.UIElements.IUxmlFactory
        {
            protected [__keep_incompatibility]: never;
            public constructor ()
        }
    }
    namespace UnityEditor.UIElements.ToolbarSearchField {
        class UxmlSerializedData extends UnityEngine.UIElements.VisualElement.UxmlSerializedData
        {
            protected [__keep_incompatibility]: never;
            public constructor ()
        }
        class UxmlTraits extends UnityEditor.UIElements.SearchFieldBase$2.UxmlTraits<UnityEngine.UIElements.TextField, string>
        {
            protected [__keep_incompatibility]: never;
            public constructor ()
        }
        class UxmlFactory extends UnityEngine.UIElements.UxmlFactory$2<UnityEditor.UIElements.ToolbarSearchField, UnityEditor.UIElements.ToolbarSearchField.UxmlTraits> implements UnityEngine.UIElements.IBaseUxmlFactory, UnityEngine.UIElements.IUxmlFactory
        {
            protected [__keep_incompatibility]: never;
            public constructor ()
        }
    }
    namespace UnityEditor.UIElements.ToolbarPopupSearchField {
        class UxmlSerializedData extends UnityEditor.UIElements.ToolbarSearchField.UxmlSerializedData
        {
            protected [__keep_incompatibility]: never;
            public constructor ()
        }
        class UxmlTraits extends UnityEditor.UIElements.ToolbarSearchField.UxmlTraits
        {
            protected [__keep_incompatibility]: never;
            public constructor ()
        }
        class UxmlFactory extends UnityEngine.UIElements.UxmlFactory$2<UnityEditor.UIElements.ToolbarPopupSearchField, UnityEditor.UIElements.ToolbarPopupSearchField.UxmlTraits> implements UnityEngine.UIElements.IBaseUxmlFactory, UnityEngine.UIElements.IUxmlFactory
        {
            protected [__keep_incompatibility]: never;
            public constructor ()
        }
    }
    namespace UnityEditor.UIElements.ToolbarSpacer {
        class UxmlSerializedData extends UnityEngine.UIElements.VisualElement.UxmlSerializedData
        {
            protected [__keep_incompatibility]: never;
            public constructor ()
        }
        class UxmlFactory extends UnityEngine.UIElements.UxmlFactory$1<UnityEditor.UIElements.ToolbarSpacer> implements UnityEngine.UIElements.IBaseUxmlFactory, UnityEngine.UIElements.IUxmlFactory
        {
            protected [__keep_incompatibility]: never;
            public constructor ()
        }
    }
    namespace UnityEditor.UIElements.ToolbarToggle {
        class UxmlSerializedData extends UnityEngine.UIElements.Toggle.UxmlSerializedData
        {
            protected [__keep_incompatibility]: never;
            public constructor ()
        }
        class UxmlTraits extends UnityEngine.UIElements.Toggle.UxmlTraits
        {
            protected [__keep_incompatibility]: never;
            public constructor ()
        }
        class UxmlFactory extends UnityEngine.UIElements.UxmlFactory$2<UnityEditor.UIElements.ToolbarToggle, UnityEditor.UIElements.ToolbarToggle.UxmlTraits> implements UnityEngine.UIElements.IBaseUxmlFactory, UnityEngine.UIElements.IUxmlFactory
        {
            protected [__keep_incompatibility]: never;
            public constructor ()
        }
    }
    namespace UnityEditor.UIElements.InspectorElement {
        class UxmlSerializedData extends UnityEngine.UIElements.BindableElement.UxmlSerializedData
        {
            protected [__keep_incompatibility]: never;
            public constructor ()
        }
        class UxmlTraits extends UnityEngine.UIElements.BindableElement.UxmlTraits
        {
            protected [__keep_incompatibility]: never;
            public constructor ()
        }
        class UxmlFactory extends UnityEngine.UIElements.UxmlFactory$2<UnityEditor.UIElements.InspectorElement, UnityEditor.UIElements.InspectorElement.UxmlTraits> implements UnityEngine.UIElements.IBaseUxmlFactory, UnityEngine.UIElements.IUxmlFactory
        {
            protected [__keep_incompatibility]: never;
            public constructor ()
        }
    }
    namespace UnityEditor.SceneManagement.EditorSceneManager {
        interface SceneManagerSetupRestoredCallback
        { 
        (scenes: System.Array$1<UnityEngine.SceneManagement.Scene>) : void; 
        Invoke?: (scenes: System.Array$1<UnityEngine.SceneManagement.Scene>) => void;
        }
        var SceneManagerSetupRestoredCallback: { new (func: (scenes: System.Array$1<UnityEngine.SceneManagement.Scene>) => void): SceneManagerSetupRestoredCallback; }
        interface NewSceneCreatedCallback
        { 
        (scene: UnityEngine.SceneManagement.Scene, setup: UnityEditor.SceneManagement.NewSceneSetup, mode: UnityEditor.SceneManagement.NewSceneMode) : void; 
        Invoke?: (scene: UnityEngine.SceneManagement.Scene, setup: UnityEditor.SceneManagement.NewSceneSetup, mode: UnityEditor.SceneManagement.NewSceneMode) => void;
        }
        var NewSceneCreatedCallback: { new (func: (scene: UnityEngine.SceneManagement.Scene, setup: UnityEditor.SceneManagement.NewSceneSetup, mode: UnityEditor.SceneManagement.NewSceneMode) => void): NewSceneCreatedCallback; }
        interface SceneOpeningCallback
        { 
        (path: string, mode: UnityEditor.SceneManagement.OpenSceneMode) : void; 
        Invoke?: (path: string, mode: UnityEditor.SceneManagement.OpenSceneMode) => void;
        }
        var SceneOpeningCallback: { new (func: (path: string, mode: UnityEditor.SceneManagement.OpenSceneMode) => void): SceneOpeningCallback; }
        interface SceneOpenedCallback
        { 
        (scene: UnityEngine.SceneManagement.Scene, mode: UnityEditor.SceneManagement.OpenSceneMode) : void; 
        Invoke?: (scene: UnityEngine.SceneManagement.Scene, mode: UnityEditor.SceneManagement.OpenSceneMode) => void;
        }
        var SceneOpenedCallback: { new (func: (scene: UnityEngine.SceneManagement.Scene, mode: UnityEditor.SceneManagement.OpenSceneMode) => void): SceneOpenedCallback; }
        interface SceneClosingCallback
        { 
        (scene: UnityEngine.SceneManagement.Scene, removingScene: boolean) : void; 
        Invoke?: (scene: UnityEngine.SceneManagement.Scene, removingScene: boolean) => void;
        }
        var SceneClosingCallback: { new (func: (scene: UnityEngine.SceneManagement.Scene, removingScene: boolean) => void): SceneClosingCallback; }
        interface SceneClosedCallback
        { 
        (scene: UnityEngine.SceneManagement.Scene) : void; 
        Invoke?: (scene: UnityEngine.SceneManagement.Scene) => void;
        }
        var SceneClosedCallback: { new (func: (scene: UnityEngine.SceneManagement.Scene) => void): SceneClosedCallback; }
        interface SceneSavingCallback
        { 
        (scene: UnityEngine.SceneManagement.Scene, path: string) : void; 
        Invoke?: (scene: UnityEngine.SceneManagement.Scene, path: string) => void;
        }
        var SceneSavingCallback: { new (func: (scene: UnityEngine.SceneManagement.Scene, path: string) => void): SceneSavingCallback; }
        interface SceneSavedCallback
        { 
        (scene: UnityEngine.SceneManagement.Scene) : void; 
        Invoke?: (scene: UnityEngine.SceneManagement.Scene) => void;
        }
        var SceneSavedCallback: { new (func: (scene: UnityEngine.SceneManagement.Scene) => void): SceneSavedCallback; }
        interface SceneDirtiedCallback
        { 
        (scene: UnityEngine.SceneManagement.Scene) : void; 
        Invoke?: (scene: UnityEngine.SceneManagement.Scene) => void;
        }
        var SceneDirtiedCallback: { new (func: (scene: UnityEngine.SceneManagement.Scene) => void): SceneDirtiedCallback; }
    }
    namespace UnityEditor.SceneManagement.PrefabStage {
        enum Mode
        { InIsolation = 0, InContext = 1 }
    }
    namespace UnityEditor.IMGUI.Controls.CapsuleBoundsHandle {
        enum HeightAxis
        { X = 0, Y = 1, Z = 2 }
    }
    namespace UnityEditor.IMGUI.Controls.PrimitiveBoundsHandle {
        enum Axes
        { None = 0, X = 1, Y = 2, Z = 4, All = 7 }
    }
    namespace UnityEditor.IMGUI.Controls.SearchField {
        interface SearchFieldCallback
        { 
        () : void; 
        Invoke?: () => void;
        }
        var SearchFieldCallback: { new (func: () => void): SearchFieldCallback; }
    }
    namespace UnityEditor.IMGUI.Controls.MultiColumnHeader {
        interface HeaderCallback
        { 
        (multiColumnHeader: UnityEditor.IMGUI.Controls.MultiColumnHeader) : void; 
        Invoke?: (multiColumnHeader: UnityEditor.IMGUI.Controls.MultiColumnHeader) => void;
        }
        var HeaderCallback: { new (func: (multiColumnHeader: UnityEditor.IMGUI.Controls.MultiColumnHeader) => void): HeaderCallback; }
        class DefaultGUI extends System.Object
        {
            protected [__keep_incompatibility]: never;
            public static get defaultHeight(): number;
            public static get minimumHeight(): number;
            public static get columnContentMargin(): number;
        }
        class DefaultStyles extends System.Object
        {
            protected [__keep_incompatibility]: never;
            public static columnHeader : UnityEngine.GUIStyle
            public static columnHeaderRightAligned : UnityEngine.GUIStyle
            public static columnHeaderCenterAligned : UnityEngine.GUIStyle
            public static background : UnityEngine.GUIStyle
        }
    }
    namespace UnityEditor.IMGUI.Controls.MultiColumnHeaderState {
        class Column extends System.Object
        {
            protected [__keep_incompatibility]: never;
            public width : number
            public sortedAscending : boolean
            public headerContent : UnityEngine.GUIContent
            public contextMenuText : string
            public headerTextAlignment : UnityEngine.TextAlignment
            public sortingArrowAlignment : UnityEngine.TextAlignment
            public minWidth : number
            public maxWidth : number
            public autoResize : boolean
            public allowToggleVisibility : boolean
            public canSort : boolean
            public userData : number
            public constructor ()
        }
    }
    namespace UnityEditor.IMGUI.Controls.TreeView {
        interface DoFoldoutCallback
        { 
        (position: UnityEngine.Rect, expandedState: boolean, style: UnityEngine.GUIStyle) : boolean; 
        Invoke?: (position: UnityEngine.Rect, expandedState: boolean, style: UnityEngine.GUIStyle) => boolean;
        }
        var DoFoldoutCallback: { new (func: (position: UnityEngine.Rect, expandedState: boolean, style: UnityEngine.GUIStyle) => boolean): DoFoldoutCallback; }
        interface GetNewSelectionFunction
        { 
        (clickedItem: UnityEditor.IMGUI.Controls.TreeViewItem, keepMultiSelection: boolean, useActionKeyAsShift: boolean) : System.Collections.Generic.List$1<number>; 
        Invoke?: (clickedItem: UnityEditor.IMGUI.Controls.TreeViewItem, keepMultiSelection: boolean, useActionKeyAsShift: boolean) => System.Collections.Generic.List$1<number>;
        }
        var GetNewSelectionFunction: { new (func: (clickedItem: UnityEditor.IMGUI.Controls.TreeViewItem, keepMultiSelection: boolean, useActionKeyAsShift: boolean) => System.Collections.Generic.List$1<number>): GetNewSelectionFunction; }
        class DefaultGUI extends System.Object
        {
            protected [__keep_incompatibility]: never;
            public static FoldoutLabel ($rect: UnityEngine.Rect, $label: string, $selected: boolean, $focused: boolean) : void
            public static Label ($rect: UnityEngine.Rect, $label: string, $selected: boolean, $focused: boolean) : void
            public static LabelRightAligned ($rect: UnityEngine.Rect, $label: string, $selected: boolean, $focused: boolean) : void
            public static BoldLabel ($rect: UnityEngine.Rect, $label: string, $selected: boolean, $focused: boolean) : void
            public static BoldLabelRightAligned ($rect: UnityEngine.Rect, $label: string, $selected: boolean, $focused: boolean) : void
        }
        class DefaultStyles extends System.Object
        {
            protected [__keep_incompatibility]: never;
            public static foldoutLabel : UnityEngine.GUIStyle
            public static label : UnityEngine.GUIStyle
            public static labelRightAligned : UnityEngine.GUIStyle
            public static boldLabel : UnityEngine.GUIStyle
            public static boldLabelRightAligned : UnityEngine.GUIStyle
            public static backgroundEven : UnityEngine.GUIStyle
            public static backgroundOdd : UnityEngine.GUIStyle
        }
    }
    namespace UnityEditor.Scripting {
        /** Representation of managed debugger in UnityEditor.
        */
        class ManagedDebugger extends System.Object
        {
            protected [__keep_incompatibility]: never;
            /** Returns true if there is a managed debugger attached to the UnityEditor, or false if there is not.
            */
            public static get isAttached(): boolean;
            /** Returns true if managed debugger is enabled, or false if it is not.
            */
            public static get isEnabled(): boolean;
            public static add_debuggerAttached ($value: System.Action$1<boolean>) : void
            public static remove_debuggerAttached ($value: System.Action$1<boolean>) : void
            /** Disconnects the managed debugger attached to the UnityEditor.
            */
            public static Disconnect () : void
            public constructor ()
        }
    }
    namespace UnityEditor.Actions {
        /** Provides methods to add menu items to the Scene view context menu.
        */
        class ContextMenuUtility extends System.Object
        {
            protected [__keep_incompatibility]: never;
            /** Add a MenuItem to the Scene view context menu.
            * @param $menu The Scene view context menu to add a MenuItem to.
            * @param $menuItemPath The menu item path that is registered with MenuItem.
            * @param $contextMenuPath The menu item path to display in the Scene view context menu.
            */
            public static AddMenuItem ($menu: UnityEngine.UIElements.DropdownMenu, $menuItemPath: string, $contextMenuPath?: string) : void
            public static AddMenuItemWithContext ($menu: UnityEngine.UIElements.DropdownMenu, $context: System.Collections.Generic.IEnumerable$1<UnityEngine.Object>, $menuItemPath: string, $contextMenuPath?: string) : void
            public static AddMenuItemsForType ($menu: UnityEngine.UIElements.DropdownMenu, $targets: System.Collections.Generic.IEnumerable$1<UnityEngine.Object>) : void
            public static AddMenuItemsForType ($menu: UnityEngine.UIElements.DropdownMenu, $type: System.Type, $targets: System.Collections.Generic.IEnumerable$1<UnityEngine.Object>, $submenu?: string) : void
            /** Adds clipboard operations to the Scene view context menu.
            * @param $menu The Scene view context menu to add a clipboard operations to.
            * @param $cutEnabled Whether to enable the Cut operation in the Scene view context menu. When Cut is disabled, it is greyed out in the Scene view context menu.
            * @param $copyEnabled Whether to enable the Copy operation in the Scene view context menu. If Copy is disabled, it is greyed out in the Scene view context menu.
            * @param $pasteEnabled Whether to enable the Paste operation in the Scene view context menu. If Paste is disabled, it is greyed out in the Scene view context menu.
            * @param $duplicateEnabled Whether to enable the Duplicate operation in the Scene view context menu. If Duplicate is disabled, it is greyed out in the Scene view context menu.
            * @param $deleteEnabled Whether to enable the Delete operation in the Scene view context menu. If Delete is disabled, it is greyed out in the Scene view context menu.
            */
            public static AddClipboardEntriesTo ($menu: UnityEngine.UIElements.DropdownMenu) : void
            /** Adds clipboard operations to the Scene view context menu.
            * @param $menu The Scene view context menu to add a clipboard operations to.
            * @param $cutEnabled Whether to enable the Cut operation in the Scene view context menu. When Cut is disabled, it is greyed out in the Scene view context menu.
            * @param $copyEnabled Whether to enable the Copy operation in the Scene view context menu. If Copy is disabled, it is greyed out in the Scene view context menu.
            * @param $pasteEnabled Whether to enable the Paste operation in the Scene view context menu. If Paste is disabled, it is greyed out in the Scene view context menu.
            * @param $duplicateEnabled Whether to enable the Duplicate operation in the Scene view context menu. If Duplicate is disabled, it is greyed out in the Scene view context menu.
            * @param $deleteEnabled Whether to enable the Delete operation in the Scene view context menu. If Delete is disabled, it is greyed out in the Scene view context menu.
            */
            public static AddClipboardEntriesTo ($menu: UnityEngine.UIElements.DropdownMenu, $cutEnabled: boolean, $copyEnabled: boolean, $pasteEnabled: boolean, $duplicateEnabled: boolean, $deleteEnabled: boolean) : void
            /** Adds the component menu items of the current selection to the Scene view context menu.
            * @param $menu The Scene view context menu to add the component menu items of the current selection to.
            */
            public static AddComponentEntriesTo ($menu: UnityEngine.UIElements.DropdownMenu) : void
            /** Adds the default actions for a GameObject and the component menu items of the current selection to the Scene view context menu.
            * @param $menu The Scene view context menu to add the default actions for a GameObject and the component menu items of the current selection to 
            */
            public static AddGameObjectEntriesTo ($menu: UnityEngine.UIElements.DropdownMenu) : void
        }
        /** The state that the EditorAction was completed in.
        */
        enum EditorActionResult
        { Canceled = 0, Success = 1 }
        /** Represents an action that spans over multiple frames.
        */
        class EditorAction extends System.Object
        {
            protected [__keep_incompatibility]: never;
            public static Start ($action: UnityEditor.Actions.EditorAction) : UnityEditor.Actions.EditorAction
            /** Callback raised when the Scene view calls OnGUI.
            * @param $sceneView The Scene view that Actions.EditorAction.OnSceneGUI is called in.
            */
            public OnSceneGUI ($sceneView: UnityEditor.SceneView) : void
            /** Finishes an EditorAction with a specific result.
            * @param $result The state that the EditorAction was finished in.
            */
            public Finish ($result: UnityEditor.Actions.EditorActionResult) : void
        }
    }
    namespace UnityEditor.Compilation {
        /** Methods and properties for script compilation pipeline.
        */
        class CompilationPipeline extends System.Object
        {
            protected [__keep_incompatibility]: never;
            /** Current Compilation.CodeOptimization|code optimization mode.
            */
            public static get codeOptimization(): UnityEditor.Compilation.CodeOptimization;
            public static set codeOptimization(value: UnityEditor.Compilation.CodeOptimization);
            public static add_compilationStarted ($value: System.Action$1<any>) : void
            public static remove_compilationStarted ($value: System.Action$1<any>) : void
            public static add_compilationFinished ($value: System.Action$1<any>) : void
            public static remove_compilationFinished ($value: System.Action$1<any>) : void
            public static add_assemblyCompilationStarted ($value: System.Action$1<string>) : void
            public static remove_assemblyCompilationStarted ($value: System.Action$1<string>) : void
            public static add_assemblyCompilationNotRequired ($value: System.Action$1<string>) : void
            public static remove_assemblyCompilationNotRequired ($value: System.Action$1<string>) : void
            public static add_assemblyCompilationFinished ($value: System.Action$2<string, System.Array$1<UnityEditor.Compilation.CompilerMessage>>) : void
            public static remove_assemblyCompilationFinished ($value: System.Action$2<string, System.Array$1<UnityEditor.Compilation.CompilerMessage>>) : void
            public static add_codeOptimizationChanged ($value: System.Action$1<UnityEditor.Compilation.CodeOptimization>) : void
            public static remove_codeOptimizationChanged ($value: System.Action$1<UnityEditor.Compilation.CodeOptimization>) : void
            /** Use this to get a list of directories containing system references for the specific ApiCompatibilityLevel.
            * @returns Returns an array populated by absolute directory paths. 
            */
            public static GetSystemAssemblyDirectories ($apiCompatibilityLevel: UnityEditor.ApiCompatibilityLevel) : System.Array$1<string>
            /** Retrieves the ResponseFileData describing the content of the response file.
            * @param $relativePath The path to the response file to be parsed.
            * @param $projectDirectory The absolute path to the root of the Project directory in which the response file is located.
            * @param $systemReferenceDirectories Array of directories containing system reference libraries.
            * @returns Describes the content of the response file that was parsed. Errors, defines, etc. 
            */
            public static ParseResponseFile ($relativePath: string, $projectDirectory: string, $systemReferenceDirectories: System.Array$1<string>) : UnityEditor.Compilation.ResponseFileData
            public static GetAssemblies () : System.Array$1<UnityEditor.Compilation.Assembly>
            /** Get all script assemblies compiled by Unity filtered by AssembliesType.
            * @returns Array of script assemblies compiled by Unity. 
            */
            public static GetAssemblies ($assembliesType: UnityEditor.Compilation.AssembliesType) : System.Array$1<UnityEditor.Compilation.Assembly>
            /** Returns the assembly name for a source (script) path. Returns null if there is no assembly name for the given script path.
            * @param $sourceFilePath Source (script) path.
            * @returns Assembly name. 
            */
            public static GetAssemblyNameFromScriptPath ($sourceFilePath: string) : string
            /** Returns the assembly definition file path for a source (script) path. Returns null if there is no assembly definition file for the given script path.
            * @param $sourceFilePath Source (script) file path.
            * @returns File path of assembly definition file. 
            */
            public static GetAssemblyDefinitionFilePathFromScriptPath ($sourceFilePath: string) : string
            /** Returns the assembly definition file path from an assembly name. Returns null if there is no assembly definition file for the given assembly name.
            * @param $assemblyName Assembly name.
            * @returns File path of assembly definition file. 
            */
            public static GetAssemblyDefinitionFilePathFromAssemblyName ($assemblyName: string) : string
            /** Returns the assembly definition file path for an Assembly Definition File GUID or assembly name reference. Returns null if there is no assembly definition file for the given assembly reference.
            * @param $reference The assembly definition file GUID or assembly name reference.
            * @returns The file path of the given assembly definition file. 
            */
            public static GetAssemblyDefinitionFilePathFromAssemblyReference ($reference: string) : string
            /** Utility method to determine whether an Assembly Definition File reference is a GUID reference or an assembly name reference.
            * @param $reference The given assembly definition file reference.
            * @returns Whether the reference is a GUID or assembly name. 
            */
            public static GetAssemblyDefinitionReferenceType ($reference: string) : UnityEditor.Compilation.AssemblyDefinitionReferenceType
            /** Converts the given GUID to an assembly definition file GUID reference.
            * @param $guid The given assembly definition file asset GUID.
            * @returns The assembly definition file GUID reference for the given asset GUID. 
            */
            public static GUIDToAssemblyDefinitionReferenceGUID ($guid: string) : string
            /** Converts an assembly definition file GUID reference to a GUID string.
            * @param $reference Assembly Definition File GUID reference.
            * @returns A GUID string. 
            */
            public static AssemblyDefinitionReferenceGUIDToGUID ($reference: string) : string
            /** Gets the root namespace associated with the given script path.
            * @param $sourceFilePath Source (script) file path.
            * @returns Returns the root namespace for the given script. If there is no root namespace defined for the script, it returns null. 
            */
            public static GetAssemblyRootNamespaceFromScriptPath ($sourceFilePath: string) : string
            /** Returns all the platforms supported by assembly definition files.
            Additional resources: AssemblyDefinitionPlatform.
            * @returns Platforms supported by assembly definition files. 
            */
            public static GetAssemblyDefinitionPlatforms () : System.Array$1<UnityEditor.Compilation.AssemblyDefinitionPlatform>
            /** Lists all the #define directives used to compile the specified assembly.
            * @param $assemblyName The name of the assembly without the extension.
            * @returns A string array of #define directives declared for the assembly. Returns null if the assembly is not found. 
            */
            public static GetDefinesFromAssemblyName ($assemblyName: string) : System.Array$1<string>
            /** Lists all the #define directives used to compile the specified assembly, that is from a Response File.
            * @param $assemblyName The name of the assembly without the extension.
            * @returns A string array of #define directives declared for the assembly. Returns null if the assembly is not found. 
            */
            public static GetResponseFileDefinesFromAssemblyName ($assemblyName: string) : System.Array$1<string>
            /** Get all precompiled assembly names.
            * @returns Precompiled assembly names. 
            */
            public static GetPrecompiledAssemblyNames () : System.Array$1<string>
            /** Allows you to test whether the specified #define constraints are satisfied by the specified list of #define directives.
            * @param $defines A string array of #define directives.
            * @param $defineConstraints A string array of #define directives to to check compatibility against.
            * @returns True if the specified #define constraints are satisfied by the specified #define directives. Otherwise returns False. 
            */
            public static IsDefineConstraintsCompatible ($defines: System.Array$1<string>, $defineConstraints: System.Array$1<string>) : boolean
            public static GetPrecompiledAssemblyPaths ($precompiledAssemblySources: UnityEditor.Compilation.CompilationPipeline.PrecompiledAssemblySources) : System.Array$1<string>
            /** Returns the Assembly file path from an assembly name. Returns null if there is no Precompiled Assembly name match.
            * @param $assemblyName Assembly name.
            * @returns File path of precompiled assembly. 
            */
            public static GetPrecompiledAssemblyPathFromAssemblyName ($assemblyName: string) : string
            /** Allows you to request that the Editor recompile scripts in the project.
            * @param $options Optional parameter to specify whether the Editor should clear the build cache before compilation.
            */
            public static RequestScriptCompilation () : void
            /** Allows you to request that the Editor recompile scripts in the project.
            * @param $options Optional parameter to specify whether the Editor should clear the build cache before compilation.
            */
            public static RequestScriptCompilation ($options: UnityEditor.Compilation.RequestScriptCompilationOptions) : void
        }
        /** Compiler Message.
        */
        class CompilerMessage extends System.ValueType
        {
            protected [__keep_incompatibility]: never;
            /** Compiler message.
            */
            public message : string
            /** File for the message.
            */
            public file : string
            /** File line for the message.
            */
            public line : number
            /** Line column for the message.
            */
            public column : number
            /** Message type.
            */
            public type : UnityEditor.Compilation.CompilerMessageType
        }
        /** Code optimization mode defines whether UnityEditor compiles scripts in Debug or Release mode.
        */
        enum CodeOptimization
        { None = 0, Debug = 1, Release = 2 }
        /** Data class used for storing parsed response file data.
        */
        class ResponseFileData extends System.Object
        {
            protected [__keep_incompatibility]: never;
            /** Array of define symbols.
            */
            public Defines : System.Array$1<string>
            /** Array of absolute path reference to assemblies that should be referenced to the assemblies.
            */
            public FullPathReferences : System.Array$1<string>
            /** Error messages that occurred during parsing the response file.
            */
            public Errors : System.Array$1<string>
            /** Additional compiler options written as is in the response file.
            */
            public OtherArguments : System.Array$1<string>
            /** Where 'unsafe' code is allowed when compiling scripts.
            */
            public Unsafe : boolean
            public constructor ()
        }
        /** Class that represents an assembly compiled by Unity.
        */
        class Assembly extends System.Object
        {
            protected [__keep_incompatibility]: never;
            /** The name of the assembly.
            */
            public get name(): string;
            /** Sets the root namespace of the assembly.
            */
            public get rootNamespace(): string;
            /** The full output file path of this assembly.
            */
            public get outputPath(): string;
            /** All the souce files used to compile this assembly.
            */
            public get sourceFiles(): System.Array$1<string>;
            /** The defines used to compile this assembly.
            */
            public get defines(): System.Array$1<string>;
            /** Assembly references used to build this assembly.
            The references are also assemblies built as part of the Unity project.
            Additional resources: Assembly.compiledAssemblyReferences and Assembly.allReferences.
            */
            public get assemblyReferences(): System.Array$1<UnityEditor.Compilation.Assembly>;
            /** Assembly references to pre-compiled assemblies that used to build this assembly.
            Additional resources: Assembly.assemblyReferences and Assembly.allReferences.
            */
            public get compiledAssemblyReferences(): System.Array$1<string>;
            /** Flags for the assembly.
            Additional resources: AssemblyFlags.
            */
            public get flags(): UnityEditor.Compilation.AssemblyFlags;
            /** Compiler options used to compile the assembly.
            */
            public get compilerOptions(): UnityEditor.Compilation.ScriptCompilerOptions;
            /** Returns Assembly.assemblyReferences and Assembly.compiledAssemblyReferences combined.
            This returns all assemblies that are passed to the compiler when building this assembly,.
            */
            public get allReferences(): System.Array$1<string>;
            public constructor ($name: string, $outputPath: string, $sourceFiles: System.Array$1<string>, $defines: System.Array$1<string>, $assemblyReferences: System.Array$1<UnityEditor.Compilation.Assembly>, $compiledAssemblyReferences: System.Array$1<string>, $flags: UnityEditor.Compilation.AssemblyFlags)
            public constructor ($name: string, $outputPath: string, $sourceFiles: System.Array$1<string>, $defines: System.Array$1<string>, $assemblyReferences: System.Array$1<UnityEditor.Compilation.Assembly>, $compiledAssemblyReferences: System.Array$1<string>, $flags: UnityEditor.Compilation.AssemblyFlags, $compilerOptions: UnityEditor.Compilation.ScriptCompilerOptions)
            public constructor ($name: string, $outputPath: string, $sourceFiles: System.Array$1<string>, $defines: System.Array$1<string>, $assemblyReferences: System.Array$1<UnityEditor.Compilation.Assembly>, $compiledAssemblyReferences: System.Array$1<string>, $flags: UnityEditor.Compilation.AssemblyFlags, $compilerOptions: UnityEditor.Compilation.ScriptCompilerOptions, $rootNamespace: string)
        }
        /** Flags for Assembly.
        */
        enum AssembliesType
        { Editor = 0, Player = 1, PlayerWithoutTestAssemblies = 2 }
        /** Assembly definition file reference type.
        */
        enum AssemblyDefinitionReferenceType
        { Name = 0, Guid = 1 }
        /** Contains information about a platform supported by the assembly definition files.
        */
        class AssemblyDefinitionPlatform extends System.ValueType
        {
            protected [__keep_incompatibility]: never;
            /** Name used in assembly definition files.
            */
            public get Name(): string;
            /** Display name for the platform.
            */
            public get DisplayName(): string;
            /** BuildTarget for the AssemblyDefinitionPlatform.
            */
            public get BuildTarget(): UnityEditor.BuildTarget;
            /** Indicates whether or not the associated BuildTarget has a subtarget specified.
            */
            public get HasSubtarget(): boolean;
            /** The subtarget integer ID; only relevant when HasSubtarget is true.
            */
            public get Subtarget(): number;
        }
        /** Options for specifying the behavior of CompilationPipeline.RequestScriptCompilation.
        */
        enum RequestScriptCompilationOptions
        { None = 0, CleanBuildCache = 1 }
        /** Status of the AssemblyBuilder build.
        */
        enum AssemblyBuilderStatus
        { NotStarted = 0, IsCompiling = 1, Finished = 2 }
        /** Flags used by  AssemblyBuilder to control assembly build.
        */
        enum AssemblyBuilderFlags
        { None = 0, EditorAssembly = 1, DevelopmentBuild = 2 }
        /** Options to control the Unity References to other assembly definition files that Unity uses during compilation.
        */
        enum ReferencesOptions
        { None = 0, UseEngineModules = 1 }
        /** Compiles scripts outside the Assets folder into a managed assembly that can be used inside the Assets folder.
        */
        class AssemblyBuilder extends System.Object
        {
            protected [__keep_incompatibility]: never;
            /** Array of script paths used as input for assembly build. (Read Only)
            */
            public get scriptPaths(): System.Array$1<string>;
            /** Output path of the assembly to build. (Read Only)
            */
            public get assemblyPath(): string;
            /** Additional #define directives passed to compilation of the assembly.
            */
            public get additionalDefines(): System.Array$1<string>;
            public set additionalDefines(value: System.Array$1<string>);
            /** Additional assembly references passed to compilation of the assembly.
            */
            public get additionalReferences(): System.Array$1<string>;
            public set additionalReferences(value: System.Array$1<string>);
            /** References to exclude when compiling the assembly.
            */
            public get excludeReferences(): System.Array$1<string>;
            public set excludeReferences(value: System.Array$1<string>);
            /** Compiler options to use when building the assembly.
            */
            public get compilerOptions(): UnityEditor.Compilation.ScriptCompilerOptions;
            public set compilerOptions(value: UnityEditor.Compilation.ScriptCompilerOptions);
            /** Options to control the references that Unity uses during an assembly build.
            */
            public get referencesOptions(): UnityEditor.Compilation.ReferencesOptions;
            public set referencesOptions(value: UnityEditor.Compilation.ReferencesOptions);
            /** Flags to control the assembly build.
            */
            public get flags(): UnityEditor.Compilation.AssemblyBuilderFlags;
            public set flags(value: UnityEditor.Compilation.AssemblyBuilderFlags);
            /** BuildTargetGroup for the assembly build.
            */
            public get buildTargetGroup(): UnityEditor.BuildTargetGroup;
            public set buildTargetGroup(value: UnityEditor.BuildTargetGroup);
            /** BuildTarget for the assembly build.
            */
            public get buildTarget(): UnityEditor.BuildTarget;
            public set buildTarget(value: UnityEditor.BuildTarget);
            /** Subtarget for the assembly build.
            */
            public get subtarget(): number;
            public set subtarget(value: number);
            /** Default references used when compiling the assembly.
            */
            public get defaultReferences(): System.Array$1<string>;
            /** Default defines used when compiling the assembly.
            */
            public get defaultDefines(): System.Array$1<string>;
            /** Current status of assembly build. (Read Only)
            */
            public get status(): UnityEditor.Compilation.AssemblyBuilderStatus;
            public add_buildStarted ($value: System.Action$1<string>) : void
            public remove_buildStarted ($value: System.Action$1<string>) : void
            public add_buildFinished ($value: System.Action$2<string, System.Array$1<UnityEditor.Compilation.CompilerMessage>>) : void
            public remove_buildFinished ($value: System.Action$2<string, System.Array$1<UnityEditor.Compilation.CompilerMessage>>) : void
            /** Starts the build of the assembly.
            While building, the small progress icon in the lower right corner of Unity's main window will spin and EditorApplication.isCompiling will return true.
            * @returns Returns true if build was started. Returns false if the build was not started due to the editor currently compiling scripts in the Assets folder. 
            */
            public Build () : boolean
            public constructor ($assemblyPath: string, ...scriptPaths: string[])
        }
        /** Compiler options passed to the script compiler.
        */
        class ScriptCompilerOptions extends System.Object
        {
            protected [__keep_incompatibility]: never;
            /** Stores the path to the Roslyn ruleset file.
            */
            public get RoslynAnalyzerRulesetPath(): string;
            public set RoslynAnalyzerRulesetPath(value: string);
            /** Stores the paths to the .dll files.
            */
            public get RoslynAnalyzerDllPaths(): System.Array$1<string>;
            public set RoslynAnalyzerDllPaths(value: System.Array$1<string>);
            /** Stores the paths to the Roslyn Analyzer additional files.
            */
            public get RoslynAdditionalFilePaths(): System.Array$1<string>;
            public set RoslynAdditionalFilePaths(value: System.Array$1<string>);
            /** Stores the path to the Roslyn global config file.
            */
            public get AnalyzerConfigPath(): string;
            public set AnalyzerConfigPath(value: string);
            /** Allow 'unsafe' code when compiling scripts.
            */
            public get AllowUnsafeCode(): boolean;
            public set AllowUnsafeCode(value: boolean);
            /** Additional compiler arguments.
            */
            public get AdditionalCompilerArguments(): System.Array$1<string>;
            public set AdditionalCompilerArguments(value: System.Array$1<string>);
            /** Indicates whether performance optimization is enabled for the assembly
            */
            public get CodeOptimization(): UnityEditor.Compilation.CodeOptimization;
            public set CodeOptimization(value: UnityEditor.Compilation.CodeOptimization);
            /** ApiCompatibilityLevel for a given Assembly.
            */
            public get ApiCompatibilityLevel(): UnityEditor.ApiCompatibilityLevel;
            public set ApiCompatibilityLevel(value: UnityEditor.ApiCompatibilityLevel);
            /** EditorAssembliesCompatibilityLevel for Editor Assemblies.
            */
            public get EditorAssembliesCompatibilityLevel(): UnityEditor.EditorAssembliesCompatibilityLevel;
            public set EditorAssembliesCompatibilityLevel(value: UnityEditor.EditorAssembliesCompatibilityLevel);
            /** Array of path to the response files that affects the current compilation.
            */
            public get ResponseFiles(): System.Array$1<string>;
            public set ResponseFiles(value: System.Array$1<string>);
            /** String representation of the language version being used to compile the current Assembly.
            */
            public get LanguageVersion(): string;
            public constructor ()
        }
        /** An exception throw for Assembly Definition Files errors.
        */
        class AssemblyDefinitionException extends System.Exception implements System.Runtime.Serialization.ISerializable, System.Runtime.InteropServices._Exception
        {
            protected [__keep_incompatibility]: never;
            /** File paths of the assembly definition files that caused the exception.
            */
            public get filePaths(): System.Array$1<string>;
            public constructor ($message: string, ...filePaths: string[])
        }
        /** An exception throw for Precompiled Assembly errors.
        */
        class PrecompiledAssemblyException extends System.Exception implements System.Runtime.Serialization.ISerializable, System.Runtime.InteropServices._Exception
        {
            protected [__keep_incompatibility]: never;
            /** File paths for Precompiled Assemblies that caused the exception.
            */
            public get filePaths(): System.Array$1<string>;
            public constructor ($message: string, ...filePaths: string[])
        }
        /** Flags for Assembly.
        */
        enum AssemblyFlags
        { None = 0, EditorAssembly = 1 }
        /** Compiler message type.
        */
        enum CompilerMessageType
        { Error = 0, Warning = 1, Info = 2 }
    }
    namespace UnityEditor.Compilation.CompilationPipeline {
        enum PrecompiledAssemblySources
        { UserAssembly = 1, UnityEngine = 2, UnityEditor = 4, SystemAssembly = 8, UnityAssembly = 16, All = -1 }
    }
    namespace UnityEditor.VisualStudioIntegration {
        class SolutionGuidGenerator extends System.Object
        {
            protected [__keep_incompatibility]: never;
            public static GuidForProject ($projectName: string) : string
            public static GuidForSolution ($projectName: string, $sourceFileExtension: string) : string
        }
    }
    namespace UnityEditor.Callbacks {
        /** Add this attribute to a method to get a notification just after building the player.
        */
        class PostProcessBuildAttribute extends UnityEditor.CallbackOrderAttribute implements System.Runtime.InteropServices._Attribute
        {
            protected [__keep_incompatibility]: never;
            public constructor ()
            public constructor ($callbackOrder: number)
        }
        /** Add this attribute to a method to get a notification just after building the Scene.
        */
        class PostProcessSceneAttribute extends UnityEditor.CallbackOrderAttribute implements System.Runtime.InteropServices._Attribute
        {
            protected [__keep_incompatibility]: never;
            public constructor ()
            public constructor ($callbackOrder: number)
            public constructor ($callbackOrder: number, $version: number)
        }
        /** Add this attribute to a method to get a notification after scripts have been reloaded.
        */
        class DidReloadScripts extends UnityEditor.CallbackOrderAttribute implements System.Runtime.InteropServices._Attribute
        {
            protected [__keep_incompatibility]: never;
            public constructor ()
            public constructor ($callbackOrder: number)
        }
        /** Indicates whether OnOpenAssetAttribute decorated method is a validation function that checks if asset opening is handled by Unity or a custom script.
        */
        enum OnOpenAssetAttributeMode
        { Execute = 0, Validate = 1 }
        class OnOpenAssetAttribute extends UnityEditor.CallbackOrderAttribute implements System.Runtime.InteropServices._Attribute
        {
            protected [__keep_incompatibility]: never;
            public constructor ()
            public constructor ($attributeMode: UnityEditor.Callbacks.OnOpenAssetAttributeMode)
            public constructor ($callbackOrder: number)
            public constructor ($callbackOrder: number, $attributeMode: UnityEditor.Callbacks.OnOpenAssetAttributeMode)
        }
        /** Add this attribute to a callback method to mark that this callback must be run after any callbacks that are part of the specified class.
        */
        class RunAfterClassAttribute extends System.Attribute implements System.Runtime.InteropServices._Attribute
        {
            protected [__keep_incompatibility]: never;
            /** The class type that should be run before this callback.
            */
            public get classType(): System.Type;
            public constructor ($type: System.Type)
            public constructor ($assemblyQualifiedName: string)
        }
        /** Add this attribute to a callback method to mark that this callback must be run before any callbacks that are part of the specified class.
        */
        class RunBeforeClassAttribute extends System.Attribute implements System.Runtime.InteropServices._Attribute
        {
            protected [__keep_incompatibility]: never;
            /** The class type that should be run before this callback.
            */
            public get classType(): System.Type;
            public constructor ($type: System.Type)
            public constructor ($assemblyQualifiedName: string)
        }
        /** Add this attribute to a callback method to mark that this callback must be run after any callbacks that are part of the specified assembly.
        */
        class RunAfterAssemblyAttribute extends System.Attribute implements System.Runtime.InteropServices._Attribute
        {
            protected [__keep_incompatibility]: never;
            /** The name of the assembly that should be run before this callback.
            */
            public get assemblyName(): string;
            public constructor ($assemblyName: string)
        }
        /** Add this attribute to a callback method to indicate that this callback must be run before any callbacks that are part of the specified assembly.
        */
        class RunBeforeAssemblyAttribute extends System.Attribute implements System.Runtime.InteropServices._Attribute
        {
            protected [__keep_incompatibility]: never;
            /** The name of the assembly that should be called after this callback.
            */
            public get assemblyName(): string;
            public constructor ($assemblyName: string)
        }
        /** Add this attribute to a callback method to mark that this callback must be run after any callbacks that are part of the specified package.
        */
        class RunAfterPackageAttribute extends System.Attribute implements System.Runtime.InteropServices._Attribute
        {
            protected [__keep_incompatibility]: never;
            /** The name of the package that should be run before this callback.
            */
            public get packageName(): string;
            public constructor ($packageName: string)
        }
        /** Add this attribute to a callback method to mark that this callback must be run before any callbacks that are part of the specified package.
        */
        class RunBeforePackageAttribute extends System.Attribute implements System.Runtime.InteropServices._Attribute
        {
            protected [__keep_incompatibility]: never;
            /** The name of the package that should be run after this callback.
            */
            public get packageName(): string;
            public constructor ($packageName: string)
        }
    }
    namespace UnityEditor.UnityLinker {
        /** Contains information for various IUnityLinkerProcessor callbacks.
        */
        class UnityLinkerBuildPipelineData extends System.Object
        {
            protected [__keep_incompatibility]: never;
            /** The build target.
            */
            public target : UnityEditor.BuildTarget
            public constructor ($target: UnityEditor.BuildTarget, $inputDirectory: string)
        }
    }
    namespace UnityEditor.Build.Player {
        /** Script compilation options.
        */
        enum ScriptCompilationOptions
        { None = 0, DevelopmentBuild = 1, Assertions = 2 }
        /** Struct containing information on how to build scripts.
        */
        class ScriptCompilationSettings extends System.ValueType
        {
            protected [__keep_incompatibility]: never;
            /** Subtarget for which scripts will be compiled.
            */
            public get subtarget(): number;
            public set subtarget(value: number);
            /** Platform group for which scripts will be compiled.
            */
            public get target(): UnityEditor.BuildTarget;
            public set target(value: UnityEditor.BuildTarget);
            /** Platform group for which scripts will be compiled.
            */
            public get group(): UnityEditor.BuildTargetGroup;
            public set group(value: UnityEditor.BuildTargetGroup);
            /** Specific compiler options to use when compiling scripts.
            */
            public get options(): UnityEditor.Build.Player.ScriptCompilationOptions;
            public set options(value: UnityEditor.Build.Player.ScriptCompilationOptions);
            /** User-specified preprocessor defines used while compiling assemblies.
            */
            public get extraScriptingDefines(): System.Array$1<string>;
            public set extraScriptingDefines(value: System.Array$1<string>);
        }
        /** Struct with result information returned from the PlayerBuildInterface.CompilePlayerScripts API.
        */
        class ScriptCompilationResult extends System.ValueType
        {
            protected [__keep_incompatibility]: never;
            /** Collection of assemblies compiled.
            */
            public get assemblies(): System.Collections.ObjectModel.ReadOnlyCollection$1<string>;
            /** Type information generated by the script compilation call.
            */
            public get typeDB(): UnityEditor.Build.Player.TypeDB;
        }
        /** Container for holding information about script type and property data.
        */
        class TypeDB extends System.Object implements System.Runtime.Serialization.ISerializable, System.IDisposable
        {
            protected [__keep_incompatibility]: never;
            /** Dispose the TypeDB destroying all internal state.
            */
            public Dispose () : void
            /** Gets the hash for the BuildReferenceMap.
            */
            public GetHash128 () : UnityEngine.Hash128
            /** ISerializable method for serialization support outside of Unity's internal serialization system.
            */
            public GetObjectData ($info: System.Runtime.Serialization.SerializationInfo, $context: System.Runtime.Serialization.StreamingContext) : void
        }
        /** Low level interface for building scripts for Unity.
        */
        class PlayerBuildInterface extends System.Object
        {
            protected [__keep_incompatibility]: never;
            public static ExtraTypesProvider : System.Func$1<System.Collections.Generic.IEnumerable$1<string>>
            /** Compiles user scripts into one or more assemblies.
            */
            public static CompilePlayerScripts ($input: UnityEditor.Build.Player.ScriptCompilationSettings, $outputFolder: string) : UnityEditor.Build.Player.ScriptCompilationResult
        }
        class TypeDbHelper extends System.Object
        {
            protected [__keep_incompatibility]: never;
            public static TryGet ($path: string, $assemblyPath: string, $typeDb: $Ref<UnityEditor.Build.Player.TypeDB>) : boolean
        }
    }
    namespace UnityEditor.Build.Content {
        /** Struct containing information about where an object was serialized.
        */
        class SerializedLocation extends System.ValueType
        {
            protected [__keep_incompatibility]: never;
            /** File path on disk where the object was serialized.
            */
            public get fileName(): string;
            /** Byte offset for the start of the object's data.
            */
            public get offset(): bigint;
            /** Size of the object's data.
            */
            public get size(): bigint;
        }
        /** Struct containing details about how an object was serialized.
        */
        class ObjectSerializedInfo extends System.ValueType
        {
            protected [__keep_incompatibility]: never;
            /** Object that was serialized.
            */
            public get serializedObject(): UnityEditor.Build.Content.ObjectIdentifier;
            /** Serialized object header information.
            */
            public get header(): UnityEditor.Build.Content.SerializedLocation;
            /** Raw byte data of the object if it was serialized seperately from the header.
            */
            public get rawData(): UnityEditor.Build.Content.SerializedLocation;
        }
        /** Struct that identifies a specific object project wide.
        */
        class ObjectIdentifier extends System.ValueType implements System.IEquatable$1<UnityEditor.Build.Content.ObjectIdentifier>
        {
            protected [__keep_incompatibility]: never;
            /** The specific asset that contains this object.
            */
            public get guid(): UnityEditor.GUID;
            /** The index of the object inside a serialized file.
            */
            public get localIdentifierInFile(): bigint;
            /** Type of file that contains this object.
            */
            public get fileType(): UnityEditor.Build.Content.FileType;
            /** The file path on disk that contains this object. (Only used for objects not known by the AssetDatabase).
            */
            public get filePath(): string;
            public static op_Equality ($a: UnityEditor.Build.Content.ObjectIdentifier, $b: UnityEditor.Build.Content.ObjectIdentifier) : boolean
            public static op_Inequality ($a: UnityEditor.Build.Content.ObjectIdentifier, $b: UnityEditor.Build.Content.ObjectIdentifier) : boolean
            public static op_LessThan ($a: UnityEditor.Build.Content.ObjectIdentifier, $b: UnityEditor.Build.Content.ObjectIdentifier) : boolean
            public static op_GreaterThan ($a: UnityEditor.Build.Content.ObjectIdentifier, $b: UnityEditor.Build.Content.ObjectIdentifier) : boolean
            /** Returns true if the objects are equal.
            */
            public Equals ($obj: any) : boolean
            public Equals ($other: UnityEditor.Build.Content.ObjectIdentifier) : boolean
            /** Tries to find, load, and return the Object that represents this ObjectIdentifier.
            */
            public static ToObject ($objectId: UnityEditor.Build.Content.ObjectIdentifier) : UnityEngine.Object
            /** Tries to return the InstanceID that represents this ObjectIdentifier.
            */
            public static ToInstanceID ($objectId: UnityEditor.Build.Content.ObjectIdentifier) : number
            /** Tries to convert a persistent Object into an ObjectIdentifier.
            */
            public static TryGetObjectIdentifier ($targetObject: UnityEngine.Object, $objectId: $Ref<UnityEditor.Build.Content.ObjectIdentifier>) : boolean
            /** Tries to convert a persistent Object into an ObjectIdentifier.
            */
            public static TryGetObjectIdentifier ($instanceID: number, $objectId: $Ref<UnityEditor.Build.Content.ObjectIdentifier>) : boolean
        }
        /** Desribes an externally referenced file. This is returned as part of the WriteResult when writing a serialized file.
        */
        class ExternalFileReference extends System.ValueType
        {
            protected [__keep_incompatibility]: never;
            /** The path of the file that is referenced.
            */
            public get filePath(): string;
            /** The lookup resolution index for the GUID field in the editor. This is used in conjunction with the GUID internally and should not be modified.
            */
            public get type(): number;
            /** A GUID that represents the file being referenced. This GUID might be used to locate default editor resources, but generally pathName is used to identify externally referenced files.
            */
            public get guid(): UnityEditor.GUID;
        }
        /** Struct containing the results from the ContentBuildPipeline.WriteSerialziedFile and ContentBuildPipeline.WriteSceneSerialziedFile APIs.
        */
        class WriteResult extends System.ValueType
        {
            protected [__keep_incompatibility]: never;
            /** Collection of objects written to the serialized file.
            */
            public get serializedObjects(): System.Collections.ObjectModel.ReadOnlyCollection$1<UnityEditor.Build.Content.ObjectSerializedInfo>;
            /** Collection of files written by the ContentBuildInterface.WriteSerializedFile or ContentBuildInterface.WriteSceneSerializedFile APIs.
            */
            public get resourceFiles(): System.Collections.ObjectModel.ReadOnlyCollection$1<UnityEditor.Build.Content.ResourceFile>;
            /** Types that were included in the serialized file.
            */
            public get includedTypes(): System.Collections.ObjectModel.ReadOnlyCollection$1<System.Type>;
            /** SerializeReference instances fully qualified name which were included in the serialized file.
            */
            public get includedSerializeReferenceFQN(): System.Collections.ObjectModel.ReadOnlyCollection$1<string>;
            /** The collection of externally referenced files.
            */
            public get externalFileReferences(): System.Collections.ObjectModel.ReadOnlyCollection$1<UnityEditor.Build.Content.ExternalFileReference>;
        }
        /** Details about a specific file written by the ContentBuildInterface.WriteSerializedFile or ContentBuildInterface.WriteSceneSerializedFile APIs.
        */
        class ResourceFile extends System.ValueType
        {
            protected [__keep_incompatibility]: never;
            /** Path to the resource file on disk.
            */
            public get fileName(): string;
            public set fileName(value: string);
            /** Internal name used by the loading system for a resource file.
            */
            public get fileAlias(): string;
            public set fileAlias(value: string);
            /** Bool to determine if this resource file represents serialized Unity objects (serialized file) or binary resource data.
            */
            public get serializedFile(): boolean;
            public set serializedFile(value: boolean);
        }
        /** Container for holding information about where objects will be serialized in a build.
        */
        class BuildReferenceMap extends System.Object implements System.Runtime.Serialization.ISerializable, System.IDisposable
        {
            protected [__keep_incompatibility]: never;
            /** Dispose the BuildReferenceMap destroying all internal state.
            */
            public Dispose () : void
            /** Gets the hash for the BuildReferenceMap.
            */
            public GetHash128 () : UnityEngine.Hash128
            /** Adds a mapping for a single Object to where it will be serialized out to the build.
            */
            public AddMapping ($internalFileName: string, $serializationIndex: bigint, $objectID: UnityEditor.Build.Content.ObjectIdentifier, $overwrite?: boolean) : void
            /** Adds mappings for a set of Objects to where they will be serialized out to the build.
            */
            public AddMappings ($internalFileName: string, $objectIDs: System.Array$1<UnityEditor.Build.Content.SerializationInfo>, $overwrite?: boolean) : void
            /** Filters this BuildReferenceMap instance to remove references to any objects that are not in the array of ObjectIdentifiers specified by objectIds.
            * @param $objectIds The set of desired objects.
            */
            public FilterToSubset ($objectIds: System.Array$1<UnityEditor.Build.Content.ObjectIdentifier>) : void
            /** ISerializable method for serialization support outside of Unity's internal serialization system.
            */
            public GetObjectData ($info: System.Runtime.Serialization.SerializationInfo, $context: System.Runtime.Serialization.StreamingContext) : void
            public constructor ()
        }
        /** Container for holding object serialization order information for a build.
        */
        class SerializationInfo extends System.Object
        {
            protected [__keep_incompatibility]: never;
            /** Source object to be serialzied to disk.
            */
            public get serializationObject(): UnityEditor.Build.Content.ObjectIdentifier;
            public set serializationObject(value: UnityEditor.Build.Content.ObjectIdentifier);
            /** Order in which the object will be serialized to disk.
            */
            public get serializationIndex(): bigint;
            public set serializationIndex(value: bigint);
            public constructor ()
        }
        /** Build options for content.
        */
        enum ContentBuildFlags
        { None = 0, DisableWriteTypeTree = 1, StripUnityVersion = 2, DevelopmentBuild = 4 }
        /** Struct containing information on how to build content.
        */
        class BuildSettings extends System.ValueType
        {
            protected [__keep_incompatibility]: never;
            /** Type information to use for building content.
            */
            public get typeDB(): UnityEditor.Build.Player.TypeDB;
            public set typeDB(value: UnityEditor.Build.Player.TypeDB);
            /** Platform target for which content will be built.
            */
            public get target(): UnityEditor.BuildTarget;
            public set target(value: UnityEditor.BuildTarget);
            /** Platform subtarget for which content will be built.
            */
            public get subtarget(): number;
            public set subtarget(value: number);
            /** Platform group for which content will be built.
            */
            public get group(): UnityEditor.BuildTargetGroup;
            public set group(value: UnityEditor.BuildTargetGroup);
            /** Specific build options to use when building content.
            */
            public get buildFlags(): UnityEditor.Build.Content.ContentBuildFlags;
            public set buildFlags(value: UnityEditor.Build.Content.ContentBuildFlags);
        }
        /** Caching object for the Scriptable Build Pipeline.
        */
        class BuildUsageCache extends System.Object implements System.IDisposable
        {
            protected [__keep_incompatibility]: never;
            /** Dispose the BuildUsageCache destroying all internal state.
            */
            public Dispose () : void
            public constructor ()
        }
        /** Container for holding information about lighting information being used in a build.
        */
        class BuildUsageTagGlobal extends System.ValueType
        {
            protected [__keep_incompatibility]: never;
            public static op_BitwiseOr ($x: UnityEditor.Build.Content.BuildUsageTagGlobal, $y: UnityEditor.Build.Content.BuildUsageTagGlobal) : UnityEditor.Build.Content.BuildUsageTagGlobal
        }
        /** Container for holding information about how objects are being used in a build.
        */
        class BuildUsageTagSet extends System.Object implements System.Runtime.Serialization.ISerializable, System.IDisposable
        {
            protected [__keep_incompatibility]: never;
            /** Dispose the BuildUsageTagSet destroying all internal state.
            */
            public Dispose () : void
            /** Gets the hash for the BuildReferenceMap.
            */
            public GetHash128 () : UnityEngine.Hash128
            /** Returns an array of ObjectIdentifiers that this BuildUsageTagSet contains usage information about.
            */
            public GetObjectIdentifiers () : System.Array$1<UnityEditor.Build.Content.ObjectIdentifier>
            /** Adds the Object usage information from another BuildUsageTagSet to this BuildUsageTagSet.
            * @param $other Object usage information to be added to this BuildUsageTagSet.
            */
            public UnionWith ($other: UnityEditor.Build.Content.BuildUsageTagSet) : void
            /** Filters this BuildUsageTagSet instance to remove references to any objects that are not in the array of ObjectIdentifiers specified by objectIds.
            * @param $objectIds The set of desired objects.
            */
            public FilterToSubset ($objectIds: System.Array$1<UnityEditor.Build.Content.ObjectIdentifier>) : void
            /** ISerializable method for serialization support outside of Unity's internal serialization system.
            */
            public GetObjectData ($info: System.Runtime.Serialization.SerializationInfo, $context: System.Runtime.Serialization.StreamingContext) : void
            public constructor ()
        }
        /** Dependency calculation flags to control what is returned, and how it operates.
        */
        enum DependencyType
        { RecursiveOperation = 1, MissingReferences = 2, ValidReferences = 4, DefaultDependencies = 5 }
        /** Low level interface for building content for Unity.
        */
        class ContentBuildInterface extends System.Object
        {
            protected [__keep_incompatibility]: never;
            /** Returns an array of AssetBundleBuild structs that detail the current AssetBundle layout, as set through the Inspector and stored in the AssetDatabase.
            */
            public static GenerateAssetBundleBuilds () : System.Array$1<UnityEditor.AssetBundleBuild>
            /** Returns the global usage information calculated by the Shader Stripping section of Graphics Settings.
            */
            public static GetGlobalUsageFromGraphicsSettings () : UnityEditor.Build.Content.BuildUsageTagGlobal
            /** Gets information about the lighting and render settings in the active scene.
            * @param $target The target platform.
            * @returns An object containing the lighting and fog settings for the active scene on the specified platform. 
            */
            public static GetGlobalUsageFromActiveScene ($target: UnityEditor.BuildTarget) : UnityEditor.Build.Content.BuildUsageTagGlobal
            /** Returns True if the passed in target object is a valid runtime object.
            */
            public static ObjectIsSupportedInBuild ($targetObject: UnityEngine.Object) : boolean
            /** Calculates the Scene dependency information.
            * @param $usageCache Optional cache object to use for improving performance with multiple calls to this api.
            * @param $scenePath Input path of the Scene for dependency calculation.
            * @param $settings Settings for dependency calculation.
            * @param $usageSet Output usage tags generated from dependency calculation.
            * @returns Dependency information for the Scene. 
            */
            public static CalculatePlayerDependenciesForScene ($scenePath: string, $settings: UnityEditor.Build.Content.BuildSettings, $usageSet: UnityEditor.Build.Content.BuildUsageTagSet) : UnityEditor.Build.Content.SceneDependencyInfo
            /** Calculates the Scene dependency information.
            * @param $usageCache Optional cache object to use for improving performance with multiple calls to this api.
            * @param $scenePath Input path of the Scene for dependency calculation.
            * @param $settings Settings for dependency calculation.
            * @param $usageSet Output usage tags generated from dependency calculation.
            * @returns Dependency information for the Scene. 
            */
            public static CalculatePlayerDependenciesForScene ($scenePath: string, $settings: UnityEditor.Build.Content.BuildSettings, $usageSet: UnityEditor.Build.Content.BuildUsageTagSet, $usageCache: UnityEditor.Build.Content.BuildUsageCache) : UnityEditor.Build.Content.SceneDependencyInfo
            public static CalculatePlayerDependenciesForScene ($scenePath: string, $settings: UnityEditor.Build.Content.BuildSettings, $usageSet: UnityEditor.Build.Content.BuildUsageTagSet, $usageCache: UnityEditor.Build.Content.BuildUsageCache, $mode: UnityEditor.Build.Content.DependencyType) : UnityEditor.Build.Content.SceneDependencyInfo
            /** Calculates dependency information for various internal Unity game manager classes.
            * @param $settings Settings for dependency calculation.
            * @param $globalUsage Global usage tag for lighting and fog modes in use in the project.
            * @param $usageSet Output usage tags generated from dependency calculation.
            * @param $usageCache Optional cache object to use for improving performance with multiple calls to this api.
            * @param $mode Specifies how to calculate dependencies between internal Unity game managers and game assets.
            * @returns The calculated dependencies for internal Unity game manager classes. 
            */
            public static CalculatePlayerDependenciesForGameManagers ($settings: UnityEditor.Build.Content.BuildSettings, $globalUsage: UnityEditor.Build.Content.BuildUsageTagGlobal, $usageSet: UnityEditor.Build.Content.BuildUsageTagSet) : UnityEditor.Build.Content.GameManagerDependencyInfo
            /** Calculates dependency information for various internal Unity game manager classes.
            * @param $settings Settings for dependency calculation.
            * @param $globalUsage Global usage tag for lighting and fog modes in use in the project.
            * @param $usageSet Output usage tags generated from dependency calculation.
            * @param $usageCache Optional cache object to use for improving performance with multiple calls to this api.
            * @param $mode Specifies how to calculate dependencies between internal Unity game managers and game assets.
            * @returns The calculated dependencies for internal Unity game manager classes. 
            */
            public static CalculatePlayerDependenciesForGameManagers ($settings: UnityEditor.Build.Content.BuildSettings, $globalUsage: UnityEditor.Build.Content.BuildUsageTagGlobal, $usageSet: UnityEditor.Build.Content.BuildUsageTagSet, $usageCache: UnityEditor.Build.Content.BuildUsageCache) : UnityEditor.Build.Content.GameManagerDependencyInfo
            /** Calculates dependency information for various internal Unity game manager classes.
            * @param $settings Settings for dependency calculation.
            * @param $globalUsage Global usage tag for lighting and fog modes in use in the project.
            * @param $usageSet Output usage tags generated from dependency calculation.
            * @param $usageCache Optional cache object to use for improving performance with multiple calls to this api.
            * @param $mode Specifies how to calculate dependencies between internal Unity game managers and game assets.
            * @returns The calculated dependencies for internal Unity game manager classes. 
            */
            public static CalculatePlayerDependenciesForGameManagers ($settings: UnityEditor.Build.Content.BuildSettings, $globalUsage: UnityEditor.Build.Content.BuildUsageTagGlobal, $usageSet: UnityEditor.Build.Content.BuildUsageTagSet, $usageCache: UnityEditor.Build.Content.BuildUsageCache, $mode: UnityEditor.Build.Content.DependencyType) : UnityEditor.Build.Content.GameManagerDependencyInfo
            /** Returns a list of objects directly contained inside of an asset.
            */
            public static GetPlayerObjectIdentifiersInAsset ($asset: UnityEditor.GUID, $target: UnityEditor.BuildTarget) : System.Array$1<UnityEditor.Build.Content.ObjectIdentifier>
            /** Returns a list of objects directly contained inside of a loose serialized file.
            */
            public static GetPlayerObjectIdentifiersInSerializedFile ($filePath: string, $target: UnityEditor.BuildTarget) : System.Array$1<UnityEditor.Build.Content.ObjectIdentifier>
            /** Returns a list of objects referenced by an object.
            */
            public static GetPlayerDependenciesForObject ($objectID: UnityEditor.Build.Content.ObjectIdentifier, $target: UnityEditor.BuildTarget, $typeDB: UnityEditor.Build.Player.TypeDB) : System.Array$1<UnityEditor.Build.Content.ObjectIdentifier>
            public static GetPlayerDependenciesForObject ($objectID: UnityEditor.Build.Content.ObjectIdentifier, $target: UnityEditor.BuildTarget, $typeDB: UnityEditor.Build.Player.TypeDB, $mode: UnityEditor.Build.Content.DependencyType) : System.Array$1<UnityEditor.Build.Content.ObjectIdentifier>
            public static GetPlayerDependenciesForObject ($targetObject: UnityEngine.Object, $target: UnityEditor.BuildTarget, $typeDB: UnityEditor.Build.Player.TypeDB) : System.Array$1<UnityEditor.Build.Content.ObjectIdentifier>
            public static GetPlayerDependenciesForObject ($targetObject: UnityEngine.Object, $target: UnityEditor.BuildTarget, $typeDB: UnityEditor.Build.Player.TypeDB, $mode: UnityEditor.Build.Content.DependencyType) : System.Array$1<UnityEditor.Build.Content.ObjectIdentifier>
            /** Returns a list of objects referenced by a set of objects.
            */
            public static GetPlayerDependenciesForObjects ($objectIDs: System.Array$1<UnityEditor.Build.Content.ObjectIdentifier>, $target: UnityEditor.BuildTarget, $typeDB: UnityEditor.Build.Player.TypeDB) : System.Array$1<UnityEditor.Build.Content.ObjectIdentifier>
            public static GetPlayerDependenciesForObjects ($objectIDs: System.Array$1<UnityEditor.Build.Content.ObjectIdentifier>, $target: UnityEditor.BuildTarget, $typeDB: UnityEditor.Build.Player.TypeDB, $mode: UnityEditor.Build.Content.DependencyType) : System.Array$1<UnityEditor.Build.Content.ObjectIdentifier>
            public static GetPlayerDependenciesForObjects ($objects: System.Array$1<UnityEngine.Object>, $target: UnityEditor.BuildTarget, $typeDB: UnityEditor.Build.Player.TypeDB) : System.Array$1<UnityEditor.Build.Content.ObjectIdentifier>
            public static GetPlayerDependenciesForObjects ($objects: System.Array$1<UnityEngine.Object>, $target: UnityEditor.BuildTarget, $typeDB: UnityEditor.Build.Player.TypeDB, $mode: UnityEditor.Build.Content.DependencyType) : System.Array$1<UnityEditor.Build.Content.ObjectIdentifier>
            /** Returns a list of visible objects directly contained inside of an asset.
            */
            public static GetPlayerAssetRepresentations ($asset: UnityEditor.GUID, $target: UnityEditor.BuildTarget) : System.Array$1<UnityEditor.Build.Content.ObjectIdentifier>
            /** Calculates the build usage of a set of objects.
            * @param $objectIDs Objects that will have their build usage calculated.
            * @param $dependentObjectIDs Objects that reference the Objects being calculated.
            * @param $globalUsage Lighting information used by the build.
            * @param $usageSet The BuildUsageTagSet where the calculated usage information will be stored.
            * @param $usageCache Optional cache object to use for improving performance with multiple calls to this api.
            */
            public static CalculateBuildUsageTags ($objectIDs: System.Array$1<UnityEditor.Build.Content.ObjectIdentifier>, $dependentObjectIDs: System.Array$1<UnityEditor.Build.Content.ObjectIdentifier>, $globalUsage: UnityEditor.Build.Content.BuildUsageTagGlobal, $usageSet: UnityEditor.Build.Content.BuildUsageTagSet) : void
            /** Calculates the build usage of a set of objects.
            * @param $objectIDs Objects that will have their build usage calculated.
            * @param $dependentObjectIDs Objects that reference the Objects being calculated.
            * @param $globalUsage Lighting information used by the build.
            * @param $usageSet The BuildUsageTagSet where the calculated usage information will be stored.
            * @param $usageCache Optional cache object to use for improving performance with multiple calls to this api.
            */
            public static CalculateBuildUsageTags ($objectIDs: System.Array$1<UnityEditor.Build.Content.ObjectIdentifier>, $dependentObjectIDs: System.Array$1<UnityEditor.Build.Content.ObjectIdentifier>, $globalUsage: UnityEditor.Build.Content.BuildUsageTagGlobal, $usageSet: UnityEditor.Build.Content.BuildUsageTagSet, $usageCache: UnityEditor.Build.Content.BuildUsageCache) : void
            /** Returns the System.Type of the ObjectIdentifier specified by objectID.
            * @param $objectID The specific object.
            * @returns The type of the object. 
            */
            public static GetTypeForObject ($objectID: UnityEditor.Build.Content.ObjectIdentifier) : System.Type
            /** Returns the System.Type of the ObjectIdentifier and the referenced SerializeReference class types specified by objectID.
            * @param $objectID The specific object.
            * @returns The array of unique types. 
            */
            public static GetTypesForObject ($objectID: UnityEditor.Build.Content.ObjectIdentifier) : System.Array$1<System.Type>
            /** Returns the System.Type of the ObjectIdentifiers and the referenced SerializeReference class types specified by objectIDs.
            * @param $objectIDs The specific objects.
            * @returns The array of unique types. 
            */
            public static GetTypeForObjects ($objectIDs: System.Array$1<UnityEditor.Build.Content.ObjectIdentifier>) : System.Array$1<System.Type>
            /** Writes objects to a serialized file on disk.
            */
            public static WriteSerializedFile ($outputFolder: string, $parameters: UnityEditor.Build.Content.WriteParameters) : UnityEditor.Build.Content.WriteResult
            /** Writes Scene objects to a serialized file on disk.
            */
            public static WriteSceneSerializedFile ($outputFolder: string, $parameters: UnityEditor.Build.Content.WriteSceneParameters) : UnityEditor.Build.Content.WriteResult
            /** Writes the current settings of internal Unity game manager classes to the 'globalgamemanagers' file on disk.
            * @param $outputFolder The location to write the file to.
            * @param $parameters The set of parameters used to write the file.
            * @returns The detailed results from writing the file. 
            */
            public static WriteGameManagersSerializedFile ($outputFolder: string, $parameters: UnityEditor.Build.Content.WriteManagerParameters) : UnityEditor.Build.Content.WriteResult
            /** Create a Unity archive file, containing the content of one or more resource files.
            * @param $resourceFiles 
            Array of ResourceFile structs pointing to the files that should be copied into the Archive.
            * @param $outputBundlePath 
            File path of the output Archive file.
            * @param $compression 
            Type of compression to apply to the content of the Archive.
            * @param $stripUnityVersion 
            By default the Archive file will record the version of the Unity Editor that created the Archive.  When true is passed for this parameter the version will not be recorded in the Archive header.
            This can be useful when rebuilding AssetBundles after a minor upgrade of the Unity Editor, to make sure otherwise identical AssetBundles generate the exact same full-file content.
            Note: The CRC and hash values calculated by Unity for AssetBundles ignore the Archive Header. So it is not necessary to strip the Unity Version in the Archive Header when using those for integrity and version tracking.
            */
            public static ArchiveAndCompress ($resourceFiles: System.Array$1<UnityEditor.Build.Content.ResourceFile>, $outputBundlePath: string, $compression: UnityEngine.BuildCompression) : number
            /** Create a Unity archive file, containing the content of one or more resource files.
            * @param $resourceFiles 
            Array of ResourceFile structs pointing to the files that should be copied into the Archive.
            * @param $outputBundlePath 
            File path of the output Archive file.
            * @param $compression 
            Type of compression to apply to the content of the Archive.
            * @param $stripUnityVersion 
            By default the Archive file will record the version of the Unity Editor that created the Archive.  When true is passed for this parameter the version will not be recorded in the Archive header.
            This can be useful when rebuilding AssetBundles after a minor upgrade of the Unity Editor, to make sure otherwise identical AssetBundles generate the exact same full-file content.
            Note: The CRC and hash values calculated by Unity for AssetBundles ignore the Archive Header. So it is not necessary to strip the Unity Version in the Archive Header when using those for integrity and version tracking.
            */
            public static ArchiveAndCompress ($resourceFiles: System.Array$1<UnityEditor.Build.Content.ResourceFile>, $outputBundlePath: string, $compression: UnityEngine.BuildCompression, $stripUnityVersion: boolean) : number
            /** Starts a profile capture to record content build profile events.
            * @param $options Used to filter captured events.
            */
            public static StartProfileCapture ($options: UnityEditor.Build.Content.ProfileCaptureOptions) : void
            /** Returns an array of ContentBuildProfileEvent structs that contain information for each occuring event. Also stops the profile capture.
            */
            public static StopProfileCapture () : System.Array$1<UnityEditor.Build.Content.ContentBuildProfileEvent>
            /** Returns a unique hash for a given type's serialized layout.
            * @param $type The type of the object.
            * @param $typeDB The user script TypeDB for the player.
            * @returns The unique hash for a type's serialized layout. 
            */
            public static CalculatePlayerSerializationHashForType ($type: System.Type, $typeDB: UnityEditor.Build.Player.TypeDB) : UnityEngine.Hash128
        }
        /** Scene dependency information generated from the ContentBuildInterface.PrepareScene API.
        */
        class SceneDependencyInfo extends System.ValueType
        {
            protected [__keep_incompatibility]: never;
            /** Scene's original asset path.
            */
            public get scene(): string;
            /** List of objects referenced by the Scene.
            */
            public get referencedObjects(): System.Collections.ObjectModel.ReadOnlyCollection$1<UnityEditor.Build.Content.ObjectIdentifier>;
            /** Types that are used by scene objects.
            */
            public get includedTypes(): System.Collections.ObjectModel.ReadOnlyCollection$1<System.Type>;
            /** Lighting information used by the Scene.
            */
            public get globalUsage(): UnityEditor.Build.Content.BuildUsageTagGlobal;
        }
        /** Contains dependency information for internal Unity game manager classes. Call ContentBuildInterface.WriteGameManagersSerializedFile or ContentBuildInterface.CalculatePlayerDependenciesForGameManagers to get an instance of this class.
        */
        class GameManagerDependencyInfo extends System.ValueType
        {
            protected [__keep_incompatibility]: never;
            /** The project-wide identifiers for the game manager classes referenced in this collection of dependency information.
            */
            public get managerObjects(): System.Collections.ObjectModel.ReadOnlyCollection$1<UnityEditor.Build.Content.ObjectIdentifier>;
            /** The project-wide identifiers for any objects referenced by the manager classes in the managerObjects list.
            */
            public get referencedObjects(): System.Collections.ObjectModel.ReadOnlyCollection$1<UnityEditor.Build.Content.ObjectIdentifier>;
            /** The project-wide identifiers for the game manager classes referenced in this collection of dependency information.
            */
            public get includedTypes(): System.Collections.ObjectModel.ReadOnlyCollection$1<System.Type>;
        }
        /** This struct collects all the WriteSerializedFile parameters in to a single place.
        */
        class WriteParameters extends System.ValueType
        {
            protected [__keep_incompatibility]: never;
            /** The struct of internal file name, list of objects, and order of objects to use when writing the serialized file.
            */
            public writeCommand : UnityEditor.Build.Content.WriteCommand
            /** The settings to use when writing the serialized file.
            */
            public settings : UnityEditor.Build.Content.BuildSettings
            /** The global lighting information to use when writing the serialized file.
            */
            public globalUsage : UnityEditor.Build.Content.BuildUsageTagGlobal
            /** The the texture, material, mesh, and shader usage tags to use when writing the serialized file.
            */
            public usageSet : UnityEditor.Build.Content.BuildUsageTagSet
            /** The set of external objects that can be referenced by this serialized file.
            */
            public referenceMap : UnityEditor.Build.Content.BuildReferenceMap
            /** Optional Parameter used when writing a serialized file for an Asset Bundle.
            */
            public bundleInfo : UnityEditor.Build.Content.AssetBundleInfo
            /** The set of external object dependencies that need to be loaded when loading the resulting serialized file.
            */
            public preloadInfo : UnityEditor.Build.Content.PreloadInfo
        }
        /** This struct collects all the WriteSceneSerializedFile parameters in to a single place.
        */
        class WriteSceneParameters extends System.ValueType
        {
            protected [__keep_incompatibility]: never;
            /** The original scene asset path.
            */
            public scenePath : string
            /** The struct of internal file name, list of objects, and order of objects to use when writing the serialized file.
            */
            public writeCommand : UnityEditor.Build.Content.WriteCommand
            /** The settings to use when writing the serialized file.
            */
            public settings : UnityEditor.Build.Content.BuildSettings
            /** The global lighting information to use when writing the serialized file.
            */
            public globalUsage : UnityEditor.Build.Content.BuildUsageTagGlobal
            /** The the texture, material, mesh, and shader usage tags to use when writing the serialized file.
            */
            public usageSet : UnityEditor.Build.Content.BuildUsageTagSet
            /** The set of external objects that can be referenced by this serialized file.
            */
            public referenceMap : UnityEditor.Build.Content.BuildReferenceMap
            /** The set of external object dependencies that need to be loaded when loading the resulting serialzied file.
            */
            public preloadInfo : UnityEditor.Build.Content.PreloadInfo
            /** Optional Parameter used when writing a scene serialized file for an Asset Bundle.
            */
            public sceneBundleInfo : UnityEditor.Build.Content.SceneBundleInfo
        }
        /** Defines the write parameters for the ContentBuildInterface.WriteGameManagersSerializedFile function.
        */
        class WriteManagerParameters extends System.ValueType
        {
            protected [__keep_incompatibility]: never;
            /** The settings to use when writing the serialized file.
            */
            public settings : UnityEditor.Build.Content.BuildSettings
            /** The global lighting information to use when writing the serialized file.
            */
            public globalUsage : UnityEditor.Build.Content.BuildUsageTagGlobal
            /** The set of external objects that can be referenced by this serialized file.
            */
            public referenceMap : UnityEditor.Build.Content.BuildReferenceMap
        }
        /** Options for filtering captured profile events using the ContentBuildInterface.BeginProfileCapture and ContentBuildInterface.EndProfileCapture APIs.
        */
        enum ProfileCaptureOptions
        { None = 0, IgnoreShortEvents = 1 }
        /** Details about a profile event captured using the ContentBuildInterface.BeginProfileCapture and ContentBuildInterface.EndProfileCapture APIs.
        */
        class ContentBuildProfileEvent extends System.ValueType
        {
            protected [__keep_incompatibility]: never;
            /** Time in microseconds that the event has occurred relative to when the profile capture began.
            */
            public TimeMicroseconds : bigint
            /** Name of the event.
            */
            public Name : string
            /** Additional metadata associated with the event.
            */
            public Metadata : string
            /** Enum used to label the event's type.
            */
            public Type : UnityEditor.Build.Content.ProfileEventType
        }
        /** Container for holding information about a serialized file to be written.
        */
        class WriteCommand extends System.Object
        {
            protected [__keep_incompatibility]: never;
            /** Final file name on disk of the serialized file.
            */
            public get fileName(): string;
            public set fileName(value: string);
            /** Internal name used by the loading system for a serialized file.
            */
            public get internalName(): string;
            public set internalName(value: string);
            /** List of objects and their order contained inside a serialized file.
            */
            public get serializeObjects(): System.Collections.Generic.List$1<UnityEditor.Build.Content.SerializationInfo>;
            public set serializeObjects(value: System.Collections.Generic.List$1<UnityEditor.Build.Content.SerializationInfo>);
            public constructor ()
        }
        /** Container for holding asset loading information for an AssetBundle to be built.
        */
        class AssetBundleInfo extends System.Object
        {
            protected [__keep_incompatibility]: never;
            /** Friendly AssetBundle name.
            */
            public get bundleName(): string;
            public set bundleName(value: string);
            /** List of asset loading information for an AssetBundle.
            */
            public get bundleAssets(): System.Collections.Generic.List$1<UnityEditor.Build.Content.AssetLoadInfo>;
            public set bundleAssets(value: System.Collections.Generic.List$1<UnityEditor.Build.Content.AssetLoadInfo>);
            public constructor ()
        }
        /** Container for holding a list of preload objects for a Scene to be built.
        */
        class PreloadInfo extends System.Object
        {
            protected [__keep_incompatibility]: never;
            /** List of Objects for a serialized Scene that need to be preloaded.
            */
            public get preloadObjects(): System.Collections.Generic.List$1<UnityEditor.Build.Content.ObjectIdentifier>;
            public set preloadObjects(value: System.Collections.Generic.List$1<UnityEditor.Build.Content.ObjectIdentifier>);
            public constructor ()
        }
        /** Container for holding asset loading information for a streamed Scene AssetBundle to be built.
        */
        class SceneBundleInfo extends System.Object
        {
            protected [__keep_incompatibility]: never;
            /** Friendly AssetBundle name.
            */
            public get bundleName(): string;
            public set bundleName(value: string);
            /** List of Scene loading information for an AssetBundle.
            */
            public get bundleScenes(): System.Collections.Generic.List$1<UnityEditor.Build.Content.SceneLoadInfo>;
            public set bundleScenes(value: System.Collections.Generic.List$1<UnityEditor.Build.Content.SceneLoadInfo>);
            public constructor ()
        }
        /** Obsolete Enum replaced by UnityEngine.CompressionType
        */
        enum CompressionType
        { None = 0, Lzma = 1, Lz4 = 2, Lz4HC = 3 }
        /** Enum to indicate if compression should emphasize speed or size.
        */
        enum CompressionLevel
        { None = 0, Fastest = 1, Fast = 2, Normal = 3, High = 4, Maximum = 5 }
        /** Obsolete Struct replaced by UnityEngine.BuildCompression.
        */
        class BuildCompression extends System.ValueType
        {
            protected [__keep_incompatibility]: never;
        }
        /** Options for labelling captured profile events using the ContentBuildInterface.BeginProfileCapture and ContentBuildInterface.EndProfileCapture APIs.
        */
        enum ProfileEventType
        { Begin = 0, End = 1, Info = 2 }
        /** Enum description of the type of file an object comes from.
        */
        enum FileType
        { NonAssetType = 0, DeprecatedCachedAssetType = 1, SerializedAssetType = 2, MetaAssetType = 3 }
        /** Container for holding preload information for a given serialized Asset.
        */
        class AssetLoadInfo extends System.Object
        {
            protected [__keep_incompatibility]: never;
            /** GUID for the given asset.
            */
            public get asset(): UnityEditor.GUID;
            public set asset(value: UnityEditor.GUID);
            /** Friendly name used to load the built asset.
            */
            public get address(): string;
            public set address(value: string);
            /** List of objects that an asset contains in its source file.
            */
            public get includedObjects(): System.Collections.Generic.List$1<UnityEditor.Build.Content.ObjectIdentifier>;
            public set includedObjects(value: System.Collections.Generic.List$1<UnityEditor.Build.Content.ObjectIdentifier>);
            /** List of objects that an asset references.
            */
            public get referencedObjects(): System.Collections.Generic.List$1<UnityEditor.Build.Content.ObjectIdentifier>;
            public set referencedObjects(value: System.Collections.Generic.List$1<UnityEditor.Build.Content.ObjectIdentifier>);
            public constructor ()
        }
        /** Container for holding preload information for a given serialized Scene in an AssetBundle.
        */
        class SceneLoadInfo extends System.Object
        {
            protected [__keep_incompatibility]: never;
            /** GUID for the given Scene.
            */
            public get asset(): UnityEditor.GUID;
            public set asset(value: UnityEditor.GUID);
            /** Friendly name used to load the built Scene from an asset bundle.
            */
            public get address(): string;
            public set address(value: string);
            /** Internal name used to load the built Scene from an asset bundle.
            */
            public get internalName(): string;
            public set internalName(value: string);
            public constructor ()
        }
    }
    namespace UnityEditor.Android {
        interface IPostGenerateGradleAndroidProject extends UnityEditor.Build.IOrderedCallback
        {
            /** Returns the relative callback order for callbacks.  Callbacks with lower values are called before ones with higher values.
            */
            callbackOrder : number
            /** Deprecated. Use AndroidProjectFilesModifier.OnModifyAndroidProjectFiles instead.
            * @param $path The path to the root of the Unity library Gradle project. Note: when exporting the project, this parameter holds the path to the Unity library in the folder specified for export.
            */
            OnPostGenerateGradleAndroidProject ($path: string) : void
        }
    }
    namespace UnityEditor.Audio {
        class AudioMixerEffectPlugin extends UnityEditor.IAudioEffectPlugin
        {
            protected [__keep_incompatibility]: never;
            public constructor ()
        }
    }
    namespace UnityEditor.Experimental {
        /** An ArtifactKey is used for specifying an artifact to lookup or produce.
        */
        class ArtifactKey extends System.ValueType
        {
            protected [__keep_incompatibility]: never;
            /** The guid specifying the asset in question.
            */
            public guid : UnityEditor.GUID
            /** The managed type of the importer to use for producing the artifact.
            */
            public importerType : System.Type
            /** Returns true is the hash value is valid. (Read Only)
            */
            public get isValid(): boolean;
            public constructor ($g: UnityEditor.GUID)
            public constructor ($guid: UnityEditor.GUID, $importerType: System.Type)
        }
        class AssetDatabaseExperimental extends System.Object
        {
            protected [__keep_incompatibility]: never;
            public static get counters(): UnityEditor.Experimental.AssetDatabaseExperimental.AssetDatabaseCounters;
            public static get ActiveOnDemandMode(): UnityEditor.Experimental.AssetDatabaseExperimental.OnDemandMode;
            public static set ActiveOnDemandMode(value: UnityEditor.Experimental.AssetDatabaseExperimental.OnDemandMode);
            public static add_cacheServerConnectionChanged ($value: System.Action$1<UnityEditor.Experimental.AssetDatabaseExperimental.CacheServerConnectionChangedParameters>) : void
            public static remove_cacheServerConnectionChanged ($value: System.Action$1<UnityEditor.Experimental.AssetDatabaseExperimental.CacheServerConnectionChangedParameters>) : void
            public static LookupArtifact ($artifactKey: UnityEditor.Experimental.ArtifactKey) : UnityEditor.Experimental.ArtifactID
            public static ProduceArtifact ($artifactKey: UnityEditor.Experimental.ArtifactKey) : UnityEditor.Experimental.ArtifactID
            public static ProduceArtifactAsync ($artifactKey: UnityEditor.Experimental.ArtifactKey) : UnityEditor.Experimental.ArtifactID
            public static ProduceArtifactsAsync ($artifactKey: System.Array$1<UnityEditor.GUID>, $importerType?: System.Type) : System.Array$1<UnityEditor.Experimental.ArtifactID>
            public static ForceProduceArtifact ($artifactKey: UnityEditor.Experimental.ArtifactKey) : UnityEditor.Experimental.ArtifactID
            public static LookupArtifacts ($guids: Unity.Collections.NativeArray$1<UnityEditor.GUID>, $hashes: Unity.Collections.NativeArray$1<UnityEditor.Experimental.ArtifactID>, $importerType: System.Type) : void
            public static LookupArtifacts ($guids: Unity.Collections.NativeArray$1<UnityEditor.GUID>, $hashesOut: Unity.Collections.NativeArray$1<UnityEditor.Experimental.ArtifactID>) : void
            public static GetArtifactPaths ($hash: UnityEditor.Experimental.ArtifactID, $paths: $Ref<System.Array$1<string>>) : boolean
            public static GetOnDemandArtifactProgress ($artifactKey: UnityEditor.Experimental.ArtifactKey) : UnityEditor.Experimental.OnDemandProgress
            public constructor ()
        }
        /** Uniquely identifies a produced artifact such as an imported asset (e.g. result of importing a texture).
        */
        class ArtifactID extends System.ValueType
        {
            protected [__keep_incompatibility]: never;
            /** The unique value.
            */
            public value : UnityEngine.Hash128
            /** True if this ArtifactID is valid.
            */
            public get isValid(): boolean;
        }
        class OnDemandProgress extends System.ValueType
        {
            protected [__keep_incompatibility]: never;
            public state : UnityEditor.Experimental.OnDemandState
            public progress : number
        }
        class AssetMoveInfo extends System.ValueType implements System.IEquatable$1<UnityEditor.Experimental.AssetMoveInfo>
        {
            protected [__keep_incompatibility]: never;
            public get sourceAssetPath(): string;
            public get destinationAssetPath(): string;
            public Equals ($other: UnityEditor.Experimental.AssetMoveInfo) : boolean
            public Equals ($obj: any) : boolean
            public static op_Equality ($left: UnityEditor.Experimental.AssetMoveInfo, $right: UnityEditor.Experimental.AssetMoveInfo) : boolean
            public static op_Inequality ($left: UnityEditor.Experimental.AssetMoveInfo, $right: UnityEditor.Experimental.AssetMoveInfo) : boolean
            public constructor ($sourceAssetPath: string, $destinationAssetPath: string)
        }
        class AssetsModifiedProcessor extends System.Object
        {
            protected [__keep_incompatibility]: never;
            public get assetsReportedChanged(): System.Collections.Generic.HashSet$1<string>;
            public set assetsReportedChanged(value: System.Collections.Generic.HashSet$1<string>);
        }
        class BuildPipelineExperimental extends System.Object
        {
            protected [__keep_incompatibility]: never;
            public static GetSessionIdForBuildTarget ($target: UnityEditor.BuildTarget) : string
        }
        class EditorResources extends System.Object
        {
            protected [__keep_incompatibility]: never;
            public static get normalSkinIndex(): number;
            public static get darkSkinIndex(): number;
            public static get lightSkinSourcePath(): string;
            public static get darkSkinSourcePath(): string;
            public static get fontsPath(): string;
            public static get brushesPath(): string;
            public static get iconsPath(): string;
            public static get generatedIconsPath(): string;
            public static get folderIconName(): string;
            public static get emptyFolderIconName(): string;
            public static get editorDefaultResourcesPath(): string;
            public static get libraryBundlePath(): string;
            public static get dataPath(): string;
            public static Load ($assetPath: string, $type: System.Type) : UnityEngine.Object
            public static GetAssetPath ($obj: UnityEngine.Object) : string
            public static ExpandPath ($path: string) : string
            public static GetFullPath ($path: string) : string
            public static Exists ($path: string) : boolean
            public constructor ()
        }
        /** Experimental lightmapping features.
        */
        class Lightmapping extends System.Object
        {
            protected [__keep_incompatibility]: never;
            /** If enabled ignores the direct contribution from the environment lighting in baked probes.
            */
            public static get probesIgnoreDirectEnvironment(): boolean;
            public static set probesIgnoreDirectEnvironment(value: boolean);
            /** Set the custom bake inputs.
            * @param $inputData The positions (xyz) of the points for which the amount of sky visibility is calculated. The w component is an offset that will be applied to the ray originating at the position.
            * @param $sampleCount The number of samples on the upper hemisphere used to calculate the sky visibility.
            */
            public static SetCustomBakeInputs ($inputData: System.Array$1<UnityEngine.Vector4>, $sampleCount: number) : void
            /** Retrieve the custom bake results.
            * @param $results The unnormalized amount of sky visibility for the input points (in xyz). The w component is the fraction of rays that strike backfaces.
            * @returns True if the results were retrieved. False if there is no data available or the results array does not match the number of points in the bake. 
            */
            public static GetCustomBakeResults ($results: System.Array$1<UnityEngine.Vector4>) : boolean
            /** Starts an asynchronous lighting bake job for the target Scene.
            * @param $targetScene The Scene to generate lighting data for.
            * @returns Returns true if Unity successfully starts the lighting bake job. Returns false if Unity does not successfully start the lighting bake job. 
            */
            public static BakeAsync ($targetScene: UnityEngine.SceneManagement.Scene) : boolean
            /** Starts a synchronous lighting bake job for the target Scene.
            * @param $targetScene The Scene to generate lighting data for.
            * @returns Returns true if Unity successfully completes the lighting bake job. Returns false if Unity does not successfully complete the lighting bake job. 
            */
            public static Bake ($targetScene: UnityEngine.SceneManagement.Scene) : boolean
            public static add_additionalBakedProbesCompleted ($value: System.Action) : void
            public static remove_additionalBakedProbesCompleted ($value: System.Action) : void
            public static GetAdditionalBakedProbes ($id: number, $outBakedProbeSH: Unity.Collections.NativeArray$1<UnityEngine.Rendering.SphericalHarmonicsL2>, $outBakedProbeValidity: Unity.Collections.NativeArray$1<number>, $outBakedProbeOctahedralDepth: Unity.Collections.NativeArray$1<number>) : boolean
            /** Submit additional probe positions to be baked using an identifier.
            * @param $id An ID to identify the positions to be baked. This ID is used later to retrieve the result for those positions.
            * @param $positions An array of probe positions.
            * @param $dering A boolean that determines if Unity should remove ringing from probes.
            */
            public static SetAdditionalBakedProbes ($id: number, $positions: System.Array$1<UnityEngine.Vector3>) : void
            /** Manually sets a light as dirty.
            * @param $light The light to set as dirty.
            */
            public static SetLightDirty ($light: UnityEngine.Light) : void
            public constructor ()
        }
        enum OnDemandState
        { Unavailable = 0, Processing = 1, Downloading = 2, Available = 3, Failed = 4 }
    }
    namespace UnityEditor.AssetImporters.ImportLog {
        class ImportLogEntry extends System.ValueType
        {
            protected [__keep_incompatibility]: never;
            public message : string
            public flags : UnityEditor.AssetImporters.ImportLogFlags
            public line : number
            public file : string
            public get context(): UnityEngine.Object;
            public set context(value: UnityEngine.Object);
        }
    }
    namespace UnityEditor.Experimental.AssetDatabaseExperimental {
        class CacheServerConnectionChangedParameters extends System.ValueType
        {
            protected [__keep_incompatibility]: never;
        }
        class AssetDatabaseCounters extends System.ValueType
        {
            protected [__keep_incompatibility]: never;
            public cacheServer : UnityEditor.Experimental.AssetDatabaseExperimental.AssetDatabaseCounters.CacheServerCounters
            public import : UnityEditor.Experimental.AssetDatabaseExperimental.AssetDatabaseCounters.ImportCounters
            public ResetDeltas () : void
        }
        enum OnDemandMode
        { Off = 0, Lazy = 1, Background = 2 }
        enum ImportSyncMode
        { Block = 0, Queue = 1, Poll = 2 }
    }
    namespace UnityEditor.Experimental.AssetDatabaseExperimental.AssetDatabaseCounters {
        class CacheServerCounters extends System.ValueType
        {
            protected [__keep_incompatibility]: never;
        }
        class ImportCounters extends System.ValueType
        {
            protected [__keep_incompatibility]: never;
        }
    }
    namespace UnityEditor.Experimental.Licensing {
        /** Data structure for entitlement group information (often synonymous with a license file), accessed through EntitlementInfo.
        */
        class EntitlementGroupInfo extends System.Object
        {
            protected [__keep_incompatibility]: never;
            public get Expiration_ts(): string;
            public get EntitlementGroupId(): string;
            public get ProductName(): string;
            public get LicenseType(): string;
            public constructor ()
        }
        enum EntitlementStatus
        { Unknown = 0, Granted = 1, NotGranted = 2, Free = 3 }
        /** Data structure for an individual entitlement, the results of a call to LicensingUtility.HasEntitlementsExtended.
        */
        class EntitlementInfo extends System.Object
        {
            protected [__keep_incompatibility]: never;
            public get EntitlementId(): string;
            public get Status(): UnityEditor.Experimental.Licensing.EntitlementStatus;
            public get IsPackage(): boolean;
            public get Count(): number;
            public get CustomData(): string;
            /** Contains a list of EntitlementGroupInfo structures.
            */
            public get EntitlementGroupsData(): System.Array$1<UnityEditor.Experimental.Licensing.EntitlementGroupInfo>;
            public constructor ()
        }
        /** Use the Licensing Utility class to request user permissions. User permissions are referred to as entitlements, which are simple strings, ie. "com.unity.editor.ui".
        */
        class LicensingUtility extends System.Object
        {
            protected [__keep_incompatibility]: never;
            /** Checks if the current user is entitled to a specific entitlement.
            * @param $entitlement The requested entitlement string.
            * @returns Returns true if the user is entitled to the entitlement string. Returns false otherwise. 
            */
            public static HasEntitlement ($entitlement: string) : boolean
            /** Checks if the current user is entitled to a list of entitlements.
            * @param $entitlements The requested list of entitlement strings.
            * @returns Returns a list of entitlement strings that the user is entitled to based on the requested list. 
            */
            public static HasEntitlements ($entitlements: System.Array$1<string>) : System.Array$1<string>
            public static HasEntitlementsExtended ($entitlements: System.Array$1<string>, $includeCustomData: boolean) : System.Array$1<UnityEditor.Experimental.Licensing.EntitlementInfo>
            /** Notifies all compononents that have been registered to act upon licensing changes.
            */
            public static InvokeLicenseUpdateCallbacks () : void
            /** Triggers an update to all available license types found on this machine.
            * @returns True if successful; false otherwise. 
            */
            public static UpdateLicense () : boolean
        }
    }
    namespace UnityEditor.Experimental.Build.AssetBundle {
        enum CompressionType
        { None = 0, Lzma = 1, Lz4 = 2, Lz4HC = 3 }
        enum CompressionLevel
        { None = 0, Fastest = 1, Fast = 2, Normal = 3, High = 4, Maximum = 5 }
        class BuildCompression extends System.ValueType
        {
            protected [__keep_incompatibility]: never;
        }
    }
    namespace UnityEditor.Experimental.Rendering {
        interface IScriptableBakedReflectionSystem extends System.IDisposable
        {
            /** Number of stages of the baking process.
            */
            stageCount : number
            /** The hashes of the current baked state of the ScriptableBakedReflectionSystem.
            */
            stateHashes : System.Array$1<UnityEngine.Hash128>
            /** This method is called every Editor update until the ScriptableBakedReflectionSystem indicates that the baking is complete, with handle.SetIsDone(true). (See IScriptableBakedReflectionSystemStageNotifier.SetIsDone).
            * @param $sceneStateHash Current Scene state hash.
            * @param $handle A handle to receive notifications about the status of the stages of the baking process.
            */
            Tick ($sceneStateHash: UnityEditor.Experimental.Rendering.SceneStateHash, $handle: UnityEditor.Experimental.Rendering.IScriptableBakedReflectionSystemStageNotifier) : void
            /** Synchronize the baked data with the actual components and rendering settings.
            */
            SynchronizeReflectionProbes () : void
            /** Clear the state of the ScriptableBakedReflectionSystem.
            */
            Clear () : void
            /** Cancel the running bake jobs.
            */
            Cancel () : void
            /** Implement this method to bake all of the loaded reflection probes.
            * @returns Returns true when the reflection probe baking process completed successfully. Returns false when the baking did not complete - for example if the current scene has never been saved. 
            */
            BakeAllReflectionProbes () : boolean
        }
        /** This class contains hashes that represents the Scene state.
        */
        class SceneStateHash extends System.ValueType implements System.IEquatable$1<UnityEditor.Experimental.Rendering.SceneStateHash>
        {
            protected [__keep_incompatibility]: never;
            /** A hash representing the state of Scene objects.
            */
            public get sceneObjectsHash(): UnityEngine.Hash128;
            /** A hash representing the settings of the sky.
            */
            public get skySettingsHash(): UnityEngine.Hash128;
            /** A hash representing the state of the ambient probe.
            */
            public get ambientProbeHash(): UnityEngine.Hash128;
            public Equals ($other: UnityEditor.Experimental.Rendering.SceneStateHash) : boolean
            public Equals ($obj: any) : boolean
            public constructor ($sceneObjectsHash: UnityEngine.Hash128, $skySettingsHash: UnityEngine.Hash128, $ambientProbeHash: UnityEngine.Hash128)
        }
        interface IScriptableBakedReflectionSystemStageNotifier
        {
            /** Update the baking stage progress information.
            * @param $stage The current stage in progress.
            * @param $progressMessage The progress message to display.
            * @param $progress The progress to report (between 0 and 1).
            */
            EnterStage ($stage: number, $progressMessage: string, $progress: number) : void
            /** Indicates that a stage is complete.
            * @param $stage The completed stage.
            */
            ExitStage ($stage: number) : void
            /** Indicates whether the baking is complete.
            * @param $isDone Whether the baking is complete.
            */
            SetIsDone ($isDone: boolean) : void
        }
        /** Empty implementation of IScriptableBakedReflectionSystem.
        */
        class ScriptableBakedReflectionSystem extends System.Object implements UnityEditor.Experimental.Rendering.IScriptableBakedReflectionSystem, System.IDisposable
        {
            protected [__keep_incompatibility]: never;
            /** Number of stages of the baking process.
            */
            public get stageCount(): number;
            /** The hashes of the current baked state of the ScriptableBakedReflectionSystem.
            */
            public get stateHashes(): System.Array$1<UnityEngine.Hash128>;
            /** This method is called during the Editor update until the ScriptableBakedReflectionSystem indicates that the baking is complete, with handle.SetIsDone(true). (See IScriptableBakedReflectionSystemStageNotifier.SetIsDone).
            * @param $sceneStateHash Current Scene state hash.
            * @param $handle A handle to receive notifications about the status of the stages of the baking process.
            */
            public Tick ($sceneStateHash: UnityEditor.Experimental.Rendering.SceneStateHash, $handle: UnityEditor.Experimental.Rendering.IScriptableBakedReflectionSystemStageNotifier) : void
            /** Synchronize the baked data with the actual components and rendering settings.
            */
            public SynchronizeReflectionProbes () : void
            /** Clear the state of ScriptableBakedReflectionSystem.
            */
            public Clear () : void
            /** Cancel the running bake jobs.
            */
            public Cancel () : void
            /** Implement this method to bake all of the loaded reflection probes.
            * @returns True when the probe were baked, false when baking was not completed. 
            */
            public BakeAllReflectionProbes () : boolean
        }
        /** Global settings for the scriptable baked reflection system.
        */
        class ScriptableBakedReflectionSystemSettings extends System.Object
        {
            protected [__keep_incompatibility]: never;
            /** The currently active ScriptableBakedReflectionSystem, see IScriptableBakedReflectionSystem.
            */
            public static get system(): UnityEditor.Experimental.Rendering.IScriptableBakedReflectionSystem;
            public static set system(value: UnityEditor.Experimental.Rendering.IScriptableBakedReflectionSystem);
        }
    }
    namespace UnityEditor.U2D {
        /** Sprite extension methods that are accessible in Editor only.
        */
        class SpriteEditorExtension extends System.Object
        {
            protected [__keep_incompatibility]: never;
            /** Gets the Sprite's GUID.
            * @param $sprite The Sprite to query.
            * @returns GUID stored in the Sprite. 
            */
            public static GetSpriteID ($sprite: UnityEngine.Sprite) : UnityEditor.GUID
            /** Sets a Sprite's Global Unique Identifier (GUID) for easy identification later.
            * @param $sprite The Sprite to set.
            * @param $guid The GUID to set for the Sprite.
            */
            public static SetSpriteID ($sprite: UnityEngine.Sprite, $guid: UnityEditor.GUID) : void
        }
        /** Utility methods to pack atlases in the Project.
        */
        class SpriteAtlasUtility extends System.Object
        {
            protected [__keep_incompatibility]: never;
            /** Cleanup internal states after packing SpriteAtlas assets. Must be called after a call to SpriteAtlasUtility.PackAllAtlases.
            */
            public static CleanupAtlasPacking () : void
            public static PackAllAtlases ($target: UnityEditor.BuildTarget, $canCancel?: boolean) : void
            public static PackAtlases ($atlases: System.Array$1<UnityEngine.U2D.SpriteAtlas>, $target: UnityEditor.BuildTarget, $canCancel?: boolean) : void
            public constructor ()
        }
        /** Texture settings for the packed texture generated by SpriteAtlas.
        */
        class SpriteAtlasTextureSettings extends System.ValueType
        {
            protected [__keep_incompatibility]: never;
            /** The maximum texture size that the Sprite Atlas can pack to.
            */
            public get maxTextureSize(): number;
            /** Packed texture's Anisotropic filtering level.
            */
            public get anisoLevel(): number;
            public set anisoLevel(value: number);
            /** Filter mode of the packed texture.
            */
            public get filterMode(): UnityEngine.FilterMode;
            public set filterMode(value: UnityEngine.FilterMode);
            /** Set whether mipmaps should be generated for the packed texture.
            */
            public get generateMipMaps(): boolean;
            public set generateMipMaps(value: boolean);
            /** Readable state of the packed texture.
            */
            public get readable(): boolean;
            public set readable(value: boolean);
            /** Checks if the packed texture uses sRGB read/write conversions (Read Only).
            */
            public get sRGB(): boolean;
            public set sRGB(value: boolean);
        }
        /** Settings to use during the packing process for this SpriteAtlas.
        */
        class SpriteAtlasPackingSettings extends System.ValueType
        {
            protected [__keep_incompatibility]: never;
            /** Block offset to use while packing.
            */
            public get blockOffset(): number;
            public set blockOffset(value: number);
            /** Value to add boundary (padding) to sprites when packing into the atlas.
            */
            public get padding(): number;
            public set padding(value: number);
            /** Determines if rotating a sprite is possible during packing.
            */
            public get enableRotation(): boolean;
            public set enableRotation(value: boolean);
            /** Determines if sprites should be packed tightly during packing.
            */
            public get enableTightPacking(): boolean;
            public set enableTightPacking(value: boolean);
            /** Sets the boundary padding pixels alpha to 0 when packed into a Sprite Atlas.
            */
            public get enableAlphaDilation(): boolean;
            public set enableAlphaDilation(value: boolean);
        }
        /** Method extensions for SpriteAtlas in Editor.
        */
        class SpriteAtlasExtensions extends System.Object
        {
            protected [__keep_incompatibility]: never;
            /** Add an array of Assets to the packable objects list.
            * @param $objects Array of Object to be packed into the atlas.
            */
            public static Add ($spriteAtlas: UnityEngine.U2D.SpriteAtlas, $objects: System.Array$1<UnityEngine.Object>) : void
            /** Remove objects from the atlas's packable objects list.
            * @param $objects Object in the array you wish to remove.
            */
            public static Remove ($spriteAtlas: UnityEngine.U2D.SpriteAtlas, $objects: System.Array$1<UnityEngine.Object>) : void
            /** Return all the current packed packables in the atlas.
            */
            public static GetPackables ($spriteAtlas: UnityEngine.U2D.SpriteAtlas) : System.Array$1<UnityEngine.Object>
            /** Current SpriteAtlasTextureSettings of the packed texture generated by this SpriteAtlas.
            */
            public static GetTextureSettings ($spriteAtlas: UnityEngine.U2D.SpriteAtlas) : UnityEditor.U2D.SpriteAtlasTextureSettings
            /** Set the SpriteAtlasTextureSettings for the packed texture generated by this SpriteAtlas.
            */
            public static SetTextureSettings ($spriteAtlas: UnityEngine.U2D.SpriteAtlas, $src: UnityEditor.U2D.SpriteAtlasTextureSettings) : void
            /** Current SpriteAtlasPackingSettings to use when packing this SpriteAtlas.
            */
            public static GetPackingSettings ($spriteAtlas: UnityEngine.U2D.SpriteAtlas) : UnityEditor.U2D.SpriteAtlasPackingSettings
            /** Set the SpriteAtlasPackingSettings to use when packing this SpriteAtlas
            */
            public static SetPackingSettings ($spriteAtlas: UnityEngine.U2D.SpriteAtlas, $src: UnityEditor.U2D.SpriteAtlasPackingSettings) : void
            /** Returns the platform settings of the build target you specify.
            * @param $buildTarget The name of the build target.
            */
            public static GetPlatformSettings ($spriteAtlas: UnityEngine.U2D.SpriteAtlas, $buildTarget: string) : UnityEditor.TextureImporterPlatformSettings
            /** Set the platform specific settings.
            */
            public static SetPlatformSettings ($spriteAtlas: UnityEngine.U2D.SpriteAtlas, $src: UnityEditor.TextureImporterPlatformSettings) : void
            /** Define if this sprite atlas's packed texture is included in the build with the Sprite after packing is done.
            */
            public static SetIncludeInBuild ($spriteAtlas: UnityEngine.U2D.SpriteAtlas, $value: boolean) : void
            /** Sets whether this Sprite Atlas is a variant or not.
            */
            public static SetIsVariant ($spriteAtlas: UnityEngine.U2D.SpriteAtlas, $value: boolean) : void
            /** Set an atlas to be the master atlas.
            */
            public static SetMasterAtlas ($spriteAtlas: UnityEngine.U2D.SpriteAtlas, $value: UnityEngine.U2D.SpriteAtlas) : void
            /** Set the value used to downscale the master's texture.
            * @param $value Recommended value is [0.1 ~ 0.99].
            */
            public static SetVariantScale ($spriteAtlas: UnityEngine.U2D.SpriteAtlas, $value: number) : void
            /** Checks whether this Sprite Atlas is marked to be included in the build.
            * @param $spriteAtlas Whether the Sprite Atlas is included in the build.
            * @returns Returns true if the Sprite Atlas is included in the build. 
            */
            public static IsIncludeInBuild ($spriteAtlas: UnityEngine.U2D.SpriteAtlas) : boolean
            /** Gets the Master Sprite Atlas for the given Variant Sprite Atlas.
            * @param $spriteAtlas The Sprite Atlas to be queried for Master Sprite Atlas status.
            * @returns Returns the Master Sprite Atlas if set. Otherwise, returns null. 
            */
            public static GetMasterAtlas ($spriteAtlas: UnityEngine.U2D.SpriteAtlas) : UnityEngine.U2D.SpriteAtlas
        }
        /** ScriptablePacker Interface.
        Provides a custom implementation to pack sprites into textures. This is the Scriptable Packer interface.
        */
        class ScriptablePacker extends UnityEngine.ScriptableObject
        {
            protected [__keep_incompatibility]: never;
            public Pack ($config: UnityEditor.U2D.SpriteAtlasPackingSettings, $setting: UnityEditor.U2D.SpriteAtlasTextureSettings, $input: UnityEditor.U2D.ScriptablePacker.PackerData) : boolean
        }
        /** SpriteAtlasAsset stores inputs for generating SpriteAtlas and generates atlas textures on Import.
        */
        class SpriteAtlasAsset extends UnityEngine.Object
        {
            protected [__keep_incompatibility]: never;
            /** Checks whether the Sprite Atlas Importer set the Sprite Atlas as a Variant.
            */
            public get isVariant(): boolean;
            /** Sets whether this Sprite Atlas is a Variant or not.
            */
            public SetIsVariant ($value: boolean) : void
            /** Sets an Atlas to be the Master Atlas.
            */
            public SetMasterAtlas ($atlas: UnityEngine.U2D.SpriteAtlas) : void
            /** Gets the Master Sprite Atlas for the given Variant Sprite Atlas.
            * @returns Returns the Master Sprite Atlas if set. Otherwise, returns null. 
            */
            public GetMasterAtlas () : UnityEngine.U2D.SpriteAtlas
            /** Add an array of Assets to the packable objects list.
            */
            public Add ($objects: System.Array$1<UnityEngine.Object>) : void
            /** Removes objects from the Atlas's packable objects list.
            */
            public Remove ($objects: System.Array$1<UnityEngine.Object>) : void
            /** Sets the ScriptablePacker ScriptableObject to SpriteAtlasAsset so custom packing can be implemented.
            */
            public SetScriptablePacker ($obj: UnityEditor.U2D.ScriptablePacker) : void
            /** Loads SpriteAtlasAsset at the given path. File extension of SpriteAtlasAsset is *.spriteatlasv2.
            * @param $assetPath The path of the SpriteAtlasAsset file on disk.
            * @returns Returns the loaded SpriteAtlasAsset. 
            */
            public static Load ($assetPath: string) : UnityEditor.U2D.SpriteAtlasAsset
            /** Saves SpriteAtlasAsset to disk. File extension of SpriteAtlasAsset is *.spriteatlasv2.
            * @param $asset The SpriteAtlasAsset object to be saved.
            * @param $assetPath The path of the SpriteAtlasAsset file on disk.
            */
            public static Save ($asset: UnityEditor.U2D.SpriteAtlasAsset, $assetPath: string) : void
            public constructor ()
        }
        /** SpriteAtlasImporter imports SpriteAtlasAsset and generates SpriteAtlas.
        */
        class SpriteAtlasImporter extends UnityEditor.AssetImporter
        {
            protected [__keep_incompatibility]: never;
            /** Value used to downscale the master's texture.
            */
            public get variantScale(): number;
            public set variantScale(value: number);
            /** Property to get/set whether this Sprite Atlas is marked to be included in the build.
            */
            public get includeInBuild(): boolean;
            public set includeInBuild(value: boolean);
            /** SpriteAtlasPackingSettings to use when packing this SpriteAtlas.
            */
            public get packingSettings(): UnityEditor.U2D.SpriteAtlasPackingSettings;
            public set packingSettings(value: UnityEditor.U2D.SpriteAtlasPackingSettings);
            /** SpriteAtlasTextureSettings of the packed Texture generated by this SpriteAtlas.
            */
            public get textureSettings(): UnityEditor.U2D.SpriteAtlasTextureSettings;
            public set textureSettings(value: UnityEditor.U2D.SpriteAtlasTextureSettings);
            /** Sets platform specific settings.
            */
            public SetPlatformSettings ($src: UnityEditor.TextureImporterPlatformSettings) : void
            /** Retrieves the platform settings of the build target you specify.
            * @param $buildTarget The name of the build target.
            */
            public GetPlatformSettings ($buildTarget: string) : UnityEditor.TextureImporterPlatformSettings
            public constructor ()
        }
    }
    namespace UnityEditor.U2D.ScriptablePacker {
        class PackerData extends System.ValueType
        {
            protected [__keep_incompatibility]: never;
            public colorData : Unity.Collections.NativeArray$1<UnityEngine.Color32>
            public spriteData : Unity.Collections.NativeArray$1<UnityEditor.U2D.ScriptablePacker.SpriteData>
            public textureData : Unity.Collections.NativeArray$1<UnityEditor.U2D.ScriptablePacker.TextureData>
            public indexData : Unity.Collections.NativeArray$1<number>
            public vertexData : Unity.Collections.NativeArray$1<UnityEngine.Vector2>
        }
        enum PackTransform
        { None = 0, FlipHorizontal = 1, FlipVertical = 2, Rotate180 = 3 }
        class SpritePack extends System.ValueType
        {
            protected [__keep_incompatibility]: never;
            public x : number
            public y : number
            public page : number
            public rot : UnityEditor.U2D.ScriptablePacker.PackTransform
        }
        class SpriteData extends System.ValueType
        {
            protected [__keep_incompatibility]: never;
            public guid : number
            public texIndex : number
            public indexCount : number
            public vertexCount : number
            public indexOffset : number
            public vertexOffset : number
            public rect : UnityEngine.RectInt
            public output : UnityEditor.U2D.ScriptablePacker.SpritePack
        }
        class TextureData extends System.ValueType
        {
            protected [__keep_incompatibility]: never;
            public width : number
            public height : number
            public bufferOffset : number
        }
    }
}
